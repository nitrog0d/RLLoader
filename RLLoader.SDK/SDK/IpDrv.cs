using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace RLLoader.SDK;

#pragma warning disable CS0108, CS0114

// Class IpDrv.AdHocDelegates
// 0xD8 (0x60 - 0x138)
// (Compiled | Parsed | Native)
public unsafe partial class UAdHocDelegates : UObject {
    public UAdHocDelegates() { }
    public UAdHocDelegates(nint pointer) : base(pointer) { }


    // DelegateProperty IpDrv.AdHocDelegates.__EventAdHocOnNetworkChanged__Delegate
    // 0x60 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAdHocOnNetworkChanged__Delegate {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventAdHocError__Delegate
    // 0x78 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAdHocError__Delegate {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventAdHocInitialized__Delegate
    // 0x90 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAdHocInitialized__Delegate {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventAccessPointCreated__Delegate
    // 0xA8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAccessPointCreated__Delegate {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventBecomeStation__Delegate
    // 0xC0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventBecomeStation__Delegate {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventStationConnected__Delegate
    // 0xD8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventStationConnected__Delegate {
        get => new(Pointer + 216);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventStationDisconnected__Delegate
    // 0xF0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventStationDisconnected__Delegate {
        get => new(Pointer + 240);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 240), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventAdHocFinalized__Delegate
    // 0x108 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAdHocFinalized__Delegate {
        get => new(Pointer + 264);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 264), 24, 24);
    }

    // DelegateProperty IpDrv.AdHocDelegates.__EventAdHocDestroyed__Delegate
    // 0x120 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAdHocDestroyed__Delegate {
        get => new(Pointer + 288);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 288), 24, 24);
    }


    // Function IpDrv.AdHocDelegates.EventAdHocDestroyed
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAdHocDestroyed_Parameters : BaseObject {
        public EventAdHocDestroyed_Parameters() { }
        public EventAdHocDestroyed_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventAdHocDestroyed;
    public void EventAdHocDestroyed() {
        _ptrEventAdHocDestroyed ??= FindFunction("Function IpDrv.AdHocDelegates.EventAdHocDestroyed");

        ProcessEvent(_ptrEventAdHocDestroyed, null);
    }

    // Function IpDrv.AdHocDelegates.EventAdHocFinalized
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAdHocFinalized_Parameters : BaseObject {
        public EventAdHocFinalized_Parameters() { }
        public EventAdHocFinalized_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventAdHocFinalized;
    public void EventAdHocFinalized() {
        _ptrEventAdHocFinalized ??= FindFunction("Function IpDrv.AdHocDelegates.EventAdHocFinalized");

        ProcessEvent(_ptrEventAdHocFinalized, null);
    }

    // Function IpDrv.AdHocDelegates.EventStationDisconnected
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventStationDisconnected_Parameters : BaseObject {
        public EventStationDisconnected_Parameters() { }
        public EventStationDisconnected_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventStationDisconnected;
    public void EventStationDisconnected() {
        _ptrEventStationDisconnected ??= FindFunction("Function IpDrv.AdHocDelegates.EventStationDisconnected");

        ProcessEvent(_ptrEventStationDisconnected, null);
    }

    // Function IpDrv.AdHocDelegates.EventStationConnected
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventStationConnected_Parameters : BaseObject {
        public EventStationConnected_Parameters() { }
        public EventStationConnected_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventStationConnected;
    public void EventStationConnected() {
        _ptrEventStationConnected ??= FindFunction("Function IpDrv.AdHocDelegates.EventStationConnected");

        ProcessEvent(_ptrEventStationConnected, null);
    }

    // Function IpDrv.AdHocDelegates.EventBecomeStation
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventBecomeStation_Parameters : BaseObject {
        public EventBecomeStation_Parameters() { }
        public EventBecomeStation_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventBecomeStation;
    public void EventBecomeStation() {
        _ptrEventBecomeStation ??= FindFunction("Function IpDrv.AdHocDelegates.EventBecomeStation");

        ProcessEvent(_ptrEventBecomeStation, null);
    }

    // Function IpDrv.AdHocDelegates.EventAccessPointCreated
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAccessPointCreated_Parameters : BaseObject {
        public EventAccessPointCreated_Parameters() { }
        public EventAccessPointCreated_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventAccessPointCreated;
    public void EventAccessPointCreated() {
        _ptrEventAccessPointCreated ??= FindFunction("Function IpDrv.AdHocDelegates.EventAccessPointCreated");

        ProcessEvent(_ptrEventAccessPointCreated, null);
    }

    // Function IpDrv.AdHocDelegates.EventAdHocInitialized
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAdHocInitialized_Parameters : BaseObject {
        public EventAdHocInitialized_Parameters() { }
        public EventAdHocInitialized_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventAdHocInitialized;
    public void EventAdHocInitialized() {
        _ptrEventAdHocInitialized ??= FindFunction("Function IpDrv.AdHocDelegates.EventAdHocInitialized");

        ProcessEvent(_ptrEventAdHocInitialized, null);
    }

    // Function IpDrv.AdHocDelegates.EventAdHocError
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAdHocError_Parameters : BaseObject {
        public EventAdHocError_Parameters() { }
        public EventAdHocError_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.AdHocDelegates.EventAdHocError.Error
        // 0x0 (0x8)
        // (Param)
        public UError Error {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrEventAdHocError;
    public void EventAdHocError(UError Error) {
        _ptrEventAdHocError ??= FindFunction("Function IpDrv.AdHocDelegates.EventAdHocError");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params, 8, 8);

        ProcessEvent(_ptrEventAdHocError, @params);
    }

    // Function IpDrv.AdHocDelegates.EventAdHocOnNetworkChanged
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAdHocOnNetworkChanged_Parameters : BaseObject {
        public EventAdHocOnNetworkChanged_Parameters() { }
        public EventAdHocOnNetworkChanged_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.AdHocDelegates.EventAdHocOnNetworkChanged.Ahapis
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FAdHocAccessPointInfo> Ahapis {
            get => new(Pointer, 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrEventAdHocOnNetworkChanged;
    public void EventAdHocOnNetworkChanged(StructTArray<FAdHocAccessPointInfo> Ahapis) {
        _ptrEventAdHocOnNetworkChanged ??= FindFunction("Function IpDrv.AdHocDelegates.EventAdHocOnNetworkChanged");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Ahapis.Pointer, @params, 16, 16);

        ProcessEvent(_ptrEventAdHocOnNetworkChanged, @params);
    }


    // ScriptStruct IpDrv.AdHocDelegates.AdHocStationInfo
    // 0x10
    public unsafe class FAdHocStationInfo : BaseObject {
        public FAdHocStationInfo() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FAdHocStationInfo(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AdHocDelegates.AdHocStationInfo.Username
        // 0x0 (0x10)
        // (NeedCtorLink | DataBinding)
        public FString Username {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }

    // ScriptStruct IpDrv.AdHocDelegates.AdHocAccessPointInfo
    // 0x38
    public unsafe class FAdHocAccessPointInfo : BaseObject {
        public FAdHocAccessPointInfo() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FAdHocAccessPointInfo(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AdHocDelegates.AdHocAccessPointInfo.Ipv4Addr
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString Ipv4Addr {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.AdHocDelegates.AdHocAccessPointInfo.Username
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString Username {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.AdHocDelegates.AdHocAccessPointInfo.AdvertiseData
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString AdvertiseData {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.AdHocDelegates.AdHocAccessPointInfo.ScanResultIndex
        // 0x30 (0x4)
        public int ScanResultIndex {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.AdHocDelegates.AdHocAccessPointInfo.NetworkNodeIndex
        // 0x34 (0x4)
        public int NetworkNodeIndex {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }
    }


    // Enum IpDrv.AdHocDelegates.EAdHocCurrentState
    public enum EAdHocCurrentState : byte {
        AHCS_None = 0,
        AHCS_Initializing = 1,
        AHCS_Initialized = 2,
        AHCS_Station = 3,
        AHCS_StationScanning = 4,
        AHCS_StationConnecting = 5,
        AHCS_StationConnected = 6,
        AHCS_StationDisconnected = 7,
        AHCS_StationClosing = 8,
        AHCS_AccessPointCreating = 9,
        AHCS_AccessPointCreated = 10,
        AHCS_AccessPointScanning = 11,
        AHCS_AccessPointRejecting = 12,
        AHCS_AccessPointClosing = 13,
        AHCS_Finalizing = 14,
        AHCS_Error = 15,
        AHCS_MAX = 16
    }

    // Enum IpDrv.AdHocDelegates.EAdHocDesiredState
    public enum EAdHocDesiredState : byte {
        AHDS_None = 0,
        AHDS_Initialized = 1,
        AHDS_CreateAccessPoint = 2,
        AHDS_CreateStation = 3,
        AHDS_ScanForAccessPoints = 4,
        AHDS_ConnectToChosenStation = 5,
        AHDS_DisconnectSpecifiedStation = 6,
        AHDS_DisconnectFromAccessPoint = 7,
        AHDS_AccessPointRejecting = 8,
        AHDS_Exit = 9,
        AHDS_Max = 10
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.AdHocDelegates");
            return _staticClass;
        }
    }
}

// Class IpDrv.AdHocErrors
// 0x8 (0x80 - 0x88)
// (Compiled | Parsed | Native)
public unsafe partial class UAdHocErrors : UErrorList {
    public UAdHocErrors() { }
    public UAdHocErrors(nint pointer) : base(pointer) { }


    // ObjectProperty IpDrv.AdHocErrors.AdHocError
    // 0x80 (0x8)
    // (Const)
    public UErrorType AdHocError {
        get {
            var pointer = *(nint*)(Pointer + 128);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 128) = value.Pointer;
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.AdHocErrors");
            return _staticClass;
        }
    }
}

// Class IpDrv.AvatarDownload
// 0x80 (0x60 - 0xE0)
// (Compiled | Parsed | Native)
public unsafe partial class UAvatarDownload : UObject {
    public UAvatarDownload() { }
    public UAvatarDownload(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.AvatarDownload.PlayerID
    // 0x60 (0x48)
    // (NeedCtorLink)
    public U_Types_Core.FUniqueNetId PlayerID {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 72, 72);
    }

    // StrProperty IpDrv.AvatarDownload.URL
    // 0xA8 (0x10)
    // (NeedCtorLink)
    public FString URL {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // ByteProperty IpDrv.AvatarDownload.AvatarSize
    // 0xB8 (0x1)
    public UOnlineSubsystem.AvatarSize AvatarSize {
        get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 184);
        set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 184) = value;
    }

    // MISSED OFFSET: 0x7

    // ObjectProperty IpDrv.AvatarDownload.Texture
    // 0xC0 (0x8)
    public UTexture Texture {
        get {
            var pointer = *(nint*)(Pointer + 192);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 192) = value.Pointer;
    }

    // DelegateProperty IpDrv.AvatarDownload.Callbacks
    // 0xC8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate Callbacks {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 24, 24);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.AvatarDownload");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineSubsystemCommonImpl
// 0x60 (0x358 - 0x3B8)
// (Abstract | Compiled | Config | Parsed | Native | Hidden)
public unsafe partial class UOnlineSubsystemCommonImpl : UOnlineSubsystem {
    public UOnlineSubsystemCommonImpl() { }
    public UOnlineSubsystemCommonImpl(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.OnlineSubsystemCommonImpl.VoiceEngine
    // 0x358 (0x8)
    // (Const | Native | Transient)
    public nint VoiceEngine {
        get => *(nint*)(Pointer + 856);
        set => *(nint*)(Pointer + 856) = value;
    }

    // IntProperty IpDrv.OnlineSubsystemCommonImpl.MaxLocalTalkers
    // 0x360 (0x4)
    // (Config)
    public int MaxLocalTalkers {
        get => *(int*)(Pointer + 864);
        set => *(int*)(Pointer + 864) = value;
    }

    // IntProperty IpDrv.OnlineSubsystemCommonImpl.MaxRemoteTalkers
    // 0x364 (0x4)
    // (Config)
    public int MaxRemoteTalkers {
        get => *(int*)(Pointer + 868);
        set => *(int*)(Pointer + 868) = value;
    }

    // BoolProperty IpDrv.OnlineSubsystemCommonImpl.bIsUsingSpeechRecognition
    // 0x368 (0x4)
    // Bitmask: 0x00000001
    // (Config)
    public bool bIsUsingSpeechRecognition {
        get => (*(uint*)(Pointer + 872) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 872) |= 0x1;
            else *(uint*)(Pointer + 872) &= ~(uint)0x1;
        }
    }

    // MISSED OFFSET: 0x4

    // ObjectProperty IpDrv.OnlineSubsystemCommonImpl.GameInterfaceImpl
    // 0x370 (0x8)
    public UOnlineGameInterfaceImpl GameInterfaceImpl {
        get {
            var pointer = *(nint*)(Pointer + 880);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 880) = value.Pointer;
    }

    // ObjectProperty IpDrv.OnlineSubsystemCommonImpl.AuthInterfaceImpl
    // 0x378 (0x8)
    public UOnlineAuthInterfaceImpl AuthInterfaceImpl {
        get {
            var pointer = *(nint*)(Pointer + 888);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 888) = value.Pointer;
    }

    // ObjectProperty IpDrv.OnlineSubsystemCommonImpl.PurchaseInterfaceImpl
    // 0x380 (0x8)
    public UOnlinePurchaseInterfaceImpl PurchaseInterfaceImpl {
        get {
            var pointer = *(nint*)(Pointer + 896);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 896) = value.Pointer;
    }

    // DelegateProperty IpDrv.OnlineSubsystemCommonImpl.__OnSanitizeStringComplete__Delegate
    // 0x388 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnSanitizeStringComplete__Delegate {
        get => new(Pointer + 904);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 904), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineSubsystemCommonImpl.__OnPlayerCountryRetrieved__Delegate
    // 0x3A0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnPlayerCountryRetrieved__Delegate {
        get => new(Pointer + 928);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 928), 24, 24);
    }


    // Function IpDrv.OnlineSubsystemCommonImpl.GetRegisteredPlayers
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetRegisteredPlayers_Parameters : BaseObject {
        public GetRegisteredPlayers_Parameters() { }
        public GetRegisteredPlayers_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineSubsystemCommonImpl.GetRegisteredPlayers.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.OnlineSubsystemCommonImpl.GetRegisteredPlayers.OutRegisteredPlayers
        // 0x8 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> OutRegisteredPlayers {
            get => new(Pointer + 8, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetRegisteredPlayers;
    public void GetRegisteredPlayers(FName SessionName, ref StructTArray<U_Types_Core.FUniqueNetId> OutRegisteredPlayers) {
        _ptrGetRegisteredPlayers ??= FindFunction("Function IpDrv.OnlineSubsystemCommonImpl.GetRegisteredPlayers");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutRegisteredPlayers.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrGetRegisteredPlayers, @params);

        var _OutRegisteredPlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_OutRegisteredPlayersPtr, 16, 16);
        OutRegisteredPlayers = new(_OutRegisteredPlayersPtr, 72) { Allocated = true };
    }

    // Function IpDrv.OnlineSubsystemCommonImpl.IsPlayerInSession
    // 0xBABBA0
    // (Native | Public)
    public unsafe class IsPlayerInSession_Parameters : BaseObject {
        public IsPlayerInSession_Parameters() { }
        public IsPlayerInSession_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineSubsystemCommonImpl.IsPlayerInSession.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty IpDrv.OnlineSubsystemCommonImpl.IsPlayerInSession.PlayerID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // BoolProperty IpDrv.OnlineSubsystemCommonImpl.IsPlayerInSession.ReturnValue
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsPlayerInSession;
    public bool IsPlayerInSession(FName SessionName, U_Types_Core.FUniqueNetId PlayerID) {
        _ptrIsPlayerInSession ??= FindFunction("Function IpDrv.OnlineSubsystemCommonImpl.IsPlayerInSession");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 8, 72, 72);

        _ptrIsPlayerInSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsPlayerInSession, @params);
        _ptrIsPlayerInSession.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 80);
    }

    // Function IpDrv.OnlineSubsystemCommonImpl.GetPlayerNicknameFromIndex
    // 0x3750E0
    // (Event | Public)
    public unsafe class GetPlayerNicknameFromIndex_Parameters : BaseObject {
        public GetPlayerNicknameFromIndex_Parameters() { }
        public GetPlayerNicknameFromIndex_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineSubsystemCommonImpl.GetPlayerNicknameFromIndex.UserIndex
        // 0x0 (0x4)
        // (Param)
        public int UserIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlineSubsystemCommonImpl.GetPlayerNicknameFromIndex.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetPlayerNicknameFromIndex;
    public FString GetPlayerNicknameFromIndex(int UserIndex) {
        _ptrGetPlayerNicknameFromIndex ??= FindFunction("Function IpDrv.OnlineSubsystemCommonImpl.GetPlayerNicknameFromIndex");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&UserIndex, @params, 4, 4);

        ProcessEvent(_ptrGetPlayerNicknameFromIndex, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineSubsystemCommonImpl.OnPlayerCountryRetrieved
    // 0x3750E0
    // (Public | Delegate)
    public unsafe class OnPlayerCountryRetrieved_Parameters : BaseObject {
        public OnPlayerCountryRetrieved_Parameters() { }
        public OnPlayerCountryRetrieved_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineSubsystemCommonImpl.OnPlayerCountryRetrieved.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StrProperty IpDrv.OnlineSubsystemCommonImpl.OnPlayerCountryRetrieved.Country
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Country {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnPlayerCountryRetrieved;
    public void OnPlayerCountryRetrieved(U_Types_Core.FUniqueNetId PlayerID, FString Country) {
        _ptrOnPlayerCountryRetrieved ??= FindFunction("Function IpDrv.OnlineSubsystemCommonImpl.OnPlayerCountryRetrieved");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)Country.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnPlayerCountryRetrieved, @params);
    }

    // Function IpDrv.OnlineSubsystemCommonImpl.OnSanitizeStringComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnSanitizeStringComplete_Parameters : BaseObject {
        public OnSanitizeStringComplete_Parameters() { }
        public OnSanitizeStringComplete_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineSubsystemCommonImpl.OnSanitizeStringComplete.Result
        // 0x0 (0x38)
        // (Param | NeedCtorLink)
        public UOnlineSubsystem.FWordFilterResult Result {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 56, 56);
        }
    }
    private static UFunction _ptrOnSanitizeStringComplete;
    public void OnSanitizeStringComplete(UOnlineSubsystem.FWordFilterResult Result) {
        _ptrOnSanitizeStringComplete ??= FindFunction("Function IpDrv.OnlineSubsystemCommonImpl.OnSanitizeStringComplete");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)Result.Pointer, @params, 56, 56);

        ProcessEvent(_ptrOnSanitizeStringComplete, @params);
    }


    // ScriptStruct IpDrv.OnlineSubsystemCommonImpl.SanitizeCallbackData
    // 0x30
    public unsafe class FSanitizeCallbackData : BaseObject {
        public FSanitizeCallbackData() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FSanitizeCallbackData(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineSubsystemCommonImpl.SanitizeCallbackData.Id
        // 0x0 (0x4)
        public int Id {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // DelegateProperty IpDrv.OnlineSubsystemCommonImpl.SanitizeCallbackData.Callback
        // 0x8 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }

        // StrProperty IpDrv.OnlineSubsystemCommonImpl.SanitizeCallbackData.Comment
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString Comment {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineSubsystemCommonImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.AvatarDownloadComponent
// 0x10 (0x70 - 0x80)
// (Compiled | Parsed | Native | Hidden)
public unsafe partial class UAvatarDownloadComponent : UComponent {
    public UAvatarDownloadComponent() { }
    public UAvatarDownloadComponent(nint pointer) : base(pointer) { }


    // ComponentProperty IpDrv.AvatarDownloadComponent.AvatarDownloadCache
    // 0x70 (0x8)
    // (ExportObject | Component | EditInline | PrivateWrite)
    public UAvatarDownloadMap AvatarDownloadCache {
        get {
            var pointer = *(nint*)(Pointer + 112);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 112) = value.Pointer;
    }

    // ObjectProperty IpDrv.AvatarDownloadComponent.ImageDownloader
    // 0x78 (0x8)
    // (Transient)
    public UOnlineImageDownloaderWeb ImageDownloader {
        get {
            var pointer = *(nint*)(Pointer + 120);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 120) = value.Pointer;
    }


    // Function IpDrv.AvatarDownloadComponent.TriggerAvatarCallbacks
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class TriggerAvatarCallbacks_Parameters : BaseObject {
        public TriggerAvatarCallbacks_Parameters() { }
        public TriggerAvatarCallbacks_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.AvatarDownloadComponent.TriggerAvatarCallbacks.Avatar
        // 0x0 (0x8)
        // (Param)
        public UAvatarDownload Avatar {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrTriggerAvatarCallbacks;
    public void TriggerAvatarCallbacks(UAvatarDownload Avatar) {
        _ptrTriggerAvatarCallbacks ??= FindFunction("Function IpDrv.AvatarDownloadComponent.TriggerAvatarCallbacks");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Avatar.Pointer, @params, 8, 8);

        ProcessEvent(_ptrTriggerAvatarCallbacks, @params);
    }

    // Function IpDrv.AvatarDownloadComponent.HandleOnlineImageDownloaded
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class HandleOnlineImageDownloaded_Parameters : BaseObject {
        public HandleOnlineImageDownloaded_Parameters() { }
        public HandleOnlineImageDownloaded_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadComponent.HandleOnlineImageDownloaded.ImageInfo
        // 0x0 (0x40)
        // (Param | NeedCtorLink)
        public UOnlineImageDownloaderWeb.FOnlineImageDownload ImageInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }
    }
    private static UFunction _ptrHandleOnlineImageDownloaded;
    public void HandleOnlineImageDownloaded(UOnlineImageDownloaderWeb.FOnlineImageDownload ImageInfo) {
        _ptrHandleOnlineImageDownloaded ??= FindFunction("Function IpDrv.AvatarDownloadComponent.HandleOnlineImageDownloaded");

        var @params = stackalloc byte[64];
        System.Buffer.MemoryCopy((void*)ImageInfo.Pointer, @params, 64, 64);

        ProcessEvent(_ptrHandleOnlineImageDownloaded, @params);
    }

    // Function IpDrv.AvatarDownloadComponent.GetAvatar
    // 0x3750E0
    // (Final | Defined | Private | HasDefaults)
    public unsafe class GetAvatar_Parameters : BaseObject {
        public GetAvatar_Parameters() { }
        public GetAvatar_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadComponent.GetAvatar.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.AvatarDownloadComponent.GetAvatar.Size
        // 0x48 (0x1)
        // (Param)
        public UOnlineSubsystem.AvatarSize Size {
            get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72);
            set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x7

        // ObjectProperty IpDrv.AvatarDownloadComponent.GetAvatar.ReturnValue
        // 0x50 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAvatarDownload ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 80);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 80) = value.Pointer;
        }
    }
    private static UFunction _ptrGetAvatar;
    public UAvatarDownload GetAvatar(U_Types_Core.FUniqueNetId PlayerID, UOnlineSubsystem.AvatarSize Size) {
        _ptrGetAvatar ??= FindFunction("Function IpDrv.AvatarDownloadComponent.GetAvatar");

        var @params = stackalloc byte[81];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&Size, @params + 72, 1, 1);

        ProcessEvent(_ptrGetAvatar, @params);

        return new(*(nint*)(@params + 80));
    }

    // Function IpDrv.AvatarDownloadComponent.ClearPendingDownloads
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearPendingDownloads_Parameters : BaseObject {
        public ClearPendingDownloads_Parameters() { }
        public ClearPendingDownloads_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearPendingDownloads;
    public void ClearPendingDownloads() {
        _ptrClearPendingDownloads ??= FindFunction("Function IpDrv.AvatarDownloadComponent.ClearPendingDownloads");

        ProcessEvent(_ptrClearPendingDownloads, null);
    }

    // Function IpDrv.AvatarDownloadComponent.CleanupAvatars
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class CleanupAvatars_Parameters : BaseObject {
        public CleanupAvatars_Parameters() { }
        public CleanupAvatars_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCleanupAvatars;
    public void CleanupAvatars() {
        _ptrCleanupAvatars ??= FindFunction("Function IpDrv.AvatarDownloadComponent.CleanupAvatars");

        ProcessEvent(_ptrCleanupAvatars, null);
    }

    // Function IpDrv.AvatarDownloadComponent.DownloadAvatar
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class DownloadAvatar_Parameters : BaseObject {
        public DownloadAvatar_Parameters() { }
        public DownloadAvatar_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadComponent.DownloadAvatar.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.AvatarDownloadComponent.DownloadAvatar.Size
        // 0x48 (0x1)
        // (Param)
        public UOnlineSubsystem.AvatarSize Size {
            get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72);
            set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.AvatarDownloadComponent.DownloadAvatar.URL
        // 0x50 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }
    }
    private static UFunction _ptrDownloadAvatar;
    public void DownloadAvatar(U_Types_Core.FUniqueNetId PlayerID, UOnlineSubsystem.AvatarSize Size, FString URL) {
        _ptrDownloadAvatar ??= FindFunction("Function IpDrv.AvatarDownloadComponent.DownloadAvatar");

        var @params = stackalloc byte[89];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&Size, @params + 72, 1, 1);
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params + 80, 16, 16);

        ProcessEvent(_ptrDownloadAvatar, @params);
    }

    // Function IpDrv.AvatarDownloadComponent.StoreNewAvatars
    // 0xBA9330
    // (Final | Native | Public | HasOutParams)
    public unsafe class StoreNewAvatars_Parameters : BaseObject {
        public StoreNewAvatars_Parameters() { }
        public StoreNewAvatars_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.AvatarDownloadComponent.StoreNewAvatars.NewPlayerIDs
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> NewPlayerIDs {
            get => new(Pointer, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.AvatarDownloadComponent.StoreNewAvatars.Size
        // 0x10 (0x1)
        // (Param)
        public UOnlineSubsystem.AvatarSize Size {
            get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 16);
            set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.AvatarDownloadComponent.StoreNewAvatars.ReadOnlineAvatarCompleteDelegate
        // 0x18 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadOnlineAvatarCompleteDelegate {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 24, 24);
        }
    }
    private static UFunction _ptrStoreNewAvatars;
    public void StoreNewAvatars(ref StructTArray<U_Types_Core.FUniqueNetId> NewPlayerIDs, UOnlineSubsystem.AvatarSize Size, FScriptDelegate ReadOnlineAvatarCompleteDelegate) {
        _ptrStoreNewAvatars ??= FindFunction("Function IpDrv.AvatarDownloadComponent.StoreNewAvatars");

        var @params = stackalloc byte[41];
        System.Buffer.MemoryCopy((void*)NewPlayerIDs.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Size, @params + 16, 1, 1);
        System.Buffer.MemoryCopy((void*)ReadOnlineAvatarCompleteDelegate.Pointer, @params + 24, 24, 24);

        _ptrStoreNewAvatars.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrStoreNewAvatars, @params);
        _ptrStoreNewAvatars.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _NewPlayerIDsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_NewPlayerIDsPtr, 16, 16);
        NewPlayerIDs = new(_NewPlayerIDsPtr, 72) { Allocated = true };
    }

    // Function IpDrv.AvatarDownloadComponent.ProcessOldRequests
    // 0xBA90E0
    // (Final | Native | Public | HasOutParams)
    public unsafe class ProcessOldRequests_Parameters : BaseObject {
        public ProcessOldRequests_Parameters() { }
        public ProcessOldRequests_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.AvatarDownloadComponent.ProcessOldRequests.InPlayerIDs
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> InPlayerIDs {
            get => new(Pointer, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.AvatarDownloadComponent.ProcessOldRequests.SizeType
        // 0x10 (0x1)
        // (Param)
        public UOnlineSubsystem.AvatarSize SizeType {
            get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 16);
            set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.AvatarDownloadComponent.ProcessOldRequests.ReadOnlineAvatarCompleteDelegate
        // 0x18 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadOnlineAvatarCompleteDelegate {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 24, 24);
        }

        // ArrayProperty IpDrv.AvatarDownloadComponent.ProcessOldRequests.NewRequestIDs
        // 0x30 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> NewRequestIDs {
            get => new(Pointer + 48, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }
    private static UFunction _ptrProcessOldRequests;
    public void ProcessOldRequests(ref StructTArray<U_Types_Core.FUniqueNetId> InPlayerIDs, UOnlineSubsystem.AvatarSize SizeType, FScriptDelegate ReadOnlineAvatarCompleteDelegate, ref StructTArray<U_Types_Core.FUniqueNetId> NewRequestIDs) {
        _ptrProcessOldRequests ??= FindFunction("Function IpDrv.AvatarDownloadComponent.ProcessOldRequests");

        var @params = stackalloc byte[57];
        System.Buffer.MemoryCopy((void*)InPlayerIDs.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&SizeType, @params + 16, 1, 1);
        System.Buffer.MemoryCopy((void*)ReadOnlineAvatarCompleteDelegate.Pointer, @params + 24, 24, 24);
        System.Buffer.MemoryCopy((void*)NewRequestIDs.Pointer, @params + 48, 16, 16);

        _ptrProcessOldRequests.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrProcessOldRequests, @params);
        _ptrProcessOldRequests.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InPlayerIDsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InPlayerIDsPtr, 16, 16);
        InPlayerIDs = new(_InPlayerIDsPtr, 72) { Allocated = true };
        var _NewRequestIDsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 48, (void*)_NewRequestIDsPtr, 16, 16);
        NewRequestIDs = new(_NewRequestIDsPtr, 72) { Allocated = true };
    }

    // Function IpDrv.AvatarDownloadComponent.TryAddAvatarTextureCallback
    // 0xBA8F00
    // (Final | Native | Public)
    public unsafe class TryAddAvatarTextureCallback_Parameters : BaseObject {
        public TryAddAvatarTextureCallback_Parameters() { }
        public TryAddAvatarTextureCallback_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadComponent.TryAddAvatarTextureCallback.PlayerNetId
        // 0x0 (0x48)
        // (Const | Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.AvatarDownloadComponent.TryAddAvatarTextureCallback.Size
        // 0x48 (0x1)
        // (Param)
        public UOnlineSubsystem.AvatarSize Size {
            get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72);
            set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.AvatarDownloadComponent.TryAddAvatarTextureCallback.ReadOnlineAvatarCompleteDelegate
        // 0x50 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadOnlineAvatarCompleteDelegate {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 24, 24);
        }

        // BoolProperty IpDrv.AvatarDownloadComponent.TryAddAvatarTextureCallback.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrTryAddAvatarTextureCallback;
    public bool TryAddAvatarTextureCallback(U_Types_Core.FUniqueNetId PlayerNetId, UOnlineSubsystem.AvatarSize Size, FScriptDelegate ReadOnlineAvatarCompleteDelegate) {
        _ptrTryAddAvatarTextureCallback ??= FindFunction("Function IpDrv.AvatarDownloadComponent.TryAddAvatarTextureCallback");

        var @params = stackalloc byte[101];
        System.Buffer.MemoryCopy((void*)PlayerNetId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&Size, @params + 72, 1, 1);
        System.Buffer.MemoryCopy((void*)ReadOnlineAvatarCompleteDelegate.Pointer, @params + 80, 24, 24);

        _ptrTryAddAvatarTextureCallback.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTryAddAvatarTextureCallback, @params);
        _ptrTryAddAvatarTextureCallback.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 104);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.AvatarDownloadComponent");
            return _staticClass;
        }
    }
}

// Class IpDrv.AvatarDownloadMap
// 0xF0 (0x70 - 0x160)
// (Compiled | Parsed | Native)
public unsafe partial class UAvatarDownloadMap : UComponent {
    public UAvatarDownloadMap() { }
    public UAvatarDownloadMap(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.AvatarDownloadMap.AvatarMap
    // 0x70 (0x50)
    // (Native)
    public FMap_Mirror AvatarMap {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 80, 80);
    }

    // StructProperty IpDrv.AvatarDownloadMap.ImageMap
    // 0xC0 (0x50)
    // (Native)
    public FMap_Mirror ImageMap {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 80, 80);
    }

    // StructProperty IpDrv.AvatarDownloadMap.AvatarsPendingImages
    // 0x110 (0x50)
    // (Native)
    public FMap_Mirror AvatarsPendingImages {
        get => new(Pointer + 272);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 272), 80, 80);
    }


    // Function IpDrv.AvatarDownloadMap.ContainsImage
    // 0xBAB750
    // (Final | Native | Public)
    public unsafe class ContainsImage_Parameters : BaseObject {
        public ContainsImage_Parameters() { }
        public ContainsImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AvatarDownloadMap.ContainsImage.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.AvatarDownloadMap.ContainsImage.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrContainsImage;
    public bool ContainsImage(FString Key) {
        _ptrContainsImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.ContainsImage");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrContainsImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrContainsImage, @params);
        _ptrContainsImage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.AvatarDownloadMap.ContainsAvatar
    // 0xBAB620
    // (Final | Native | Public | HasOutParams)
    public unsafe class ContainsAvatar_Parameters : BaseObject {
        public ContainsAvatar_Parameters() { }
        public ContainsAvatar_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadMap.ContainsAvatar.Key
        // 0x0 (0x50)
        // (Const | Param | OutParam | NeedCtorLink)
        public FAvatarKey Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 80, 80);
        }

        // BoolProperty IpDrv.AvatarDownloadMap.ContainsAvatar.ReturnValue
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrContainsAvatar;
    public bool ContainsAvatar(ref FAvatarKey Key) {
        _ptrContainsAvatar ??= FindFunction("Function IpDrv.AvatarDownloadMap.ContainsAvatar");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 80, 80);

        _ptrContainsAvatar.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrContainsAvatar, @params);
        _ptrContainsAvatar.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _KeyPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params, (void*)_KeyPtr, 80, 80);
        Key = new(_KeyPtr) { Allocated = true };

        return *(bool*)(@params + 80);
    }

    // Function IpDrv.AvatarDownloadMap.OnAvatarReceivedImage
    // 0xBAB580
    // (Final | Native | Public)
    public unsafe class OnAvatarReceivedImage_Parameters : BaseObject {
        public OnAvatarReceivedImage_Parameters() { }
        public OnAvatarReceivedImage_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.AvatarDownloadMap.OnAvatarReceivedImage.Avatar
        // 0x0 (0x8)
        // (Param)
        public UAvatarDownload Avatar {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrOnAvatarReceivedImage;
    public void OnAvatarReceivedImage(UAvatarDownload Avatar) {
        _ptrOnAvatarReceivedImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.OnAvatarReceivedImage");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Avatar.Pointer, @params, 8, 8);

        _ptrOnAvatarReceivedImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrOnAvatarReceivedImage, @params);
        _ptrOnAvatarReceivedImage.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.RemoveImage
    // 0xBAB4D0
    // (Final | Native | Public)
    public unsafe class RemoveImage_Parameters : BaseObject {
        public RemoveImage_Parameters() { }
        public RemoveImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AvatarDownloadMap.RemoveImage.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrRemoveImage;
    public void RemoveImage(FString Key) {
        _ptrRemoveImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.RemoveImage");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrRemoveImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveImage, @params);
        _ptrRemoveImage.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.RemoveAvatar
    // 0xBAB3D0
    // (Final | Native | Public | HasOutParams)
    public unsafe class RemoveAvatar_Parameters : BaseObject {
        public RemoveAvatar_Parameters() { }
        public RemoveAvatar_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadMap.RemoveAvatar.Key
        // 0x0 (0x50)
        // (Const | Param | OutParam | NeedCtorLink)
        public FAvatarKey Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 80, 80);
        }
    }
    private static UFunction _ptrRemoveAvatar;
    public void RemoveAvatar(ref FAvatarKey Key) {
        _ptrRemoveAvatar ??= FindFunction("Function IpDrv.AvatarDownloadMap.RemoveAvatar");

        var @params = stackalloc byte[80];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 80, 80);

        _ptrRemoveAvatar.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveAvatar, @params);
        _ptrRemoveAvatar.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _KeyPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params, (void*)_KeyPtr, 80, 80);
        Key = new(_KeyPtr) { Allocated = true };
    }

    // Function IpDrv.AvatarDownloadMap.RemoveAllNetIDs
    // 0xBAB240
    // (Final | Native | Public | HasOutParams)
    public unsafe class RemoveAllNetIDs_Parameters : BaseObject {
        public RemoveAllNetIDs_Parameters() { }
        public RemoveAllNetIDs_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadMap.RemoveAllNetIDs.PlayerID
        // 0x0 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }
    }
    private static UFunction _ptrRemoveAllNetIDs;
    public void RemoveAllNetIDs(ref U_Types_Core.FUniqueNetId PlayerID) {
        _ptrRemoveAllNetIDs ??= FindFunction("Function IpDrv.AvatarDownloadMap.RemoveAllNetIDs");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);

        _ptrRemoveAllNetIDs.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveAllNetIDs, @params);
        _ptrRemoveAllNetIDs.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlayerIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params, (void*)_PlayerIDPtr, 72, 72);
        PlayerID = new(_PlayerIDPtr) { Allocated = true };
    }

    // Function IpDrv.AvatarDownloadMap.ClearAvatarsPendingImages
    // 0xBAB200
    // (Final | Native | Public)
    public unsafe class ClearAvatarsPendingImages_Parameters : BaseObject {
        public ClearAvatarsPendingImages_Parameters() { }
        public ClearAvatarsPendingImages_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearAvatarsPendingImages;
    public void ClearAvatarsPendingImages() {
        _ptrClearAvatarsPendingImages ??= FindFunction("Function IpDrv.AvatarDownloadMap.ClearAvatarsPendingImages");

        _ptrClearAvatarsPendingImages.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearAvatarsPendingImages, null);
        _ptrClearAvatarsPendingImages.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.ClearImages
    // 0xBAB1C0
    // (Final | Native | Public)
    public unsafe class ClearImages_Parameters : BaseObject {
        public ClearImages_Parameters() { }
        public ClearImages_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearImages;
    public void ClearImages() {
        _ptrClearImages ??= FindFunction("Function IpDrv.AvatarDownloadMap.ClearImages");

        _ptrClearImages.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearImages, null);
        _ptrClearImages.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.ClearAvatars
    // 0xBAB180
    // (Final | Native | Public)
    public unsafe class ClearAvatars_Parameters : BaseObject {
        public ClearAvatars_Parameters() { }
        public ClearAvatars_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearAvatars;
    public void ClearAvatars() {
        _ptrClearAvatars ??= FindFunction("Function IpDrv.AvatarDownloadMap.ClearAvatars");

        _ptrClearAvatars.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearAvatars, null);
        _ptrClearAvatars.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.Clear
    // 0xBAB130
    // (Final | Native | Public)
    public unsafe class Clear_Parameters : BaseObject {
        public Clear_Parameters() { }
        public Clear_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClear;
    public void Clear() {
        _ptrClear ??= FindFunction("Function IpDrv.AvatarDownloadMap.Clear");

        _ptrClear.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClear, null);
        _ptrClear.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.TryGetImage
    // 0xBAAF50
    // (Final | Native | Public | HasOutParams)
    public unsafe class TryGetImage_Parameters : BaseObject {
        public TryGetImage_Parameters() { }
        public TryGetImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AvatarDownloadMap.TryGetImage.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.AvatarDownloadMap.TryGetImage.OutValue
        // 0x10 (0x8)
        // (Param | OutParam)
        public UTexture OutValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // BoolProperty IpDrv.AvatarDownloadMap.TryGetImage.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrTryGetImage;
    public bool TryGetImage(FString Key, ref UTexture OutValue) {
        _ptrTryGetImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.TryGetImage");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutValue.Pointer, @params + 16, 8, 8);

        _ptrTryGetImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTryGetImage, @params);
        _ptrTryGetImage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        OutValue = new(*(nint*)(@params + 16));

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.AvatarDownloadMap.TryGetAvatar
    // 0xBAADB0
    // (Final | Native | Public | HasOutParams)
    public unsafe class TryGetAvatar_Parameters : BaseObject {
        public TryGetAvatar_Parameters() { }
        public TryGetAvatar_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadMap.TryGetAvatar.Key
        // 0x0 (0x50)
        // (Const | Param | OutParam | NeedCtorLink)
        public FAvatarKey Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 80, 80);
        }

        // ObjectProperty IpDrv.AvatarDownloadMap.TryGetAvatar.OutValue
        // 0x50 (0x8)
        // (Param | OutParam)
        public UAvatarDownload OutValue {
            get {
                var pointer = *(nint*)(Pointer + 80);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 80) = value.Pointer;
        }

        // BoolProperty IpDrv.AvatarDownloadMap.TryGetAvatar.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrTryGetAvatar;
    public bool TryGetAvatar(ref FAvatarKey Key, ref UAvatarDownload OutValue) {
        _ptrTryGetAvatar ??= FindFunction("Function IpDrv.AvatarDownloadMap.TryGetAvatar");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 80, 80);
        System.Buffer.MemoryCopy((void*)OutValue.Pointer, @params + 80, 8, 8);

        _ptrTryGetAvatar.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTryGetAvatar, @params);
        _ptrTryGetAvatar.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _KeyPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params, (void*)_KeyPtr, 80, 80);
        Key = new(_KeyPtr) { Allocated = true };
        OutValue = new(*(nint*)(@params + 80));

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.AvatarDownloadMap.GetAvatarsPendingImage
    // 0xBAAC70
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetAvatarsPendingImage_Parameters : BaseObject {
        public GetAvatarsPendingImage_Parameters() { }
        public GetAvatarsPendingImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AvatarDownloadMap.GetAvatarsPendingImage.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.AvatarDownloadMap.GetAvatarsPendingImage.OutAvatars
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public PointerTArray<UAvatarDownload> OutAvatars {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetAvatarsPendingImage;
    public void GetAvatarsPendingImage(FString Key, ref PointerTArray<UAvatarDownload> OutAvatars) {
        _ptrGetAvatarsPendingImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.GetAvatarsPendingImage");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutAvatars.Pointer, @params + 16, 16, 16);

        _ptrGetAvatarsPendingImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetAvatarsPendingImage, @params);
        _ptrGetAvatarsPendingImage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutAvatarsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutAvatarsPtr, 16, 16);
        OutAvatars = new(_OutAvatarsPtr) { Allocated = true };
    }

    // Function IpDrv.AvatarDownloadMap.GetImage
    // 0xBAAB00
    // (Final | Native | Public)
    public unsafe class GetImage_Parameters : BaseObject {
        public GetImage_Parameters() { }
        public GetImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AvatarDownloadMap.GetImage.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.AvatarDownloadMap.GetImage.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UTexture ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrGetImage;
    public UTexture GetImage(FString Key) {
        _ptrGetImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.GetImage");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrGetImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetImage, @params);
        _ptrGetImage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.AvatarDownloadMap.GetAvatar
    // 0xBAA9D0
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetAvatar_Parameters : BaseObject {
        public GetAvatar_Parameters() { }
        public GetAvatar_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadMap.GetAvatar.Key
        // 0x0 (0x50)
        // (Const | Param | OutParam | NeedCtorLink)
        public FAvatarKey Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 80, 80);
        }

        // ObjectProperty IpDrv.AvatarDownloadMap.GetAvatar.ReturnValue
        // 0x50 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAvatarDownload ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 80);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 80) = value.Pointer;
        }
    }
    private static UFunction _ptrGetAvatar;
    public UAvatarDownload GetAvatar(ref FAvatarKey Key) {
        _ptrGetAvatar ??= FindFunction("Function IpDrv.AvatarDownloadMap.GetAvatar");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 80, 80);

        _ptrGetAvatar.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetAvatar, @params);
        _ptrGetAvatar.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _KeyPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params, (void*)_KeyPtr, 80, 80);
        Key = new(_KeyPtr) { Allocated = true };

        return new(*(nint*)(@params + 80));
    }

    // Function IpDrv.AvatarDownloadMap.AddAvatarPendingImage
    // 0xBAA8C0
    // (Final | Native | Public)
    public unsafe class AddAvatarPendingImage_Parameters : BaseObject {
        public AddAvatarPendingImage_Parameters() { }
        public AddAvatarPendingImage_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.AvatarDownloadMap.AddAvatarPendingImage.Avatar
        // 0x0 (0x8)
        // (Param)
        public UAvatarDownload Avatar {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrAddAvatarPendingImage;
    public void AddAvatarPendingImage(UAvatarDownload Avatar) {
        _ptrAddAvatarPendingImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.AddAvatarPendingImage");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Avatar.Pointer, @params, 8, 8);

        _ptrAddAvatarPendingImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddAvatarPendingImage, @params);
        _ptrAddAvatarPendingImage.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.SetImage
    // 0xBAA770
    // (Final | Native | Public)
    public unsafe class SetImage_Parameters : BaseObject {
        public SetImage_Parameters() { }
        public SetImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.AvatarDownloadMap.SetImage.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.AvatarDownloadMap.SetImage.Value
        // 0x10 (0x8)
        // (Param)
        public UTexture Value {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrSetImage;
    public void SetImage(FString URL, UTexture Value) {
        _ptrSetImage ??= FindFunction("Function IpDrv.AvatarDownloadMap.SetImage");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 8, 8);

        _ptrSetImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetImage, @params);
        _ptrSetImage.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.SetAvatar
    // 0xBAA6F0
    // (Final | Native | Public)
    public unsafe class SetAvatar_Parameters : BaseObject {
        public SetAvatar_Parameters() { }
        public SetAvatar_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.AvatarDownloadMap.SetAvatar.Value
        // 0x0 (0x8)
        // (Param)
        public UAvatarDownload Value {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrSetAvatar;
    public void SetAvatar(UAvatarDownload Value) {
        _ptrSetAvatar ??= FindFunction("Function IpDrv.AvatarDownloadMap.SetAvatar");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params, 8, 8);

        _ptrSetAvatar.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetAvatar, @params);
        _ptrSetAvatar.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.AvatarDownloadMap.CountAvatars
    // 0xBAA6A0
    // (Final | Native | Public)
    public unsafe class CountAvatars_Parameters : BaseObject {
        public CountAvatars_Parameters() { }
        public CountAvatars_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.AvatarDownloadMap.CountAvatars.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrCountAvatars;
    public int CountAvatars() {
        _ptrCountAvatars ??= FindFunction("Function IpDrv.AvatarDownloadMap.CountAvatars");

        var @params = stackalloc byte[4];

        _ptrCountAvatars.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCountAvatars, @params);
        _ptrCountAvatars.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function IpDrv.AvatarDownloadMap.AllValues
    // 0xBAA400
    // (Final | Iterator | Native | HasOptionalParams | Public | HasOutParams)
    public unsafe class AllValues_Parameters : BaseObject {
        public AllValues_Parameters() { }
        public AllValues_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.AvatarDownloadMap.AllValues.OutAvatar
        // 0x0 (0x8)
        // (Param | OutParam)
        public UAvatarDownload OutAvatar {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // IntProperty IpDrv.AvatarDownloadMap.AllValues.StartIndex
        // 0x8 (0x4)
        // (OptionalParam | Param)
        public int StartIndex {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty IpDrv.AvatarDownloadMap.AllValues.MaxValues
        // 0xC (0x4)
        // (OptionalParam | Param)
        public int MaxValues {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrAllValues;
    public void AllValues(ref UAvatarDownload OutAvatar, int StartIndex = 0, int MaxValues = 0) {
        _ptrAllValues ??= FindFunction("Function IpDrv.AvatarDownloadMap.AllValues");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)OutAvatar.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&StartIndex, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&MaxValues, @params + 12, 4, 4);

        _ptrAllValues.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllValues, @params);
        _ptrAllValues.FunctionFlags |= (ulong)EFunctionFlags.Native;

        OutAvatar = new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.AvatarDownloadMap.AvatarKey
    // 0x49
    public unsafe class FAvatarKey : BaseObject {
        public FAvatarKey() {
            Pointer = Marshal.AllocHGlobal(73);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 73);
            Allocated = true;
        }
        public FAvatarKey(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.AvatarDownloadMap.AvatarKey.PlayerID
        // 0x0 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.AvatarDownloadMap.AvatarKey.Size
        // 0x48 (0x1)
        public UOnlineSubsystem.AvatarSize Size {
            get => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72);
            set => *(UOnlineSubsystem.AvatarSize*)(Pointer + 72) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.AvatarDownloadMap");
            return _staticClass;
        }
    }
}

// Class IpDrv.ClientBeaconAddressResolver
// 0xC (0x60 - 0x6C)
// (Compiled | Parsed | Native)
public unsafe partial class UClientBeaconAddressResolver : UObject {
    public UClientBeaconAddressResolver() { }
    public UClientBeaconAddressResolver(nint pointer) : base(pointer) { }


    // IntProperty IpDrv.ClientBeaconAddressResolver.BeaconPort
    // 0x60 (0x4)
    public int BeaconPort {
        get => *(int*)(Pointer + 96);
        set => *(int*)(Pointer + 96) = value;
    }

    // NameProperty IpDrv.ClientBeaconAddressResolver.BeaconName
    // 0x64 (0x8)
    public FName BeaconName {
        get => new(Pointer + 100);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 100), 8, 8);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.ClientBeaconAddressResolver");
            return _staticClass;
        }
    }
}

// Class IpDrv.HTTPDownload
// 0x140 (0xAB0 - 0xBF0)
// (Config | Transient | Native | Intrinsic)
public unsafe partial class UHTTPDownload : UDownload {
    public UHTTPDownload() { }
    public UHTTPDownload(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.HTTPDownload.RedirectToURL
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString RedirectToURL {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // BoolProperty IpDrv.HTTPDownload.UseCompression
    // 0x88 (0x4)
    // Bitmask: 0x00000001
    // (Config)
    public bool UseCompression {
        get => (*(uint*)(Pointer + 136) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 136) |= 0x1;
            else *(uint*)(Pointer + 136) &= ~(uint)0x1;
        }
    }

    // MISSED OFFSET: 0xA24

    // StrProperty IpDrv.HTTPDownload.ProxyServerHost
    // 0xAB0 (0x10)
    // (Config | NeedCtorLink)
    public FString ProxyServerHost {
        get => new(Pointer + 2736);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 2736), 16, 16);
    }

    // IntProperty IpDrv.HTTPDownload.ProxyServerPort
    // 0xAC0 (0x4)
    // (Config)
    public int ProxyServerPort {
        get => *(int*)(Pointer + 2752);
        set => *(int*)(Pointer + 2752) = value;
    }

    // BoolProperty IpDrv.HTTPDownload.MaxRedirection
    // 0xAC4 (0x4)
    // Bitmask: 0x00000001
    // (Config)
    public bool MaxRedirection {
        get => (*(uint*)(Pointer + 2756) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 2756) |= 0x1;
            else *(uint*)(Pointer + 2756) &= ~(uint)0x1;
        }
    }

    // FloatProperty IpDrv.HTTPDownload.ConnectionTimeout
    // 0xAC8 (0x4)
    // (Config)
    public float ConnectionTimeout {
        get => *(float*)(Pointer + 2760);
        set => *(float*)(Pointer + 2760) = value;
    }

    // MISSED OFFSET: 0x124


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.HTTPDownload");
            return _staticClass;
        }
    }
}

// Class IpDrv.HttpRequestCurl
// 0x38 (0x78 - 0xB0)
// (Compiled | Parsed | Native)
public unsafe partial class UHttpRequestCurl : UHttpRequestInterface {
    public UHttpRequestCurl() { }
    public UHttpRequestCurl(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.HttpRequestCurl.Request
    // 0x78 (0x8)
    // (Const | Native | Transient)
    public nint Request {
        get => *(nint*)(Pointer + 120);
        set => *(nint*)(Pointer + 120) = value;
    }

    // StrProperty IpDrv.HttpRequestCurl.RequestVerb
    // 0x80 (0x10)
    // (Const | Native)
    public FString RequestVerb {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // StrProperty IpDrv.HttpRequestCurl.RequestURL
    // 0x90 (0x10)
    // (Const | Native | Transient)
    public FString RequestURL {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // ArrayProperty IpDrv.HttpRequestCurl.Payload
    // 0xA0 (0x10)
    // (Const | Native)
    public UnmanagedTArray<byte> Payload {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }


    // Function IpDrv.HttpRequestCurl.ProcessRequest
    // 0x67EF80
    // (Native | Public)
    public unsafe class ProcessRequest_Parameters : BaseObject {
        public ProcessRequest_Parameters() { }
        public ProcessRequest_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.HttpRequestCurl.ProcessRequest.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrProcessRequest;
    public bool ProcessRequest() {
        _ptrProcessRequest ??= FindFunction("Function IpDrv.HttpRequestCurl.ProcessRequest");

        var @params = stackalloc byte[4];

        _ptrProcessRequest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrProcessRequest, @params);
        _ptrProcessRequest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.HttpRequestCurl.SetHeader
    // 0x67EDE0
    // (Native | Public)
    public unsafe class SetHeader_Parameters : BaseObject {
        public SetHeader_Parameters() { }
        public SetHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.SetHeader.HeaderName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString HeaderName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.HttpRequestCurl.SetHeader.HeaderValue
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString HeaderValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ObjectProperty IpDrv.HttpRequestCurl.SetHeader.ReturnValue
        // 0x20 (0x8)
        // (Param | OutParam | ReturnParam)
        public UHttpRequestInterface ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }
    private static UFunction _ptrSetHeader;
    public UHttpRequestInterface SetHeader(FString HeaderName, FString HeaderValue) {
        _ptrSetHeader ??= FindFunction("Function IpDrv.HttpRequestCurl.SetHeader");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)HeaderName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)HeaderValue.Pointer, @params + 16, 16, 16);

        _ptrSetHeader.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetHeader, @params);
        _ptrSetHeader.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 32));
    }

    // Function IpDrv.HttpRequestCurl.SetContentAsString
    // 0x67EC30
    // (Native | Public)
    public unsafe class SetContentAsString_Parameters : BaseObject {
        public SetContentAsString_Parameters() { }
        public SetContentAsString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.SetContentAsString.ContentString
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ContentString {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.HttpRequestCurl.SetContentAsString.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UHttpRequestInterface ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrSetContentAsString;
    public UHttpRequestInterface SetContentAsString(FString ContentString) {
        _ptrSetContentAsString ??= FindFunction("Function IpDrv.HttpRequestCurl.SetContentAsString");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ContentString.Pointer, @params, 16, 16);

        _ptrSetContentAsString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetContentAsString, @params);
        _ptrSetContentAsString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.HttpRequestCurl.SetContent
    // 0x67EAB0
    // (Native | Public | HasOutParams)
    public unsafe class SetContent_Parameters : BaseObject {
        public SetContent_Parameters() { }
        public SetContent_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.HttpRequestCurl.SetContent.ContentPayload
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> ContentPayload {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.HttpRequestCurl.SetContent.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UHttpRequestInterface ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrSetContent;
    public UHttpRequestInterface SetContent(ref UnmanagedTArray<byte> ContentPayload) {
        _ptrSetContent ??= FindFunction("Function IpDrv.HttpRequestCurl.SetContent");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ContentPayload.Pointer, @params, 16, 16);

        _ptrSetContent.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetContent, @params);
        _ptrSetContent.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ContentPayloadPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ContentPayloadPtr, 16, 16);
        ContentPayload = new(_ContentPayloadPtr) { Allocated = true };

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.HttpRequestCurl.SetURL
    // 0x67E900
    // (Native | Public)
    public unsafe class SetURL_Parameters : BaseObject {
        public SetURL_Parameters() { }
        public SetURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.SetURL.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.HttpRequestCurl.SetURL.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UHttpRequestInterface ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrSetURL;
    public UHttpRequestInterface SetURL(FString URL) {
        _ptrSetURL ??= FindFunction("Function IpDrv.HttpRequestCurl.SetURL");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrSetURL.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetURL, @params);
        _ptrSetURL.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.HttpRequestCurl.SetVerb
    // 0x67E840
    // (Native | Public)
    public unsafe class SetVerb_Parameters : BaseObject {
        public SetVerb_Parameters() { }
        public SetVerb_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.SetVerb.Verb
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Verb {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.HttpRequestCurl.SetVerb.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UHttpRequestInterface ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrSetVerb;
    public UHttpRequestInterface SetVerb(FString Verb) {
        _ptrSetVerb ??= FindFunction("Function IpDrv.HttpRequestCurl.SetVerb");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Verb.Pointer, @params, 16, 16);

        _ptrSetVerb.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetVerb, @params);
        _ptrSetVerb.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.HttpRequestCurl.GetVerb
    // 0x67E790
    // (Native | Public)
    public unsafe class GetVerb_Parameters : BaseObject {
        public GetVerb_Parameters() { }
        public GetVerb_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.GetVerb.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetVerb;
    public FString GetVerb() {
        _ptrGetVerb ??= FindFunction("Function IpDrv.HttpRequestCurl.GetVerb");

        var @params = stackalloc byte[16];

        _ptrGetVerb.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetVerb, @params);
        _ptrGetVerb.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpRequestCurl.GetContent
    // 0x67CC80
    // (Native | Public | HasOutParams)
    public unsafe class GetContent_Parameters : BaseObject {
        public GetContent_Parameters() { }
        public GetContent_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.HttpRequestCurl.GetContent.Content
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Content {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetContent;
    public void GetContent(ref UnmanagedTArray<byte> Content) {
        _ptrGetContent ??= FindFunction("Function IpDrv.HttpRequestCurl.GetContent");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Content.Pointer, @params, 16, 16);

        _ptrGetContent.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContent, @params);
        _ptrGetContent.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ContentPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ContentPtr, 16, 16);
        Content = new(_ContentPtr) { Allocated = true };
    }

    // Function IpDrv.HttpRequestCurl.GetURL
    // 0x67CBD0
    // (Native | Public)
    public unsafe class GetURL_Parameters : BaseObject {
        public GetURL_Parameters() { }
        public GetURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.GetURL.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetURL;
    public FString GetURL() {
        _ptrGetURL ??= FindFunction("Function IpDrv.HttpRequestCurl.GetURL");

        var @params = stackalloc byte[16];

        _ptrGetURL.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetURL, @params);
        _ptrGetURL.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpRequestCurl.GetContentLength
    // 0x67CB80
    // (Native | Public)
    public unsafe class GetContentLength_Parameters : BaseObject {
        public GetContentLength_Parameters() { }
        public GetContentLength_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.HttpRequestCurl.GetContentLength.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetContentLength;
    public int GetContentLength() {
        _ptrGetContentLength ??= FindFunction("Function IpDrv.HttpRequestCurl.GetContentLength");

        var @params = stackalloc byte[4];

        _ptrGetContentLength.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContentLength, @params);
        _ptrGetContentLength.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function IpDrv.HttpRequestCurl.GetContentType
    // 0x67CAD0
    // (Native | Public)
    public unsafe class GetContentType_Parameters : BaseObject {
        public GetContentType_Parameters() { }
        public GetContentType_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.GetContentType.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetContentType;
    public FString GetContentType() {
        _ptrGetContentType ??= FindFunction("Function IpDrv.HttpRequestCurl.GetContentType");

        var @params = stackalloc byte[16];

        _ptrGetContentType.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContentType, @params);
        _ptrGetContentType.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpRequestCurl.GetURLParameter
    // 0x67C9C0
    // (Native | Public)
    public unsafe class GetURLParameter_Parameters : BaseObject {
        public GetURLParameter_Parameters() { }
        public GetURLParameter_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.GetURLParameter.ParameterName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ParameterName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.HttpRequestCurl.GetURLParameter.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetURLParameter;
    public FString GetURLParameter(FString ParameterName) {
        _ptrGetURLParameter ??= FindFunction("Function IpDrv.HttpRequestCurl.GetURLParameter");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ParameterName.Pointer, @params, 16, 16);

        _ptrGetURLParameter.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetURLParameter, @params);
        _ptrGetURLParameter.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpRequestCurl.GetHeaders
    // 0x67C8F0
    // (Native | Public)
    public unsafe class GetHeaders_Parameters : BaseObject {
        public GetHeaders_Parameters() { }
        public GetHeaders_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.HttpRequestCurl.GetHeaders.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FString> ReturnValue {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetHeaders;
    public StructTArray<FString> GetHeaders() {
        _ptrGetHeaders ??= FindFunction("Function IpDrv.HttpRequestCurl.GetHeaders");

        var @params = stackalloc byte[16];

        _ptrGetHeaders.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHeaders, @params);
        _ptrGetHeaders.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 16) { Allocated = true };
    }

    // Function IpDrv.HttpRequestCurl.GetHeader
    // 0x67C7E0
    // (Native | Public)
    public unsafe class GetHeader_Parameters : BaseObject {
        public GetHeader_Parameters() { }
        public GetHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpRequestCurl.GetHeader.HeaderName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString HeaderName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.HttpRequestCurl.GetHeader.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetHeader;
    public FString GetHeader(FString HeaderName) {
        _ptrGetHeader ??= FindFunction("Function IpDrv.HttpRequestCurl.GetHeader");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)HeaderName.Pointer, @params, 16, 16);

        _ptrGetHeader.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHeader, @params);
        _ptrGetHeader.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.HttpRequestCurl");
            return _staticClass;
        }
    }
}

// Class IpDrv.HttpResponseCurl
// 0x18 (0x60 - 0x78)
// (Compiled | Parsed | Native)
public unsafe partial class UHttpResponseCurl : UHttpResponseInterface {
    public UHttpResponseCurl() { }
    public UHttpResponseCurl(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.HttpResponseCurl.Response
    // 0x60 (0x8)
    // (Const | Native | Transient)
    public nint Response {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // ArrayProperty IpDrv.HttpResponseCurl.Payload
    // 0x68 (0x10)
    // (Const | Native)
    public UnmanagedTArray<byte> Payload {
        get => new(Pointer + 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }


    // Function IpDrv.HttpResponseCurl.GetResponseCode
    // 0x6806D0
    // (Native | Public)
    public unsafe class GetResponseCode_Parameters : BaseObject {
        public GetResponseCode_Parameters() { }
        public GetResponseCode_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.HttpResponseCurl.GetResponseCode.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetResponseCode;
    public int GetResponseCode() {
        _ptrGetResponseCode ??= FindFunction("Function IpDrv.HttpResponseCurl.GetResponseCode");

        var @params = stackalloc byte[4];

        _ptrGetResponseCode.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetResponseCode, @params);
        _ptrGetResponseCode.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function IpDrv.HttpResponseCurl.GetContentAsString
    // 0x680720
    // (Native | Public)
    public unsafe class GetContentAsString_Parameters : BaseObject {
        public GetContentAsString_Parameters() { }
        public GetContentAsString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpResponseCurl.GetContentAsString.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetContentAsString;
    public FString GetContentAsString() {
        _ptrGetContentAsString ??= FindFunction("Function IpDrv.HttpResponseCurl.GetContentAsString");

        var @params = stackalloc byte[16];

        _ptrGetContentAsString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContentAsString, @params);
        _ptrGetContentAsString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpResponseCurl.GetContent
    // 0x67CC80
    // (Native | Public | HasOutParams)
    public unsafe class GetContent_Parameters : BaseObject {
        public GetContent_Parameters() { }
        public GetContent_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.HttpResponseCurl.GetContent.Content
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Content {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetContent;
    public void GetContent(ref UnmanagedTArray<byte> Content) {
        _ptrGetContent ??= FindFunction("Function IpDrv.HttpResponseCurl.GetContent");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Content.Pointer, @params, 16, 16);

        _ptrGetContent.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContent, @params);
        _ptrGetContent.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ContentPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ContentPtr, 16, 16);
        Content = new(_ContentPtr) { Allocated = true };
    }

    // Function IpDrv.HttpResponseCurl.GetURL
    // 0x67CBD0
    // (Native | Public)
    public unsafe class GetURL_Parameters : BaseObject {
        public GetURL_Parameters() { }
        public GetURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpResponseCurl.GetURL.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetURL;
    public FString GetURL() {
        _ptrGetURL ??= FindFunction("Function IpDrv.HttpResponseCurl.GetURL");

        var @params = stackalloc byte[16];

        _ptrGetURL.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetURL, @params);
        _ptrGetURL.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpResponseCurl.GetContentLength
    // 0x67CB80
    // (Native | Public)
    public unsafe class GetContentLength_Parameters : BaseObject {
        public GetContentLength_Parameters() { }
        public GetContentLength_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.HttpResponseCurl.GetContentLength.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetContentLength;
    public int GetContentLength() {
        _ptrGetContentLength ??= FindFunction("Function IpDrv.HttpResponseCurl.GetContentLength");

        var @params = stackalloc byte[4];

        _ptrGetContentLength.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContentLength, @params);
        _ptrGetContentLength.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function IpDrv.HttpResponseCurl.GetContentType
    // 0x67CAD0
    // (Native | Public)
    public unsafe class GetContentType_Parameters : BaseObject {
        public GetContentType_Parameters() { }
        public GetContentType_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpResponseCurl.GetContentType.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetContentType;
    public FString GetContentType() {
        _ptrGetContentType ??= FindFunction("Function IpDrv.HttpResponseCurl.GetContentType");

        var @params = stackalloc byte[16];

        _ptrGetContentType.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetContentType, @params);
        _ptrGetContentType.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpResponseCurl.GetURLParameter
    // 0x67C9C0
    // (Native | Public)
    public unsafe class GetURLParameter_Parameters : BaseObject {
        public GetURLParameter_Parameters() { }
        public GetURLParameter_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpResponseCurl.GetURLParameter.ParameterName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ParameterName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.HttpResponseCurl.GetURLParameter.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetURLParameter;
    public FString GetURLParameter(FString ParameterName) {
        _ptrGetURLParameter ??= FindFunction("Function IpDrv.HttpResponseCurl.GetURLParameter");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ParameterName.Pointer, @params, 16, 16);

        _ptrGetURLParameter.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetURLParameter, @params);
        _ptrGetURLParameter.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.HttpResponseCurl.GetHeaders
    // 0x67C8F0
    // (Native | Public)
    public unsafe class GetHeaders_Parameters : BaseObject {
        public GetHeaders_Parameters() { }
        public GetHeaders_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.HttpResponseCurl.GetHeaders.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FString> ReturnValue {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetHeaders;
    public StructTArray<FString> GetHeaders() {
        _ptrGetHeaders ??= FindFunction("Function IpDrv.HttpResponseCurl.GetHeaders");

        var @params = stackalloc byte[16];

        _ptrGetHeaders.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHeaders, @params);
        _ptrGetHeaders.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 16) { Allocated = true };
    }

    // Function IpDrv.HttpResponseCurl.GetHeader
    // 0x67C7E0
    // (Native | Public)
    public unsafe class GetHeader_Parameters : BaseObject {
        public GetHeader_Parameters() { }
        public GetHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.HttpResponseCurl.GetHeader.HeaderName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString HeaderName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.HttpResponseCurl.GetHeader.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetHeader;
    public FString GetHeader(FString HeaderName) {
        _ptrGetHeader ??= FindFunction("Function IpDrv.HttpResponseCurl.GetHeader");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)HeaderName.Pointer, @params, 16, 16);

        _ptrGetHeader.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHeader, @params);
        _ptrGetHeader.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.HttpResponseCurl");
            return _staticClass;
        }
    }
}

// Class IpDrv.ImageDecoder
// 0x30 (0x60 - 0x90)
// (Compiled | Parsed | Native)
public unsafe partial class UImageDecoder : UObject {
    public UImageDecoder() { }
    public UImageDecoder(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.ImageDecoder.VfTable_FTickableObject
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FTickableObject {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // ArrayProperty IpDrv.ImageDecoder.ActiveDecodeRequests
    // 0x68 (0x10)
    // (NeedCtorLink)
    public StructTArray<FDecodeImageRequest> ActiveDecodeRequests {
        get => new(Pointer + 104, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }

    // DelegateProperty IpDrv.ImageDecoder.__ImageDecodedDelegate__Delegate
    // 0x78 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __ImageDecodedDelegate__Delegate {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 24, 24);
    }


    // Function IpDrv.ImageDecoder.RequestDecodeImage
    // 0xBAC6F0
    // (Final | Native | Public | HasOutParams)
    public unsafe class RequestDecodeImage_Parameters : BaseObject {
        public RequestDecodeImage_Parameters() { }
        public RequestDecodeImage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.ImageDecoder.RequestDecodeImage.RequestURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequestURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.ImageDecoder.RequestDecodeImage.ImageType
        // 0x10 (0x1)
        // (Param)
        public U_Types_Core.EImageType ImageType {
            get => *(U_Types_Core.EImageType*)(Pointer + 16);
            set => *(U_Types_Core.EImageType*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.ImageDecoder.RequestDecodeImage.FinishedCallback
        // 0x18 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate FinishedCallback {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 24, 24);
        }

        // ArrayProperty IpDrv.ImageDecoder.RequestDecodeImage.ImageData
        // 0x30 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> ImageData {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }
    private static UFunction _ptrRequestDecodeImage;
    public void RequestDecodeImage(FString RequestURL, U_Types_Core.EImageType ImageType, FScriptDelegate FinishedCallback, ref UnmanagedTArray<byte> ImageData) {
        _ptrRequestDecodeImage ??= FindFunction("Function IpDrv.ImageDecoder.RequestDecodeImage");

        var @params = stackalloc byte[57];
        System.Buffer.MemoryCopy((void*)RequestURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&ImageType, @params + 16, 1, 1);
        System.Buffer.MemoryCopy((void*)FinishedCallback.Pointer, @params + 24, 24, 24);
        System.Buffer.MemoryCopy((void*)ImageData.Pointer, @params + 48, 16, 16);

        _ptrRequestDecodeImage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequestDecodeImage, @params);
        _ptrRequestDecodeImage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ImageDataPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 48, (void*)_ImageDataPtr, 16, 16);
        ImageData = new(_ImageDataPtr) { Allocated = true };
    }

    // Function IpDrv.ImageDecoder.ImageDecodedDelegate
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class ImageDecodedDelegate_Parameters : BaseObject {
        public ImageDecodedDelegate_Parameters() { }
        public ImageDecodedDelegate_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.ImageDecoder.ImageDecodedDelegate.RequestURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequestURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.ImageDecoder.ImageDecodedDelegate.Image
        // 0x10 (0x18)
        // (Param | NeedCtorLink)
        public UTexture2DDynamic.FImageLayout Image {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }
    }
    private static UFunction _ptrImageDecodedDelegate;
    public void ImageDecodedDelegate(FString RequestURL, UTexture2DDynamic.FImageLayout Image) {
        _ptrImageDecodedDelegate ??= FindFunction("Function IpDrv.ImageDecoder.ImageDecodedDelegate");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)RequestURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Image.Pointer, @params + 16, 24, 24);

        ProcessEvent(_ptrImageDecodedDelegate, @params);
    }


    // ScriptStruct IpDrv.ImageDecoder.DecodeImageRequest
    // 0x30
    public unsafe class FDecodeImageRequest : BaseObject {
        public FDecodeImageRequest() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FDecodeImageRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.ImageDecoder.DecodeImageRequest.RequestURL
        // 0x0 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString RequestURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // DelegateProperty IpDrv.ImageDecoder.DecodeImageRequest.OnFinishedCallback
        // 0x10 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate OnFinishedCallback {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }

        // StructProperty IpDrv.ImageDecoder.DecodeImageRequest.Task
        // 0x28 (0x8)
        // (Native)
        public nint Task {
            get => *(nint*)(Pointer + 40);
            set => *(nint*)(Pointer + 40) = value;
        }
    }

    // ScriptStruct IpDrv.ImageDecoder.DecodeImageTask
    // 0x40
    public unsafe class FDecodeImageTask : BaseObject {
        public FDecodeImageTask() {
            Pointer = Marshal.AllocHGlobal(64);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 64);
            Allocated = true;
        }
        public FDecodeImageTask(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.ImageDecoder.DecodeImageTask.RequestURL
        // 0x0 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString RequestURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.ImageDecoder.DecodeImageTask.ImageType
        // 0x10 (0x1)
        public U_Types_Core.EImageType ImageType {
            get => *(U_Types_Core.EImageType*)(Pointer + 16);
            set => *(U_Types_Core.EImageType*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.ImageDecoder.DecodeImageTask.ImageData
        // 0x18 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public UnmanagedTArray<byte> ImageData {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StructProperty IpDrv.ImageDecoder.DecodeImageTask.Result
        // 0x28 (0x18)
        // (NeedCtorLink)
        public UTexture2DDynamic.FImageLayout Result {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 24, 24);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.ImageDecoder");
            return _staticClass;
        }
    }
}

// Class IpDrv.InternetLink
// 0x2C (0x268 - 0x294)
// (Compiled | Transient | Parsed | Native | Hidden)
public unsafe partial class AInternetLink : AInfo {
    public AInternetLink() { }
    public AInternetLink(nint pointer) : base(pointer) { }


    // ByteProperty IpDrv.InternetLink.LinkMode
    // 0x268 (0x1)
    public ELinkMode LinkMode {
        get => *(ELinkMode*)(Pointer + 616);
        set => *(ELinkMode*)(Pointer + 616) = value;
    }

    // ByteProperty IpDrv.InternetLink.InLineMode
    // 0x269 (0x1)
    public ELineMode InLineMode {
        get => *(ELineMode*)(Pointer + 617);
        set => *(ELineMode*)(Pointer + 617) = value;
    }

    // ByteProperty IpDrv.InternetLink.OutLineMode
    // 0x26A (0x1)
    public ELineMode OutLineMode {
        get => *(ELineMode*)(Pointer + 618);
        set => *(ELineMode*)(Pointer + 618) = value;
    }

    // ByteProperty IpDrv.InternetLink.ReceiveMode
    // 0x26B (0x1)
    public EReceiveMode ReceiveMode {
        get => *(EReceiveMode*)(Pointer + 619);
        set => *(EReceiveMode*)(Pointer + 619) = value;
    }

    // MISSED OFFSET: 0x4

    // StructProperty IpDrv.InternetLink.Socket
    // 0x270 (0x8)
    // (Const)
    public nint Socket {
        get => *(nint*)(Pointer + 624);
        set => *(nint*)(Pointer + 624) = value;
    }

    // IntProperty IpDrv.InternetLink.Port
    // 0x278 (0x4)
    // (Const)
    public int Port {
        get => *(int*)(Pointer + 632);
        set => *(int*)(Pointer + 632) = value;
    }

    // MISSED OFFSET: 0x4

    // StructProperty IpDrv.InternetLink.RemoteSocket
    // 0x280 (0x8)
    // (Const)
    public nint RemoteSocket {
        get => *(nint*)(Pointer + 640);
        set => *(nint*)(Pointer + 640) = value;
    }

    // StructProperty IpDrv.InternetLink.PrivateResolveInfo
    // 0x288 (0x8)
    // (Const | Native)
    public nint PrivateResolveInfo {
        get => *(nint*)(Pointer + 648);
        set => *(nint*)(Pointer + 648) = value;
    }

    // IntProperty IpDrv.InternetLink.DataPending
    // 0x290 (0x4)
    // (Const)
    public int DataPending {
        get => *(int*)(Pointer + 656);
        set => *(int*)(Pointer + 656) = value;
    }


    // Function IpDrv.InternetLink.ResolveFailed
    // 0x3750E0
    // (Final | Event | Public)
    public unsafe class ResolveFailed_Parameters : BaseObject {
        public ResolveFailed_Parameters() { }
        public ResolveFailed_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrResolveFailed;
    public void ResolveFailed() {
        _ptrResolveFailed ??= FindFunction("Function IpDrv.InternetLink.ResolveFailed");

        ProcessEvent(_ptrResolveFailed, null);
    }

    // Function IpDrv.InternetLink.Resolved
    // 0x3750E0
    // (Final | Event | Public)
    public unsafe class Resolved_Parameters : BaseObject {
        public Resolved_Parameters() { }
        public Resolved_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.InternetLink.Resolved.Addr
        // 0x0 (0x14)
        // (Param)
        public FIpAddr Addr {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 20, 20);
        }
    }
    private static UFunction _ptrResolved;
    public void Resolved(FIpAddr Addr) {
        _ptrResolved ??= FindFunction("Function IpDrv.InternetLink.Resolved");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Addr.Pointer, @params, 20, 20);

        ProcessEvent(_ptrResolved, @params);
    }

    // Function IpDrv.InternetLink.GetLocalIP
    // 0xBACF90
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetLocalIP_Parameters : BaseObject {
        public GetLocalIP_Parameters() { }
        public GetLocalIP_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.InternetLink.GetLocalIP.Arg
        // 0x0 (0x14)
        // (Param | OutParam)
        public FIpAddr Arg {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 20, 20);
        }
    }
    private static UFunction _ptrGetLocalIP;
    public void GetLocalIP(ref FIpAddr Arg) {
        _ptrGetLocalIP ??= FindFunction("Function IpDrv.InternetLink.GetLocalIP");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Arg.Pointer, @params, 20, 20);

        _ptrGetLocalIP.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetLocalIP, @params);
        _ptrGetLocalIP.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ArgPtr = Marshal.AllocHGlobal(20);
        System.Buffer.MemoryCopy(@params, (void*)_ArgPtr, 20, 20);
        Arg = new(_ArgPtr) { Allocated = true };
    }

    // Function IpDrv.InternetLink.StringToIpAddr
    // 0xBACDD0
    // (Final | Native | Public | HasOutParams)
    public unsafe class StringToIpAddr_Parameters : BaseObject {
        public StringToIpAddr_Parameters() { }
        public StringToIpAddr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.InternetLink.StringToIpAddr.Str
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Str {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.InternetLink.StringToIpAddr.Addr
        // 0x10 (0x14)
        // (Param | OutParam)
        public FIpAddr Addr {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 20, 20);
        }

        // BoolProperty IpDrv.InternetLink.StringToIpAddr.ReturnValue
        // 0x24 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 36) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 36) |= 0x1;
                else *(uint*)(Pointer + 36) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrStringToIpAddr;
    public bool StringToIpAddr(FString Str, ref FIpAddr Addr) {
        _ptrStringToIpAddr ??= FindFunction("Function IpDrv.InternetLink.StringToIpAddr");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)Str.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Addr.Pointer, @params + 16, 20, 20);

        _ptrStringToIpAddr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrStringToIpAddr, @params);
        _ptrStringToIpAddr.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _AddrPtr = Marshal.AllocHGlobal(20);
        System.Buffer.MemoryCopy(@params + 16, (void*)_AddrPtr, 20, 20);
        Addr = new(_AddrPtr) { Allocated = true };

        return *(bool*)(@params + 36);
    }

    // Function IpDrv.InternetLink.IpAddrToString
    // 0xBACC80
    // (Final | Native | Public)
    public unsafe class IpAddrToString_Parameters : BaseObject {
        public IpAddrToString_Parameters() { }
        public IpAddrToString_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.InternetLink.IpAddrToString.Arg
        // 0x0 (0x14)
        // (Param)
        public FIpAddr Arg {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 20, 20);
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.InternetLink.IpAddrToString.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrIpAddrToString;
    public FString IpAddrToString(FIpAddr Arg) {
        _ptrIpAddrToString ??= FindFunction("Function IpDrv.InternetLink.IpAddrToString");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Arg.Pointer, @params, 20, 20);

        _ptrIpAddrToString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIpAddrToString, @params);
        _ptrIpAddrToString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.InternetLink.GetLastError
    // 0xBACC30
    // (Final | Native | Public)
    public unsafe class GetLastError_Parameters : BaseObject {
        public GetLastError_Parameters() { }
        public GetLastError_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.InternetLink.GetLastError.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetLastError;
    public int GetLastError() {
        _ptrGetLastError ??= FindFunction("Function IpDrv.InternetLink.GetLastError");

        var @params = stackalloc byte[4];

        _ptrGetLastError.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetLastError, @params);
        _ptrGetLastError.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function IpDrv.InternetLink.Resolve
    // 0xBACB80
    // (Final | Native | Public)
    public unsafe class Resolve_Parameters : BaseObject {
        public Resolve_Parameters() { }
        public Resolve_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.InternetLink.Resolve.Domain
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Domain {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrResolve;
    public void Resolve(FString Domain) {
        _ptrResolve ??= FindFunction("Function IpDrv.InternetLink.Resolve");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Domain.Pointer, @params, 16, 16);

        _ptrResolve.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrResolve, @params);
        _ptrResolve.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.InternetLink.ParseURL
    // 0xBAC8D0
    // (Final | Native | Public | HasOutParams)
    public unsafe class ParseURL_Parameters : BaseObject {
        public ParseURL_Parameters() { }
        public ParseURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.InternetLink.ParseURL.URL
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.InternetLink.ParseURL.Addr
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString Addr {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.InternetLink.ParseURL.PortNum
        // 0x20 (0x4)
        // (Param | OutParam)
        public int PortNum {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.InternetLink.ParseURL.LevelName
        // 0x28 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString LevelName {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }

        // StrProperty IpDrv.InternetLink.ParseURL.EntryName
        // 0x38 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString EntryName {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // BoolProperty IpDrv.InternetLink.ParseURL.ReturnValue
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrParseURL;
    public bool ParseURL(FString URL, ref FString Addr, ref int PortNum, ref FString LevelName, ref FString EntryName) {
        _ptrParseURL ??= FindFunction("Function IpDrv.InternetLink.ParseURL");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Addr.Pointer, @params + 16, 16, 16);
        var _PortNum = PortNum;
        System.Buffer.MemoryCopy(&_PortNum, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)LevelName.Pointer, @params + 40, 16, 16);
        System.Buffer.MemoryCopy((void*)EntryName.Pointer, @params + 56, 16, 16);

        _ptrParseURL.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrParseURL, @params);
        _ptrParseURL.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _AddrPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_AddrPtr, 16, 16);
        Addr = new(_AddrPtr) { Allocated = true };
        PortNum = *(int*)(@params + 32);
        var _LevelNamePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_LevelNamePtr, 16, 16);
        LevelName = new(_LevelNamePtr) { Allocated = true };
        var _EntryNamePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_EntryNamePtr, 16, 16);
        EntryName = new(_EntryNamePtr) { Allocated = true };

        return *(bool*)(@params + 72);
    }

    // Function IpDrv.InternetLink.IsDataPending
    // 0xBAC880
    // (Final | Native | Public)
    public unsafe class IsDataPending_Parameters : BaseObject {
        public IsDataPending_Parameters() { }
        public IsDataPending_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.InternetLink.IsDataPending.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsDataPending;
    public bool IsDataPending() {
        _ptrIsDataPending ??= FindFunction("Function IpDrv.InternetLink.IsDataPending");

        var @params = stackalloc byte[4];

        _ptrIsDataPending.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsDataPending, @params);
        _ptrIsDataPending.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }


    // Enum IpDrv.InternetLink.EReceiveMode
    public enum EReceiveMode : byte {
        RMODE_Manual = 0,
        RMODE_Event = 1,
        RMODE_MAX = 2
    }

    // Enum IpDrv.InternetLink.ELineMode
    public enum ELineMode : byte {
        LMODE_auto = 0,
        LMODE_DOS = 1,
        LMODE_UNIX = 2,
        LMODE_MAC = 3,
        LMODE_MAX = 4
    }

    // Enum IpDrv.InternetLink.ELinkMode
    public enum ELinkMode : byte {
        MODE_Text = 0,
        MODE_Line = 1,
        MODE_Binary = 2,
        MODE_MAX = 3
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.InternetLink");
            return _staticClass;
        }
    }
}

// Class IpDrv.TcpLink
// 0x44 (0x294 - 0x2D8)
// (Compiled | Transient | Parsed | Native | Hidden)
public unsafe partial class ATcpLink : AInternetLink {
    public ATcpLink() { }
    public ATcpLink(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x4

    // ByteProperty IpDrv.TcpLink.LinkState
    // 0x298 (0x1)
    public ELinkState LinkState {
        get => *(ELinkState*)(Pointer + 664);
        set => *(ELinkState*)(Pointer + 664) = value;
    }

    // MISSED OFFSET: 0x3

    // StructProperty IpDrv.TcpLink.RemoteAddr
    // 0x29C (0x14)
    public FIpAddr RemoteAddr {
        get => new(Pointer + 668);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 668), 20, 20);
    }

    // ClassProperty IpDrv.TcpLink.AcceptClass
    // 0x2B0 (0x8)
    public UClass AcceptClass {
        get {
            var pointer = *(nint*)(Pointer + 688);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 688) = value.Pointer;
    }

    // ArrayProperty IpDrv.TcpLink.SendFIFO
    // 0x2B8 (0x10)
    // (Const | NeedCtorLink)
    public UnmanagedTArray<byte> SendFIFO {
        get => new(Pointer + 696);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 696), 16, 16);
    }

    // StrProperty IpDrv.TcpLink.RecvBuf
    // 0x2C8 (0x10)
    // (Const | NeedCtorLink)
    public FString RecvBuf {
        get => new(Pointer + 712);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 712), 16, 16);
    }


    // Function IpDrv.TcpLink.ReceivedBinary
    // 0x3750E0
    // (Final | Event | Public)
    public unsafe class ReceivedBinary_Parameters : BaseObject {
        public ReceivedBinary_Parameters() { }
        public ReceivedBinary_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.TcpLink.ReceivedBinary.Count
        // 0x0 (0x4)
        // (Param)
        public int Count {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // ByteProperty IpDrv.TcpLink.ReceivedBinary.B
        // 0x4 (0xFF)
        // (Param)
        // Fixed array size: 255
        public UnmanagedFixedArray<byte> B {
            get => new(Pointer + 4, 255);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 255, 255);
        }
    }
    private static UFunction _ptrReceivedBinary;
    public void ReceivedBinary(int Count, UnmanagedFixedArray<byte> B) {
        _ptrReceivedBinary ??= FindFunction("Function IpDrv.TcpLink.ReceivedBinary");

        var @params = stackalloc byte[259];
        System.Buffer.MemoryCopy(&Count, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 255, 255);

        ProcessEvent(_ptrReceivedBinary, @params);
    }

    // Function IpDrv.TcpLink.ReceivedLine
    // 0x3750E0
    // (Event | Public)
    public unsafe class ReceivedLine_Parameters : BaseObject {
        public ReceivedLine_Parameters() { }
        public ReceivedLine_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TcpLink.ReceivedLine.Line
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Line {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrReceivedLine;
    public void ReceivedLine(FString Line) {
        _ptrReceivedLine ??= FindFunction("Function IpDrv.TcpLink.ReceivedLine");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Line.Pointer, @params, 16, 16);

        ProcessEvent(_ptrReceivedLine, @params);
    }

    // Function IpDrv.TcpLink.ReceivedText
    // 0x3750E0
    // (Event | Public)
    public unsafe class ReceivedText_Parameters : BaseObject {
        public ReceivedText_Parameters() { }
        public ReceivedText_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TcpLink.ReceivedText.Text
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrReceivedText;
    public void ReceivedText(FString Text) {
        _ptrReceivedText ??= FindFunction("Function IpDrv.TcpLink.ReceivedText");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);

        ProcessEvent(_ptrReceivedText, @params);
    }

    // Function IpDrv.TcpLink.Closed
    // 0x3750E0
    // (Event | Public)
    public unsafe class Closed_Parameters : BaseObject {
        public Closed_Parameters() { }
        public Closed_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClosed;
    public void Closed() {
        _ptrClosed ??= FindFunction("Function IpDrv.TcpLink.Closed");

        ProcessEvent(_ptrClosed, null);
    }

    // Function IpDrv.TcpLink.Opened
    // 0x3750E0
    // (Final | Event | Public)
    public unsafe class Opened_Parameters : BaseObject {
        public Opened_Parameters() { }
        public Opened_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOpened;
    public void Opened() {
        _ptrOpened ??= FindFunction("Function IpDrv.TcpLink.Opened");

        ProcessEvent(_ptrOpened, null);
    }

    // Function IpDrv.TcpLink.Accepted
    // 0x3750E0
    // (Event | Public)
    public unsafe class Accepted_Parameters : BaseObject {
        public Accepted_Parameters() { }
        public Accepted_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrAccepted;
    public void Accepted() {
        _ptrAccepted ??= FindFunction("Function IpDrv.TcpLink.Accepted");

        ProcessEvent(_ptrAccepted, null);
    }

    // Function IpDrv.TcpLink.ReadBinary
    // 0xBAF3B0
    // (Final | Native | Public | HasOutParams)
    public unsafe class ReadBinary_Parameters : BaseObject {
        public ReadBinary_Parameters() { }
        public ReadBinary_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.TcpLink.ReadBinary.Count
        // 0x0 (0x4)
        // (Param)
        public int Count {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // ByteProperty IpDrv.TcpLink.ReadBinary.B
        // 0x4 (0xFF)
        // (Param | OutParam)
        // Fixed array size: 255
        public UnmanagedFixedArray<byte> B {
            get => new(Pointer + 4, 255);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 255, 255);
        }

        // MISSED OFFSET: 0x1

        // IntProperty IpDrv.TcpLink.ReadBinary.ReturnValue
        // 0x104 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 260);
            set => *(int*)(Pointer + 260) = value;
        }
    }
    private static UFunction _ptrReadBinary;
    public int ReadBinary(int Count, ref UnmanagedFixedArray<byte> B) {
        _ptrReadBinary ??= FindFunction("Function IpDrv.TcpLink.ReadBinary");

        var @params = stackalloc byte[263];
        System.Buffer.MemoryCopy(&Count, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 255, 255);

        _ptrReadBinary.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrReadBinary, @params);
        _ptrReadBinary.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _BPtr = Marshal.AllocHGlobal(255);
        System.Buffer.MemoryCopy(@params + 4, (void*)_BPtr, 255, 255);
        B = new(_BPtr, 255) { Allocated = true };

        return *(int*)(@params + 260);
    }

    // Function IpDrv.TcpLink.ReadText
    // 0xBAF150
    // (Final | Native | Public | HasOutParams)
    public unsafe class ReadText_Parameters : BaseObject {
        public ReadText_Parameters() { }
        public ReadText_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TcpLink.ReadText.Str
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString Str {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.TcpLink.ReadText.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrReadText;
    public int ReadText(ref FString Str) {
        _ptrReadText ??= FindFunction("Function IpDrv.TcpLink.ReadText");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Str.Pointer, @params, 16, 16);

        _ptrReadText.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrReadText, @params);
        _ptrReadText.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _StrPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_StrPtr, 16, 16);
        Str = new(_StrPtr) { Allocated = true };

        return *(int*)(@params + 16);
    }

    // Function IpDrv.TcpLink.SendBinary
    // 0xBAF030
    // (Final | Native | Public)
    public unsafe class SendBinary_Parameters : BaseObject {
        public SendBinary_Parameters() { }
        public SendBinary_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.TcpLink.SendBinary.Count
        // 0x0 (0x4)
        // (Param)
        public int Count {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // ByteProperty IpDrv.TcpLink.SendBinary.B
        // 0x4 (0xFF)
        // (Param)
        // Fixed array size: 255
        public UnmanagedFixedArray<byte> B {
            get => new(Pointer + 4, 255);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 255, 255);
        }

        // MISSED OFFSET: 0x1

        // IntProperty IpDrv.TcpLink.SendBinary.ReturnValue
        // 0x104 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 260);
            set => *(int*)(Pointer + 260) = value;
        }
    }
    private static UFunction _ptrSendBinary;
    public int SendBinary(int Count, UnmanagedFixedArray<byte> B) {
        _ptrSendBinary ??= FindFunction("Function IpDrv.TcpLink.SendBinary");

        var @params = stackalloc byte[263];
        System.Buffer.MemoryCopy(&Count, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 255, 255);

        _ptrSendBinary.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendBinary, @params);
        _ptrSendBinary.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 260);
    }

    // Function IpDrv.TcpLink.SendText
    // 0xBAEF70
    // (Final | Native | Public)
    public unsafe class SendText_Parameters : BaseObject {
        public SendText_Parameters() { }
        public SendText_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TcpLink.SendText.Str
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Str {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.TcpLink.SendText.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrSendText;
    public int SendText(FString Str) {
        _ptrSendText ??= FindFunction("Function IpDrv.TcpLink.SendText");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Str.Pointer, @params, 16, 16);

        _ptrSendText.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendText, @params);
        _ptrSendText.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function IpDrv.TcpLink.IsConnected
    // 0xBAEED0
    // (Final | Native | Public)
    public unsafe class IsConnected_Parameters : BaseObject {
        public IsConnected_Parameters() { }
        public IsConnected_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.TcpLink.IsConnected.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsConnected;
    public bool IsConnected() {
        _ptrIsConnected ??= FindFunction("Function IpDrv.TcpLink.IsConnected");

        var @params = stackalloc byte[4];

        _ptrIsConnected.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsConnected, @params);
        _ptrIsConnected.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.TcpLink.Close
    // 0xBAEE30
    // (Final | Native | Public)
    public unsafe class Close_Parameters : BaseObject {
        public Close_Parameters() { }
        public Close_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.TcpLink.Close.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClose;
    public bool Close() {
        _ptrClose ??= FindFunction("Function IpDrv.TcpLink.Close");

        var @params = stackalloc byte[4];

        _ptrClose.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClose, @params);
        _ptrClose.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.TcpLink.Open
    // 0xBAECE0
    // (Final | Native | Public)
    public unsafe class Open_Parameters : BaseObject {
        public Open_Parameters() { }
        public Open_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.TcpLink.Open.Addr
        // 0x0 (0x14)
        // (Param)
        public FIpAddr Addr {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 20, 20);
        }

        // BoolProperty IpDrv.TcpLink.Open.ReturnValue
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOpen;
    public bool Open(FIpAddr Addr) {
        _ptrOpen ??= FindFunction("Function IpDrv.TcpLink.Open");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Addr.Pointer, @params, 20, 20);

        _ptrOpen.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrOpen, @params);
        _ptrOpen.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 20);
    }

    // Function IpDrv.TcpLink.Listen
    // 0xBAEBF0
    // (Final | Native | Public)
    public unsafe class Listen_Parameters : BaseObject {
        public Listen_Parameters() { }
        public Listen_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.TcpLink.Listen.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrListen;
    public bool Listen() {
        _ptrListen ??= FindFunction("Function IpDrv.TcpLink.Listen");

        var @params = stackalloc byte[4];

        _ptrListen.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrListen, @params);
        _ptrListen.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.TcpLink.BindPort
    // 0xBAEB20
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class BindPort_Parameters : BaseObject {
        public BindPort_Parameters() { }
        public BindPort_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.TcpLink.BindPort.PortNum
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public int PortNum {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // BoolProperty IpDrv.TcpLink.BindPort.bUseNextAvailable
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bUseNextAvailable {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }

        // IntProperty IpDrv.TcpLink.BindPort.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrBindPort;
    public int BindPort(int PortNum = 0, bool bUseNextAvailable = false) {
        _ptrBindPort ??= FindFunction("Function IpDrv.TcpLink.BindPort");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&PortNum, @params, 4, 4);
        System.Buffer.MemoryCopy(&bUseNextAvailable, @params + 4, 4, 4);

        _ptrBindPort.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrBindPort, @params);
        _ptrBindPort.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 8);
    }


    // Enum IpDrv.TcpLink.ELinkState
    public enum ELinkState : byte {
        STATE_Initialized = 0,
        STATE_Ready = 1,
        STATE_Listening = 2,
        STATE_Connecting = 3,
        STATE_Connected = 4,
        STATE_ListenClosePending = 5,
        STATE_ConnectClosePending = 6,
        STATE_ListenClosing = 7,
        STATE_ConnectClosing = 8,
        STATE_MAX = 9
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.TcpLink");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpServiceBase
// 0x18 (0x60 - 0x78)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UMcpServiceBase : UObject {
    public UMcpServiceBase() { }
    public UMcpServiceBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpServiceBase.McpConfigClassName
    // 0x60 (0x10)
    // (Config | NeedCtorLink)
    public FString McpConfigClassName {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // ObjectProperty IpDrv.McpServiceBase.McpConfig
    // 0x70 (0x8)
    public UMcpServiceConfig McpConfig {
        get {
            var pointer = *(nint*)(Pointer + 112);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 112) = value.Pointer;
    }


    // Function IpDrv.McpServiceBase.GetUserAuthURL
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetUserAuthURL_Parameters : BaseObject {
        public GetUserAuthURL_Parameters() { }
        public GetUserAuthURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpServiceBase.GetUserAuthURL.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpServiceBase.GetUserAuthURL.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetUserAuthURL;
    public FString GetUserAuthURL(FString McpId) {
        _ptrGetUserAuthURL ??= FindFunction("Function IpDrv.McpServiceBase.GetUserAuthURL");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetUserAuthURL, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.McpServiceBase.GetAppAccessURL
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetAppAccessURL_Parameters : BaseObject {
        public GetAppAccessURL_Parameters() { }
        public GetAppAccessURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpServiceBase.GetAppAccessURL.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetAppAccessURL;
    public FString GetAppAccessURL() {
        _ptrGetAppAccessURL ??= FindFunction("Function IpDrv.McpServiceBase.GetAppAccessURL");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetAppAccessURL, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.McpServiceBase.GetBaseURL
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetBaseURL_Parameters : BaseObject {
        public GetBaseURL_Parameters() { }
        public GetBaseURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpServiceBase.GetBaseURL.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetBaseURL;
    public FString GetBaseURL() {
        _ptrGetBaseURL ??= FindFunction("Function IpDrv.McpServiceBase.GetBaseURL");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetBaseURL, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.McpServiceBase.Init
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Init_Parameters : BaseObject {
        public Init_Parameters() { }
        public Init_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrInit;
    public void Init() {
        _ptrInit ??= FindFunction("Function IpDrv.McpServiceBase.Init");

        ProcessEvent(_ptrInit, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpServiceBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.MCPBase
// 0x8 (0x78 - 0x80)
// (Abstract | Compiled | Config | Parsed | Native)
public unsafe partial class UMCPBase : UMcpServiceBase {
    public UMCPBase() { }
    public UMCPBase(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.MCPBase.VfTable_FTickableObject
    // 0x78 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FTickableObject {
        get => *(nint*)(Pointer + 120);
        set => *(nint*)(Pointer + 120) = value;
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.MCPBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineEventsInterfaceMcp
// 0x34 (0x80 - 0xB4)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineEventsInterfaceMcp : UMCPBase {
    public UOnlineEventsInterfaceMcp() { }
    public UOnlineEventsInterfaceMcp(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.OnlineEventsInterfaceMcp.EventUploadConfigs
    // 0x80 (0x10)
    // (Const | Config | NeedCtorLink)
    public StructTArray<FEventUploadConfig> EventUploadConfigs {
        get => new(Pointer + 128, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineEventsInterfaceMcp.MCPEventPostObjects
    // 0x90 (0x10)
    // (Const | Native)
    public UnmanagedTArray<nint> MCPEventPostObjects {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineEventsInterfaceMcp.DisabledUploadTypes
    // 0xA0 (0x10)
    // (Config | NeedCtorLink)
    public UnmanagedTArray<EEventUploadType> DisabledUploadTypes {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // BoolProperty IpDrv.OnlineEventsInterfaceMcp.bBinaryStats
    // 0xB0 (0x4)
    // Bitmask: 0x00000001
    // (Const | Config)
    public bool bBinaryStats {
        get => (*(uint*)(Pointer + 176) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 176) |= 0x1;
            else *(uint*)(Pointer + 176) &= ~(uint)0x1;
        }
    }


    // Function IpDrv.OnlineEventsInterfaceMcp.UploadMatchmakingStats
    // 0xBB07E0
    // (Final | Native | Public)
    public unsafe class UploadMatchmakingStats_Parameters : BaseObject {
        public UploadMatchmakingStats_Parameters() { }
        public UploadMatchmakingStats_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineEventsInterfaceMcp.UploadMatchmakingStats.UniqueId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId UniqueId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ObjectProperty IpDrv.OnlineEventsInterfaceMcp.UploadMatchmakingStats.MMStats
        // 0x48 (0x8)
        // (Param)
        public UOnlineMatchmakingStats MMStats {
            get {
                var pointer = *(nint*)(Pointer + 72);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 72) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineEventsInterfaceMcp.UploadMatchmakingStats.ReturnValue
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUploadMatchmakingStats;
    public bool UploadMatchmakingStats(U_Types_Core.FUniqueNetId UniqueId, UOnlineMatchmakingStats MMStats) {
        _ptrUploadMatchmakingStats ??= FindFunction("Function IpDrv.OnlineEventsInterfaceMcp.UploadMatchmakingStats");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)UniqueId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)MMStats.Pointer, @params + 72, 8, 8);

        _ptrUploadMatchmakingStats.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUploadMatchmakingStats, @params);
        _ptrUploadMatchmakingStats.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 80);
    }

    // Function IpDrv.OnlineEventsInterfaceMcp.UpdatePlaylistPopulation
    // 0xBB0730
    // (Final | Native | Public)
    public unsafe class UpdatePlaylistPopulation_Parameters : BaseObject {
        public UpdatePlaylistPopulation_Parameters() { }
        public UpdatePlaylistPopulation_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineEventsInterfaceMcp.UpdatePlaylistPopulation.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineEventsInterfaceMcp.UpdatePlaylistPopulation.NumPlayers
        // 0x4 (0x4)
        // (Param)
        public int NumPlayers {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty IpDrv.OnlineEventsInterfaceMcp.UpdatePlaylistPopulation.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUpdatePlaylistPopulation;
    public bool UpdatePlaylistPopulation(int PlaylistId, int NumPlayers) {
        _ptrUpdatePlaylistPopulation ??= FindFunction("Function IpDrv.OnlineEventsInterfaceMcp.UpdatePlaylistPopulation");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        System.Buffer.MemoryCopy(&NumPlayers, @params + 4, 4, 4);

        _ptrUpdatePlaylistPopulation.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUpdatePlaylistPopulation, @params);
        _ptrUpdatePlaylistPopulation.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineEventsInterfaceMcp.UploadGameplayEventsData
    // 0xBB04F0
    // (Final | Native | Public | HasOutParams)
    public unsafe class UploadGameplayEventsData_Parameters : BaseObject {
        public UploadGameplayEventsData_Parameters() { }
        public UploadGameplayEventsData_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineEventsInterfaceMcp.UploadGameplayEventsData.UniqueId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId UniqueId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ArrayProperty IpDrv.OnlineEventsInterfaceMcp.UploadGameplayEventsData.Payload
        // 0x48 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Payload {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // BoolProperty IpDrv.OnlineEventsInterfaceMcp.UploadGameplayEventsData.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUploadGameplayEventsData;
    public bool UploadGameplayEventsData(U_Types_Core.FUniqueNetId UniqueId, ref UnmanagedTArray<byte> Payload) {
        _ptrUploadGameplayEventsData ??= FindFunction("Function IpDrv.OnlineEventsInterfaceMcp.UploadGameplayEventsData");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)UniqueId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)Payload.Pointer, @params + 72, 16, 16);

        _ptrUploadGameplayEventsData.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUploadGameplayEventsData, @params);
        _ptrUploadGameplayEventsData.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PayloadPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 72, (void*)_PayloadPtr, 16, 16);
        Payload = new(_PayloadPtr) { Allocated = true };

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData
    // 0xBB02F0
    // (Final | Native | Public)
    public unsafe class UploadPlayerData_Parameters : BaseObject {
        public UploadPlayerData_Parameters() { }
        public UploadPlayerData_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData.UniqueId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId UniqueId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StrProperty IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData.PlayerNick
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString PlayerNick {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // ObjectProperty IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData.ProfileSettings
        // 0x58 (0x8)
        // (Param)
        public UOnlineProfileSettings ProfileSettings {
            get {
                var pointer = *(nint*)(Pointer + 88);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 88) = value.Pointer;
        }

        // ObjectProperty IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData.PlayerStorage
        // 0x60 (0x8)
        // (Param)
        public UOnlinePlayerStorage PlayerStorage {
            get {
                var pointer = *(nint*)(Pointer + 96);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 96) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUploadPlayerData;
    public bool UploadPlayerData(U_Types_Core.FUniqueNetId UniqueId, FString PlayerNick, UOnlineProfileSettings ProfileSettings, UOnlinePlayerStorage PlayerStorage) {
        _ptrUploadPlayerData ??= FindFunction("Function IpDrv.OnlineEventsInterfaceMcp.UploadPlayerData");

        var @params = stackalloc byte[108];
        System.Buffer.MemoryCopy((void*)UniqueId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)PlayerNick.Pointer, @params + 72, 16, 16);
        System.Buffer.MemoryCopy((void*)ProfileSettings.Pointer, @params + 88, 8, 8);
        System.Buffer.MemoryCopy((void*)PlayerStorage.Pointer, @params + 96, 8, 8);

        _ptrUploadPlayerData.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUploadPlayerData, @params);
        _ptrUploadPlayerData.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 104);
    }


    // ScriptStruct IpDrv.OnlineEventsInterfaceMcp.EventUploadConfig
    // 0x20
    public unsafe class FEventUploadConfig : BaseObject {
        public FEventUploadConfig() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FEventUploadConfig(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineEventsInterfaceMcp.EventUploadConfig.UploadType
        // 0x0 (0x1)
        // (Const)
        public EEventUploadType UploadType {
            get => *(EEventUploadType*)Pointer;
            set => *(EEventUploadType*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.OnlineEventsInterfaceMcp.EventUploadConfig.UploadUrl
        // 0x8 (0x10)
        // (Const | NeedCtorLink)
        public FString UploadUrl {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // FloatProperty IpDrv.OnlineEventsInterfaceMcp.EventUploadConfig.Timeout
        // 0x18 (0x4)
        // (Const)
        public float Timeout {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // BoolProperty IpDrv.OnlineEventsInterfaceMcp.EventUploadConfig.bUseCompression
        // 0x1C (0x4)
        // Bitmask: 0x00000001
        // (Const)
        public bool bUseCompression {
            get => (*(uint*)(Pointer + 28) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 28) |= 0x1;
                else *(uint*)(Pointer + 28) &= ~(uint)0x1;
            }
        }
    }


    // Enum IpDrv.OnlineEventsInterfaceMcp.EEventUploadType
    public enum EEventUploadType : byte {
        EUT_GenericStats = 0,
        EUT_ProfileData = 1,
        EUT_MatchmakingData = 2,
        EUT_PlaylistPopulation = 3,
        EUT_MAX = 4
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineEventsInterfaceMcp");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineNewsInterfaceMcp
// 0x40 (0x80 - 0xC0)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineNewsInterfaceMcp : UMCPBase {
    public UOnlineNewsInterfaceMcp() { }
    public UOnlineNewsInterfaceMcp(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.OnlineNewsInterfaceMcp.NewsItems
    // 0x80 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FNewsCacheEntry> NewsItems {
        get => new(Pointer + 128, 56);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineNewsInterfaceMcp.ReadNewsDelegates
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ReadNewsDelegates {
        get => new(Pointer + 144, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // BoolProperty IpDrv.OnlineNewsInterfaceMcp.bNeedsTicking
    // 0xA0 (0x4)
    // Bitmask: 0x00000001
    // (Transient)
    public bool bNeedsTicking {
        get => (*(uint*)(Pointer + 160) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 160) |= 0x1;
            else *(uint*)(Pointer + 160) &= ~(uint)0x1;
        }
    }

    // MISSED OFFSET: 0x4

    // DelegateProperty IpDrv.OnlineNewsInterfaceMcp.__OnReadNewsCompleted__Delegate
    // 0xA8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReadNewsCompleted__Delegate {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 24, 24);
    }


    // Function IpDrv.OnlineNewsInterfaceMcp.GetNews
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetNews_Parameters : BaseObject {
        public GetNews_Parameters() { }
        public GetNews_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.GetNews.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.GetNews.NewsType
        // 0x1 (0x1)
        // (Param)
        public UOnlineSubsystem.EOnlineNewsType NewsType {
            get => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 1);
            set => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 1) = value;
        }

        // MISSED OFFSET: 0x6

        // StrProperty IpDrv.OnlineNewsInterfaceMcp.GetNews.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetNews;
    public FString GetNews(byte LocalUserNum, UOnlineSubsystem.EOnlineNewsType NewsType) {
        _ptrGetNews ??= FindFunction("Function IpDrv.OnlineNewsInterfaceMcp.GetNews");

        var @params = stackalloc byte[18];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy(&NewsType, @params + 1, 1, 1);

        ProcessEvent(_ptrGetNews, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineNewsInterfaceMcp.ClearReadNewsCompletedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearReadNewsCompletedDelegate_Parameters : BaseObject {
        public ClearReadNewsCompletedDelegate_Parameters() { }
        public ClearReadNewsCompletedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineNewsInterfaceMcp.ClearReadNewsCompletedDelegate.ReadGameNewsDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadGameNewsDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearReadNewsCompletedDelegate;
    public void ClearReadNewsCompletedDelegate(FScriptDelegate ReadGameNewsDelegate) {
        _ptrClearReadNewsCompletedDelegate ??= FindFunction("Function IpDrv.OnlineNewsInterfaceMcp.ClearReadNewsCompletedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ReadGameNewsDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearReadNewsCompletedDelegate, @params);
    }

    // Function IpDrv.OnlineNewsInterfaceMcp.AddReadNewsCompletedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddReadNewsCompletedDelegate_Parameters : BaseObject {
        public AddReadNewsCompletedDelegate_Parameters() { }
        public AddReadNewsCompletedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineNewsInterfaceMcp.AddReadNewsCompletedDelegate.ReadNewsDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadNewsDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddReadNewsCompletedDelegate;
    public void AddReadNewsCompletedDelegate(FScriptDelegate ReadNewsDelegate) {
        _ptrAddReadNewsCompletedDelegate ??= FindFunction("Function IpDrv.OnlineNewsInterfaceMcp.AddReadNewsCompletedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ReadNewsDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddReadNewsCompletedDelegate, @params);
    }

    // Function IpDrv.OnlineNewsInterfaceMcp.OnReadNewsCompleted
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReadNewsCompleted_Parameters : BaseObject {
        public OnReadNewsCompleted_Parameters() { }
        public OnReadNewsCompleted_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineNewsInterfaceMcp.OnReadNewsCompleted.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.OnReadNewsCompleted.NewsType
        // 0x4 (0x1)
        // (Param)
        public UOnlineSubsystem.EOnlineNewsType NewsType {
            get => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 4);
            set => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrOnReadNewsCompleted;
    public void OnReadNewsCompleted(bool bWasSuccessful, UOnlineSubsystem.EOnlineNewsType NewsType) {
        _ptrOnReadNewsCompleted ??= FindFunction("Function IpDrv.OnlineNewsInterfaceMcp.OnReadNewsCompleted");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy(&NewsType, @params + 4, 1, 1);

        ProcessEvent(_ptrOnReadNewsCompleted, @params);
    }

    // Function IpDrv.OnlineNewsInterfaceMcp.ReadNews
    // 0xBB2F70
    // (Final | Native | Public)
    public unsafe class ReadNews_Parameters : BaseObject {
        public ReadNews_Parameters() { }
        public ReadNews_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.ReadNews.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.ReadNews.NewsType
        // 0x1 (0x1)
        // (Param)
        public UOnlineSubsystem.EOnlineNewsType NewsType {
            get => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 1);
            set => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 1) = value;
        }

        // MISSED OFFSET: 0x2

        // BoolProperty IpDrv.OnlineNewsInterfaceMcp.ReadNews.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadNews;
    public bool ReadNews(byte LocalUserNum, UOnlineSubsystem.EOnlineNewsType NewsType) {
        _ptrReadNews ??= FindFunction("Function IpDrv.OnlineNewsInterfaceMcp.ReadNews");

        var @params = stackalloc byte[6];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy(&NewsType, @params + 1, 1, 1);

        _ptrReadNews.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrReadNews, @params);
        _ptrReadNews.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 4);
    }


    // ScriptStruct IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry
    // 0x38
    public unsafe class FNewsCacheEntry : BaseObject {
        public FNewsCacheEntry() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FNewsCacheEntry(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.NewsUrl
        // 0x0 (0x10)
        // (Const | NeedCtorLink)
        public FString NewsUrl {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.ReadState
        // 0x10 (0x1)
        public UOnlineSubsystem.EOnlineEnumerationReadState ReadState {
            get => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16) = value;
        }

        // ByteProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.NewsType
        // 0x11 (0x1)
        // (Const)
        public UOnlineSubsystem.EOnlineNewsType NewsType {
            get => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 17);
            set => *(UOnlineSubsystem.EOnlineNewsType*)(Pointer + 17) = value;
        }

        // MISSED OFFSET: 0x6

        // StrProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.NewsItem
        // 0x18 (0x10)
        // (NeedCtorLink)
        public FString NewsItem {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // FloatProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.Timeout
        // 0x28 (0x4)
        // (Const)
        public float Timeout {
            get => *(float*)(Pointer + 40);
            set => *(float*)(Pointer + 40) = value;
        }

        // BoolProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.bIsUnicode
        // 0x2C (0x4)
        // Bitmask: 0x00000001
        // (Const)
        public bool bIsUnicode {
            get => (*(uint*)(Pointer + 44) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 44) |= 0x1;
                else *(uint*)(Pointer + 44) &= ~(uint)0x1;
            }
        }

        // StructProperty IpDrv.OnlineNewsInterfaceMcp.NewsCacheEntry.HttpDownloader
        // 0x30 (0x8)
        // (Const | Native)
        public nint HttpDownloader {
            get => *(nint*)(Pointer + 48);
            set => *(nint*)(Pointer + 48) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineNewsInterfaceMcp");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineTitleFileDownloadBase
// 0x98 (0x80 - 0x118)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineTitleFileDownloadBase : UMCPBase {
    public UOnlineTitleFileDownloadBase() { }
    public UOnlineTitleFileDownloadBase(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.OnlineTitleFileDownloadBase.ReadTitleFileCompleteDelegates
    // 0x80 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ReadTitleFileCompleteDelegates {
        get => new(Pointer + 128, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineTitleFileDownloadBase.RequestTitleFileListCompleteDelegates
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> RequestTitleFileListCompleteDelegates {
        get => new(Pointer + 144, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // StrProperty IpDrv.OnlineTitleFileDownloadBase.BaseUrl
    // 0xA0 (0x10)
    // (Config | NeedCtorLink)
    public FString BaseUrl {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // StrProperty IpDrv.OnlineTitleFileDownloadBase.RequestFileListURL
    // 0xB0 (0x10)
    // (Config | NeedCtorLink)
    public FString RequestFileListURL {
        get => new(Pointer + 176);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 16, 16);
    }

    // StrProperty IpDrv.OnlineTitleFileDownloadBase.RequestFileURL
    // 0xC0 (0x10)
    // (Config | NeedCtorLink)
    public FString RequestFileURL {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 16, 16);
    }

    // FloatProperty IpDrv.OnlineTitleFileDownloadBase.Timeout
    // 0xD0 (0x4)
    // (Config)
    public float Timeout {
        get => *(float*)(Pointer + 208);
        set => *(float*)(Pointer + 208) = value;
    }

    // MISSED OFFSET: 0x4

    // ArrayProperty IpDrv.OnlineTitleFileDownloadBase.FilesToUrls
    // 0xD8 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FFileNameToURLMapping> FilesToUrls {
        get => new(Pointer + 216, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 16, 16);
    }

    // DelegateProperty IpDrv.OnlineTitleFileDownloadBase.__OnReadTitleFileComplete__Delegate
    // 0xE8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReadTitleFileComplete__Delegate {
        get => new(Pointer + 232);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineTitleFileDownloadBase.__OnRequestTitleFileListComplete__Delegate
    // 0x100 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnRequestTitleFileListComplete__Delegate {
        get => new(Pointer + 256);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 24, 24);
    }


    // Function IpDrv.OnlineTitleFileDownloadBase.GetUrlForFile
    // 0x67C7E0
    // (Native | Public)
    public unsafe class GetUrlForFile_Parameters : BaseObject {
        public GetUrlForFile_Parameters() { }
        public GetUrlForFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.GetUrlForFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.GetUrlForFile.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetUrlForFile;
    public FString GetUrlForFile(FString Filename) {
        _ptrGetUrlForFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.GetUrlForFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrGetUrlForFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetUrlForFile, @params);
        _ptrGetUrlForFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.ClearRequestTitleFileListCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearRequestTitleFileListCompleteDelegate_Parameters : BaseObject {
        public ClearRequestTitleFileListCompleteDelegate_Parameters() { }
        public ClearRequestTitleFileListCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineTitleFileDownloadBase.ClearRequestTitleFileListCompleteDelegate.RequestTitleFileListDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate RequestTitleFileListDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearRequestTitleFileListCompleteDelegate;
    public void ClearRequestTitleFileListCompleteDelegate(FScriptDelegate RequestTitleFileListDelegate) {
        _ptrClearRequestTitleFileListCompleteDelegate ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.ClearRequestTitleFileListCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)RequestTitleFileListDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearRequestTitleFileListCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.AddRequestTitleFileListCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddRequestTitleFileListCompleteDelegate_Parameters : BaseObject {
        public AddRequestTitleFileListCompleteDelegate_Parameters() { }
        public AddRequestTitleFileListCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineTitleFileDownloadBase.AddRequestTitleFileListCompleteDelegate.RequestTitleFileListDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate RequestTitleFileListDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddRequestTitleFileListCompleteDelegate;
    public void AddRequestTitleFileListCompleteDelegate(FScriptDelegate RequestTitleFileListDelegate) {
        _ptrAddRequestTitleFileListCompleteDelegate ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.AddRequestTitleFileListCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)RequestTitleFileListDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddRequestTitleFileListCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.OnRequestTitleFileListComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnRequestTitleFileListComplete_Parameters : BaseObject {
        public OnRequestTitleFileListComplete_Parameters() { }
        public OnRequestTitleFileListComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.OnRequestTitleFileListComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlineTitleFileDownloadBase.OnRequestTitleFileListComplete.ResultStr
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> ResultStr {
            get => new(Pointer + 8, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnRequestTitleFileListComplete;
    public void OnRequestTitleFileListComplete(bool bWasSuccessful, StructTArray<FString> ResultStr) {
        _ptrOnRequestTitleFileListComplete ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.OnRequestTitleFileListComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)ResultStr.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnRequestTitleFileListComplete, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.RequestTitleFileList
    // 0x3750E0
    // (Public)
    public unsafe class RequestTitleFileList_Parameters : BaseObject {
        public RequestTitleFileList_Parameters() { }
        public RequestTitleFileList_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.RequestTitleFileList.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestTitleFileList;
    public bool RequestTitleFileList() {
        _ptrRequestTitleFileList ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.RequestTitleFileList");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrRequestTitleFileList, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFile
    // 0x3750E0
    // (Public)
    public unsafe class ClearDownloadedFile_Parameters : BaseObject {
        public ClearDownloadedFile_Parameters() { }
        public ClearDownloadedFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearDownloadedFile;
    public bool ClearDownloadedFile(FString Filename) {
        _ptrClearDownloadedFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        ProcessEvent(_ptrClearDownloadedFile, @params);

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFiles
    // 0x3750E0
    // (Public)
    public unsafe class ClearDownloadedFiles_Parameters : BaseObject {
        public ClearDownloadedFiles_Parameters() { }
        public ClearDownloadedFiles_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFiles.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearDownloadedFiles;
    public bool ClearDownloadedFiles() {
        _ptrClearDownloadedFiles ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.ClearDownloadedFiles");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrClearDownloadedFiles, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.GetTitleFileState
    // 0x3750E0
    // (Public)
    public unsafe class GetTitleFileState_Parameters : BaseObject {
        public GetTitleFileState_Parameters() { }
        public GetTitleFileState_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.GetTitleFileState.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadBase.GetTitleFileState.ReturnValue
        // 0x10 (0x1)
        // (Param | OutParam | ReturnParam)
        public UOnlineSubsystem.EOnlineEnumerationReadState ReturnValue {
            get => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetTitleFileState;
    public UOnlineSubsystem.EOnlineEnumerationReadState GetTitleFileState(FString Filename) {
        _ptrGetTitleFileState ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.GetTitleFileState");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetTitleFileState, @params);

        return *(UOnlineSubsystem.EOnlineEnumerationReadState*)(@params + 16);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.GetTitleFileContents
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetTitleFileContents_Parameters : BaseObject {
        public GetTitleFileContents_Parameters() { }
        public GetTitleFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.GetTitleFileContents.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.OnlineTitleFileDownloadBase.GetTitleFileContents.FileContents
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.GetTitleFileContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetTitleFileContents;
    public bool GetTitleFileContents(FString Filename, ref UnmanagedTArray<byte> FileContents) {
        _ptrGetTitleFileContents ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.GetTitleFileContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetTitleFileContents, @params);

        var _FileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_FileContentsPtr, 16, 16);
        FileContents = new(_FileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.ClearReadTitleFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearReadTitleFileCompleteDelegate_Parameters : BaseObject {
        public ClearReadTitleFileCompleteDelegate_Parameters() { }
        public ClearReadTitleFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineTitleFileDownloadBase.ClearReadTitleFileCompleteDelegate.ReadTitleFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadTitleFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearReadTitleFileCompleteDelegate;
    public void ClearReadTitleFileCompleteDelegate(FScriptDelegate ReadTitleFileCompleteDelegate) {
        _ptrClearReadTitleFileCompleteDelegate ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.ClearReadTitleFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ReadTitleFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearReadTitleFileCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.AddReadTitleFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddReadTitleFileCompleteDelegate_Parameters : BaseObject {
        public AddReadTitleFileCompleteDelegate_Parameters() { }
        public AddReadTitleFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineTitleFileDownloadBase.AddReadTitleFileCompleteDelegate.ReadTitleFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadTitleFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddReadTitleFileCompleteDelegate;
    public void AddReadTitleFileCompleteDelegate(FScriptDelegate ReadTitleFileCompleteDelegate) {
        _ptrAddReadTitleFileCompleteDelegate ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.AddReadTitleFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ReadTitleFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddReadTitleFileCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.ReadTitleFile
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class ReadTitleFile_Parameters : BaseObject {
        public ReadTitleFile_Parameters() { }
        public ReadTitleFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.ReadTitleFile.FileToRead
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FileToRead {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadBase.ReadTitleFile.FileType
        // 0x10 (0x1)
        // (OptionalParam | Param)
        public UOnlineSubsystem.EOnlineFileType FileType {
            get => *(UOnlineSubsystem.EOnlineFileType*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineFileType*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.ReadTitleFile.ReturnValue
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadTitleFile;
    public bool ReadTitleFile(FString FileToRead, UOnlineSubsystem.EOnlineFileType FileType = 0) {
        _ptrReadTitleFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.ReadTitleFile");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy((void*)FileToRead.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&FileType, @params + 16, 1, 1);

        ProcessEvent(_ptrReadTitleFile, @params);

        return *(bool*)(@params + 20);
    }

    // Function IpDrv.OnlineTitleFileDownloadBase.OnReadTitleFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReadTitleFileComplete_Parameters : BaseObject {
        public OnReadTitleFileComplete_Parameters() { }
        public OnReadTitleFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadBase.OnReadTitleFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.OnReadTitleFileComplete.Filename
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnReadTitleFileComplete;
    public void OnReadTitleFileComplete(bool bWasSuccessful, FString Filename) {
        _ptrOnReadTitleFileComplete ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadBase.OnReadTitleFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnReadTitleFileComplete, @params);
    }


    // ScriptStruct IpDrv.OnlineTitleFileDownloadBase.FileNameToURLMapping
    // 0x10
    public unsafe class FFileNameToURLMapping : BaseObject {
        public FFileNameToURLMapping() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FFileNameToURLMapping(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineTitleFileDownloadBase.FileNameToURLMapping.Filename
        // 0x0 (0x8)
        public FName Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // NameProperty IpDrv.OnlineTitleFileDownloadBase.FileNameToURLMapping.UrlMapping
        // 0x8 (0x8)
        public FName UrlMapping {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }
    }

    // ScriptStruct IpDrv.OnlineTitleFileDownloadBase.TitleFileWeb
    // 0x19 (0x28 - 0x41)
    public unsafe class FTitleFileWeb : UOnlineSubsystem.FTitleFile {
        public FTitleFileWeb() {
            Pointer = Marshal.AllocHGlobal(65);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 65);
            Allocated = true;
        }
        public FTitleFileWeb(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadBase.TitleFileWeb.StringData
        // 0x28 (0x10)
        // (NeedCtorLink)
        public FString StringData {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }

        // ObjectProperty IpDrv.OnlineTitleFileDownloadBase.TitleFileWeb.HTTPRequest
        // 0x38 (0x8)
        public UHttpRequestInterface HTTPRequest {
            get {
                var pointer = *(nint*)(Pointer + 56);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 56) = value.Pointer;
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadBase.TitleFileWeb.FileCompressionType
        // 0x40 (0x1)
        public EMcpFileCompressionType FileCompressionType {
            get => *(EMcpFileCompressionType*)(Pointer + 64);
            set => *(EMcpFileCompressionType*)(Pointer + 64) = value;
        }
    }


    // Enum IpDrv.OnlineTitleFileDownloadBase.EMcpFileCompressionType
    public enum EMcpFileCompressionType : byte {
        MFCT_NONE = 0,
        MFCT_ZLIB = 1,
        MFCT_MAX = 2
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineTitleFileDownloadBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineTitleFileDownloadMcp
// 0x14 (0x118 - 0x12C)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineTitleFileDownloadMcp : UOnlineTitleFileDownloadBase {
    public UOnlineTitleFileDownloadMcp() { }
    public UOnlineTitleFileDownloadMcp(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.OnlineTitleFileDownloadMcp.TitleFiles
    // 0x118 (0x10)
    // (NeedCtorLink)
    public StructTArray<FTitleFileMcp> TitleFiles {
        get => new(Pointer + 280, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // IntProperty IpDrv.OnlineTitleFileDownloadMcp.DownloadCount
    // 0x128 (0x4)
    // (Transient)
    public int DownloadCount {
        get => *(int*)(Pointer + 296);
        set => *(int*)(Pointer + 296) = value;
    }


    // Function IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFile
    // 0xBA8820
    // (Native | Public)
    public unsafe class ClearDownloadedFile_Parameters : BaseObject {
        public ClearDownloadedFile_Parameters() { }
        public ClearDownloadedFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearDownloadedFile;
    public bool ClearDownloadedFile(FString Filename) {
        _ptrClearDownloadedFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrClearDownloadedFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearDownloadedFile, @params);
        _ptrClearDownloadedFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFiles
    // 0xBA8690
    // (Native | Public)
    public unsafe class ClearDownloadedFiles_Parameters : BaseObject {
        public ClearDownloadedFiles_Parameters() { }
        public ClearDownloadedFiles_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFiles.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearDownloadedFiles;
    public bool ClearDownloadedFiles() {
        _ptrClearDownloadedFiles ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadMcp.ClearDownloadedFiles");

        var @params = stackalloc byte[4];

        _ptrClearDownloadedFiles.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearDownloadedFiles, @params);
        _ptrClearDownloadedFiles.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileState
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetTitleFileState_Parameters : BaseObject {
        public GetTitleFileState_Parameters() { }
        public GetTitleFileState_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileState.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileState.ReturnValue
        // 0x10 (0x1)
        // (Param | OutParam | ReturnParam)
        public UOnlineSubsystem.EOnlineEnumerationReadState ReturnValue {
            get => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetTitleFileState;
    public UOnlineSubsystem.EOnlineEnumerationReadState GetTitleFileState(FString Filename) {
        _ptrGetTitleFileState ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileState");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetTitleFileState, @params);

        return *(UOnlineSubsystem.EOnlineEnumerationReadState*)(@params + 16);
    }

    // Function IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileContents
    // 0xBA83B0
    // (Native | Public | HasOutParams)
    public unsafe class GetTitleFileContents_Parameters : BaseObject {
        public GetTitleFileContents_Parameters() { }
        public GetTitleFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileContents.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileContents.FileContents
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetTitleFileContents;
    public bool GetTitleFileContents(FString Filename, ref UnmanagedTArray<byte> FileContents) {
        _ptrGetTitleFileContents ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadMcp.GetTitleFileContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 16, 16, 16);

        _ptrGetTitleFileContents.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetTitleFileContents, @params);
        _ptrGetTitleFileContents.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _FileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_FileContentsPtr, 16, 16);
        FileContents = new(_FileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineTitleFileDownloadMcp.ReadTitleFile
    // 0xBA8140
    // (Native | HasOptionalParams | Public)
    public unsafe class ReadTitleFile_Parameters : BaseObject {
        public ReadTitleFile_Parameters() { }
        public ReadTitleFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadMcp.ReadTitleFile.FileToRead
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FileToRead {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadMcp.ReadTitleFile.FileType
        // 0x10 (0x1)
        // (OptionalParam | Param)
        public UOnlineSubsystem.EOnlineFileType FileType {
            get => *(UOnlineSubsystem.EOnlineFileType*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineFileType*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlineTitleFileDownloadMcp.ReadTitleFile.ReturnValue
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadTitleFile;
    public bool ReadTitleFile(FString FileToRead, UOnlineSubsystem.EOnlineFileType FileType = 0) {
        _ptrReadTitleFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadMcp.ReadTitleFile");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy((void*)FileToRead.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&FileType, @params + 16, 1, 1);

        _ptrReadTitleFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrReadTitleFile, @params);
        _ptrReadTitleFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 20);
    }


    // ScriptStruct IpDrv.OnlineTitleFileDownloadMcp.TitleFileMcp
    // 0x8 (0x28 - 0x30)
    public unsafe class FTitleFileMcp : UOnlineSubsystem.FTitleFile {
        public FTitleFileMcp() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FTitleFileMcp(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineTitleFileDownloadMcp.TitleFileMcp.HttpDownloader
        // 0x28 (0x8)
        // (Const | Native)
        public nint HttpDownloader {
            get => *(nint*)(Pointer + 40);
            set => *(nint*)(Pointer + 40) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineTitleFileDownloadMcp");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineTitleFileDownloadWeb
// 0x10 (0x118 - 0x128)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineTitleFileDownloadWeb : UOnlineTitleFileDownloadBase {
    public UOnlineTitleFileDownloadWeb() { }
    public UOnlineTitleFileDownloadWeb(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.OnlineTitleFileDownloadWeb.TitleFiles
    // 0x118 (0x10)
    // (NeedCtorLink)
    public StructTArray<UOnlineTitleFileDownloadBase.FTitleFileWeb> TitleFiles {
        get => new(Pointer + 280, 72);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }


    // Function IpDrv.OnlineTitleFileDownloadWeb.GetUrlForFile
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetUrlForFile_Parameters : BaseObject {
        public GetUrlForFile_Parameters() { }
        public GetUrlForFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.GetUrlForFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.GetUrlForFile.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetUrlForFile;
    public FString GetUrlForFile(FString Filename) {
        _ptrGetUrlForFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.GetUrlForFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetUrlForFile, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.OnFileListReceived
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnFileListReceived_Parameters : BaseObject {
        public OnFileListReceived_Parameters() { }
        public OnFileListReceived_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineTitleFileDownloadWeb.OnFileListReceived.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.OnlineTitleFileDownloadWeb.OnFileListReceived.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.OnFileListReceived.bDidSucceed
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bDidSucceed {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnFileListReceived;
    public void OnFileListReceived(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bDidSucceed) {
        _ptrOnFileListReceived ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.OnFileListReceived");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bDidSucceed, @params + 16, 4, 4);

        ProcessEvent(_ptrOnFileListReceived, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.RequestTitleFileList
    // 0x3750E0
    // (Defined | Public)
    public unsafe class RequestTitleFileList_Parameters : BaseObject {
        public RequestTitleFileList_Parameters() { }
        public RequestTitleFileList_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.RequestTitleFileList.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestTitleFileList;
    public bool RequestTitleFileList() {
        _ptrRequestTitleFileList ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.RequestTitleFileList");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrRequestTitleFileList, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFile
    // 0xBA8E40
    // (Native | Public)
    public unsafe class ClearDownloadedFile_Parameters : BaseObject {
        public ClearDownloadedFile_Parameters() { }
        public ClearDownloadedFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearDownloadedFile;
    public bool ClearDownloadedFile(FString Filename) {
        _ptrClearDownloadedFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrClearDownloadedFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearDownloadedFile, @params);
        _ptrClearDownloadedFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFiles
    // 0x665500
    // (Native | Public)
    public unsafe class ClearDownloadedFiles_Parameters : BaseObject {
        public ClearDownloadedFiles_Parameters() { }
        public ClearDownloadedFiles_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFiles.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearDownloadedFiles;
    public bool ClearDownloadedFiles() {
        _ptrClearDownloadedFiles ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.ClearDownloadedFiles");

        var @params = stackalloc byte[4];

        _ptrClearDownloadedFiles.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearDownloadedFiles, @params);
        _ptrClearDownloadedFiles.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileState
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetTitleFileState_Parameters : BaseObject {
        public GetTitleFileState_Parameters() { }
        public GetTitleFileState_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileState.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileState.ReturnValue
        // 0x10 (0x1)
        // (Param | OutParam | ReturnParam)
        public UOnlineSubsystem.EOnlineEnumerationReadState ReturnValue {
            get => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetTitleFileState;
    public UOnlineSubsystem.EOnlineEnumerationReadState GetTitleFileState(FString Filename) {
        _ptrGetTitleFileState ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileState");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetTitleFileState, @params);

        return *(UOnlineSubsystem.EOnlineEnumerationReadState*)(@params + 16);
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileContents
    // 0xBA8CF0
    // (Native | Public | HasOutParams)
    public unsafe class GetTitleFileContents_Parameters : BaseObject {
        public GetTitleFileContents_Parameters() { }
        public GetTitleFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileContents.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileContents.FileContents
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetTitleFileContents;
    public bool GetTitleFileContents(FString Filename, ref UnmanagedTArray<byte> FileContents) {
        _ptrGetTitleFileContents ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.GetTitleFileContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 16, 16, 16);

        _ptrGetTitleFileContents.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetTitleFileContents, @params);
        _ptrGetTitleFileContents.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _FileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_FileContentsPtr, 16, 16);
        FileContents = new(_FileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.TriggerDelegates
    // 0xBA8B80
    // (Final | Native | Private)
    public unsafe class TriggerDelegates_Parameters : BaseObject {
        public TriggerDelegates_Parameters() { }
        public TriggerDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.TriggerDelegates.bSuccess
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSuccess {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.TriggerDelegates.FileRead
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString FileRead {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrTriggerDelegates;
    public void TriggerDelegates(bool bSuccess, FString FileRead) {
        _ptrTriggerDelegates ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.TriggerDelegates");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bSuccess, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)FileRead.Pointer, @params + 8, 16, 16);

        _ptrTriggerDelegates.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTriggerDelegates, @params);
        _ptrTriggerDelegates.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.OnFileDownloadComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnFileDownloadComplete_Parameters : BaseObject {
        public OnFileDownloadComplete_Parameters() { }
        public OnFileDownloadComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineTitleFileDownloadWeb.OnFileDownloadComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.OnlineTitleFileDownloadWeb.OnFileDownloadComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.OnFileDownloadComplete.bDidSucceed
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bDidSucceed {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnFileDownloadComplete;
    public void OnFileDownloadComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bDidSucceed) {
        _ptrOnFileDownloadComplete ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.OnFileDownloadComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bDidSucceed, @params + 16, 4, 4);

        ProcessEvent(_ptrOnFileDownloadComplete, @params);
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.ReadTitleFile
    // 0x3750E0
    // (Defined | HasOptionalParams | Public)
    public unsafe class ReadTitleFile_Parameters : BaseObject {
        public ReadTitleFile_Parameters() { }
        public ReadTitleFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineTitleFileDownloadWeb.ReadTitleFile.FileToRead
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FileToRead {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineTitleFileDownloadWeb.ReadTitleFile.FileType
        // 0x10 (0x1)
        // (OptionalParam | Param)
        public UOnlineSubsystem.EOnlineFileType FileType {
            get => *(UOnlineSubsystem.EOnlineFileType*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineFileType*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.ReadTitleFile.ReturnValue
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadTitleFile;
    public bool ReadTitleFile(FString FileToRead, UOnlineSubsystem.EOnlineFileType FileType = 0) {
        _ptrReadTitleFile ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.ReadTitleFile");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy((void*)FileToRead.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&FileType, @params + 16, 1, 1);

        ProcessEvent(_ptrReadTitleFile, @params);

        return *(bool*)(@params + 20);
    }

    // Function IpDrv.OnlineTitleFileDownloadWeb.UncompressTitleFileContents
    // 0xBA89F0
    // (Final | Native | Public | HasOutParams)
    public unsafe class UncompressTitleFileContents_Parameters : BaseObject {
        public UncompressTitleFileContents_Parameters() { }
        public UncompressTitleFileContents_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineTitleFileDownloadWeb.UncompressTitleFileContents.FileCompressionType
        // 0x0 (0x1)
        // (Param)
        public UOnlineTitleFileDownloadBase.EMcpFileCompressionType FileCompressionType {
            get => *(UOnlineTitleFileDownloadBase.EMcpFileCompressionType*)Pointer;
            set => *(UOnlineTitleFileDownloadBase.EMcpFileCompressionType*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.OnlineTitleFileDownloadWeb.UncompressTitleFileContents.CompressedFileContents
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> CompressedFileContents {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // ArrayProperty IpDrv.OnlineTitleFileDownloadWeb.UncompressTitleFileContents.UncompressedFileContents
        // 0x18 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> UncompressedFileContents {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // BoolProperty IpDrv.OnlineTitleFileDownloadWeb.UncompressTitleFileContents.ReturnValue
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUncompressTitleFileContents;
    public bool UncompressTitleFileContents(UOnlineTitleFileDownloadBase.EMcpFileCompressionType FileCompressionType, ref UnmanagedTArray<byte> CompressedFileContents, ref UnmanagedTArray<byte> UncompressedFileContents) {
        _ptrUncompressTitleFileContents ??= FindFunction("Function IpDrv.OnlineTitleFileDownloadWeb.UncompressTitleFileContents");

        var @params = stackalloc byte[37];
        System.Buffer.MemoryCopy(&FileCompressionType, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)CompressedFileContents.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)UncompressedFileContents.Pointer, @params + 24, 16, 16);

        _ptrUncompressTitleFileContents.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUncompressTitleFileContents, @params);
        _ptrUncompressTitleFileContents.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _CompressedFileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_CompressedFileContentsPtr, 16, 16);
        CompressedFileContents = new(_CompressedFileContentsPtr) { Allocated = true };
        var _UncompressedFileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_UncompressedFileContentsPtr, 16, 16);
        UncompressedFileContents = new(_UncompressedFileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 40);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineTitleFileDownloadWeb");
            return _staticClass;
        }
    }
}

// Class IpDrv.TitleFileDownloadCache
// 0x60 (0x80 - 0xE0)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UTitleFileDownloadCache : UMCPBase {
    public UTitleFileDownloadCache() { }
    public UTitleFileDownloadCache(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.TitleFileDownloadCache.TitleFiles
    // 0x80 (0x10)
    // (NeedCtorLink)
    public StructTArray<FTitleFileCacheEntry> TitleFiles {
        get => new(Pointer + 128, 88);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty IpDrv.TitleFileDownloadCache.LoadCompleteDelegates
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LoadCompleteDelegates {
        get => new(Pointer + 144, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // ArrayProperty IpDrv.TitleFileDownloadCache.SaveCompleteDelegates
    // 0xA0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> SaveCompleteDelegates {
        get => new(Pointer + 160, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // DelegateProperty IpDrv.TitleFileDownloadCache.__OnLoadTitleFileComplete__Delegate
    // 0xB0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLoadTitleFileComplete__Delegate {
        get => new(Pointer + 176);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 24, 24);
    }

    // DelegateProperty IpDrv.TitleFileDownloadCache.__OnSaveTitleFileComplete__Delegate
    // 0xC8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnSaveTitleFileComplete__Delegate {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 24, 24);
    }


    // Function IpDrv.TitleFileDownloadCache.DeleteTitleFile
    // 0xBA9F00
    // (Final | Native | Public)
    public unsafe class DeleteTitleFile_Parameters : BaseObject {
        public DeleteTitleFile_Parameters() { }
        public DeleteTitleFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.DeleteTitleFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.TitleFileDownloadCache.DeleteTitleFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDeleteTitleFile;
    public bool DeleteTitleFile(FString Filename) {
        _ptrDeleteTitleFile ??= FindFunction("Function IpDrv.TitleFileDownloadCache.DeleteTitleFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrDeleteTitleFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDeleteTitleFile, @params);
        _ptrDeleteTitleFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.TitleFileDownloadCache.DeleteTitleFiles
    // 0xBA9E70
    // (Final | Native | Public)
    public unsafe class DeleteTitleFiles_Parameters : BaseObject {
        public DeleteTitleFiles_Parameters() { }
        public DeleteTitleFiles_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty IpDrv.TitleFileDownloadCache.DeleteTitleFiles.MaxAgeSeconds
        // 0x0 (0x4)
        // (Param)
        public float MaxAgeSeconds {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // BoolProperty IpDrv.TitleFileDownloadCache.DeleteTitleFiles.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDeleteTitleFiles;
    public bool DeleteTitleFiles(float MaxAgeSeconds) {
        _ptrDeleteTitleFiles ??= FindFunction("Function IpDrv.TitleFileDownloadCache.DeleteTitleFiles");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&MaxAgeSeconds, @params, 4, 4);

        _ptrDeleteTitleFiles.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDeleteTitleFiles, @params);
        _ptrDeleteTitleFiles.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.TitleFileDownloadCache.ClearCachedFile
    // 0xBA9DB0
    // (Final | Native | Public)
    public unsafe class ClearCachedFile_Parameters : BaseObject {
        public ClearCachedFile_Parameters() { }
        public ClearCachedFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.ClearCachedFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.TitleFileDownloadCache.ClearCachedFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearCachedFile;
    public bool ClearCachedFile(FString Filename) {
        _ptrClearCachedFile ??= FindFunction("Function IpDrv.TitleFileDownloadCache.ClearCachedFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrClearCachedFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearCachedFile, @params);
        _ptrClearCachedFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.TitleFileDownloadCache.ClearCachedFiles
    // 0xBA9D60
    // (Final | Native | Public)
    public unsafe class ClearCachedFiles_Parameters : BaseObject {
        public ClearCachedFiles_Parameters() { }
        public ClearCachedFiles_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.TitleFileDownloadCache.ClearCachedFiles.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearCachedFiles;
    public bool ClearCachedFiles() {
        _ptrClearCachedFiles ??= FindFunction("Function IpDrv.TitleFileDownloadCache.ClearCachedFiles");

        var @params = stackalloc byte[4];

        _ptrClearCachedFiles.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearCachedFiles, @params);
        _ptrClearCachedFiles.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.TitleFileDownloadCache.GetTitleFileLogicalName
    // 0xBA9B80
    // (Final | Native | Public)
    public unsafe class GetTitleFileLogicalName_Parameters : BaseObject {
        public GetTitleFileLogicalName_Parameters() { }
        public GetTitleFileLogicalName_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.GetTitleFileLogicalName.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.TitleFileDownloadCache.GetTitleFileLogicalName.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetTitleFileLogicalName;
    public FString GetTitleFileLogicalName(FString Filename) {
        _ptrGetTitleFileLogicalName ??= FindFunction("Function IpDrv.TitleFileDownloadCache.GetTitleFileLogicalName");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrGetTitleFileLogicalName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetTitleFileLogicalName, @params);
        _ptrGetTitleFileLogicalName.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.TitleFileDownloadCache.GetTitleFileHash
    // 0xBA99A0
    // (Final | Native | Public)
    public unsafe class GetTitleFileHash_Parameters : BaseObject {
        public GetTitleFileHash_Parameters() { }
        public GetTitleFileHash_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.GetTitleFileHash.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.TitleFileDownloadCache.GetTitleFileHash.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetTitleFileHash;
    public FString GetTitleFileHash(FString Filename) {
        _ptrGetTitleFileHash ??= FindFunction("Function IpDrv.TitleFileDownloadCache.GetTitleFileHash");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrGetTitleFileHash.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetTitleFileHash, @params);
        _ptrGetTitleFileHash.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.TitleFileDownloadCache.GetTitleFileState
    // 0xBA9870
    // (Final | Native | Public)
    public unsafe class GetTitleFileState_Parameters : BaseObject {
        public GetTitleFileState_Parameters() { }
        public GetTitleFileState_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.GetTitleFileState.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.TitleFileDownloadCache.GetTitleFileState.ReturnValue
        // 0x10 (0x1)
        // (Param | OutParam | ReturnParam)
        public UOnlineSubsystem.EOnlineEnumerationReadState ReturnValue {
            get => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16);
            set => *(UOnlineSubsystem.EOnlineEnumerationReadState*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetTitleFileState;
    public UOnlineSubsystem.EOnlineEnumerationReadState GetTitleFileState(FString Filename) {
        _ptrGetTitleFileState ??= FindFunction("Function IpDrv.TitleFileDownloadCache.GetTitleFileState");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrGetTitleFileState.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetTitleFileState, @params);
        _ptrGetTitleFileState.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(UOnlineSubsystem.EOnlineEnumerationReadState*)(@params + 16);
    }

    // Function IpDrv.TitleFileDownloadCache.GetTitleFileContents
    // 0xBA96C0
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetTitleFileContents_Parameters : BaseObject {
        public GetTitleFileContents_Parameters() { }
        public GetTitleFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.GetTitleFileContents.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.TitleFileDownloadCache.GetTitleFileContents.FileContents
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.TitleFileDownloadCache.GetTitleFileContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetTitleFileContents;
    public bool GetTitleFileContents(FString Filename, ref UnmanagedTArray<byte> FileContents) {
        _ptrGetTitleFileContents ??= FindFunction("Function IpDrv.TitleFileDownloadCache.GetTitleFileContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 16, 16, 16);

        _ptrGetTitleFileContents.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetTitleFileContents, @params);
        _ptrGetTitleFileContents.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _FileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_FileContentsPtr, 16, 16);
        FileContents = new(_FileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.TitleFileDownloadCache.ClearSaveTitleFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearSaveTitleFileCompleteDelegate_Parameters : BaseObject {
        public ClearSaveTitleFileCompleteDelegate_Parameters() { }
        public ClearSaveTitleFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.TitleFileDownloadCache.ClearSaveTitleFileCompleteDelegate.SaveCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate SaveCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearSaveTitleFileCompleteDelegate;
    public void ClearSaveTitleFileCompleteDelegate(FScriptDelegate SaveCompleteDelegate) {
        _ptrClearSaveTitleFileCompleteDelegate ??= FindFunction("Function IpDrv.TitleFileDownloadCache.ClearSaveTitleFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)SaveCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearSaveTitleFileCompleteDelegate, @params);
    }

    // Function IpDrv.TitleFileDownloadCache.AddSaveTitleFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddSaveTitleFileCompleteDelegate_Parameters : BaseObject {
        public AddSaveTitleFileCompleteDelegate_Parameters() { }
        public AddSaveTitleFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.TitleFileDownloadCache.AddSaveTitleFileCompleteDelegate.SaveCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate SaveCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddSaveTitleFileCompleteDelegate;
    public void AddSaveTitleFileCompleteDelegate(FScriptDelegate SaveCompleteDelegate) {
        _ptrAddSaveTitleFileCompleteDelegate ??= FindFunction("Function IpDrv.TitleFileDownloadCache.AddSaveTitleFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)SaveCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddSaveTitleFileCompleteDelegate, @params);
    }

    // Function IpDrv.TitleFileDownloadCache.OnSaveTitleFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnSaveTitleFileComplete_Parameters : BaseObject {
        public OnSaveTitleFileComplete_Parameters() { }
        public OnSaveTitleFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.TitleFileDownloadCache.OnSaveTitleFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.TitleFileDownloadCache.OnSaveTitleFileComplete.Filename
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnSaveTitleFileComplete;
    public void OnSaveTitleFileComplete(bool bWasSuccessful, FString Filename) {
        _ptrOnSaveTitleFileComplete ??= FindFunction("Function IpDrv.TitleFileDownloadCache.OnSaveTitleFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnSaveTitleFileComplete, @params);
    }

    // Function IpDrv.TitleFileDownloadCache.SaveTitleFile
    // 0xBA9570
    // (Final | Native | Public)
    public unsafe class SaveTitleFile_Parameters : BaseObject {
        public SaveTitleFile_Parameters() { }
        public SaveTitleFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.SaveTitleFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.TitleFileDownloadCache.SaveTitleFile.LogicalName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString LogicalName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.TitleFileDownloadCache.SaveTitleFile.FileContents
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.TitleFileDownloadCache.SaveTitleFile.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSaveTitleFile;
    public bool SaveTitleFile(FString Filename, FString LogicalName, UnmanagedTArray<byte> FileContents) {
        _ptrSaveTitleFile ??= FindFunction("Function IpDrv.TitleFileDownloadCache.SaveTitleFile");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)LogicalName.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 32, 16, 16);

        _ptrSaveTitleFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSaveTitleFile, @params);
        _ptrSaveTitleFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 48);
    }

    // Function IpDrv.TitleFileDownloadCache.ClearLoadTitleFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLoadTitleFileCompleteDelegate_Parameters : BaseObject {
        public ClearLoadTitleFileCompleteDelegate_Parameters() { }
        public ClearLoadTitleFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.TitleFileDownloadCache.ClearLoadTitleFileCompleteDelegate.LoadCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LoadCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLoadTitleFileCompleteDelegate;
    public void ClearLoadTitleFileCompleteDelegate(FScriptDelegate LoadCompleteDelegate) {
        _ptrClearLoadTitleFileCompleteDelegate ??= FindFunction("Function IpDrv.TitleFileDownloadCache.ClearLoadTitleFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LoadCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLoadTitleFileCompleteDelegate, @params);
    }

    // Function IpDrv.TitleFileDownloadCache.AddLoadTitleFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLoadTitleFileCompleteDelegate_Parameters : BaseObject {
        public AddLoadTitleFileCompleteDelegate_Parameters() { }
        public AddLoadTitleFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.TitleFileDownloadCache.AddLoadTitleFileCompleteDelegate.LoadCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LoadCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLoadTitleFileCompleteDelegate;
    public void AddLoadTitleFileCompleteDelegate(FScriptDelegate LoadCompleteDelegate) {
        _ptrAddLoadTitleFileCompleteDelegate ??= FindFunction("Function IpDrv.TitleFileDownloadCache.AddLoadTitleFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LoadCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLoadTitleFileCompleteDelegate, @params);
    }

    // Function IpDrv.TitleFileDownloadCache.OnLoadTitleFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnLoadTitleFileComplete_Parameters : BaseObject {
        public OnLoadTitleFileComplete_Parameters() { }
        public OnLoadTitleFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.TitleFileDownloadCache.OnLoadTitleFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.TitleFileDownloadCache.OnLoadTitleFileComplete.Filename
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnLoadTitleFileComplete;
    public void OnLoadTitleFileComplete(bool bWasSuccessful, FString Filename) {
        _ptrOnLoadTitleFileComplete ??= FindFunction("Function IpDrv.TitleFileDownloadCache.OnLoadTitleFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnLoadTitleFileComplete, @params);
    }

    // Function IpDrv.TitleFileDownloadCache.LoadTitleFile
    // 0xBA94B0
    // (Final | Native | Public)
    public unsafe class LoadTitleFile_Parameters : BaseObject {
        public LoadTitleFile_Parameters() { }
        public LoadTitleFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.LoadTitleFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.TitleFileDownloadCache.LoadTitleFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLoadTitleFile;
    public bool LoadTitleFile(FString Filename) {
        _ptrLoadTitleFile ??= FindFunction("Function IpDrv.TitleFileDownloadCache.LoadTitleFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrLoadTitleFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrLoadTitleFile, @params);
        _ptrLoadTitleFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }


    // ScriptStruct IpDrv.TitleFileDownloadCache.TitleFileCacheEntry
    // 0x30 (0x28 - 0x58)
    public unsafe class FTitleFileCacheEntry : UOnlineSubsystem.FTitleFile {
        public FTitleFileCacheEntry() {
            Pointer = Marshal.AllocHGlobal(88);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 88);
            Allocated = true;
        }
        public FTitleFileCacheEntry(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.TitleFileDownloadCache.TitleFileCacheEntry.LogicalName
        // 0x28 (0x10)
        // (NeedCtorLink)
        public FString LogicalName {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }

        // StrProperty IpDrv.TitleFileDownloadCache.TitleFileCacheEntry.Hash
        // 0x38 (0x10)
        // (NeedCtorLink)
        public FString Hash {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // ByteProperty IpDrv.TitleFileDownloadCache.TitleFileCacheEntry.FileOp
        // 0x48 (0x1)
        public ETitleFileFileOp FileOp {
            get => *(ETitleFileFileOp*)(Pointer + 72);
            set => *(ETitleFileFileOp*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x7

        // StructProperty IpDrv.TitleFileDownloadCache.TitleFileCacheEntry.Ar
        // 0x50 (0x8)
        // (Const | Native)
        public nint Ar {
            get => *(nint*)(Pointer + 80);
            set => *(nint*)(Pointer + 80) = value;
        }
    }


    // Enum IpDrv.TitleFileDownloadCache.ETitleFileFileOp
    public enum ETitleFileFileOp : byte {
        TitleFile_None = 0,
        TitleFile_Save = 1,
        TitleFile_Load = 2,
        TitleFile_MAX = 3
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.TitleFileDownloadCache");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpMessageBase
// 0x98 (0x78 - 0x110)
// (Abstract | Compiled | Config | Parsed | Native)
public unsafe partial class UMcpMessageBase : UMcpServiceBase {
    public UMcpMessageBase() { }
    public UMcpMessageBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpMessageBase.McpMessageManagerClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpMessageManagerClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // ByteProperty IpDrv.McpMessageBase.CompressionType
    // 0x88 (0x1)
    // (Config)
    public EMcpMessageCompressionType CompressionType {
        get => *(EMcpMessageCompressionType*)(Pointer + 136);
        set => *(EMcpMessageCompressionType*)(Pointer + 136) = value;
    }

    // MISSED OFFSET: 0x7

    // ArrayProperty IpDrv.McpMessageBase.MessageContentsList
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FMcpMessageContents> MessageContentsList {
        get => new(Pointer + 144, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // ArrayProperty IpDrv.McpMessageBase.MessageLists
    // 0xA0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FMcpMessageList> MessageLists {
        get => new(Pointer + 160, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // DelegateProperty IpDrv.McpMessageBase.__OnCreateMessageComplete__Delegate
    // 0xB0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateMessageComplete__Delegate {
        get => new(Pointer + 176);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 24, 24);
    }

    // DelegateProperty IpDrv.McpMessageBase.__OnDeleteMessageComplete__Delegate
    // 0xC8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteMessageComplete__Delegate {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 24, 24);
    }

    // DelegateProperty IpDrv.McpMessageBase.__OnQueryMessagesComplete__Delegate
    // 0xE0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryMessagesComplete__Delegate {
        get => new(Pointer + 224);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 224), 24, 24);
    }

    // DelegateProperty IpDrv.McpMessageBase.__OnQueryMessageContentsComplete__Delegate
    // 0xF8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryMessageContentsComplete__Delegate {
        get => new(Pointer + 248);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 24, 24);
    }


    // Function IpDrv.McpMessageBase.CacheMessageContents
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class CacheMessageContents_Parameters : BaseObject {
        public CacheMessageContents_Parameters() { }
        public CacheMessageContents_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpMessageBase.CacheMessageContents.MessageContents
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.CacheMessageContents.MessageId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpMessageBase.CacheMessageContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCacheMessageContents;
    public bool CacheMessageContents(ref UnmanagedTArray<byte> MessageContents, FString MessageId) {
        _ptrCacheMessageContents ??= FindFunction("Function IpDrv.McpMessageBase.CacheMessageContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)MessageContents.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCacheMessageContents, @params);

        var _MessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_MessageContentsPtr, 16, 16);
        MessageContents = new(_MessageContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.McpMessageBase.CacheMessage
    // 0x3750E0
    // (Public)
    public unsafe class CacheMessage_Parameters : BaseObject {
        public CacheMessage_Parameters() { }
        public CacheMessage_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.McpMessageBase.CacheMessage.Message
        // 0x0 (0x68)
        // (Param | NeedCtorLink)
        public FMcpMessage Message {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }
    }
    private static UFunction _ptrCacheMessage;
    public void CacheMessage(FMcpMessage Message) {
        _ptrCacheMessage ??= FindFunction("Function IpDrv.McpMessageBase.CacheMessage");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params, 104, 104);

        ProcessEvent(_ptrCacheMessage, @params);
    }

    // Function IpDrv.McpMessageBase.GetMessageContents
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetMessageContents_Parameters : BaseObject {
        public GetMessageContents_Parameters() { }
        public GetMessageContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.GetMessageContents.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageBase.GetMessageContents.MessageContents
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpMessageBase.GetMessageContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetMessageContents;
    public bool GetMessageContents(FString MessageId, ref UnmanagedTArray<byte> MessageContents) {
        _ptrGetMessageContents ??= FindFunction("Function IpDrv.McpMessageBase.GetMessageContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageContents.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetMessageContents, @params);

        var _MessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_MessageContentsPtr, 16, 16);
        MessageContents = new(_MessageContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.McpMessageBase.OnQueryMessageContentsComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryMessageContentsComplete_Parameters : BaseObject {
        public OnQueryMessageContentsComplete_Parameters() { }
        public OnQueryMessageContentsComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.OnQueryMessageContentsComplete.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpMessageBase.OnQueryMessageContentsComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpMessageBase.OnQueryMessageContentsComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryMessageContentsComplete;
    public void OnQueryMessageContentsComplete(FString MessageId, bool bWasSuccessful, FString Error) {
        _ptrOnQueryMessageContentsComplete ??= FindFunction("Function IpDrv.McpMessageBase.OnQueryMessageContentsComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQueryMessageContentsComplete, @params);
    }

    // Function IpDrv.McpMessageBase.QueryMessageContents
    // 0x3750E0
    // (Public)
    public unsafe class QueryMessageContents_Parameters : BaseObject {
        public QueryMessageContents_Parameters() { }
        public QueryMessageContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.QueryMessageContents.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryMessageContents;
    public void QueryMessageContents(FString MessageId) {
        _ptrQueryMessageContents ??= FindFunction("Function IpDrv.McpMessageBase.QueryMessageContents");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryMessageContents, @params);
    }

    // Function IpDrv.McpMessageBase.GetMessageList
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetMessageList_Parameters : BaseObject {
        public GetMessageList_Parameters() { }
        public GetMessageList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.GetMessageList.ToUniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ToUniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpMessageBase.GetMessageList.MessageList
        // 0x10 (0x20)
        // (Param | OutParam | NeedCtorLink)
        public FMcpMessageList MessageList {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 32, 32);
        }
    }
    private static UFunction _ptrGetMessageList;
    public void GetMessageList(FString ToUniqueUserId, ref FMcpMessageList MessageList) {
        _ptrGetMessageList ??= FindFunction("Function IpDrv.McpMessageBase.GetMessageList");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)ToUniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageList.Pointer, @params + 16, 32, 32);

        ProcessEvent(_ptrGetMessageList, @params);

        var _MessageListPtr = Marshal.AllocHGlobal(32);
        System.Buffer.MemoryCopy(@params + 16, (void*)_MessageListPtr, 32, 32);
        MessageList = new(_MessageListPtr) { Allocated = true };
    }

    // Function IpDrv.McpMessageBase.OnQueryMessagesComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryMessagesComplete_Parameters : BaseObject {
        public OnQueryMessagesComplete_Parameters() { }
        public OnQueryMessagesComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.OnQueryMessagesComplete.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpMessageBase.OnQueryMessagesComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpMessageBase.OnQueryMessagesComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryMessagesComplete;
    public void OnQueryMessagesComplete(FString UserId, bool bWasSuccessful, FString Error) {
        _ptrOnQueryMessagesComplete ??= FindFunction("Function IpDrv.McpMessageBase.OnQueryMessagesComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQueryMessagesComplete, @params);
    }

    // Function IpDrv.McpMessageBase.QueryMessages
    // 0x3750E0
    // (Public)
    public unsafe class QueryMessages_Parameters : BaseObject {
        public QueryMessages_Parameters() { }
        public QueryMessages_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.QueryMessages.ToUniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ToUniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryMessages;
    public void QueryMessages(FString ToUniqueUserId) {
        _ptrQueryMessages ??= FindFunction("Function IpDrv.McpMessageBase.QueryMessages");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ToUniqueUserId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryMessages, @params);
    }

    // Function IpDrv.McpMessageBase.OnDeleteMessageComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteMessageComplete_Parameters : BaseObject {
        public OnDeleteMessageComplete_Parameters() { }
        public OnDeleteMessageComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.OnDeleteMessageComplete.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpMessageBase.OnDeleteMessageComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpMessageBase.OnDeleteMessageComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteMessageComplete;
    public void OnDeleteMessageComplete(FString MessageId, bool bWasSuccessful, FString Error) {
        _ptrOnDeleteMessageComplete ??= FindFunction("Function IpDrv.McpMessageBase.OnDeleteMessageComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnDeleteMessageComplete, @params);
    }

    // Function IpDrv.McpMessageBase.DeleteMessage
    // 0x3750E0
    // (Public)
    public unsafe class DeleteMessage_Parameters : BaseObject {
        public DeleteMessage_Parameters() { }
        public DeleteMessage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.DeleteMessage.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDeleteMessage;
    public void DeleteMessage(FString MessageId) {
        _ptrDeleteMessage ??= FindFunction("Function IpDrv.McpMessageBase.DeleteMessage");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDeleteMessage, @params);
    }

    // Function IpDrv.McpMessageBase.OnCreateMessageComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnCreateMessageComplete_Parameters : BaseObject {
        public OnCreateMessageComplete_Parameters() { }
        public OnCreateMessageComplete_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.McpMessageBase.OnCreateMessageComplete.Message
        // 0x0 (0x68)
        // (Param | NeedCtorLink)
        public FMcpMessage Message {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }

        // BoolProperty IpDrv.McpMessageBase.OnCreateMessageComplete.bWasSuccessful
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpMessageBase.OnCreateMessageComplete.Error
        // 0x70 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 112);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
        }
    }
    private static UFunction _ptrOnCreateMessageComplete;
    public void OnCreateMessageComplete(FMcpMessage Message, bool bWasSuccessful, FString Error) {
        _ptrOnCreateMessageComplete ??= FindFunction("Function IpDrv.McpMessageBase.OnCreateMessageComplete");

        var @params = stackalloc byte[124];
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params, 104, 104);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 104, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 112, 16, 16);

        ProcessEvent(_ptrOnCreateMessageComplete, @params);
    }

    // Function IpDrv.McpMessageBase.CreateMessage
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class CreateMessage_Parameters : BaseObject {
        public CreateMessage_Parameters() { }
        public CreateMessage_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpMessageBase.CreateMessage.ToUniqueUserIds
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> ToUniqueUserIds {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.CreateMessage.FromUniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString FromUniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.CreateMessage.FromFriendlyName
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString FromFriendlyName {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.CreateMessage.MessageType
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageType {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.CreateMessage.PushMessage
        // 0x40 (0x10)
        // (Param | NeedCtorLink)
        public FString PushMessage {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.CreateMessage.ValidUntil
        // 0x50 (0x10)
        // (Param | NeedCtorLink)
        public FString ValidUntil {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageBase.CreateMessage.MessageContents
        // 0x60 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer + 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
        }
    }
    private static UFunction _ptrCreateMessage;
    public void CreateMessage(ref StructTArray<FString> ToUniqueUserIds, FString FromUniqueUserId, FString FromFriendlyName, FString MessageType, FString PushMessage, FString ValidUntil, ref UnmanagedTArray<byte> MessageContents) {
        _ptrCreateMessage ??= FindFunction("Function IpDrv.McpMessageBase.CreateMessage");

        var @params = stackalloc byte[112];
        System.Buffer.MemoryCopy((void*)ToUniqueUserIds.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FromUniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)FromFriendlyName.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageType.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy((void*)PushMessage.Pointer, @params + 64, 16, 16);
        System.Buffer.MemoryCopy((void*)ValidUntil.Pointer, @params + 80, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageContents.Pointer, @params + 96, 16, 16);

        ProcessEvent(_ptrCreateMessage, @params);

        var _ToUniqueUserIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ToUniqueUserIdsPtr, 16, 16);
        ToUniqueUserIds = new(_ToUniqueUserIdsPtr, 16) { Allocated = true };
        var _MessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 96, (void*)_MessageContentsPtr, 16, 16);
        MessageContents = new(_MessageContentsPtr) { Allocated = true };
    }

    // Function IpDrv.McpMessageBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpMessageBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpMessageBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpMessageBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpMessageBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpMessageBase.McpMessageContents
    // 0x20
    public unsafe class FMcpMessageContents : BaseObject {
        public FMcpMessageContents() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FMcpMessageContents(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.McpMessageContents.MessageId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageBase.McpMessageContents.MessageContents
        // 0x10 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpMessageBase.McpMessageList
    // 0x20
    public unsafe class FMcpMessageList : BaseObject {
        public FMcpMessageList() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FMcpMessageList(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.McpMessageList.ToUniqueUserId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString ToUniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageBase.McpMessageList.Messages
        // 0x10 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpMessage> Messages {
            get => new(Pointer + 16, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpMessageBase.McpMessage
    // 0x61
    public unsafe class FMcpMessage : BaseObject {
        public FMcpMessage() {
            Pointer = Marshal.AllocHGlobal(97);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 97);
            Allocated = true;
        }
        public FMcpMessage(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageBase.McpMessage.MessageId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.McpMessage.ToUniqueUserId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString ToUniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.McpMessage.FromUniqueUserId
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString FromUniqueUserId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.McpMessage.FromFriendlyName
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString FromFriendlyName {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.McpMessage.MessageType
        // 0x40 (0x10)
        // (NeedCtorLink)
        public FString MessageType {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }

        // StrProperty IpDrv.McpMessageBase.McpMessage.ValidUntil
        // 0x50 (0x10)
        // (NeedCtorLink)
        public FString ValidUntil {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }

        // ByteProperty IpDrv.McpMessageBase.McpMessage.MessageCompressionType
        // 0x60 (0x1)
        public EMcpMessageCompressionType MessageCompressionType {
            get => *(EMcpMessageCompressionType*)(Pointer + 96);
            set => *(EMcpMessageCompressionType*)(Pointer + 96) = value;
        }
    }


    // Enum IpDrv.McpMessageBase.EMcpMessageCompressionType
    public enum EMcpMessageCompressionType : byte {
        MMCT_NONE = 0,
        MMCT_LZO = 1,
        MMCT_ZLIB = 2,
        MMCT_MAX = 3
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpMessageBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpMessageManager
// 0x78 (0x110 - 0x188)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UMcpMessageManager : UMcpMessageBase {
    public UMcpMessageManager() { }
    public UMcpMessageManager(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.McpMessageManager.VfTable_FTickableObject
    // 0x110 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FTickableObject {
        get => *(nint*)(Pointer + 272);
        set => *(nint*)(Pointer + 272) = value;
    }

    // StrProperty IpDrv.McpMessageManager.CreateMessageUrl
    // 0x118 (0x10)
    // (Config | NeedCtorLink)
    public FString CreateMessageUrl {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // StrProperty IpDrv.McpMessageManager.DeleteMessageUrl
    // 0x128 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteMessageUrl {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 16, 16);
    }

    // StrProperty IpDrv.McpMessageManager.QueryMessagesUrl
    // 0x138 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryMessagesUrl {
        get => new(Pointer + 312);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 16, 16);
    }

    // StrProperty IpDrv.McpMessageManager.QueryMessageContentsUrl
    // 0x148 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryMessageContentsUrl {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 16, 16);
    }

    // StrProperty IpDrv.McpMessageManager.DeleteAllMessagesUrl
    // 0x158 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteAllMessagesUrl {
        get => new(Pointer + 344);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 344), 16, 16);
    }

    // ArrayProperty IpDrv.McpMessageManager.CompressMessageRequests
    // 0x168 (0x10)
    // (Native)
    public StructTArray<FMcpCompressMessageRequest> CompressMessageRequests {
        get => new(Pointer + 360, 56);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 360), 16, 16);
    }

    // ArrayProperty IpDrv.McpMessageManager.UncompressMessageRequests
    // 0x178 (0x10)
    // (Native)
    public StructTArray<FMcpUncompressMessageRequest> UncompressMessageRequests {
        get => new(Pointer + 376, 64);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 376), 16, 16);
    }


    // Function IpDrv.McpMessageManager.CacheMessageContents
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class CacheMessageContents_Parameters : BaseObject {
        public CacheMessageContents_Parameters() { }
        public CacheMessageContents_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpMessageManager.CacheMessageContents.MessageContents
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.CacheMessageContents.MessageId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpMessageManager.CacheMessageContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCacheMessageContents;
    public bool CacheMessageContents(ref UnmanagedTArray<byte> MessageContents, FString MessageId) {
        _ptrCacheMessageContents ??= FindFunction("Function IpDrv.McpMessageManager.CacheMessageContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)MessageContents.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCacheMessageContents, @params);

        var _MessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_MessageContentsPtr, 16, 16);
        MessageContents = new(_MessageContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.McpMessageManager.GetMessageById
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetMessageById_Parameters : BaseObject {
        public GetMessageById_Parameters() { }
        public GetMessageById_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.GetMessageById.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpMessageManager.GetMessageById.Message
        // 0x10 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UMcpMessageBase.FMcpMessage Message {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 104, 104);
        }

        // BoolProperty IpDrv.McpMessageManager.GetMessageById.ReturnValue
        // 0x78 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 120) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 120) |= 0x1;
                else *(uint*)(Pointer + 120) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetMessageById;
    public bool GetMessageById(FString MessageId, ref UMcpMessageBase.FMcpMessage Message) {
        _ptrGetMessageById ??= FindFunction("Function IpDrv.McpMessageManager.GetMessageById");

        var @params = stackalloc byte[124];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params + 16, 104, 104);

        ProcessEvent(_ptrGetMessageById, @params);

        var _MessagePtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 16, (void*)_MessagePtr, 104, 104);
        Message = new(_MessagePtr) { Allocated = true };

        return *(bool*)(@params + 120);
    }

    // Function IpDrv.McpMessageManager.CacheMessage
    // 0x3750E0
    // (Defined | Public | HasDefaults)
    public unsafe class CacheMessage_Parameters : BaseObject {
        public CacheMessage_Parameters() { }
        public CacheMessage_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.McpMessageManager.CacheMessage.Message
        // 0x0 (0x68)
        // (Param | NeedCtorLink)
        public UMcpMessageBase.FMcpMessage Message {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }
    }
    private static UFunction _ptrCacheMessage;
    public void CacheMessage(UMcpMessageBase.FMcpMessage Message) {
        _ptrCacheMessage ??= FindFunction("Function IpDrv.McpMessageManager.CacheMessage");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params, 104, 104);

        ProcessEvent(_ptrCacheMessage, @params);
    }

    // Function IpDrv.McpMessageManager.GetMessageContents
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetMessageContents_Parameters : BaseObject {
        public GetMessageContents_Parameters() { }
        public GetMessageContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.GetMessageContents.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageManager.GetMessageContents.MessageContents
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpMessageManager.GetMessageContents.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetMessageContents;
    public bool GetMessageContents(FString MessageId, ref UnmanagedTArray<byte> MessageContents) {
        _ptrGetMessageContents ??= FindFunction("Function IpDrv.McpMessageManager.GetMessageContents");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageContents.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetMessageContents, @params);

        var _MessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_MessageContentsPtr, 16, 16);
        MessageContents = new(_MessageContentsPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.McpMessageManager.OnQueryMessageContentsRequestComplete
    // 0x3750E0
    // (Final | Defined | Private | HasDefaults)
    public unsafe class OnQueryMessageContentsRequestComplete_Parameters : BaseObject {
        public OnQueryMessageContentsRequestComplete_Parameters() { }
        public OnQueryMessageContentsRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpMessageManager.OnQueryMessageContentsRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpMessageManager.OnQueryMessageContentsRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpMessageManager.OnQueryMessageContentsRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryMessageContentsRequestComplete;
    public void OnQueryMessageContentsRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnQueryMessageContentsRequestComplete ??= FindFunction("Function IpDrv.McpMessageManager.OnQueryMessageContentsRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryMessageContentsRequestComplete, @params);
    }

    // Function IpDrv.McpMessageManager.QueryMessageContents
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryMessageContents_Parameters : BaseObject {
        public QueryMessageContents_Parameters() { }
        public QueryMessageContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.QueryMessageContents.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryMessageContents;
    public void QueryMessageContents(FString MessageId) {
        _ptrQueryMessageContents ??= FindFunction("Function IpDrv.McpMessageManager.QueryMessageContents");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryMessageContents, @params);
    }

    // Function IpDrv.McpMessageManager.GetMessageList
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetMessageList_Parameters : BaseObject {
        public GetMessageList_Parameters() { }
        public GetMessageList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.GetMessageList.ToUniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ToUniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpMessageManager.GetMessageList.MessageList
        // 0x10 (0x20)
        // (Param | OutParam | NeedCtorLink)
        public UMcpMessageBase.FMcpMessageList MessageList {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 32, 32);
        }
    }
    private static UFunction _ptrGetMessageList;
    public void GetMessageList(FString ToUniqueUserId, ref UMcpMessageBase.FMcpMessageList MessageList) {
        _ptrGetMessageList ??= FindFunction("Function IpDrv.McpMessageManager.GetMessageList");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)ToUniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageList.Pointer, @params + 16, 32, 32);

        ProcessEvent(_ptrGetMessageList, @params);

        var _MessageListPtr = Marshal.AllocHGlobal(32);
        System.Buffer.MemoryCopy(@params + 16, (void*)_MessageListPtr, 32, 32);
        MessageList = new(_MessageListPtr) { Allocated = true };
    }

    // Function IpDrv.McpMessageManager.OnQueryMessagesRequestComplete
    // 0x3750E0
    // (Final | Defined | Private | HasDefaults)
    public unsafe class OnQueryMessagesRequestComplete_Parameters : BaseObject {
        public OnQueryMessagesRequestComplete_Parameters() { }
        public OnQueryMessagesRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpMessageManager.OnQueryMessagesRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpMessageManager.OnQueryMessagesRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpMessageManager.OnQueryMessagesRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryMessagesRequestComplete;
    public void OnQueryMessagesRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnQueryMessagesRequestComplete ??= FindFunction("Function IpDrv.McpMessageManager.OnQueryMessagesRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryMessagesRequestComplete, @params);
    }

    // Function IpDrv.McpMessageManager.QueryMessages
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryMessages_Parameters : BaseObject {
        public QueryMessages_Parameters() { }
        public QueryMessages_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.QueryMessages.ToUniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ToUniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryMessages;
    public void QueryMessages(FString ToUniqueUserId) {
        _ptrQueryMessages ??= FindFunction("Function IpDrv.McpMessageManager.QueryMessages");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ToUniqueUserId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryMessages, @params);
    }

    // Function IpDrv.McpMessageManager.OnDeleteMessageRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteMessageRequestComplete_Parameters : BaseObject {
        public OnDeleteMessageRequestComplete_Parameters() { }
        public OnDeleteMessageRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpMessageManager.OnDeleteMessageRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpMessageManager.OnDeleteMessageRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpMessageManager.OnDeleteMessageRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteMessageRequestComplete;
    public void OnDeleteMessageRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnDeleteMessageRequestComplete ??= FindFunction("Function IpDrv.McpMessageManager.OnDeleteMessageRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteMessageRequestComplete, @params);
    }

    // Function IpDrv.McpMessageManager.DeleteMessage
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteMessage_Parameters : BaseObject {
        public DeleteMessage_Parameters() { }
        public DeleteMessage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.DeleteMessage.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDeleteMessage;
    public void DeleteMessage(FString MessageId) {
        _ptrDeleteMessage ??= FindFunction("Function IpDrv.McpMessageManager.DeleteMessage");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDeleteMessage, @params);
    }

    // Function IpDrv.McpMessageManager.OnCreateMessageRequestComplete
    // 0x3750E0
    // (Final | Defined | Public | HasDefaults)
    public unsafe class OnCreateMessageRequestComplete_Parameters : BaseObject {
        public OnCreateMessageRequestComplete_Parameters() { }
        public OnCreateMessageRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpMessageManager.OnCreateMessageRequestComplete.CreateMessageRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface CreateMessageRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpMessageManager.OnCreateMessageRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpMessageManager.OnCreateMessageRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnCreateMessageRequestComplete;
    public void OnCreateMessageRequestComplete(UHttpRequestInterface CreateMessageRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnCreateMessageRequestComplete ??= FindFunction("Function IpDrv.McpMessageManager.OnCreateMessageRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)CreateMessageRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnCreateMessageRequestComplete, @params);
    }

    // Function IpDrv.McpMessageManager.CreateMessage
    // 0x3750E0
    // (Defined | Public | HasOutParams | HasDefaults)
    public unsafe class CreateMessage_Parameters : BaseObject {
        public CreateMessage_Parameters() { }
        public CreateMessage_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpMessageManager.CreateMessage.ToUniqueUserIds
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> ToUniqueUserIds {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.CreateMessage.FromUniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString FromUniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.CreateMessage.FromFriendlyName
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString FromFriendlyName {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.CreateMessage.MessageType
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageType {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.CreateMessage.PushMessage
        // 0x40 (0x10)
        // (Param | NeedCtorLink)
        public FString PushMessage {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.CreateMessage.ValidUntil
        // 0x50 (0x10)
        // (Param | NeedCtorLink)
        public FString ValidUntil {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageManager.CreateMessage.MessageContents
        // 0x60 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContents {
            get => new(Pointer + 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
        }
    }
    private static UFunction _ptrCreateMessage;
    public void CreateMessage(ref StructTArray<FString> ToUniqueUserIds, FString FromUniqueUserId, FString FromFriendlyName, FString MessageType, FString PushMessage, FString ValidUntil, ref UnmanagedTArray<byte> MessageContents) {
        _ptrCreateMessage ??= FindFunction("Function IpDrv.McpMessageManager.CreateMessage");

        var @params = stackalloc byte[112];
        System.Buffer.MemoryCopy((void*)ToUniqueUserIds.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FromUniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)FromFriendlyName.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageType.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy((void*)PushMessage.Pointer, @params + 64, 16, 16);
        System.Buffer.MemoryCopy((void*)ValidUntil.Pointer, @params + 80, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageContents.Pointer, @params + 96, 16, 16);

        ProcessEvent(_ptrCreateMessage, @params);

        var _ToUniqueUserIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ToUniqueUserIdsPtr, 16, 16);
        ToUniqueUserIds = new(_ToUniqueUserIdsPtr, 16) { Allocated = true };
        var _MessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 96, (void*)_MessageContentsPtr, 16, 16);
        MessageContents = new(_MessageContentsPtr) { Allocated = true };
    }

    // Function IpDrv.McpMessageManager.FinishedAsyncUncompression
    // 0x3750E0
    // (Final | Defined | Event | Public | HasOutParams)
    public unsafe class FinishedAsyncUncompression_Parameters : BaseObject {
        public FinishedAsyncUncompression_Parameters() { }
        public FinishedAsyncUncompression_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpMessageManager.FinishedAsyncUncompression.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.McpMessageManager.FinishedAsyncUncompression.UncompressedMessageContents
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> UncompressedMessageContents {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpMessageManager.FinishedAsyncUncompression.MessageId
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrFinishedAsyncUncompression;
    public void FinishedAsyncUncompression(bool bWasSuccessful, ref UnmanagedTArray<byte> UncompressedMessageContents, FString MessageId) {
        _ptrFinishedAsyncUncompression ??= FindFunction("Function IpDrv.McpMessageManager.FinishedAsyncUncompression");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UncompressedMessageContents.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrFinishedAsyncUncompression, @params);

        var _UncompressedMessageContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_UncompressedMessageContentsPtr, 16, 16);
        UncompressedMessageContents = new(_UncompressedMessageContentsPtr) { Allocated = true };
    }

    // Function IpDrv.McpMessageManager.StartAsyncUncompression
    // 0xBAA2B0
    // (Final | Native | Public | HasOutParams)
    public unsafe class StartAsyncUncompression_Parameters : BaseObject {
        public StartAsyncUncompression_Parameters() { }
        public StartAsyncUncompression_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.StartAsyncUncompression.MessageId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.McpMessageManager.StartAsyncUncompression.MessageCompressionType
        // 0x10 (0x1)
        // (Param)
        public UMcpMessageBase.EMcpMessageCompressionType MessageCompressionType {
            get => *(UMcpMessageBase.EMcpMessageCompressionType*)(Pointer + 16);
            set => *(UMcpMessageBase.EMcpMessageCompressionType*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.McpMessageManager.StartAsyncUncompression.MessageContent
        // 0x18 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContent {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // BoolProperty IpDrv.McpMessageManager.StartAsyncUncompression.ReturnValue
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrStartAsyncUncompression;
    public bool StartAsyncUncompression(FString MessageId, UMcpMessageBase.EMcpMessageCompressionType MessageCompressionType, ref UnmanagedTArray<byte> MessageContent) {
        _ptrStartAsyncUncompression ??= FindFunction("Function IpDrv.McpMessageManager.StartAsyncUncompression");

        var @params = stackalloc byte[37];
        System.Buffer.MemoryCopy((void*)MessageId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&MessageCompressionType, @params + 16, 1, 1);
        System.Buffer.MemoryCopy((void*)MessageContent.Pointer, @params + 24, 16, 16);

        _ptrStartAsyncUncompression.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrStartAsyncUncompression, @params);
        _ptrStartAsyncUncompression.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _MessageContentPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_MessageContentPtr, 16, 16);
        MessageContent = new(_MessageContentPtr) { Allocated = true };

        return *(bool*)(@params + 40);
    }

    // Function IpDrv.McpMessageManager.StartAsyncCompression
    // 0xBAA180
    // (Final | Native | Public | HasOutParams)
    public unsafe class StartAsyncCompression_Parameters : BaseObject {
        public StartAsyncCompression_Parameters() { }
        public StartAsyncCompression_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.McpMessageManager.StartAsyncCompression.MessageCompressionType
        // 0x0 (0x1)
        // (Param)
        public UMcpMessageBase.EMcpMessageCompressionType MessageCompressionType {
            get => *(UMcpMessageBase.EMcpMessageCompressionType*)Pointer;
            set => *(UMcpMessageBase.EMcpMessageCompressionType*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.McpMessageManager.StartAsyncCompression.MessageContent
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> MessageContent {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // ObjectProperty IpDrv.McpMessageManager.StartAsyncCompression.Request
        // 0x18 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }

        // BoolProperty IpDrv.McpMessageManager.StartAsyncCompression.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrStartAsyncCompression;
    public bool StartAsyncCompression(UMcpMessageBase.EMcpMessageCompressionType MessageCompressionType, ref UnmanagedTArray<byte> MessageContent, UHttpRequestInterface Request) {
        _ptrStartAsyncCompression ??= FindFunction("Function IpDrv.McpMessageManager.StartAsyncCompression");

        var @params = stackalloc byte[29];
        System.Buffer.MemoryCopy(&MessageCompressionType, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)MessageContent.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params + 24, 8, 8);

        _ptrStartAsyncCompression.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrStartAsyncCompression, @params);
        _ptrStartAsyncCompression.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _MessageContentPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_MessageContentPtr, 16, 16);
        MessageContent = new(_MessageContentPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }


    // ScriptStruct IpDrv.McpMessageManager.McpUncompressMessageRequest
    // 0x40
    public unsafe class FMcpUncompressMessageRequest : BaseObject {
        public FMcpUncompressMessageRequest() {
            Pointer = Marshal.AllocHGlobal(64);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 64);
            Allocated = true;
        }
        public FMcpUncompressMessageRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpMessageManager.McpUncompressMessageRequest.MessageId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString MessageId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageManager.McpUncompressMessageRequest.SourceBuffer
        // 0x10 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<byte> SourceBuffer {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageManager.McpUncompressMessageRequest.DestBuffer
        // 0x20 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<byte> DestBuffer {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpMessageManager.McpUncompressMessageRequest.OutUncompressedSize
        // 0x30 (0x4)
        public int OutUncompressedSize {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.McpMessageManager.McpUncompressMessageRequest.UncompressionWorker
        // 0x38 (0x8)
        // (Native)
        public nint UncompressionWorker {
            get => *(nint*)(Pointer + 56);
            set => *(nint*)(Pointer + 56) = value;
        }
    }

    // ScriptStruct IpDrv.McpMessageManager.McpCompressMessageRequest
    // 0x38
    public unsafe class FMcpCompressMessageRequest : BaseObject {
        public FMcpCompressMessageRequest() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FMcpCompressMessageRequest(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpMessageManager.McpCompressMessageRequest.SourceBuffer
        // 0x0 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<byte> SourceBuffer {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpMessageManager.McpCompressMessageRequest.DestBuffer
        // 0x10 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<byte> DestBuffer {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpMessageManager.McpCompressMessageRequest.OutCompressedSize
        // 0x20 (0x4)
        public int OutCompressedSize {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // MISSED OFFSET: 0x4

        // ObjectProperty IpDrv.McpMessageManager.McpCompressMessageRequest.Request
        // 0x28 (0x8)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 40);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 40) = value.Pointer;
        }

        // StructProperty IpDrv.McpMessageManager.McpCompressMessageRequest.CompressionWorker
        // 0x30 (0x8)
        // (Native)
        public nint CompressionWorker {
            get => *(nint*)(Pointer + 48);
            set => *(nint*)(Pointer + 48) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpMessageManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpUserCloudFileDownload
// 0xF0 (0x78 - 0x168)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UMcpUserCloudFileDownload : UMcpServiceBase {
    public UMcpUserCloudFileDownload() { }
    public UMcpUserCloudFileDownload(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpUserCloudFileDownload.EnumerateCloudFilesUrl
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString EnumerateCloudFilesUrl {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // StrProperty IpDrv.McpUserCloudFileDownload.ReadCloudFileUrl
    // 0x88 (0x10)
    // (Config | NeedCtorLink)
    public FString ReadCloudFileUrl {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 16, 16);
    }

    // StrProperty IpDrv.McpUserCloudFileDownload.WriteCloudFileUrl
    // 0x98 (0x10)
    // (Config | NeedCtorLink)
    public FString WriteCloudFileUrl {
        get => new(Pointer + 152);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 152), 16, 16);
    }

    // StrProperty IpDrv.McpUserCloudFileDownload.DeleteCloudFileUrl
    // 0xA8 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteCloudFileUrl {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserCloudFileDownload.UserCloudFileRequests
    // 0xB8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FMcpUserCloudFilesEntry> UserCloudFileRequests {
        get => new(Pointer + 184, 56);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserCloudFileDownload.EnumerateUserFilesCompleteDelegates
    // 0xC8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> EnumerateUserFilesCompleteDelegates {
        get => new(Pointer + 200, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserCloudFileDownload.ReadUserFileCompleteDelegates
    // 0xD8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ReadUserFileCompleteDelegates {
        get => new(Pointer + 216, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserCloudFileDownload.WriteUserFileCompleteDelegates
    // 0xE8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> WriteUserFileCompleteDelegates {
        get => new(Pointer + 232, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserCloudFileDownload.DeleteUserFileCompleteDelegates
    // 0xF8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> DeleteUserFileCompleteDelegates {
        get => new(Pointer + 248, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 16, 16);
    }

    // DelegateProperty IpDrv.McpUserCloudFileDownload.__OnEnumerateUserFilesComplete__Delegate
    // 0x108 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnEnumerateUserFilesComplete__Delegate {
        get => new(Pointer + 264);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 264), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserCloudFileDownload.__OnReadUserFileComplete__Delegate
    // 0x120 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReadUserFileComplete__Delegate {
        get => new(Pointer + 288);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 288), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserCloudFileDownload.__OnWriteUserFileComplete__Delegate
    // 0x138 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnWriteUserFileComplete__Delegate {
        get => new(Pointer + 312);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserCloudFileDownload.__OnDeleteUserFileComplete__Delegate
    // 0x150 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteUserFileComplete__Delegate {
        get => new(Pointer + 336);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 336), 24, 24);
    }


    // Function IpDrv.McpUserCloudFileDownload.ClearAllDelegates
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearAllDelegates_Parameters : BaseObject {
        public ClearAllDelegates_Parameters() { }
        public ClearAllDelegates_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearAllDelegates;
    public void ClearAllDelegates() {
        _ptrClearAllDelegates ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearAllDelegates");

        ProcessEvent(_ptrClearAllDelegates, null);
    }

    // Function IpDrv.McpUserCloudFileDownload.ClearDeleteUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearDeleteUserFileCompleteDelegate_Parameters : BaseObject {
        public ClearDeleteUserFileCompleteDelegate_Parameters() { }
        public ClearDeleteUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.ClearDeleteUserFileCompleteDelegate.DeleteUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate DeleteUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearDeleteUserFileCompleteDelegate;
    public void ClearDeleteUserFileCompleteDelegate(FScriptDelegate DeleteUserFileCompleteDelegate) {
        _ptrClearDeleteUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearDeleteUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)DeleteUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearDeleteUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.AddDeleteUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddDeleteUserFileCompleteDelegate_Parameters : BaseObject {
        public AddDeleteUserFileCompleteDelegate_Parameters() { }
        public AddDeleteUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.AddDeleteUserFileCompleteDelegate.DeleteUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate DeleteUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddDeleteUserFileCompleteDelegate;
    public void AddDeleteUserFileCompleteDelegate(FScriptDelegate DeleteUserFileCompleteDelegate) {
        _ptrAddDeleteUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.AddDeleteUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)DeleteUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddDeleteUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.CallDeleteUserFileCompleteDelegates
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class CallDeleteUserFileCompleteDelegates_Parameters : BaseObject {
        public CallDeleteUserFileCompleteDelegates_Parameters() { }
        public CallDeleteUserFileCompleteDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.CallDeleteUserFileCompleteDelegates.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.CallDeleteUserFileCompleteDelegates.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.CallDeleteUserFileCompleteDelegates.Filename
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrCallDeleteUserFileCompleteDelegates;
    public void CallDeleteUserFileCompleteDelegates(bool bWasSuccessful, FString UserId, FString Filename) {
        _ptrCallDeleteUserFileCompleteDelegates ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.CallDeleteUserFileCompleteDelegates");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrCallDeleteUserFileCompleteDelegates, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnDeleteUserFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteUserFileComplete_Parameters : BaseObject {
        public OnDeleteUserFileComplete_Parameters() { }
        public OnDeleteUserFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnDeleteUserFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.OnDeleteUserFileComplete.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.OnDeleteUserFileComplete.Filename
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteUserFileComplete;
    public void OnDeleteUserFileComplete(bool bWasSuccessful, FString UserId, FString Filename) {
        _ptrOnDeleteUserFileComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnDeleteUserFileComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnDeleteUserFileComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestDeleteUserFileComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnHTTPRequestDeleteUserFileComplete_Parameters : BaseObject {
        public OnHTTPRequestDeleteUserFileComplete_Parameters() { }
        public OnHTTPRequestDeleteUserFileComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestDeleteUserFileComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestDeleteUserFileComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestDeleteUserFileComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnHTTPRequestDeleteUserFileComplete;
    public void OnHTTPRequestDeleteUserFileComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnHTTPRequestDeleteUserFileComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestDeleteUserFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnHTTPRequestDeleteUserFileComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.DeleteUserFile
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class DeleteUserFile_Parameters : BaseObject {
        public DeleteUserFile_Parameters() { }
        public DeleteUserFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.DeleteUserFile.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.DeleteUserFile.Filename
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.DeleteUserFile.bShouldCloudDelete
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bShouldCloudDelete {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.DeleteUserFile.bShouldLocallyDelete
        // 0x24 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bShouldLocallyDelete {
            get => (*(uint*)(Pointer + 36) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 36) |= 0x1;
                else *(uint*)(Pointer + 36) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.DeleteUserFile.ReturnValue
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDeleteUserFile;
    public bool DeleteUserFile(FString UserId, FString Filename, bool bShouldCloudDelete, bool bShouldLocallyDelete) {
        _ptrDeleteUserFile ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.DeleteUserFile");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bShouldCloudDelete, @params + 32, 4, 4);
        System.Buffer.MemoryCopy(&bShouldLocallyDelete, @params + 36, 4, 4);

        ProcessEvent(_ptrDeleteUserFile, @params);

        return *(bool*)(@params + 40);
    }

    // Function IpDrv.McpUserCloudFileDownload.ClearWriteUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearWriteUserFileCompleteDelegate_Parameters : BaseObject {
        public ClearWriteUserFileCompleteDelegate_Parameters() { }
        public ClearWriteUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.ClearWriteUserFileCompleteDelegate.WriteUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate WriteUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearWriteUserFileCompleteDelegate;
    public void ClearWriteUserFileCompleteDelegate(FScriptDelegate WriteUserFileCompleteDelegate) {
        _ptrClearWriteUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearWriteUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)WriteUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearWriteUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.AddWriteUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddWriteUserFileCompleteDelegate_Parameters : BaseObject {
        public AddWriteUserFileCompleteDelegate_Parameters() { }
        public AddWriteUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.AddWriteUserFileCompleteDelegate.WriteUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate WriteUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddWriteUserFileCompleteDelegate;
    public void AddWriteUserFileCompleteDelegate(FScriptDelegate WriteUserFileCompleteDelegate) {
        _ptrAddWriteUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.AddWriteUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)WriteUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddWriteUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.CallWriteUserFileCompleteDelegates
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class CallWriteUserFileCompleteDelegates_Parameters : BaseObject {
        public CallWriteUserFileCompleteDelegates_Parameters() { }
        public CallWriteUserFileCompleteDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.CallWriteUserFileCompleteDelegates.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.CallWriteUserFileCompleteDelegates.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.CallWriteUserFileCompleteDelegates.Filename
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrCallWriteUserFileCompleteDelegates;
    public void CallWriteUserFileCompleteDelegates(bool bWasSuccessful, FString UserId, FString Filename) {
        _ptrCallWriteUserFileCompleteDelegates ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.CallWriteUserFileCompleteDelegates");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrCallWriteUserFileCompleteDelegates, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnWriteUserFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnWriteUserFileComplete_Parameters : BaseObject {
        public OnWriteUserFileComplete_Parameters() { }
        public OnWriteUserFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnWriteUserFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.OnWriteUserFileComplete.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.OnWriteUserFileComplete.Filename
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnWriteUserFileComplete;
    public void OnWriteUserFileComplete(bool bWasSuccessful, FString UserId, FString Filename) {
        _ptrOnWriteUserFileComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnWriteUserFileComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnWriteUserFileComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestWriteUserFileComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnHTTPRequestWriteUserFileComplete_Parameters : BaseObject {
        public OnHTTPRequestWriteUserFileComplete_Parameters() { }
        public OnHTTPRequestWriteUserFileComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestWriteUserFileComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestWriteUserFileComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestWriteUserFileComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnHTTPRequestWriteUserFileComplete;
    public void OnHTTPRequestWriteUserFileComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnHTTPRequestWriteUserFileComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestWriteUserFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnHTTPRequestWriteUserFileComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.GetUserFileIndexForRequest
    // 0x3750E0
    // (Final | Defined | Private | HasOutParams)
    public unsafe class GetUserFileIndexForRequest_Parameters : BaseObject {
        public GetUserFileIndexForRequest_Parameters() { }
        public GetUserFileIndexForRequest_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.GetUserFileIndexForRequest.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // IntProperty IpDrv.McpUserCloudFileDownload.GetUserFileIndexForRequest.UserIdx
        // 0x8 (0x4)
        // (Param | OutParam)
        public int UserIdx {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty IpDrv.McpUserCloudFileDownload.GetUserFileIndexForRequest.FileIdx
        // 0xC (0x4)
        // (Param | OutParam)
        public int FileIdx {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrGetUserFileIndexForRequest;
    public void GetUserFileIndexForRequest(UHttpRequestInterface Request, ref int UserIdx, ref int FileIdx) {
        _ptrGetUserFileIndexForRequest ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.GetUserFileIndexForRequest");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        var _UserIdx = UserIdx;
        System.Buffer.MemoryCopy(&_UserIdx, @params + 8, 4, 4);
        var _FileIdx = FileIdx;
        System.Buffer.MemoryCopy(&_FileIdx, @params + 12, 4, 4);

        ProcessEvent(_ptrGetUserFileIndexForRequest, @params);

        UserIdx = *(int*)(@params + 8);
        FileIdx = *(int*)(@params + 12);
    }

    // Function IpDrv.McpUserCloudFileDownload.WriteUserFile
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class WriteUserFile_Parameters : BaseObject {
        public WriteUserFile_Parameters() { }
        public WriteUserFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.WriteUserFile.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.WriteUserFile.Filename
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserCloudFileDownload.WriteUserFile.FileContents
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.WriteUserFile.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrWriteUserFile;
    public bool WriteUserFile(FString UserId, FString Filename, ref UnmanagedTArray<byte> FileContents) {
        _ptrWriteUserFile ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.WriteUserFile");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrWriteUserFile, @params);

        var _FileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_FileContentsPtr, 16, 16);
        FileContents = new(_FileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 48);
    }

    // Function IpDrv.McpUserCloudFileDownload.ClearReadUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearReadUserFileCompleteDelegate_Parameters : BaseObject {
        public ClearReadUserFileCompleteDelegate_Parameters() { }
        public ClearReadUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.ClearReadUserFileCompleteDelegate.ReadUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearReadUserFileCompleteDelegate;
    public void ClearReadUserFileCompleteDelegate(FScriptDelegate ReadUserFileCompleteDelegate) {
        _ptrClearReadUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearReadUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ReadUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearReadUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.AddReadUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddReadUserFileCompleteDelegate_Parameters : BaseObject {
        public AddReadUserFileCompleteDelegate_Parameters() { }
        public AddReadUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.AddReadUserFileCompleteDelegate.ReadUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ReadUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddReadUserFileCompleteDelegate;
    public void AddReadUserFileCompleteDelegate(FScriptDelegate ReadUserFileCompleteDelegate) {
        _ptrAddReadUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.AddReadUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ReadUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddReadUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.CallReadUserFileCompleteDelegates
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class CallReadUserFileCompleteDelegates_Parameters : BaseObject {
        public CallReadUserFileCompleteDelegates_Parameters() { }
        public CallReadUserFileCompleteDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.CallReadUserFileCompleteDelegates.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.CallReadUserFileCompleteDelegates.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.CallReadUserFileCompleteDelegates.Filename
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrCallReadUserFileCompleteDelegates;
    public void CallReadUserFileCompleteDelegates(bool bWasSuccessful, FString UserId, FString Filename) {
        _ptrCallReadUserFileCompleteDelegates ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.CallReadUserFileCompleteDelegates");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrCallReadUserFileCompleteDelegates, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnReadUserFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReadUserFileComplete_Parameters : BaseObject {
        public OnReadUserFileComplete_Parameters() { }
        public OnReadUserFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnReadUserFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.OnReadUserFileComplete.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.OnReadUserFileComplete.Filename
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnReadUserFileComplete;
    public void OnReadUserFileComplete(bool bWasSuccessful, FString UserId, FString Filename) {
        _ptrOnReadUserFileComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnReadUserFileComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnReadUserFileComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestReadUserFileComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnHTTPRequestReadUserFileComplete_Parameters : BaseObject {
        public OnHTTPRequestReadUserFileComplete_Parameters() { }
        public OnHTTPRequestReadUserFileComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestReadUserFileComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestReadUserFileComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestReadUserFileComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnHTTPRequestReadUserFileComplete;
    public void OnHTTPRequestReadUserFileComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnHTTPRequestReadUserFileComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestReadUserFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnHTTPRequestReadUserFileComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.ReadUserFile
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ReadUserFile_Parameters : BaseObject {
        public ReadUserFile_Parameters() { }
        public ReadUserFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.ReadUserFile.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.ReadUserFile.Filename
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.ReadUserFile.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadUserFile;
    public bool ReadUserFile(FString UserId, FString Filename) {
        _ptrReadUserFile ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ReadUserFile");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrReadUserFile, @params);

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.McpUserCloudFileDownload.GetUserFileList
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetUserFileList_Parameters : BaseObject {
        public GetUserFileList_Parameters() { }
        public GetUserFileList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.GetUserFileList.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpUserCloudFileDownload.GetUserFileList.UserFiles
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UOnlineSubsystem.FEmsFile> UserFiles {
            get => new(Pointer + 16, 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetUserFileList;
    public void GetUserFileList(FString UserId, ref StructTArray<UOnlineSubsystem.FEmsFile> UserFiles) {
        _ptrGetUserFileList ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.GetUserFileList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UserFiles.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetUserFileList, @params);

        var _UserFilesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_UserFilesPtr, 16, 16);
        UserFiles = new(_UserFilesPtr, 56) { Allocated = true };
    }

    // Function IpDrv.McpUserCloudFileDownload.ClearEnumerateUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearEnumerateUserFileCompleteDelegate_Parameters : BaseObject {
        public ClearEnumerateUserFileCompleteDelegate_Parameters() { }
        public ClearEnumerateUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.ClearEnumerateUserFileCompleteDelegate.EnumerateUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate EnumerateUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearEnumerateUserFileCompleteDelegate;
    public void ClearEnumerateUserFileCompleteDelegate(FScriptDelegate EnumerateUserFileCompleteDelegate) {
        _ptrClearEnumerateUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearEnumerateUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)EnumerateUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearEnumerateUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.AddEnumerateUserFileCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddEnumerateUserFileCompleteDelegate_Parameters : BaseObject {
        public AddEnumerateUserFileCompleteDelegate_Parameters() { }
        public AddEnumerateUserFileCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.McpUserCloudFileDownload.AddEnumerateUserFileCompleteDelegate.EnumerateUserFileCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate EnumerateUserFileCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddEnumerateUserFileCompleteDelegate;
    public void AddEnumerateUserFileCompleteDelegate(FScriptDelegate EnumerateUserFileCompleteDelegate) {
        _ptrAddEnumerateUserFileCompleteDelegate ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.AddEnumerateUserFileCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)EnumerateUserFileCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddEnumerateUserFileCompleteDelegate, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.CallEnumerateUserFileCompleteDelegates
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class CallEnumerateUserFileCompleteDelegates_Parameters : BaseObject {
        public CallEnumerateUserFileCompleteDelegates_Parameters() { }
        public CallEnumerateUserFileCompleteDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.CallEnumerateUserFileCompleteDelegates.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.CallEnumerateUserFileCompleteDelegates.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrCallEnumerateUserFileCompleteDelegates;
    public void CallEnumerateUserFileCompleteDelegates(bool bWasSuccessful, FString UserId) {
        _ptrCallEnumerateUserFileCompleteDelegates ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.CallEnumerateUserFileCompleteDelegates");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrCallEnumerateUserFileCompleteDelegates, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnEnumerateUserFilesComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnEnumerateUserFilesComplete_Parameters : BaseObject {
        public OnEnumerateUserFilesComplete_Parameters() { }
        public OnEnumerateUserFilesComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnEnumerateUserFilesComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.OnEnumerateUserFilesComplete.UserId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnEnumerateUserFilesComplete;
    public void OnEnumerateUserFilesComplete(bool bWasSuccessful, FString UserId) {
        _ptrOnEnumerateUserFilesComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnEnumerateUserFilesComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnEnumerateUserFilesComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestEnumerateUserFilesComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnHTTPRequestEnumerateUserFilesComplete_Parameters : BaseObject {
        public OnHTTPRequestEnumerateUserFilesComplete_Parameters() { }
        public OnHTTPRequestEnumerateUserFilesComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestEnumerateUserFilesComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestEnumerateUserFilesComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.OnHTTPRequestEnumerateUserFilesComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnHTTPRequestEnumerateUserFilesComplete;
    public void OnHTTPRequestEnumerateUserFilesComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnHTTPRequestEnumerateUserFilesComplete ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.OnHTTPRequestEnumerateUserFilesComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnHTTPRequestEnumerateUserFilesComplete, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.EnumerateUserFiles
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class EnumerateUserFiles_Parameters : BaseObject {
        public EnumerateUserFiles_Parameters() { }
        public EnumerateUserFiles_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.EnumerateUserFiles.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrEnumerateUserFiles;
    public void EnumerateUserFiles(FString UserId) {
        _ptrEnumerateUserFiles ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.EnumerateUserFiles");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrEnumerateUserFiles, @params);
    }

    // Function IpDrv.McpUserCloudFileDownload.ClearFile
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearFile_Parameters : BaseObject {
        public ClearFile_Parameters() { }
        public ClearFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.ClearFile.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.ClearFile.Filename
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.ClearFile.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearFile;
    public bool ClearFile(FString UserId, FString Filename) {
        _ptrClearFile ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearFile");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrClearFile, @params);

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.McpUserCloudFileDownload.ClearFiles
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearFiles_Parameters : BaseObject {
        public ClearFiles_Parameters() { }
        public ClearFiles_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.ClearFiles.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.ClearFiles.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClearFiles;
    public bool ClearFiles(FString UserId) {
        _ptrClearFiles ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.ClearFiles");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrClearFiles, @params);

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.McpUserCloudFileDownload.GetFileContents
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetFileContents_Parameters : BaseObject {
        public GetFileContents_Parameters() { }
        public GetFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.GetFileContents.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.GetFileContents.Filename
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserCloudFileDownload.GetFileContents.FileContents
        // 0x20 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> FileContents {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpUserCloudFileDownload.GetFileContents.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetFileContents;
    public bool GetFileContents(FString UserId, FString Filename, ref UnmanagedTArray<byte> FileContents) {
        _ptrGetFileContents ??= FindFunction("Function IpDrv.McpUserCloudFileDownload.GetFileContents");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)FileContents.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrGetFileContents, @params);

        var _FileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_FileContentsPtr, 16, 16);
        FileContents = new(_FileContentsPtr) { Allocated = true };

        return *(bool*)(@params + 48);
    }


    // ScriptStruct IpDrv.McpUserCloudFileDownload.McpUserCloudFilesEntry
    // 0x38
    public unsafe class FMcpUserCloudFilesEntry : BaseObject {
        public FMcpUserCloudFilesEntry() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FMcpUserCloudFilesEntry(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFilesEntry.UserId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFilesEntry.DownloadedFiles
        // 0x10 (0x10)
        // (NeedCtorLink)
        public StructTArray<UOnlineTitleFileDownloadBase.FTitleFileWeb> DownloadedFiles {
            get => new(Pointer + 16, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFilesEntry.EnumeratedFiles
        // 0x20 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpUserCloudFileInfo> EnumeratedFiles {
            get => new(Pointer + 32, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ObjectProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFilesEntry.HTTPRequestEnumerateFiles
        // 0x30 (0x8)
        public UHttpRequestInterface HTTPRequestEnumerateFiles {
            get {
                var pointer = *(nint*)(Pointer + 48);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 48) = value.Pointer;
        }
    }

    // ScriptStruct IpDrv.McpUserCloudFileDownload.McpUserCloudFileInfo
    // 0x34 (0x34 - 0x68)
    public unsafe class FMcpUserCloudFileInfo : UOnlineSubsystem.FEmsFile {
        public FMcpUserCloudFileInfo() {
            Pointer = Marshal.AllocHGlobal(104);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 104);
            Allocated = true;
        }
        public FMcpUserCloudFileInfo(nint pointer) : base(pointer) { }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFileInfo.CreationDate
        // 0x38 (0x10)
        // (NeedCtorLink)
        public FString CreationDate {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFileInfo.LastUpdateDate
        // 0x48 (0x10)
        // (NeedCtorLink)
        public FString LastUpdateDate {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // StrProperty IpDrv.McpUserCloudFileDownload.McpUserCloudFileInfo.CompressionType
        // 0x58 (0x10)
        // (NeedCtorLink)
        public FString CompressionType {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpUserCloudFileDownload");
            return _staticClass;
        }
    }
}

// Class IpDrv.MeshBeacon
// 0x48 (0x60 - 0xA8)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UMeshBeacon : UObject {
    public UMeshBeacon() { }
    public UMeshBeacon(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.MeshBeacon.VfTable_FTickableObject
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FTickableObject {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // IntProperty IpDrv.MeshBeacon.MeshBeaconPort
    // 0x68 (0x4)
    // (Config)
    public int MeshBeaconPort {
        get => *(int*)(Pointer + 104);
        set => *(int*)(Pointer + 104) = value;
    }

    // MISSED OFFSET: 0x4

    // StructProperty IpDrv.MeshBeacon.Socket
    // 0x70 (0x8)
    // (Native | Transient)
    public nint Socket {
        get => *(nint*)(Pointer + 112);
        set => *(nint*)(Pointer + 112) = value;
    }

    // BoolProperty IpDrv.MeshBeacon.bIsInTick
    // 0x78 (0x4)
    // Bitmask: 0x00000001
    // (Transient)
    public bool bIsInTick {
        get => (*(uint*)(Pointer + 120) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x1;
            else *(uint*)(Pointer + 120) &= ~(uint)0x1;
        }
    }

    // BoolProperty IpDrv.MeshBeacon.bWantsDeferredDestroy
    // 0x78 (0x4)
    // Bitmask: 0x00000002
    // (Transient)
    public bool bWantsDeferredDestroy {
        get => (*(uint*)(Pointer + 120) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x2;
            else *(uint*)(Pointer + 120) &= ~(uint)0x2;
        }
    }

    // BoolProperty IpDrv.MeshBeacon.bShouldTick
    // 0x78 (0x4)
    // Bitmask: 0x00000004
    public bool bShouldTick {
        get => (*(uint*)(Pointer + 120) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x4;
            else *(uint*)(Pointer + 120) &= ~(uint)0x4;
        }
    }

    // FloatProperty IpDrv.MeshBeacon.HeartbeatTimeout
    // 0x7C (0x4)
    // (Config)
    public float HeartbeatTimeout {
        get => *(float*)(Pointer + 124);
        set => *(float*)(Pointer + 124) = value;
    }

    // FloatProperty IpDrv.MeshBeacon.ElapsedHeartbeatTime
    // 0x80 (0x4)
    public float ElapsedHeartbeatTime {
        get => *(float*)(Pointer + 128);
        set => *(float*)(Pointer + 128) = value;
    }

    // NameProperty IpDrv.MeshBeacon.BeaconName
    // 0x84 (0x8)
    public FName BeaconName {
        get => new(Pointer + 132);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 132), 8, 8);
    }

    // IntProperty IpDrv.MeshBeacon.SocketSendBufferSize
    // 0x8C (0x4)
    // (Config)
    public int SocketSendBufferSize {
        get => *(int*)(Pointer + 140);
        set => *(int*)(Pointer + 140) = value;
    }

    // IntProperty IpDrv.MeshBeacon.SocketReceiveBufferSize
    // 0x90 (0x4)
    // (Config)
    public int SocketReceiveBufferSize {
        get => *(int*)(Pointer + 144);
        set => *(int*)(Pointer + 144) = value;
    }

    // IntProperty IpDrv.MeshBeacon.MaxBandwidthTestBufferSize
    // 0x94 (0x4)
    // (Config)
    public int MaxBandwidthTestBufferSize {
        get => *(int*)(Pointer + 148);
        set => *(int*)(Pointer + 148) = value;
    }

    // IntProperty IpDrv.MeshBeacon.MinBandwidthTestBufferSize
    // 0x98 (0x4)
    // (Config)
    public int MinBandwidthTestBufferSize {
        get => *(int*)(Pointer + 152);
        set => *(int*)(Pointer + 152) = value;
    }

    // FloatProperty IpDrv.MeshBeacon.MaxBandwidthTestSendTime
    // 0x9C (0x4)
    // (Config)
    public float MaxBandwidthTestSendTime {
        get => *(float*)(Pointer + 156);
        set => *(float*)(Pointer + 156) = value;
    }

    // FloatProperty IpDrv.MeshBeacon.MaxBandwidthTestReceiveTime
    // 0xA0 (0x4)
    // (Config)
    public float MaxBandwidthTestReceiveTime {
        get => *(float*)(Pointer + 160);
        set => *(float*)(Pointer + 160) = value;
    }

    // IntProperty IpDrv.MeshBeacon.MaxBandwidthHistoryEntries
    // 0xA4 (0x4)
    // (Config)
    public int MaxBandwidthHistoryEntries {
        get => *(int*)(Pointer + 164);
        set => *(int*)(Pointer + 164) = value;
    }


    // Function IpDrv.MeshBeacon.DestroyBeacon
    // 0x669880
    // (Native | Event | Public)
    public unsafe class DestroyBeacon_Parameters : BaseObject {
        public DestroyBeacon_Parameters() { }
        public DestroyBeacon_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyBeacon;
    public void DestroyBeacon() {
        _ptrDestroyBeacon ??= FindFunction("Function IpDrv.MeshBeacon.DestroyBeacon");

        _ptrDestroyBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyBeacon, null);
        _ptrDestroyBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }


    // ScriptStruct IpDrv.MeshBeacon.PlayerMember
    // 0x50
    public unsafe class FPlayerMember : BaseObject {
        public FPlayerMember() {
            Pointer = Marshal.AllocHGlobal(80);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 80);
            Allocated = true;
        }
        public FPlayerMember(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.MeshBeacon.PlayerMember.TeamNum
        // 0x0 (0x4)
        public int TeamNum {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.MeshBeacon.PlayerMember.Skill
        // 0x4 (0x4)
        public int Skill {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // StructProperty IpDrv.MeshBeacon.PlayerMember.NetId
        // 0x8 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId NetId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }
    }

    // ScriptStruct IpDrv.MeshBeacon.ConnectionBandwidthStats
    // 0xC
    public unsafe class FConnectionBandwidthStats : BaseObject {
        public FConnectionBandwidthStats() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FConnectionBandwidthStats(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.MeshBeacon.ConnectionBandwidthStats.UpstreamRate
        // 0x0 (0x4)
        public int UpstreamRate {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.MeshBeacon.ConnectionBandwidthStats.DownstreamRate
        // 0x4 (0x4)
        public int DownstreamRate {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.MeshBeacon.ConnectionBandwidthStats.RoundtripLatency
        // 0x8 (0x4)
        public int RoundtripLatency {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }


    // Enum IpDrv.MeshBeacon.EMeshBeaconBandwidthTestType
    public enum EMeshBeaconBandwidthTestType : byte {
        MB_BandwidthTestType_Upstream = 0,
        MB_BandwidthTestType_Downstream = 1,
        MB_BandwidthTestType_RoundtripLatency = 2,
        MB_BandwidthTestType_MAX = 3
    }

    // Enum IpDrv.MeshBeacon.EMeshBeaconBandwidthTestResult
    public enum EMeshBeaconBandwidthTestResult : byte {
        MB_BandwidthTestResult_Succeeded = 0,
        MB_BandwidthTestResult_Timeout = 1,
        MB_BandwidthTestResult_Error = 2,
        MB_BandwidthTestResult_MAX = 3
    }

    // Enum IpDrv.MeshBeacon.EMeshBeaconBandwidthTestState
    public enum EMeshBeaconBandwidthTestState : byte {
        MB_BandwidthTestState_NotStarted = 0,
        MB_BandwidthTestState_RequestPending = 1,
        MB_BandwidthTestState_StartPending = 2,
        MB_BandwidthTestState_InProgress = 3,
        MB_BandwidthTestState_Completed = 4,
        MB_BandwidthTestState_Incomplete = 5,
        MB_BandwidthTestState_Timeout = 6,
        MB_BandwidthTestState_Error = 7,
        MB_BandwidthTestState_MAX = 8
    }

    // Enum IpDrv.MeshBeacon.EMeshBeaconConnectionResult
    public enum EMeshBeaconConnectionResult : byte {
        MB_ConnectionResult_Succeeded = 0,
        MB_ConnectionResult_Duplicate = 1,
        MB_ConnectionResult_Timeout = 2,
        MB_ConnectionResult_Error = 3,
        MB_ConnectionResult_MAX = 4
    }

    // Enum IpDrv.MeshBeacon.EMeshBeaconPacketType
    public enum EMeshBeaconPacketType : byte {
        MB_Packet_UnknownType = 0,
        MB_Packet_ClientNewConnectionRequest = 1,
        MB_Packet_ClientBeginBandwidthTest = 2,
        MB_Packet_ClientCreateNewSessionResponse = 3,
        MB_Packet_HostNewConnectionResponse = 4,
        MB_Packet_HostBandwidthTestRequest = 5,
        MB_Packet_HostCompletedBandwidthTest = 6,
        MB_Packet_HostTravelRequest = 7,
        MB_Packet_HostCreateNewSessionRequest = 8,
        MB_Packet_DummyData = 9,
        MB_Packet_Heartbeat = 10,
        MB_Packet_MAX = 11
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.MeshBeacon");
            return _staticClass;
        }
    }
}

// Class IpDrv.MeshBeaconClient
// 0x140 (0xA8 - 0x1E8)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UMeshBeaconClient : UMeshBeacon {
    public UMeshBeaconClient() { }
    public UMeshBeaconClient(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.MeshBeaconClient.HostPendingRequest
    // 0xA8 (0x10)
    // (Const)
    public UOnlineGameSearch.FOnlineGameSearchResult HostPendingRequest {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // StructProperty IpDrv.MeshBeaconClient.ClientPendingRequest
    // 0xB8 (0x70)
    // (Const | NeedCtorLink)
    public FClientConnectionRequest ClientPendingRequest {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 112, 112);
    }

    // StructProperty IpDrv.MeshBeaconClient.CurrentBandwidthTest
    // 0x128 (0x14)
    public FClientBandwidthTestData CurrentBandwidthTest {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 20, 20);
    }

    // ByteProperty IpDrv.MeshBeaconClient.ClientBeaconState
    // 0x13C (0x1)
    public EMeshBeaconClientState ClientBeaconState {
        get => *(EMeshBeaconClientState*)(Pointer + 316);
        set => *(EMeshBeaconClientState*)(Pointer + 316) = value;
    }

    // ByteProperty IpDrv.MeshBeaconClient.ClientBeaconRequestType
    // 0x13D (0x1)
    public UMeshBeacon.EMeshBeaconPacketType ClientBeaconRequestType {
        get => *(UMeshBeacon.EMeshBeaconPacketType*)(Pointer + 317);
        set => *(UMeshBeacon.EMeshBeaconPacketType*)(Pointer + 317) = value;
    }

    // MISSED OFFSET: 0x2

    // FloatProperty IpDrv.MeshBeaconClient.ConnectionRequestTimeout
    // 0x140 (0x4)
    // (Config)
    public float ConnectionRequestTimeout {
        get => *(float*)(Pointer + 320);
        set => *(float*)(Pointer + 320) = value;
    }

    // FloatProperty IpDrv.MeshBeaconClient.ConnectionRequestElapsedTime
    // 0x144 (0x4)
    public float ConnectionRequestElapsedTime {
        get => *(float*)(Pointer + 324);
        set => *(float*)(Pointer + 324) = value;
    }

    // StrProperty IpDrv.MeshBeaconClient.ResolverClassName
    // 0x148 (0x10)
    // (Config | NeedCtorLink)
    public FString ResolverClassName {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 16, 16);
    }

    // ClassProperty IpDrv.MeshBeaconClient.ResolverClass
    // 0x158 (0x8)
    public UClass ResolverClass {
        get {
            var pointer = *(nint*)(Pointer + 344);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 344) = value.Pointer;
    }

    // ObjectProperty IpDrv.MeshBeaconClient.Resolver
    // 0x160 (0x8)
    public UClientBeaconAddressResolver Resolver {
        get {
            var pointer = *(nint*)(Pointer + 352);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 352) = value.Pointer;
    }

    // BoolProperty IpDrv.MeshBeaconClient.bUsingRegisteredAddr
    // 0x168 (0x4)
    // Bitmask: 0x00000001
    // (Transient)
    public bool bUsingRegisteredAddr {
        get => (*(uint*)(Pointer + 360) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 360) |= 0x1;
            else *(uint*)(Pointer + 360) &= ~(uint)0x1;
        }
    }

    // MISSED OFFSET: 0x4

    // DelegateProperty IpDrv.MeshBeaconClient.__OnConnectionRequestResult__Delegate
    // 0x170 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnConnectionRequestResult__Delegate {
        get => new(Pointer + 368);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 368), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconClient.__OnReceivedBandwidthTestRequest__Delegate
    // 0x188 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceivedBandwidthTestRequest__Delegate {
        get => new(Pointer + 392);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 392), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconClient.__OnReceivedBandwidthTestResults__Delegate
    // 0x1A0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceivedBandwidthTestResults__Delegate {
        get => new(Pointer + 416);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 416), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconClient.__OnTravelRequestReceived__Delegate
    // 0x1B8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnTravelRequestReceived__Delegate {
        get => new(Pointer + 440);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 440), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconClient.__OnCreateNewSessionRequestReceived__Delegate
    // 0x1D0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateNewSessionRequestReceived__Delegate {
        get => new(Pointer + 464);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 464), 24, 24);
    }


    // Function IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse
    // 0xBAC590
    // (Final | Native | Public | HasOutParams)
    public unsafe class SendHostNewGameSessionResponse_Parameters : BaseObject {
        public SendHostNewGameSessionResponse_Parameters() { }
        public SendHostNewGameSessionResponse_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse.bSuccess
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSuccess {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // NameProperty IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // MISSED OFFSET: 0x4

        // ClassProperty IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse.SearchClass
        // 0x10 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // ByteProperty IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse.PlatformSpecificInfo
        // 0x18 (0x50)
        // (Const | Param | OutParam)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 24, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 80, 80);
        }

        // BoolProperty IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendHostNewGameSessionResponse;
    public bool SendHostNewGameSessionResponse(bool bSuccess, FName SessionName, UClass SearchClass, ref UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrSendHostNewGameSessionResponse ??= FindFunction("Function IpDrv.MeshBeaconClient.SendHostNewGameSessionResponse");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy(&bSuccess, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 24, 80, 80);

        _ptrSendHostNewGameSessionResponse.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendHostNewGameSessionResponse, @params);
        _ptrSendHostNewGameSessionResponse.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlatformSpecificInfoPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 24, (void*)_PlatformSpecificInfoPtr, 80, 80);
        PlatformSpecificInfo = new(_PlatformSpecificInfoPtr, 80) { Allocated = true };

        return *(bool*)(@params + 104);
    }

    // Function IpDrv.MeshBeaconClient.OnCreateNewSessionRequestReceived
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnCreateNewSessionRequestReceived_Parameters : BaseObject {
        public OnCreateNewSessionRequestReceived_Parameters() { }
        public OnCreateNewSessionRequestReceived_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.MeshBeaconClient.OnCreateNewSessionRequestReceived.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ClassProperty IpDrv.MeshBeaconClient.OnCreateNewSessionRequestReceived.SearchClass
        // 0x8 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ArrayProperty IpDrv.MeshBeaconClient.OnCreateNewSessionRequestReceived.Players
        // 0x10 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UMeshBeacon.FPlayerMember> Players {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrOnCreateNewSessionRequestReceived;
    public void OnCreateNewSessionRequestReceived(FName SessionName, UClass SearchClass, ref StructTArray<UMeshBeacon.FPlayerMember> Players) {
        _ptrOnCreateNewSessionRequestReceived ??= FindFunction("Function IpDrv.MeshBeaconClient.OnCreateNewSessionRequestReceived");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrOnCreateNewSessionRequestReceived, @params);

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 80) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconClient.OnTravelRequestReceived
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnTravelRequestReceived_Parameters : BaseObject {
        public OnTravelRequestReceived_Parameters() { }
        public OnTravelRequestReceived_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.MeshBeaconClient.OnTravelRequestReceived.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ClassProperty IpDrv.MeshBeaconClient.OnTravelRequestReceived.SearchClass
        // 0x8 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ByteProperty IpDrv.MeshBeaconClient.OnTravelRequestReceived.PlatformSpecificInfo
        // 0x10 (0x50)
        // (Const | Param | OutParam)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 80, 80);
        }
    }
    private static UFunction _ptrOnTravelRequestReceived;
    public void OnTravelRequestReceived(FName SessionName, UClass SearchClass, ref UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrOnTravelRequestReceived ??= FindFunction("Function IpDrv.MeshBeaconClient.OnTravelRequestReceived");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 16, 80, 80);

        ProcessEvent(_ptrOnTravelRequestReceived, @params);

        var _PlatformSpecificInfoPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlatformSpecificInfoPtr, 80, 80);
        PlatformSpecificInfo = new(_PlatformSpecificInfoPtr, 80) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconClient.OnReceivedBandwidthTestResults
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnReceivedBandwidthTestResults_Parameters : BaseObject {
        public OnReceivedBandwidthTestResults_Parameters() { }
        public OnReceivedBandwidthTestResults_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.MeshBeaconClient.OnReceivedBandwidthTestResults.TestType
        // 0x0 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer;
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer = value;
        }

        // ByteProperty IpDrv.MeshBeaconClient.OnReceivedBandwidthTestResults.TestResult
        // 0x1 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestResult TestResult {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestResult*)(Pointer + 1);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestResult*)(Pointer + 1) = value;
        }

        // MISSED OFFSET: 0x2

        // StructProperty IpDrv.MeshBeaconClient.OnReceivedBandwidthTestResults.BandwidthStats
        // 0x4 (0xC)
        // (Const | Param | OutParam)
        public UMeshBeacon.FConnectionBandwidthStats BandwidthStats {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 12, 12);
        }
    }
    private static UFunction _ptrOnReceivedBandwidthTestResults;
    public void OnReceivedBandwidthTestResults(UMeshBeacon.EMeshBeaconBandwidthTestType TestType, UMeshBeacon.EMeshBeaconBandwidthTestResult TestResult, ref UMeshBeacon.FConnectionBandwidthStats BandwidthStats) {
        _ptrOnReceivedBandwidthTestResults ??= FindFunction("Function IpDrv.MeshBeaconClient.OnReceivedBandwidthTestResults");

        var @params = stackalloc byte[14];
        System.Buffer.MemoryCopy(&TestType, @params, 1, 1);
        System.Buffer.MemoryCopy(&TestResult, @params + 1, 1, 1);
        System.Buffer.MemoryCopy((void*)BandwidthStats.Pointer, @params + 4, 12, 12);

        ProcessEvent(_ptrOnReceivedBandwidthTestResults, @params);

        var _BandwidthStatsPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 4, (void*)_BandwidthStatsPtr, 12, 12);
        BandwidthStats = new(_BandwidthStatsPtr) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconClient.OnReceivedBandwidthTestRequest
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReceivedBandwidthTestRequest_Parameters : BaseObject {
        public OnReceivedBandwidthTestRequest_Parameters() { }
        public OnReceivedBandwidthTestRequest_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.MeshBeaconClient.OnReceivedBandwidthTestRequest.TestType
        // 0x0 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer;
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer = value;
        }
    }
    private static UFunction _ptrOnReceivedBandwidthTestRequest;
    public void OnReceivedBandwidthTestRequest(UMeshBeacon.EMeshBeaconBandwidthTestType TestType) {
        _ptrOnReceivedBandwidthTestRequest ??= FindFunction("Function IpDrv.MeshBeaconClient.OnReceivedBandwidthTestRequest");

        var @params = stackalloc byte[1];
        System.Buffer.MemoryCopy(&TestType, @params, 1, 1);

        ProcessEvent(_ptrOnReceivedBandwidthTestRequest, @params);
    }

    // Function IpDrv.MeshBeaconClient.OnConnectionRequestResult
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnConnectionRequestResult_Parameters : BaseObject {
        public OnConnectionRequestResult_Parameters() { }
        public OnConnectionRequestResult_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.MeshBeaconClient.OnConnectionRequestResult.ConnectionResult
        // 0x0 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconConnectionResult ConnectionResult {
            get => *(UMeshBeacon.EMeshBeaconConnectionResult*)Pointer;
            set => *(UMeshBeacon.EMeshBeaconConnectionResult*)Pointer = value;
        }
    }
    private static UFunction _ptrOnConnectionRequestResult;
    public void OnConnectionRequestResult(UMeshBeacon.EMeshBeaconConnectionResult ConnectionResult) {
        _ptrOnConnectionRequestResult ??= FindFunction("Function IpDrv.MeshBeaconClient.OnConnectionRequestResult");

        var @params = stackalloc byte[1];
        System.Buffer.MemoryCopy(&ConnectionResult, @params, 1, 1);

        ProcessEvent(_ptrOnConnectionRequestResult, @params);
    }

    // Function IpDrv.MeshBeaconClient.BeginBandwidthTest
    // 0xBAC4E0
    // (Final | Native | Public)
    public unsafe class BeginBandwidthTest_Parameters : BaseObject {
        public BeginBandwidthTest_Parameters() { }
        public BeginBandwidthTest_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.MeshBeaconClient.BeginBandwidthTest.TestType
        // 0x0 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer;
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // IntProperty IpDrv.MeshBeaconClient.BeginBandwidthTest.TestBufferSize
        // 0x4 (0x4)
        // (Param)
        public int TestBufferSize {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty IpDrv.MeshBeaconClient.BeginBandwidthTest.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrBeginBandwidthTest;
    public bool BeginBandwidthTest(UMeshBeacon.EMeshBeaconBandwidthTestType TestType, int TestBufferSize) {
        _ptrBeginBandwidthTest ??= FindFunction("Function IpDrv.MeshBeaconClient.BeginBandwidthTest");

        var @params = stackalloc byte[9];
        System.Buffer.MemoryCopy(&TestType, @params, 1, 1);
        System.Buffer.MemoryCopy(&TestBufferSize, @params + 4, 4, 4);

        _ptrBeginBandwidthTest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrBeginBandwidthTest, @params);
        _ptrBeginBandwidthTest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.MeshBeaconClient.RequestConnection
    // 0xBAC340
    // (Final | Native | Public | HasOutParams)
    public unsafe class RequestConnection_Parameters : BaseObject {
        public RequestConnection_Parameters() { }
        public RequestConnection_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconClient.RequestConnection.DesiredHost
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult DesiredHost {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.MeshBeaconClient.RequestConnection.ClientRequest
        // 0x10 (0x70)
        // (Const | Param | OutParam | NeedCtorLink)
        public FClientConnectionRequest ClientRequest {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 112, 112);
        }

        // BoolProperty IpDrv.MeshBeaconClient.RequestConnection.bRegisterSecureAddress
        // 0x80 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bRegisterSecureAddress {
            get => (*(uint*)(Pointer + 128) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 128) |= 0x1;
                else *(uint*)(Pointer + 128) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.MeshBeaconClient.RequestConnection.ReturnValue
        // 0x84 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 132) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 132) |= 0x1;
                else *(uint*)(Pointer + 132) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestConnection;
    public bool RequestConnection(ref UOnlineGameSearch.FOnlineGameSearchResult DesiredHost, ref FClientConnectionRequest ClientRequest, bool bRegisterSecureAddress) {
        _ptrRequestConnection ??= FindFunction("Function IpDrv.MeshBeaconClient.RequestConnection");

        var @params = stackalloc byte[136];
        System.Buffer.MemoryCopy((void*)DesiredHost.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ClientRequest.Pointer, @params + 16, 112, 112);
        System.Buffer.MemoryCopy(&bRegisterSecureAddress, @params + 128, 4, 4);

        _ptrRequestConnection.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequestConnection, @params);
        _ptrRequestConnection.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DesiredHostPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_DesiredHostPtr, 16, 16);
        DesiredHost = new(_DesiredHostPtr) { Allocated = true };
        var _ClientRequestPtr = Marshal.AllocHGlobal(112);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ClientRequestPtr, 112, 112);
        ClientRequest = new(_ClientRequestPtr) { Allocated = true };

        return *(bool*)(@params + 132);
    }

    // Function IpDrv.MeshBeaconClient.DestroyBeacon
    // 0x669880
    // (Native | Event | Public)
    public unsafe class DestroyBeacon_Parameters : BaseObject {
        public DestroyBeacon_Parameters() { }
        public DestroyBeacon_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyBeacon;
    public void DestroyBeacon() {
        _ptrDestroyBeacon ??= FindFunction("Function IpDrv.MeshBeaconClient.DestroyBeacon");

        _ptrDestroyBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyBeacon, null);
        _ptrDestroyBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }


    // ScriptStruct IpDrv.MeshBeaconClient.ClientBandwidthTestData
    // 0x14
    public unsafe class FClientBandwidthTestData : BaseObject {
        public FClientBandwidthTestData() {
            Pointer = Marshal.AllocHGlobal(20);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 20);
            Allocated = true;
        }
        public FClientBandwidthTestData(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.MeshBeaconClient.ClientBandwidthTestData.TestType
        // 0x0 (0x1)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer;
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)Pointer = value;
        }

        // ByteProperty IpDrv.MeshBeaconClient.ClientBandwidthTestData.CurrentState
        // 0x1 (0x1)
        public UMeshBeacon.EMeshBeaconBandwidthTestState CurrentState {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestState*)(Pointer + 1);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestState*)(Pointer + 1) = value;
        }

        // MISSED OFFSET: 0x2

        // IntProperty IpDrv.MeshBeaconClient.ClientBandwidthTestData.NumBytesToSendTotal
        // 0x4 (0x4)
        public int NumBytesToSendTotal {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.MeshBeaconClient.ClientBandwidthTestData.NumBytesSentTotal
        // 0x8 (0x4)
        public int NumBytesSentTotal {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty IpDrv.MeshBeaconClient.ClientBandwidthTestData.NumBytesSentLast
        // 0xC (0x4)
        public int NumBytesSentLast {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // FloatProperty IpDrv.MeshBeaconClient.ClientBandwidthTestData.ElapsedTestTime
        // 0x10 (0x4)
        public float ElapsedTestTime {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct IpDrv.MeshBeaconClient.ClientConnectionRequest
    // 0x6C
    public unsafe class FClientConnectionRequest : BaseObject {
        public FClientConnectionRequest() {
            Pointer = Marshal.AllocHGlobal(108);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 108);
            Allocated = true;
        }
        public FClientConnectionRequest(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconClient.ClientConnectionRequest.PlayerNetId
        // 0x0 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.MeshBeaconClient.ClientConnectionRequest.NatType
        // 0x48 (0x1)
        public UOnlineSubsystem.ENATType NatType {
            get => *(UOnlineSubsystem.ENATType*)(Pointer + 72);
            set => *(UOnlineSubsystem.ENATType*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.MeshBeaconClient.ClientConnectionRequest.bCanHostVs
        // 0x4C (0x4)
        // Bitmask: 0x00000001
        public bool bCanHostVs {
            get => (*(uint*)(Pointer + 76) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 76) |= 0x1;
                else *(uint*)(Pointer + 76) &= ~(uint)0x1;
            }
        }

        // FloatProperty IpDrv.MeshBeaconClient.ClientConnectionRequest.GoodHostRatio
        // 0x50 (0x4)
        public float GoodHostRatio {
            get => *(float*)(Pointer + 80);
            set => *(float*)(Pointer + 80) = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.MeshBeaconClient.ClientConnectionRequest.BandwidthHistory
        // 0x58 (0x10)
        // (NeedCtorLink)
        public StructTArray<UMeshBeacon.FConnectionBandwidthStats> BandwidthHistory {
            get => new(Pointer + 88, 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }

        // IntProperty IpDrv.MeshBeaconClient.ClientConnectionRequest.MinutesSinceLastTest
        // 0x68 (0x4)
        public int MinutesSinceLastTest {
            get => *(int*)(Pointer + 104);
            set => *(int*)(Pointer + 104) = value;
        }
    }


    // Enum IpDrv.MeshBeaconClient.EMeshBeaconClientState
    public enum EMeshBeaconClientState : byte {
        MBCS_None = 0,
        MBCS_Connecting = 1,
        MBCS_Connected = 2,
        MBCS_ConnectionFailed = 3,
        MBCS_AwaitingResponse = 4,
        MBCS_Closed = 5,
        MBCS_MAX = 6
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.MeshBeaconClient");
            return _staticClass;
        }
    }
}

// Class IpDrv.MeshBeaconHost
// 0xE8 (0xA8 - 0x190)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UMeshBeaconHost : UMeshBeacon {
    public UMeshBeaconHost() { }
    public UMeshBeaconHost(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.MeshBeaconHost.ClientConnections
    // 0xA8 (0x10)
    // (Const | NeedCtorLink)
    public StructTArray<FClientMeshBeaconConnection> ClientConnections {
        get => new(Pointer + 168, 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // ArrayProperty IpDrv.MeshBeaconHost.PendingPlayerConnections
    // 0xB8 (0x10)
    // (NeedCtorLink)
    public StructTArray<U_Types_Core.FUniqueNetId> PendingPlayerConnections {
        get => new(Pointer + 184, 72);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // StructProperty IpDrv.MeshBeaconHost.OwningPlayerId
    // 0xC8 (0x48)
    // (Const | NeedCtorLink)
    public U_Types_Core.FUniqueNetId OwningPlayerId {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 72, 72);
    }

    // BoolProperty IpDrv.MeshBeaconHost.bAllowBandwidthTesting
    // 0x110 (0x4)
    // Bitmask: 0x00000001
    public bool bAllowBandwidthTesting {
        get => (*(uint*)(Pointer + 272) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 272) |= 0x1;
            else *(uint*)(Pointer + 272) &= ~(uint)0x1;
        }
    }

    // IntProperty IpDrv.MeshBeaconHost.ConnectionBacklog
    // 0x114 (0x4)
    // (Config)
    public int ConnectionBacklog {
        get => *(int*)(Pointer + 276);
        set => *(int*)(Pointer + 276) = value;
    }

    // DelegateProperty IpDrv.MeshBeaconHost.__OnReceivedClientConnectionRequest__Delegate
    // 0x118 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceivedClientConnectionRequest__Delegate {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconHost.__OnStartedBandwidthTest__Delegate
    // 0x130 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnStartedBandwidthTest__Delegate {
        get => new(Pointer + 304);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 304), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconHost.__OnFinishedBandwidthTest__Delegate
    // 0x148 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnFinishedBandwidthTest__Delegate {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconHost.__OnAllPendingPlayersConnected__Delegate
    // 0x160 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAllPendingPlayersConnected__Delegate {
        get => new(Pointer + 352);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 352), 24, 24);
    }

    // DelegateProperty IpDrv.MeshBeaconHost.__OnReceivedClientCreateNewSessionResult__Delegate
    // 0x178 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceivedClientCreateNewSessionResult__Delegate {
        get => new(Pointer + 376);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 376), 24, 24);
    }


    // Function IpDrv.MeshBeaconHost.OnReceivedClientCreateNewSessionResult
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnReceivedClientCreateNewSessionResult_Parameters : BaseObject {
        public OnReceivedClientCreateNewSessionResult_Parameters() { }
        public OnReceivedClientCreateNewSessionResult_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.MeshBeaconHost.OnReceivedClientCreateNewSessionResult.bSucceeded
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSucceeded {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // NameProperty IpDrv.MeshBeaconHost.OnReceivedClientCreateNewSessionResult.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // MISSED OFFSET: 0x4

        // ClassProperty IpDrv.MeshBeaconHost.OnReceivedClientCreateNewSessionResult.SearchClass
        // 0x10 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // ByteProperty IpDrv.MeshBeaconHost.OnReceivedClientCreateNewSessionResult.PlatformSpecificInfo
        // 0x18 (0x50)
        // (Const | Param | OutParam)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 24, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 80, 80);
        }
    }
    private static UFunction _ptrOnReceivedClientCreateNewSessionResult;
    public void OnReceivedClientCreateNewSessionResult(bool bSucceeded, FName SessionName, UClass SearchClass, ref UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrOnReceivedClientCreateNewSessionResult ??= FindFunction("Function IpDrv.MeshBeaconHost.OnReceivedClientCreateNewSessionResult");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy(&bSucceeded, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 24, 80, 80);

        ProcessEvent(_ptrOnReceivedClientCreateNewSessionResult, @params);

        var _PlatformSpecificInfoPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 24, (void*)_PlatformSpecificInfoPtr, 80, 80);
        PlatformSpecificInfo = new(_PlatformSpecificInfoPtr, 80) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconHost.RequestClientCreateNewSession
    // 0xBAE8D0
    // (Final | Native | Public | HasOutParams)
    public unsafe class RequestClientCreateNewSession_Parameters : BaseObject {
        public RequestClientCreateNewSession_Parameters() { }
        public RequestClientCreateNewSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.RequestClientCreateNewSession.PlayerNetId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // NameProperty IpDrv.MeshBeaconHost.RequestClientCreateNewSession.SessionName
        // 0x48 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 8, 8);
        }

        // ClassProperty IpDrv.MeshBeaconHost.RequestClientCreateNewSession.SearchClass
        // 0x50 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 80);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 80) = value.Pointer;
        }

        // ArrayProperty IpDrv.MeshBeaconHost.RequestClientCreateNewSession.Players
        // 0x58 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UMeshBeacon.FPlayerMember> Players {
            get => new(Pointer + 88, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }

        // BoolProperty IpDrv.MeshBeaconHost.RequestClientCreateNewSession.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestClientCreateNewSession;
    public bool RequestClientCreateNewSession(U_Types_Core.FUniqueNetId PlayerNetId, FName SessionName, UClass SearchClass, ref StructTArray<UMeshBeacon.FPlayerMember> Players) {
        _ptrRequestClientCreateNewSession ??= FindFunction("Function IpDrv.MeshBeaconHost.RequestClientCreateNewSession");

        var @params = stackalloc byte[108];
        System.Buffer.MemoryCopy((void*)PlayerNetId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 72, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 80, 8, 8);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 88, 16, 16);

        _ptrRequestClientCreateNewSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequestClientCreateNewSession, @params);
        _ptrRequestClientCreateNewSession.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 88, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 80) { Allocated = true };

        return *(bool*)(@params + 104);
    }

    // Function IpDrv.MeshBeaconHost.TellClientsToTravel
    // 0xBAE7B0
    // (Final | Native | Public | HasOutParams)
    public unsafe class TellClientsToTravel_Parameters : BaseObject {
        public TellClientsToTravel_Parameters() { }
        public TellClientsToTravel_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.MeshBeaconHost.TellClientsToTravel.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ClassProperty IpDrv.MeshBeaconHost.TellClientsToTravel.SearchClass
        // 0x8 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ByteProperty IpDrv.MeshBeaconHost.TellClientsToTravel.PlatformSpecificInfo
        // 0x10 (0x50)
        // (Const | Param | OutParam)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 80, 80);
        }
    }
    private static UFunction _ptrTellClientsToTravel;
    public void TellClientsToTravel(FName SessionName, UClass SearchClass, ref UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrTellClientsToTravel ??= FindFunction("Function IpDrv.MeshBeaconHost.TellClientsToTravel");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 16, 80, 80);

        _ptrTellClientsToTravel.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTellClientsToTravel, @params);
        _ptrTellClientsToTravel.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlatformSpecificInfoPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlatformSpecificInfoPtr, 80, 80);
        PlatformSpecificInfo = new(_PlatformSpecificInfoPtr, 80) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconHost.OnAllPendingPlayersConnected
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAllPendingPlayersConnected_Parameters : BaseObject {
        public OnAllPendingPlayersConnected_Parameters() { }
        public OnAllPendingPlayersConnected_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnAllPendingPlayersConnected;
    public void OnAllPendingPlayersConnected() {
        _ptrOnAllPendingPlayersConnected ??= FindFunction("Function IpDrv.MeshBeaconHost.OnAllPendingPlayersConnected");

        ProcessEvent(_ptrOnAllPendingPlayersConnected, null);
    }

    // Function IpDrv.MeshBeaconHost.AllPlayersConnected
    // 0xBAE690
    // (Final | Native | Public | HasOutParams)
    public unsafe class AllPlayersConnected_Parameters : BaseObject {
        public AllPlayersConnected_Parameters() { }
        public AllPlayersConnected_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.MeshBeaconHost.AllPlayersConnected.Players
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.MeshBeaconHost.AllPlayersConnected.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAllPlayersConnected;
    public bool AllPlayersConnected(ref StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrAllPlayersConnected ??= FindFunction("Function IpDrv.MeshBeaconHost.AllPlayersConnected");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params, 16, 16);

        _ptrAllPlayersConnected.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllPlayersConnected, @params);
        _ptrAllPlayersConnected.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 72) { Allocated = true };

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.MeshBeaconHost.GetConnectionIndexForPlayer
    // 0xBAE550
    // (Final | Native | Public)
    public unsafe class GetConnectionIndexForPlayer_Parameters : BaseObject {
        public GetConnectionIndexForPlayer_Parameters() { }
        public GetConnectionIndexForPlayer_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.GetConnectionIndexForPlayer.PlayerNetId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // IntProperty IpDrv.MeshBeaconHost.GetConnectionIndexForPlayer.ReturnValue
        // 0x48 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 72);
            set => *(int*)(Pointer + 72) = value;
        }
    }
    private static UFunction _ptrGetConnectionIndexForPlayer;
    public int GetConnectionIndexForPlayer(U_Types_Core.FUniqueNetId PlayerNetId) {
        _ptrGetConnectionIndexForPlayer ??= FindFunction("Function IpDrv.MeshBeaconHost.GetConnectionIndexForPlayer");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)PlayerNetId.Pointer, @params, 72, 72);

        _ptrGetConnectionIndexForPlayer.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetConnectionIndexForPlayer, @params);
        _ptrGetConnectionIndexForPlayer.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 72);
    }

    // Function IpDrv.MeshBeaconHost.SetPendingPlayerConnections
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class SetPendingPlayerConnections_Parameters : BaseObject {
        public SetPendingPlayerConnections_Parameters() { }
        public SetPendingPlayerConnections_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.MeshBeaconHost.SetPendingPlayerConnections.Players
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrSetPendingPlayerConnections;
    public void SetPendingPlayerConnections(ref StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrSetPendingPlayerConnections ??= FindFunction("Function IpDrv.MeshBeaconHost.SetPendingPlayerConnections");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params, 16, 16);

        ProcessEvent(_ptrSetPendingPlayerConnections, @params);

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 72) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconHost.OnFinishedBandwidthTest
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnFinishedBandwidthTest_Parameters : BaseObject {
        public OnFinishedBandwidthTest_Parameters() { }
        public OnFinishedBandwidthTest_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.OnFinishedBandwidthTest.PlayerNetId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.MeshBeaconHost.OnFinishedBandwidthTest.TestType
        // 0x48 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 72);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 72) = value;
        }

        // ByteProperty IpDrv.MeshBeaconHost.OnFinishedBandwidthTest.TestResult
        // 0x49 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestResult TestResult {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestResult*)(Pointer + 73);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestResult*)(Pointer + 73) = value;
        }

        // MISSED OFFSET: 0x2

        // StructProperty IpDrv.MeshBeaconHost.OnFinishedBandwidthTest.BandwidthStats
        // 0x4C (0xC)
        // (Const | Param | OutParam)
        public UMeshBeacon.FConnectionBandwidthStats BandwidthStats {
            get => new(Pointer + 76);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 76), 12, 12);
        }
    }
    private static UFunction _ptrOnFinishedBandwidthTest;
    public void OnFinishedBandwidthTest(U_Types_Core.FUniqueNetId PlayerNetId, UMeshBeacon.EMeshBeaconBandwidthTestType TestType, UMeshBeacon.EMeshBeaconBandwidthTestResult TestResult, ref UMeshBeacon.FConnectionBandwidthStats BandwidthStats) {
        _ptrOnFinishedBandwidthTest ??= FindFunction("Function IpDrv.MeshBeaconHost.OnFinishedBandwidthTest");

        var @params = stackalloc byte[86];
        System.Buffer.MemoryCopy((void*)PlayerNetId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&TestType, @params + 72, 1, 1);
        System.Buffer.MemoryCopy(&TestResult, @params + 73, 1, 1);
        System.Buffer.MemoryCopy((void*)BandwidthStats.Pointer, @params + 76, 12, 12);

        ProcessEvent(_ptrOnFinishedBandwidthTest, @params);

        var _BandwidthStatsPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 76, (void*)_BandwidthStatsPtr, 12, 12);
        BandwidthStats = new(_BandwidthStatsPtr) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconHost.OnStartedBandwidthTest
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnStartedBandwidthTest_Parameters : BaseObject {
        public OnStartedBandwidthTest_Parameters() { }
        public OnStartedBandwidthTest_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.OnStartedBandwidthTest.PlayerNetId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.MeshBeaconHost.OnStartedBandwidthTest.TestType
        // 0x48 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 72);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 72) = value;
        }
    }
    private static UFunction _ptrOnStartedBandwidthTest;
    public void OnStartedBandwidthTest(U_Types_Core.FUniqueNetId PlayerNetId, UMeshBeacon.EMeshBeaconBandwidthTestType TestType) {
        _ptrOnStartedBandwidthTest ??= FindFunction("Function IpDrv.MeshBeaconHost.OnStartedBandwidthTest");

        var @params = stackalloc byte[73];
        System.Buffer.MemoryCopy((void*)PlayerNetId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&TestType, @params + 72, 1, 1);

        ProcessEvent(_ptrOnStartedBandwidthTest, @params);
    }

    // Function IpDrv.MeshBeaconHost.OnReceivedClientConnectionRequest
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnReceivedClientConnectionRequest_Parameters : BaseObject {
        public OnReceivedClientConnectionRequest_Parameters() { }
        public OnReceivedClientConnectionRequest_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.OnReceivedClientConnectionRequest.NewClientConnection
        // 0x0 (0xB8)
        // (Const | Param | OutParam | NeedCtorLink)
        public FClientMeshBeaconConnection NewClientConnection {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 184, 184);
        }
    }
    private static UFunction _ptrOnReceivedClientConnectionRequest;
    public void OnReceivedClientConnectionRequest(ref FClientMeshBeaconConnection NewClientConnection) {
        _ptrOnReceivedClientConnectionRequest ??= FindFunction("Function IpDrv.MeshBeaconHost.OnReceivedClientConnectionRequest");

        var @params = stackalloc byte[184];
        System.Buffer.MemoryCopy((void*)NewClientConnection.Pointer, @params, 184, 184);

        ProcessEvent(_ptrOnReceivedClientConnectionRequest, @params);

        var _NewClientConnectionPtr = Marshal.AllocHGlobal(184);
        System.Buffer.MemoryCopy(@params, (void*)_NewClientConnectionPtr, 184, 184);
        NewClientConnection = new(_NewClientConnectionPtr) { Allocated = true };
    }

    // Function IpDrv.MeshBeaconHost.AllowBandwidthTesting
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AllowBandwidthTesting_Parameters : BaseObject {
        public AllowBandwidthTesting_Parameters() { }
        public AllowBandwidthTesting_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.MeshBeaconHost.AllowBandwidthTesting.bEnabled
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bEnabled {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAllowBandwidthTesting;
    public void AllowBandwidthTesting(bool bEnabled) {
        _ptrAllowBandwidthTesting ??= FindFunction("Function IpDrv.MeshBeaconHost.AllowBandwidthTesting");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bEnabled, @params, 4, 4);

        ProcessEvent(_ptrAllowBandwidthTesting, @params);
    }

    // Function IpDrv.MeshBeaconHost.CancelPendingBandwidthTests
    // 0xBAE390
    // (Final | Native | Public)
    public unsafe class CancelPendingBandwidthTests_Parameters : BaseObject {
        public CancelPendingBandwidthTests_Parameters() { }
        public CancelPendingBandwidthTests_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCancelPendingBandwidthTests;
    public void CancelPendingBandwidthTests() {
        _ptrCancelPendingBandwidthTests ??= FindFunction("Function IpDrv.MeshBeaconHost.CancelPendingBandwidthTests");

        _ptrCancelPendingBandwidthTests.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCancelPendingBandwidthTests, null);
        _ptrCancelPendingBandwidthTests.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.MeshBeaconHost.HasPendingBandwidthTest
    // 0xBAE300
    // (Final | Native | Public)
    public unsafe class HasPendingBandwidthTest_Parameters : BaseObject {
        public HasPendingBandwidthTest_Parameters() { }
        public HasPendingBandwidthTest_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.MeshBeaconHost.HasPendingBandwidthTest.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrHasPendingBandwidthTest;
    public bool HasPendingBandwidthTest() {
        _ptrHasPendingBandwidthTest ??= FindFunction("Function IpDrv.MeshBeaconHost.HasPendingBandwidthTest");

        var @params = stackalloc byte[4];

        _ptrHasPendingBandwidthTest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrHasPendingBandwidthTest, @params);
        _ptrHasPendingBandwidthTest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.MeshBeaconHost.CancelInProgressBandwidthTests
    // 0xBAE2C0
    // (Final | Native | Public)
    public unsafe class CancelInProgressBandwidthTests_Parameters : BaseObject {
        public CancelInProgressBandwidthTests_Parameters() { }
        public CancelInProgressBandwidthTests_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCancelInProgressBandwidthTests;
    public void CancelInProgressBandwidthTests() {
        _ptrCancelInProgressBandwidthTests ??= FindFunction("Function IpDrv.MeshBeaconHost.CancelInProgressBandwidthTests");

        _ptrCancelInProgressBandwidthTests.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCancelInProgressBandwidthTests, null);
        _ptrCancelInProgressBandwidthTests.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.MeshBeaconHost.HasInProgressBandwidthTest
    // 0xBAE230
    // (Final | Native | Public)
    public unsafe class HasInProgressBandwidthTest_Parameters : BaseObject {
        public HasInProgressBandwidthTest_Parameters() { }
        public HasInProgressBandwidthTest_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.MeshBeaconHost.HasInProgressBandwidthTest.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrHasInProgressBandwidthTest;
    public bool HasInProgressBandwidthTest() {
        _ptrHasInProgressBandwidthTest ??= FindFunction("Function IpDrv.MeshBeaconHost.HasInProgressBandwidthTest");

        var @params = stackalloc byte[4];

        _ptrHasInProgressBandwidthTest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrHasInProgressBandwidthTest, @params);
        _ptrHasInProgressBandwidthTest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.MeshBeaconHost.RequestClientBandwidthTest
    // 0xBAE080
    // (Final | Native | Public)
    public unsafe class RequestClientBandwidthTest_Parameters : BaseObject {
        public RequestClientBandwidthTest_Parameters() { }
        public RequestClientBandwidthTest_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.RequestClientBandwidthTest.PlayerNetId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ByteProperty IpDrv.MeshBeaconHost.RequestClientBandwidthTest.TestType
        // 0x48 (0x1)
        // (Param)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 72);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x3

        // IntProperty IpDrv.MeshBeaconHost.RequestClientBandwidthTest.TestBufferSize
        // 0x4C (0x4)
        // (Param)
        public int TestBufferSize {
            get => *(int*)(Pointer + 76);
            set => *(int*)(Pointer + 76) = value;
        }

        // BoolProperty IpDrv.MeshBeaconHost.RequestClientBandwidthTest.ReturnValue
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestClientBandwidthTest;
    public bool RequestClientBandwidthTest(U_Types_Core.FUniqueNetId PlayerNetId, UMeshBeacon.EMeshBeaconBandwidthTestType TestType, int TestBufferSize) {
        _ptrRequestClientBandwidthTest ??= FindFunction("Function IpDrv.MeshBeaconHost.RequestClientBandwidthTest");

        var @params = stackalloc byte[81];
        System.Buffer.MemoryCopy((void*)PlayerNetId.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&TestType, @params + 72, 1, 1);
        System.Buffer.MemoryCopy(&TestBufferSize, @params + 76, 4, 4);

        _ptrRequestClientBandwidthTest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequestClientBandwidthTest, @params);
        _ptrRequestClientBandwidthTest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 80);
    }

    // Function IpDrv.MeshBeaconHost.DestroyBeacon
    // 0x669880
    // (Native | Event | Public)
    public unsafe class DestroyBeacon_Parameters : BaseObject {
        public DestroyBeacon_Parameters() { }
        public DestroyBeacon_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyBeacon;
    public void DestroyBeacon() {
        _ptrDestroyBeacon ??= FindFunction("Function IpDrv.MeshBeaconHost.DestroyBeacon");

        _ptrDestroyBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyBeacon, null);
        _ptrDestroyBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.MeshBeaconHost.InitHostBeacon
    // 0xBADF40
    // (Final | Native | Public)
    public unsafe class InitHostBeacon_Parameters : BaseObject {
        public InitHostBeacon_Parameters() { }
        public InitHostBeacon_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.InitHostBeacon.InOwningPlayerId
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId InOwningPlayerId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // BoolProperty IpDrv.MeshBeaconHost.InitHostBeacon.ReturnValue
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrInitHostBeacon;
    public bool InitHostBeacon(U_Types_Core.FUniqueNetId InOwningPlayerId) {
        _ptrInitHostBeacon ??= FindFunction("Function IpDrv.MeshBeaconHost.InitHostBeacon");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)InOwningPlayerId.Pointer, @params, 72, 72);

        _ptrInitHostBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrInitHostBeacon, @params);
        _ptrInitHostBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 72);
    }


    // ScriptStruct IpDrv.MeshBeaconHost.ClientMeshBeaconConnection
    // 0xB4
    public unsafe class FClientMeshBeaconConnection : BaseObject {
        public FClientMeshBeaconConnection() {
            Pointer = Marshal.AllocHGlobal(180);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 180);
            Allocated = true;
        }
        public FClientMeshBeaconConnection(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.PlayerNetId
        // 0x0 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerNetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // FloatProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.ElapsedHeartbeatTime
        // 0x48 (0x4)
        public float ElapsedHeartbeatTime {
            get => *(float*)(Pointer + 72);
            set => *(float*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.Socket
        // 0x50 (0x8)
        // (Native | Transient)
        public nint Socket {
            get => *(nint*)(Pointer + 80);
            set => *(nint*)(Pointer + 80) = value;
        }

        // BoolProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.bConnectionAccepted
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        public bool bConnectionAccepted {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.BandwidthTest
        // 0x60 (0x30)
        public FClientConnectionBandwidthTestData BandwidthTest {
            get => new(Pointer + 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 48, 48);
        }

        // ByteProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.NatType
        // 0x90 (0x1)
        public UOnlineSubsystem.ENATType NatType {
            get => *(UOnlineSubsystem.ENATType*)(Pointer + 144);
            set => *(UOnlineSubsystem.ENATType*)(Pointer + 144) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.bCanHostVs
        // 0x94 (0x4)
        // Bitmask: 0x00000001
        public bool bCanHostVs {
            get => (*(uint*)(Pointer + 148) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 148) |= 0x1;
                else *(uint*)(Pointer + 148) &= ~(uint)0x1;
            }
        }

        // FloatProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.GoodHostRatio
        // 0x98 (0x4)
        public float GoodHostRatio {
            get => *(float*)(Pointer + 152);
            set => *(float*)(Pointer + 152) = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.BandwidthHistory
        // 0xA0 (0x10)
        // (NeedCtorLink)
        public StructTArray<UMeshBeacon.FConnectionBandwidthStats> BandwidthHistory {
            get => new(Pointer + 160, 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
        }

        // IntProperty IpDrv.MeshBeaconHost.ClientMeshBeaconConnection.MinutesSinceLastTest
        // 0xB0 (0x4)
        public int MinutesSinceLastTest {
            get => *(int*)(Pointer + 176);
            set => *(int*)(Pointer + 176) = value;
        }
    }

    // ScriptStruct IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData
    // 0x2C
    public unsafe class FClientConnectionBandwidthTestData : BaseObject {
        public FClientConnectionBandwidthTestData() {
            Pointer = Marshal.AllocHGlobal(44);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 44);
            Allocated = true;
        }
        public FClientConnectionBandwidthTestData(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.CurrentState
        // 0x0 (0x1)
        public UMeshBeacon.EMeshBeaconBandwidthTestState CurrentState {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestState*)Pointer;
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestState*)Pointer = value;
        }

        // ByteProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.TestType
        // 0x1 (0x1)
        public UMeshBeacon.EMeshBeaconBandwidthTestType TestType {
            get => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 1);
            set => *(UMeshBeacon.EMeshBeaconBandwidthTestType*)(Pointer + 1) = value;
        }

        // MISSED OFFSET: 0x2

        // IntProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.BytesTotalNeeded
        // 0x4 (0x4)
        public int BytesTotalNeeded {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.BytesReceived
        // 0x8 (0x4)
        public int BytesReceived {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.RequestTestStartTime
        // 0x10 (0x8)
        public FDouble RequestTestStartTime {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }

        // StructProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.TestStartTime
        // 0x18 (0x8)
        public FDouble TestStartTime {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 8, 8);
        }

        // StructProperty IpDrv.MeshBeaconHost.ClientConnectionBandwidthTestData.BandwidthStats
        // 0x20 (0xC)
        public UMeshBeacon.FConnectionBandwidthStats BandwidthStats {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.MeshBeaconHost");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineAuthInterfaceImpl
// 0x368 (0x60 - 0x3C8)
// (Compiled | Parsed | Native)
public unsafe partial class UOnlineAuthInterfaceImpl : UObject {
    public UOnlineAuthInterfaceImpl() { }
    public UOnlineAuthInterfaceImpl(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.OnlineAuthInterfaceImpl.VfTable_IOnlineAuthInterface
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_IOnlineAuthInterface {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.AuthCodeRequests
    // 0x68 (0x10)
    // (Transient | NeedCtorLink)
    public StructTArray<FAuthCodeRequest> AuthCodeRequests {
        get => new(Pointer + 104, 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }

    // IntProperty IpDrv.OnlineAuthInterfaceImpl.NextAuthCodeID
    // 0x78 (0x4)
    // (Transient)
    public int NextAuthCodeID {
        get => *(int*)(Pointer + 120);
        set => *(int*)(Pointer + 120) = value;
    }

    // MISSED OFFSET: 0x4

    // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OwningSubsystem
    // 0x80 (0x8)
    public UOnlineSubsystemCommonImpl OwningSubsystem {
        get {
            var pointer = *(nint*)(Pointer + 128);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 128) = value.Pointer;
    }

    // BoolProperty IpDrv.OnlineAuthInterfaceImpl.bAuthReady
    // 0x88 (0x4)
    // Bitmask: 0x00000001
    // (Const)
    public bool bAuthReady {
        get => (*(uint*)(Pointer + 136) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 136) |= 0x1;
            else *(uint*)(Pointer + 136) &= ~(uint)0x1;
        }
    }

    // MISSED OFFSET: 0x4

    // StructProperty IpDrv.OnlineAuthInterfaceImpl.ClientAuthSessions
    // 0x90 (0x38)
    // (Const | Native)
    public FSparseArray_Mirror ClientAuthSessions {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 56, 56);
    }

    // StructProperty IpDrv.OnlineAuthInterfaceImpl.ServerAuthSessions
    // 0xC8 (0x38)
    // (Const | Native)
    public FSparseArray_Mirror ServerAuthSessions {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 56, 56);
    }

    // StructProperty IpDrv.OnlineAuthInterfaceImpl.PeerAuthSessions
    // 0x100 (0x38)
    // (Const | Native)
    public FSparseArray_Mirror PeerAuthSessions {
        get => new(Pointer + 256);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 56, 56);
    }

    // StructProperty IpDrv.OnlineAuthInterfaceImpl.LocalClientAuthSessions
    // 0x138 (0x38)
    // (Const | Native)
    public FSparseArray_Mirror LocalClientAuthSessions {
        get => new(Pointer + 312);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 56, 56);
    }

    // StructProperty IpDrv.OnlineAuthInterfaceImpl.LocalServerAuthSessions
    // 0x170 (0x38)
    // (Const | Native)
    public FSparseArray_Mirror LocalServerAuthSessions {
        get => new(Pointer + 368);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 368), 56, 56);
    }

    // StructProperty IpDrv.OnlineAuthInterfaceImpl.LocalPeerAuthSessions
    // 0x1A8 (0x38)
    // (Const | Native)
    public FSparseArray_Mirror LocalPeerAuthSessions {
        get => new(Pointer + 424);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 424), 56, 56);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.AuthReadyDelegates
    // 0x1E0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> AuthReadyDelegates {
        get => new(Pointer + 480, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 480), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ClientAuthRequestDelegates
    // 0x1F0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ClientAuthRequestDelegates {
        get => new(Pointer + 496, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 496), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ServerAuthRequestDelegates
    // 0x200 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ServerAuthRequestDelegates {
        get => new(Pointer + 512, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 512), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ClientAuthResponseDelegates
    // 0x210 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ClientAuthResponseDelegates {
        get => new(Pointer + 528, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 528), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ServerAuthResponseDelegates
    // 0x220 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ServerAuthResponseDelegates {
        get => new(Pointer + 544, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 544), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ClientAuthCompleteDelegates
    // 0x230 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ClientAuthCompleteDelegates {
        get => new(Pointer + 560, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 560), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ServerAuthCompleteDelegates
    // 0x240 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ServerAuthCompleteDelegates {
        get => new(Pointer + 576, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 576), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ClientAuthEndSessionRequestDelegates
    // 0x250 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ClientAuthEndSessionRequestDelegates {
        get => new(Pointer + 592, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 592), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ServerAuthRetryRequestDelegates
    // 0x260 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ServerAuthRetryRequestDelegates {
        get => new(Pointer + 608, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 608), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ClientConnectionCloseDelegates
    // 0x270 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ClientConnectionCloseDelegates {
        get => new(Pointer + 624, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 624), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineAuthInterfaceImpl.ServerConnectionCloseDelegates
    // 0x280 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> ServerConnectionCloseDelegates {
        get => new(Pointer + 640, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 640), 16, 16);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnAuthReady__Delegate
    // 0x290 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAuthReady__Delegate {
        get => new(Pointer + 656);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 656), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnClientAuthRequest__Delegate
    // 0x2A8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnClientAuthRequest__Delegate {
        get => new(Pointer + 680);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 680), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnServerAuthRequest__Delegate
    // 0x2C0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnServerAuthRequest__Delegate {
        get => new(Pointer + 704);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 704), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnClientAuthResponse__Delegate
    // 0x2D8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnClientAuthResponse__Delegate {
        get => new(Pointer + 728);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 728), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnServerAuthResponse__Delegate
    // 0x2F0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnServerAuthResponse__Delegate {
        get => new(Pointer + 752);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 752), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnClientAuthComplete__Delegate
    // 0x308 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnClientAuthComplete__Delegate {
        get => new(Pointer + 776);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 776), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnServerAuthComplete__Delegate
    // 0x320 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnServerAuthComplete__Delegate {
        get => new(Pointer + 800);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 800), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnClientAuthEndSessionRequest__Delegate
    // 0x338 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnClientAuthEndSessionRequest__Delegate {
        get => new(Pointer + 824);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 824), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnServerAuthRetryRequest__Delegate
    // 0x350 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnServerAuthRetryRequest__Delegate {
        get => new(Pointer + 848);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 848), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnClientConnectionClose__Delegate
    // 0x368 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnClientConnectionClose__Delegate {
        get => new(Pointer + 872);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 872), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnServerConnectionClose__Delegate
    // 0x380 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnServerConnectionClose__Delegate {
        get => new(Pointer + 896);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 896), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnReceivedAuthCode__Delegate
    // 0x398 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceivedAuthCode__Delegate {
        get => new(Pointer + 920);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 920), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.__OnAccountAuthorization__Delegate
    // 0x3B0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAccountAuthorization__Delegate {
        get => new(Pointer + 944);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 944), 24, 24);
    }


    // Function IpDrv.OnlineAuthInterfaceImpl.RequestAccountAuthorization
    // 0x3750E0
    // (Public)
    public unsafe class RequestAccountAuthorization_Parameters : BaseObject {
        public RequestAccountAuthorization_Parameters() { }
        public RequestAccountAuthorization_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.RequestAccountAuthorization.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.RequestAccountAuthorization.Callback
        // 0x48 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 24, 24);
        }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.RequestAccountAuthorization.ReturnValue
        // 0x60 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 96);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 96) = value.Pointer;
        }
    }
    private static UFunction _ptrRequestAccountAuthorization;
    public UAsyncTask RequestAccountAuthorization(U_Types_Core.FUniqueNetId PlayerID, FScriptDelegate Callback) {
        _ptrRequestAccountAuthorization ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.RequestAccountAuthorization");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 72, 24, 24);

        ProcessEvent(_ptrRequestAccountAuthorization, @params);

        return new(*(nint*)(@params + 96));
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnAccountAuthorization
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAccountAuthorization_Parameters : BaseObject {
        public OnAccountAuthorization_Parameters() { }
        public OnAccountAuthorization_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineAuthInterfaceImpl.OnAccountAuthorization.Token
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Token {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrOnAccountAuthorization;
    public void OnAccountAuthorization(FString Token) {
        _ptrOnAccountAuthorization ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnAccountAuthorization");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Token.Pointer, @params, 16, 16);

        ProcessEvent(_ptrOnAccountAuthorization, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnLoginChanged
    // 0x3750E0
    // (Public)
    public unsafe class OnLoginChanged_Parameters : BaseObject {
        public OnLoginChanged_Parameters() { }
        public OnLoginChanged_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.OnLoginChanged.bLoggedIn
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bLoggedIn {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnLoginChanged;
    public void OnLoginChanged(bool bLoggedIn) {
        _ptrOnLoginChanged ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnLoginChanged");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bLoggedIn, @params, 4, 4);

        ProcessEvent(_ptrOnLoginChanged, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.RequestMtxCode
    // 0x3750E0
    // (Public)
    public unsafe class RequestMtxCode_Parameters : BaseObject {
        public RequestMtxCode_Parameters() { }
        public RequestMtxCode_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.RequestMtxCode.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.RequestMtxCode.Callback
        // 0x48 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 24, 24);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.RequestMtxCode.ReturnValue
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestMtxCode;
    public bool RequestMtxCode(U_Types_Core.FUniqueNetId PlayerID, FScriptDelegate Callback) {
        _ptrRequestMtxCode ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.RequestMtxCode");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 72, 24, 24);

        ProcessEvent(_ptrRequestMtxCode, @params);

        return *(bool*)(@params + 96);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.RequestAuthTicket
    // 0x3750E0
    // (Public)
    public unsafe class RequestAuthTicket_Parameters : BaseObject {
        public RequestAuthTicket_Parameters() { }
        public RequestAuthTicket_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.RequestAuthTicket.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.RequestAuthTicket.Callback
        // 0x48 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 24, 24);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.RequestAuthTicket.ReturnValue
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestAuthTicket;
    public bool RequestAuthTicket(U_Types_Core.FUniqueNetId PlayerID, FScriptDelegate Callback) {
        _ptrRequestAuthTicket ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.RequestAuthTicket");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 72, 24, 24);

        ProcessEvent(_ptrRequestAuthTicket, @params);

        return *(bool*)(@params + 96);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.RequiresAuthTicket
    // 0x3750E0
    // (Public)
    public unsafe class RequiresAuthTicket_Parameters : BaseObject {
        public RequiresAuthTicket_Parameters() { }
        public RequiresAuthTicket_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.RequiresAuthTicket.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequiresAuthTicket;
    public bool RequiresAuthTicket() {
        _ptrRequiresAuthTicket ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.RequiresAuthTicket");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrRequiresAuthTicket, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnReceivedAuthCode
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReceivedAuthCode_Parameters : BaseObject {
        public OnReceivedAuthCode_Parameters() { }
        public OnReceivedAuthCode_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.OnReceivedAuthCode.bSuccess
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSuccess {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlineAuthInterfaceImpl.OnReceivedAuthCode.Code
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Code {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnReceivedAuthCode;
    public void OnReceivedAuthCode(bool bSuccess, FString Code) {
        _ptrOnReceivedAuthCode ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnReceivedAuthCode");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bSuccess, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Code.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnReceivedAuthCode, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.GetServerAddr
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetServerAddr_Parameters : BaseObject {
        public GetServerAddr_Parameters() { }
        public GetServerAddr_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.GetServerAddr.OutServerIP
        // 0x0 (0x14)
        // (Param | OutParam)
        public FIpAddr OutServerIP {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.GetServerAddr.OutServerPort
        // 0x14 (0x4)
        // (Param | OutParam)
        public int OutServerPort {
            get => *(int*)(Pointer + 20);
            set => *(int*)(Pointer + 20) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.GetServerAddr.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetServerAddr;
    public bool GetServerAddr(ref FIpAddr OutServerIP, ref int OutServerPort) {
        _ptrGetServerAddr ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.GetServerAddr");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)OutServerIP.Pointer, @params, 20, 20);
        var _OutServerPort = OutServerPort;
        System.Buffer.MemoryCopy(&_OutServerPort, @params + 20, 4, 4);

        ProcessEvent(_ptrGetServerAddr, @params);

        var _OutServerIPPtr = Marshal.AllocHGlobal(20);
        System.Buffer.MemoryCopy(@params, (void*)_OutServerIPPtr, 20, 20);
        OutServerIP = new(_OutServerIPPtr) { Allocated = true };
        OutServerPort = *(int*)(@params + 20);

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.GetServerUniqueId
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetServerUniqueId_Parameters : BaseObject {
        public GetServerUniqueId_Parameters() { }
        public GetServerUniqueId_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.GetServerUniqueId.OutServerUID
        // 0x0 (0x48)
        // (Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId OutServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.GetServerUniqueId.ReturnValue
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetServerUniqueId;
    public bool GetServerUniqueId(ref U_Types_Core.FUniqueNetId OutServerUID) {
        _ptrGetServerUniqueId ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.GetServerUniqueId");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)OutServerUID.Pointer, @params, 72, 72);

        ProcessEvent(_ptrGetServerUniqueId, @params);

        var _OutServerUIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params, (void*)_OutServerUIDPtr, 72, 72);
        OutServerUID = new(_OutServerUIDPtr) { Allocated = true };

        return *(bool*)(@params + 72);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.FindLocalServerAuthSession
    // 0xBB26F0
    // (Final | Native | Public | HasOutParams)
    public unsafe class FindLocalServerAuthSession_Parameters : BaseObject {
        public FindLocalServerAuthSession_Parameters() { }
        public FindLocalServerAuthSession_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.FindLocalServerAuthSession.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.FindLocalServerAuthSession.OutSessionInfo
        // 0x8 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FLocalAuthSession OutSessionInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 104, 104);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.FindLocalServerAuthSession.ReturnValue
        // 0x70 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 112) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x1;
                else *(uint*)(Pointer + 112) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFindLocalServerAuthSession;
    public bool FindLocalServerAuthSession(UPlayer ClientConnection, ref UOnlineAuthInterface.FLocalAuthSession OutSessionInfo) {
        _ptrFindLocalServerAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.FindLocalServerAuthSession");

        var @params = stackalloc byte[116];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params + 8, 104, 104);

        _ptrFindLocalServerAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindLocalServerAuthSession, @params);
        _ptrFindLocalServerAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 8, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };

        return *(bool*)(@params + 112);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.FindServerAuthSession
    // 0xBB2580
    // (Final | Native | Public | HasOutParams)
    public unsafe class FindServerAuthSession_Parameters : BaseObject {
        public FindServerAuthSession_Parameters() { }
        public FindServerAuthSession_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.FindServerAuthSession.ServerConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ServerConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.FindServerAuthSession.OutSessionInfo
        // 0x8 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FAuthSession OutSessionInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 104, 104);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.FindServerAuthSession.ReturnValue
        // 0x70 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 112) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x1;
                else *(uint*)(Pointer + 112) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFindServerAuthSession;
    public bool FindServerAuthSession(UPlayer ServerConnection, ref UOnlineAuthInterface.FAuthSession OutSessionInfo) {
        _ptrFindServerAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.FindServerAuthSession");

        var @params = stackalloc byte[116];
        System.Buffer.MemoryCopy((void*)ServerConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params + 8, 104, 104);

        _ptrFindServerAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindServerAuthSession, @params);
        _ptrFindServerAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 8, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };

        return *(bool*)(@params + 112);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.FindLocalClientAuthSession
    // 0xBB2410
    // (Final | Native | Public | HasOutParams)
    public unsafe class FindLocalClientAuthSession_Parameters : BaseObject {
        public FindLocalClientAuthSession_Parameters() { }
        public FindLocalClientAuthSession_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.FindLocalClientAuthSession.ServerConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ServerConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.FindLocalClientAuthSession.OutSessionInfo
        // 0x8 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FLocalAuthSession OutSessionInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 104, 104);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.FindLocalClientAuthSession.ReturnValue
        // 0x70 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 112) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x1;
                else *(uint*)(Pointer + 112) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFindLocalClientAuthSession;
    public bool FindLocalClientAuthSession(UPlayer ServerConnection, ref UOnlineAuthInterface.FLocalAuthSession OutSessionInfo) {
        _ptrFindLocalClientAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.FindLocalClientAuthSession");

        var @params = stackalloc byte[116];
        System.Buffer.MemoryCopy((void*)ServerConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params + 8, 104, 104);

        _ptrFindLocalClientAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindLocalClientAuthSession, @params);
        _ptrFindLocalClientAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 8, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };

        return *(bool*)(@params + 112);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.FindClientAuthSession
    // 0xBB22A0
    // (Final | Native | Public | HasOutParams)
    public unsafe class FindClientAuthSession_Parameters : BaseObject {
        public FindClientAuthSession_Parameters() { }
        public FindClientAuthSession_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.FindClientAuthSession.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.FindClientAuthSession.OutSessionInfo
        // 0x8 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FAuthSession OutSessionInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 104, 104);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.FindClientAuthSession.ReturnValue
        // 0x70 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 112) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x1;
                else *(uint*)(Pointer + 112) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFindClientAuthSession;
    public bool FindClientAuthSession(UPlayer ClientConnection, ref UOnlineAuthInterface.FAuthSession OutSessionInfo) {
        _ptrFindClientAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.FindClientAuthSession");

        var @params = stackalloc byte[116];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params + 8, 104, 104);

        _ptrFindClientAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindClientAuthSession, @params);
        _ptrFindClientAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 8, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };

        return *(bool*)(@params + 112);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AllLocalServerAuthSessions
    // 0xBB2000
    // (Final | Iterator | Native | Public | HasOutParams)
    public unsafe class AllLocalServerAuthSessions_Parameters : BaseObject {
        public AllLocalServerAuthSessions_Parameters() { }
        public AllLocalServerAuthSessions_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.AllLocalServerAuthSessions.OutSessionInfo
        // 0x0 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FLocalAuthSession OutSessionInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }
    }
    private static UFunction _ptrAllLocalServerAuthSessions;
    public void AllLocalServerAuthSessions(ref UOnlineAuthInterface.FLocalAuthSession OutSessionInfo) {
        _ptrAllLocalServerAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AllLocalServerAuthSessions");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params, 104, 104);

        _ptrAllLocalServerAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllLocalServerAuthSessions, @params);
        _ptrAllLocalServerAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AllServerAuthSessions
    // 0xBB1D60
    // (Final | Iterator | Native | Public | HasOutParams)
    public unsafe class AllServerAuthSessions_Parameters : BaseObject {
        public AllServerAuthSessions_Parameters() { }
        public AllServerAuthSessions_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.AllServerAuthSessions.OutSessionInfo
        // 0x0 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FAuthSession OutSessionInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }
    }
    private static UFunction _ptrAllServerAuthSessions;
    public void AllServerAuthSessions(ref UOnlineAuthInterface.FAuthSession OutSessionInfo) {
        _ptrAllServerAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AllServerAuthSessions");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params, 104, 104);

        _ptrAllServerAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllServerAuthSessions, @params);
        _ptrAllServerAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AllLocalClientAuthSessions
    // 0xBB1AC0
    // (Final | Iterator | Native | Public | HasOutParams)
    public unsafe class AllLocalClientAuthSessions_Parameters : BaseObject {
        public AllLocalClientAuthSessions_Parameters() { }
        public AllLocalClientAuthSessions_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.AllLocalClientAuthSessions.OutSessionInfo
        // 0x0 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FLocalAuthSession OutSessionInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }
    }
    private static UFunction _ptrAllLocalClientAuthSessions;
    public void AllLocalClientAuthSessions(ref UOnlineAuthInterface.FLocalAuthSession OutSessionInfo) {
        _ptrAllLocalClientAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AllLocalClientAuthSessions");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params, 104, 104);

        _ptrAllLocalClientAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllLocalClientAuthSessions, @params);
        _ptrAllLocalClientAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AllClientAuthSessions
    // 0xBB1820
    // (Final | Iterator | Native | Public | HasOutParams)
    public unsafe class AllClientAuthSessions_Parameters : BaseObject {
        public AllClientAuthSessions_Parameters() { }
        public AllClientAuthSessions_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.AllClientAuthSessions.OutSessionInfo
        // 0x0 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UOnlineAuthInterface.FAuthSession OutSessionInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 104, 104);
        }
    }
    private static UFunction _ptrAllClientAuthSessions;
    public void AllClientAuthSessions(ref UOnlineAuthInterface.FAuthSession OutSessionInfo) {
        _ptrAllClientAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AllClientAuthSessions");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)OutSessionInfo.Pointer, @params, 104, 104);

        _ptrAllClientAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllClientAuthSessions, @params);
        _ptrAllClientAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutSessionInfoPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params, (void*)_OutSessionInfoPtr, 104, 104);
        OutSessionInfo = new(_OutSessionInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndAllRemoteServerAuthSessions
    // 0xBB1750
    // (Final | Native | Public)
    public unsafe class EndAllRemoteServerAuthSessions_Parameters : BaseObject {
        public EndAllRemoteServerAuthSessions_Parameters() { }
        public EndAllRemoteServerAuthSessions_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEndAllRemoteServerAuthSessions;
    public void EndAllRemoteServerAuthSessions() {
        _ptrEndAllRemoteServerAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndAllRemoteServerAuthSessions");

        _ptrEndAllRemoteServerAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndAllRemoteServerAuthSessions, null);
        _ptrEndAllRemoteServerAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndAllLocalServerAuthSessions
    // 0xBB1690
    // (Final | Native | Public)
    public unsafe class EndAllLocalServerAuthSessions_Parameters : BaseObject {
        public EndAllLocalServerAuthSessions_Parameters() { }
        public EndAllLocalServerAuthSessions_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEndAllLocalServerAuthSessions;
    public void EndAllLocalServerAuthSessions() {
        _ptrEndAllLocalServerAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndAllLocalServerAuthSessions");

        _ptrEndAllLocalServerAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndAllLocalServerAuthSessions, null);
        _ptrEndAllLocalServerAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndRemoteServerAuthSession
    // 0xBB14F0
    // (Final | Native | Public)
    public unsafe class EndRemoteServerAuthSession_Parameters : BaseObject {
        public EndRemoteServerAuthSession_Parameters() { }
        public EndRemoteServerAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndRemoteServerAuthSession.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndRemoteServerAuthSession.ServerIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ServerIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }
    }
    private static UFunction _ptrEndRemoteServerAuthSession;
    public void EndRemoteServerAuthSession(U_Types_Core.FUniqueNetId ServerUID, FIpAddr ServerIP) {
        _ptrEndRemoteServerAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndRemoteServerAuthSession");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 72, 20, 20);

        _ptrEndRemoteServerAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndRemoteServerAuthSession, @params);
        _ptrEndRemoteServerAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndLocalServerAuthSession
    // 0xBB1350
    // (Final | Native | Public)
    public unsafe class EndLocalServerAuthSession_Parameters : BaseObject {
        public EndLocalServerAuthSession_Parameters() { }
        public EndLocalServerAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndLocalServerAuthSession.ClientUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndLocalServerAuthSession.ClientIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ClientIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }
    }
    private static UFunction _ptrEndLocalServerAuthSession;
    public void EndLocalServerAuthSession(U_Types_Core.FUniqueNetId ClientUID, FIpAddr ClientIP) {
        _ptrEndLocalServerAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndLocalServerAuthSession");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientIP.Pointer, @params + 72, 20, 20);

        _ptrEndLocalServerAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndLocalServerAuthSession, @params);
        _ptrEndLocalServerAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.VerifyServerAuthSession
    // 0x3750E0
    // (Public)
    public unsafe class VerifyServerAuthSession_Parameters : BaseObject {
        public VerifyServerAuthSession_Parameters() { }
        public VerifyServerAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.VerifyServerAuthSession.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.VerifyServerAuthSession.ServerIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ServerIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.VerifyServerAuthSession.AuthTicketUID
        // 0x5C (0x4)
        // (Param)
        public int AuthTicketUID {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.VerifyServerAuthSession.ReturnValue
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrVerifyServerAuthSession;
    public bool VerifyServerAuthSession(U_Types_Core.FUniqueNetId ServerUID, FIpAddr ServerIP, int AuthTicketUID) {
        _ptrVerifyServerAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.VerifyServerAuthSession");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&AuthTicketUID, @params + 92, 4, 4);

        ProcessEvent(_ptrVerifyServerAuthSession, @params);

        return *(bool*)(@params + 96);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class CreateServerAuthSession_Parameters : BaseObject {
        public CreateServerAuthSession_Parameters() { }
        public CreateServerAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession.ClientUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession.ClientIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ClientIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession.ClientPort
        // 0x5C (0x4)
        // (Param)
        public int ClientPort {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession.OutAuthTicketUID
        // 0x60 (0x4)
        // (Param | OutParam)
        public int OutAuthTicketUID {
            get => *(int*)(Pointer + 96);
            set => *(int*)(Pointer + 96) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession.ReturnValue
        // 0x64 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 100) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 100) |= 0x1;
                else *(uint*)(Pointer + 100) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCreateServerAuthSession;
    public bool CreateServerAuthSession(U_Types_Core.FUniqueNetId ClientUID, FIpAddr ClientIP, int ClientPort, ref int OutAuthTicketUID) {
        _ptrCreateServerAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.CreateServerAuthSession");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&ClientPort, @params + 92, 4, 4);
        var _OutAuthTicketUID = OutAuthTicketUID;
        System.Buffer.MemoryCopy(&_OutAuthTicketUID, @params + 96, 4, 4);

        ProcessEvent(_ptrCreateServerAuthSession, @params);

        OutAuthTicketUID = *(int*)(@params + 96);

        return *(bool*)(@params + 100);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndAllRemoteClientAuthSessions
    // 0xBB1280
    // (Final | Native | Public)
    public unsafe class EndAllRemoteClientAuthSessions_Parameters : BaseObject {
        public EndAllRemoteClientAuthSessions_Parameters() { }
        public EndAllRemoteClientAuthSessions_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEndAllRemoteClientAuthSessions;
    public void EndAllRemoteClientAuthSessions() {
        _ptrEndAllRemoteClientAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndAllRemoteClientAuthSessions");

        _ptrEndAllRemoteClientAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndAllRemoteClientAuthSessions, null);
        _ptrEndAllRemoteClientAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndAllLocalClientAuthSessions
    // 0xBB11C0
    // (Final | Native | Public)
    public unsafe class EndAllLocalClientAuthSessions_Parameters : BaseObject {
        public EndAllLocalClientAuthSessions_Parameters() { }
        public EndAllLocalClientAuthSessions_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEndAllLocalClientAuthSessions;
    public void EndAllLocalClientAuthSessions() {
        _ptrEndAllLocalClientAuthSessions ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndAllLocalClientAuthSessions");

        _ptrEndAllLocalClientAuthSessions.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndAllLocalClientAuthSessions, null);
        _ptrEndAllLocalClientAuthSessions.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndRemoteClientAuthSession
    // 0xBB1020
    // (Final | Native | Public)
    public unsafe class EndRemoteClientAuthSession_Parameters : BaseObject {
        public EndRemoteClientAuthSession_Parameters() { }
        public EndRemoteClientAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndRemoteClientAuthSession.ClientUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndRemoteClientAuthSession.ClientIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ClientIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }
    }
    private static UFunction _ptrEndRemoteClientAuthSession;
    public void EndRemoteClientAuthSession(U_Types_Core.FUniqueNetId ClientUID, FIpAddr ClientIP) {
        _ptrEndRemoteClientAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndRemoteClientAuthSession");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientIP.Pointer, @params + 72, 20, 20);

        _ptrEndRemoteClientAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndRemoteClientAuthSession, @params);
        _ptrEndRemoteClientAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.EndLocalClientAuthSession
    // 0xBB0E50
    // (Final | Native | Public)
    public unsafe class EndLocalClientAuthSession_Parameters : BaseObject {
        public EndLocalClientAuthSession_Parameters() { }
        public EndLocalClientAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndLocalClientAuthSession.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.EndLocalClientAuthSession.ServerIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ServerIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.EndLocalClientAuthSession.ServerPort
        // 0x5C (0x4)
        // (Param)
        public int ServerPort {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }
    }
    private static UFunction _ptrEndLocalClientAuthSession;
    public void EndLocalClientAuthSession(U_Types_Core.FUniqueNetId ServerUID, FIpAddr ServerIP, int ServerPort) {
        _ptrEndLocalClientAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.EndLocalClientAuthSession");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&ServerPort, @params + 92, 4, 4);

        _ptrEndLocalClientAuthSession.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndLocalClientAuthSession, @params);
        _ptrEndLocalClientAuthSession.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession
    // 0x3750E0
    // (Public)
    public unsafe class VerifyClientAuthSession_Parameters : BaseObject {
        public VerifyClientAuthSession_Parameters() { }
        public VerifyClientAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession.ClientUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession.ClientIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ClientIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession.ClientPort
        // 0x5C (0x4)
        // (Param)
        public int ClientPort {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession.AuthTicketUID
        // 0x60 (0x4)
        // (Param)
        public int AuthTicketUID {
            get => *(int*)(Pointer + 96);
            set => *(int*)(Pointer + 96) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession.ReturnValue
        // 0x64 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 100) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 100) |= 0x1;
                else *(uint*)(Pointer + 100) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrVerifyClientAuthSession;
    public bool VerifyClientAuthSession(U_Types_Core.FUniqueNetId ClientUID, FIpAddr ClientIP, int ClientPort, int AuthTicketUID) {
        _ptrVerifyClientAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.VerifyClientAuthSession");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&ClientPort, @params + 92, 4, 4);
        System.Buffer.MemoryCopy(&AuthTicketUID, @params + 96, 4, 4);

        ProcessEvent(_ptrVerifyClientAuthSession, @params);

        return *(bool*)(@params + 100);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class CreateClientAuthSession_Parameters : BaseObject {
        public CreateClientAuthSession_Parameters() { }
        public CreateClientAuthSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession.ServerIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ServerIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession.ServerPort
        // 0x5C (0x4)
        // (Param)
        public int ServerPort {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession.bSecure
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSecure {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession.OutAuthTicketUID
        // 0x64 (0x4)
        // (Param | OutParam)
        public int OutAuthTicketUID {
            get => *(int*)(Pointer + 100);
            set => *(int*)(Pointer + 100) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCreateClientAuthSession;
    public bool CreateClientAuthSession(U_Types_Core.FUniqueNetId ServerUID, FIpAddr ServerIP, int ServerPort, bool bSecure, ref int OutAuthTicketUID) {
        _ptrCreateClientAuthSession ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.CreateClientAuthSession");

        var @params = stackalloc byte[108];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&ServerPort, @params + 92, 4, 4);
        System.Buffer.MemoryCopy(&bSecure, @params + 96, 4, 4);
        var _OutAuthTicketUID = OutAuthTicketUID;
        System.Buffer.MemoryCopy(&_OutAuthTicketUID, @params + 100, 4, 4);

        ProcessEvent(_ptrCreateClientAuthSession, @params);

        OutAuthTicketUID = *(int*)(@params + 100);

        return *(bool*)(@params + 104);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRetryRequest
    // 0xBB0E00
    // (Final | Native | Public)
    public unsafe class SendServerAuthRetryRequest_Parameters : BaseObject {
        public SendServerAuthRetryRequest_Parameters() { }
        public SendServerAuthRetryRequest_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRetryRequest.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendServerAuthRetryRequest;
    public bool SendServerAuthRetryRequest() {
        _ptrSendServerAuthRetryRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRetryRequest");

        var @params = stackalloc byte[4];

        _ptrSendServerAuthRetryRequest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendServerAuthRetryRequest, @params);
        _ptrSendServerAuthRetryRequest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.SendClientAuthEndSessionRequest
    // 0xBB0C10
    // (Final | Native | Public)
    public unsafe class SendClientAuthEndSessionRequest_Parameters : BaseObject {
        public SendClientAuthEndSessionRequest_Parameters() { }
        public SendClientAuthEndSessionRequest_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthEndSessionRequest.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthEndSessionRequest.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendClientAuthEndSessionRequest;
    public bool SendClientAuthEndSessionRequest(UPlayer ClientConnection) {
        _ptrSendClientAuthEndSessionRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.SendClientAuthEndSessionRequest");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);

        _ptrSendClientAuthEndSessionRequest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendClientAuthEndSessionRequest, @params);
        _ptrSendClientAuthEndSessionRequest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.SendServerAuthResponse
    // 0xBB0AA0
    // (Final | Native | Public)
    public unsafe class SendServerAuthResponse_Parameters : BaseObject {
        public SendServerAuthResponse_Parameters() { }
        public SendServerAuthResponse_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.SendServerAuthResponse.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.SendServerAuthResponse.AuthTicketUID
        // 0x8 (0x4)
        // (Param)
        public int AuthTicketUID {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.SendServerAuthResponse.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendServerAuthResponse;
    public bool SendServerAuthResponse(UPlayer ClientConnection, int AuthTicketUID) {
        _ptrSendServerAuthResponse ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.SendServerAuthResponse");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&AuthTicketUID, @params + 8, 4, 4);

        _ptrSendServerAuthResponse.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendServerAuthResponse, @params);
        _ptrSendServerAuthResponse.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 12);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.SendClientAuthResponse
    // 0xBB0960
    // (Final | Native | Public)
    public unsafe class SendClientAuthResponse_Parameters : BaseObject {
        public SendClientAuthResponse_Parameters() { }
        public SendClientAuthResponse_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthResponse.AuthTicketUID
        // 0x0 (0x4)
        // (Param)
        public int AuthTicketUID {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthResponse.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendClientAuthResponse;
    public bool SendClientAuthResponse(int AuthTicketUID) {
        _ptrSendClientAuthResponse ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.SendClientAuthResponse");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&AuthTicketUID, @params, 4, 4);

        _ptrSendClientAuthResponse.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSendClientAuthResponse, @params);
        _ptrSendClientAuthResponse.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRequest
    // 0x3750E0
    // (Public)
    public unsafe class SendServerAuthRequest_Parameters : BaseObject {
        public SendServerAuthRequest_Parameters() { }
        public SendServerAuthRequest_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRequest.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRequest.ReturnValue
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendServerAuthRequest;
    public bool SendServerAuthRequest(U_Types_Core.FUniqueNetId ServerUID) {
        _ptrSendServerAuthRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.SendServerAuthRequest");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);

        ProcessEvent(_ptrSendServerAuthRequest, @params);

        return *(bool*)(@params + 72);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.SendClientAuthRequest
    // 0x3750E0
    // (Public)
    public unsafe class SendClientAuthRequest_Parameters : BaseObject {
        public SendClientAuthRequest_Parameters() { }
        public SendClientAuthRequest_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthRequest.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthRequest.ClientUID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.SendClientAuthRequest.ReturnValue
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendClientAuthRequest;
    public bool SendClientAuthRequest(UPlayer ClientConnection, U_Types_Core.FUniqueNetId ClientUID) {
        _ptrSendClientAuthRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.SendClientAuthRequest");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params + 8, 72, 72);

        ProcessEvent(_ptrSendClientAuthRequest, @params);

        return *(bool*)(@params + 80);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearServerConnectionCloseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearServerConnectionCloseDelegate_Parameters : BaseObject {
        public ClearServerConnectionCloseDelegate_Parameters() { }
        public ClearServerConnectionCloseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearServerConnectionCloseDelegate.ServerConnectionCloseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerConnectionCloseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearServerConnectionCloseDelegate;
    public void ClearServerConnectionCloseDelegate(FScriptDelegate ServerConnectionCloseDelegate) {
        _ptrClearServerConnectionCloseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearServerConnectionCloseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerConnectionCloseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearServerConnectionCloseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddServerConnectionCloseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddServerConnectionCloseDelegate_Parameters : BaseObject {
        public AddServerConnectionCloseDelegate_Parameters() { }
        public AddServerConnectionCloseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddServerConnectionCloseDelegate.ServerConnectionCloseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerConnectionCloseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddServerConnectionCloseDelegate;
    public void AddServerConnectionCloseDelegate(FScriptDelegate ServerConnectionCloseDelegate) {
        _ptrAddServerConnectionCloseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddServerConnectionCloseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerConnectionCloseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddServerConnectionCloseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnServerConnectionClose
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnServerConnectionClose_Parameters : BaseObject {
        public OnServerConnectionClose_Parameters() { }
        public OnServerConnectionClose_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnServerConnectionClose.ServerConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ServerConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrOnServerConnectionClose;
    public void OnServerConnectionClose(UPlayer ServerConnection) {
        _ptrOnServerConnectionClose ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnServerConnectionClose");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ServerConnection.Pointer, @params, 8, 8);

        ProcessEvent(_ptrOnServerConnectionClose, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearClientConnectionCloseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearClientConnectionCloseDelegate_Parameters : BaseObject {
        public ClearClientConnectionCloseDelegate_Parameters() { }
        public ClearClientConnectionCloseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearClientConnectionCloseDelegate.ClientConnectionCloseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientConnectionCloseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearClientConnectionCloseDelegate;
    public void ClearClientConnectionCloseDelegate(FScriptDelegate ClientConnectionCloseDelegate) {
        _ptrClearClientConnectionCloseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearClientConnectionCloseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientConnectionCloseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearClientConnectionCloseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddClientConnectionCloseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddClientConnectionCloseDelegate_Parameters : BaseObject {
        public AddClientConnectionCloseDelegate_Parameters() { }
        public AddClientConnectionCloseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddClientConnectionCloseDelegate.ClientConnectionCloseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientConnectionCloseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddClientConnectionCloseDelegate;
    public void AddClientConnectionCloseDelegate(FScriptDelegate ClientConnectionCloseDelegate) {
        _ptrAddClientConnectionCloseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddClientConnectionCloseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientConnectionCloseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddClientConnectionCloseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnClientConnectionClose
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnClientConnectionClose_Parameters : BaseObject {
        public OnClientConnectionClose_Parameters() { }
        public OnClientConnectionClose_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnClientConnectionClose.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrOnClientConnectionClose;
    public void OnClientConnectionClose(UPlayer ClientConnection) {
        _ptrOnClientConnectionClose ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnClientConnectionClose");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);

        ProcessEvent(_ptrOnClientConnectionClose, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthRetryRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearServerAuthRetryRequestDelegate_Parameters : BaseObject {
        public ClearServerAuthRetryRequestDelegate_Parameters() { }
        public ClearServerAuthRetryRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthRetryRequestDelegate.ServerAuthRetryRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthRetryRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearServerAuthRetryRequestDelegate;
    public void ClearServerAuthRetryRequestDelegate(FScriptDelegate ServerAuthRetryRequestDelegate) {
        _ptrClearServerAuthRetryRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthRetryRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthRetryRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearServerAuthRetryRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthRetryRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddServerAuthRetryRequestDelegate_Parameters : BaseObject {
        public AddServerAuthRetryRequestDelegate_Parameters() { }
        public AddServerAuthRetryRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddServerAuthRetryRequestDelegate.ServerAuthRetryRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthRetryRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddServerAuthRetryRequestDelegate;
    public void AddServerAuthRetryRequestDelegate(FScriptDelegate ServerAuthRetryRequestDelegate) {
        _ptrAddServerAuthRetryRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthRetryRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthRetryRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddServerAuthRetryRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRetryRequest
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnServerAuthRetryRequest_Parameters : BaseObject {
        public OnServerAuthRetryRequest_Parameters() { }
        public OnServerAuthRetryRequest_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRetryRequest.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrOnServerAuthRetryRequest;
    public void OnServerAuthRetryRequest(UPlayer ClientConnection) {
        _ptrOnServerAuthRetryRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRetryRequest");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);

        ProcessEvent(_ptrOnServerAuthRetryRequest, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthEndSessionRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearClientAuthEndSessionRequestDelegate_Parameters : BaseObject {
        public ClearClientAuthEndSessionRequestDelegate_Parameters() { }
        public ClearClientAuthEndSessionRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthEndSessionRequestDelegate.ClientAuthEndSessionRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthEndSessionRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearClientAuthEndSessionRequestDelegate;
    public void ClearClientAuthEndSessionRequestDelegate(FScriptDelegate ClientAuthEndSessionRequestDelegate) {
        _ptrClearClientAuthEndSessionRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthEndSessionRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthEndSessionRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearClientAuthEndSessionRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthEndSessionRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddClientAuthEndSessionRequestDelegate_Parameters : BaseObject {
        public AddClientAuthEndSessionRequestDelegate_Parameters() { }
        public AddClientAuthEndSessionRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddClientAuthEndSessionRequestDelegate.ClientAuthEndSessionRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthEndSessionRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddClientAuthEndSessionRequestDelegate;
    public void AddClientAuthEndSessionRequestDelegate(FScriptDelegate ClientAuthEndSessionRequestDelegate) {
        _ptrAddClientAuthEndSessionRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthEndSessionRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthEndSessionRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddClientAuthEndSessionRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthEndSessionRequest
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnClientAuthEndSessionRequest_Parameters : BaseObject {
        public OnClientAuthEndSessionRequest_Parameters() { }
        public OnClientAuthEndSessionRequest_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthEndSessionRequest.ServerConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ServerConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrOnClientAuthEndSessionRequest;
    public void OnClientAuthEndSessionRequest(UPlayer ServerConnection) {
        _ptrOnClientAuthEndSessionRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthEndSessionRequest");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ServerConnection.Pointer, @params, 8, 8);

        ProcessEvent(_ptrOnClientAuthEndSessionRequest, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearServerAuthCompleteDelegate_Parameters : BaseObject {
        public ClearServerAuthCompleteDelegate_Parameters() { }
        public ClearServerAuthCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthCompleteDelegate.ServerAuthCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearServerAuthCompleteDelegate;
    public void ClearServerAuthCompleteDelegate(FScriptDelegate ServerAuthCompleteDelegate) {
        _ptrClearServerAuthCompleteDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearServerAuthCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddServerAuthCompleteDelegate_Parameters : BaseObject {
        public AddServerAuthCompleteDelegate_Parameters() { }
        public AddServerAuthCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddServerAuthCompleteDelegate.ServerAuthCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddServerAuthCompleteDelegate;
    public void AddServerAuthCompleteDelegate(FScriptDelegate ServerAuthCompleteDelegate) {
        _ptrAddServerAuthCompleteDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddServerAuthCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnServerAuthComplete_Parameters : BaseObject {
        public OnServerAuthComplete_Parameters() { }
        public OnServerAuthComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthComplete.bSuccess
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSuccess {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthComplete.ServerUID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthComplete.ServerConnection
        // 0x50 (0x8)
        // (Param)
        public UPlayer ServerConnection {
            get {
                var pointer = *(nint*)(Pointer + 80);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 80) = value.Pointer;
        }

        // StrProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthComplete.ExtraInfo
        // 0x58 (0x10)
        // (Param | NeedCtorLink)
        public FString ExtraInfo {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }
    }
    private static UFunction _ptrOnServerAuthComplete;
    public void OnServerAuthComplete(bool bSuccess, U_Types_Core.FUniqueNetId ServerUID, UPlayer ServerConnection, FString ExtraInfo) {
        _ptrOnServerAuthComplete ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthComplete");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy(&bSuccess, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerConnection.Pointer, @params + 80, 8, 8);
        System.Buffer.MemoryCopy((void*)ExtraInfo.Pointer, @params + 88, 16, 16);

        ProcessEvent(_ptrOnServerAuthComplete, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearClientAuthCompleteDelegate_Parameters : BaseObject {
        public ClearClientAuthCompleteDelegate_Parameters() { }
        public ClearClientAuthCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthCompleteDelegate.ClientAuthCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearClientAuthCompleteDelegate;
    public void ClearClientAuthCompleteDelegate(FScriptDelegate ClientAuthCompleteDelegate) {
        _ptrClearClientAuthCompleteDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearClientAuthCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddClientAuthCompleteDelegate_Parameters : BaseObject {
        public AddClientAuthCompleteDelegate_Parameters() { }
        public AddClientAuthCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddClientAuthCompleteDelegate.ClientAuthCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddClientAuthCompleteDelegate;
    public void AddClientAuthCompleteDelegate(FScriptDelegate ClientAuthCompleteDelegate) {
        _ptrAddClientAuthCompleteDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddClientAuthCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnClientAuthComplete_Parameters : BaseObject {
        public OnClientAuthComplete_Parameters() { }
        public OnClientAuthComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthComplete.bSuccess
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSuccess {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthComplete.ClientUID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthComplete.ClientConnection
        // 0x50 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)(Pointer + 80);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 80) = value.Pointer;
        }

        // StrProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthComplete.ExtraInfo
        // 0x58 (0x10)
        // (Param | NeedCtorLink)
        public FString ExtraInfo {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }
    }
    private static UFunction _ptrOnClientAuthComplete;
    public void OnClientAuthComplete(bool bSuccess, U_Types_Core.FUniqueNetId ClientUID, UPlayer ClientConnection, FString ExtraInfo) {
        _ptrOnClientAuthComplete ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthComplete");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy(&bSuccess, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params + 80, 8, 8);
        System.Buffer.MemoryCopy((void*)ExtraInfo.Pointer, @params + 88, 16, 16);

        ProcessEvent(_ptrOnClientAuthComplete, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthResponseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearServerAuthResponseDelegate_Parameters : BaseObject {
        public ClearServerAuthResponseDelegate_Parameters() { }
        public ClearServerAuthResponseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthResponseDelegate.ServerAuthResponseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthResponseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearServerAuthResponseDelegate;
    public void ClearServerAuthResponseDelegate(FScriptDelegate ServerAuthResponseDelegate) {
        _ptrClearServerAuthResponseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthResponseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthResponseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearServerAuthResponseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthResponseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddServerAuthResponseDelegate_Parameters : BaseObject {
        public AddServerAuthResponseDelegate_Parameters() { }
        public AddServerAuthResponseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddServerAuthResponseDelegate.ServerAuthResponseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthResponseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddServerAuthResponseDelegate;
    public void AddServerAuthResponseDelegate(FScriptDelegate ServerAuthResponseDelegate) {
        _ptrAddServerAuthResponseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthResponseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthResponseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddServerAuthResponseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthResponse
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnServerAuthResponse_Parameters : BaseObject {
        public OnServerAuthResponse_Parameters() { }
        public OnServerAuthResponse_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthResponse.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthResponse.ServerIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ServerIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthResponse.AuthTicketUID
        // 0x5C (0x4)
        // (Param)
        public int AuthTicketUID {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }
    }
    private static UFunction _ptrOnServerAuthResponse;
    public void OnServerAuthResponse(U_Types_Core.FUniqueNetId ServerUID, FIpAddr ServerIP, int AuthTicketUID) {
        _ptrOnServerAuthResponse ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthResponse");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&AuthTicketUID, @params + 92, 4, 4);

        ProcessEvent(_ptrOnServerAuthResponse, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthResponseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearClientAuthResponseDelegate_Parameters : BaseObject {
        public ClearClientAuthResponseDelegate_Parameters() { }
        public ClearClientAuthResponseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthResponseDelegate.ClientAuthResponseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthResponseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearClientAuthResponseDelegate;
    public void ClearClientAuthResponseDelegate(FScriptDelegate ClientAuthResponseDelegate) {
        _ptrClearClientAuthResponseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthResponseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthResponseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearClientAuthResponseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthResponseDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddClientAuthResponseDelegate_Parameters : BaseObject {
        public AddClientAuthResponseDelegate_Parameters() { }
        public AddClientAuthResponseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddClientAuthResponseDelegate.ClientAuthResponseDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthResponseDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddClientAuthResponseDelegate;
    public void AddClientAuthResponseDelegate(FScriptDelegate ClientAuthResponseDelegate) {
        _ptrAddClientAuthResponseDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthResponseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthResponseDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddClientAuthResponseDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthResponse
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnClientAuthResponse_Parameters : BaseObject {
        public OnClientAuthResponse_Parameters() { }
        public OnClientAuthResponse_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthResponse.ClientUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthResponse.ClientIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ClientIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthResponse.AuthTicketUID
        // 0x5C (0x4)
        // (Param)
        public int AuthTicketUID {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }
    }
    private static UFunction _ptrOnClientAuthResponse;
    public void OnClientAuthResponse(U_Types_Core.FUniqueNetId ClientUID, FIpAddr ClientIP, int AuthTicketUID) {
        _ptrOnClientAuthResponse ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthResponse");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&AuthTicketUID, @params + 92, 4, 4);

        ProcessEvent(_ptrOnClientAuthResponse, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearServerAuthRequestDelegate_Parameters : BaseObject {
        public ClearServerAuthRequestDelegate_Parameters() { }
        public ClearServerAuthRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthRequestDelegate.ServerAuthRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearServerAuthRequestDelegate;
    public void ClearServerAuthRequestDelegate(FScriptDelegate ServerAuthRequestDelegate) {
        _ptrClearServerAuthRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearServerAuthRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearServerAuthRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddServerAuthRequestDelegate_Parameters : BaseObject {
        public AddServerAuthRequestDelegate_Parameters() { }
        public AddServerAuthRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddServerAuthRequestDelegate.ServerAuthRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ServerAuthRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddServerAuthRequestDelegate;
    public void AddServerAuthRequestDelegate(FScriptDelegate ServerAuthRequestDelegate) {
        _ptrAddServerAuthRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddServerAuthRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ServerAuthRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddServerAuthRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRequest
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnServerAuthRequest_Parameters : BaseObject {
        public OnServerAuthRequest_Parameters() { }
        public OnServerAuthRequest_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRequest.ClientConnection
        // 0x0 (0x8)
        // (Param)
        public UPlayer ClientConnection {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRequest.ClientUID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ClientUID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRequest.ClientIP
        // 0x50 (0x14)
        // (Param)
        public FIpAddr ClientIP {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRequest.ClientPort
        // 0x64 (0x4)
        // (Param)
        public int ClientPort {
            get => *(int*)(Pointer + 100);
            set => *(int*)(Pointer + 100) = value;
        }
    }
    private static UFunction _ptrOnServerAuthRequest;
    public void OnServerAuthRequest(UPlayer ClientConnection, U_Types_Core.FUniqueNetId ClientUID, FIpAddr ClientIP, int ClientPort) {
        _ptrOnServerAuthRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnServerAuthRequest");

        var @params = stackalloc byte[104];
        System.Buffer.MemoryCopy((void*)ClientConnection.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)ClientUID.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy((void*)ClientIP.Pointer, @params + 80, 20, 20);
        System.Buffer.MemoryCopy(&ClientPort, @params + 100, 4, 4);

        ProcessEvent(_ptrOnServerAuthRequest, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearClientAuthRequestDelegate_Parameters : BaseObject {
        public ClearClientAuthRequestDelegate_Parameters() { }
        public ClearClientAuthRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthRequestDelegate.ClientAuthRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearClientAuthRequestDelegate;
    public void ClearClientAuthRequestDelegate(FScriptDelegate ClientAuthRequestDelegate) {
        _ptrClearClientAuthRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearClientAuthRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearClientAuthRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthRequestDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddClientAuthRequestDelegate_Parameters : BaseObject {
        public AddClientAuthRequestDelegate_Parameters() { }
        public AddClientAuthRequestDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddClientAuthRequestDelegate.ClientAuthRequestDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ClientAuthRequestDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddClientAuthRequestDelegate;
    public void AddClientAuthRequestDelegate(FScriptDelegate ClientAuthRequestDelegate) {
        _ptrAddClientAuthRequestDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddClientAuthRequestDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ClientAuthRequestDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddClientAuthRequestDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthRequest
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnClientAuthRequest_Parameters : BaseObject {
        public OnClientAuthRequest_Parameters() { }
        public OnClientAuthRequest_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthRequest.ServerUID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthRequest.ServerIP
        // 0x48 (0x14)
        // (Param)
        public FIpAddr ServerIP {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 20, 20);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthRequest.ServerPort
        // 0x5C (0x4)
        // (Param)
        public int ServerPort {
            get => *(int*)(Pointer + 92);
            set => *(int*)(Pointer + 92) = value;
        }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.OnClientAuthRequest.bSecure
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSecure {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnClientAuthRequest;
    public void OnClientAuthRequest(U_Types_Core.FUniqueNetId ServerUID, FIpAddr ServerIP, int ServerPort, bool bSecure) {
        _ptrOnClientAuthRequest ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnClientAuthRequest");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 72, 20, 20);
        System.Buffer.MemoryCopy(&ServerPort, @params + 92, 4, 4);
        System.Buffer.MemoryCopy(&bSecure, @params + 96, 4, 4);

        ProcessEvent(_ptrOnClientAuthRequest, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.ClearAuthReadyDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearAuthReadyDelegate_Parameters : BaseObject {
        public ClearAuthReadyDelegate_Parameters() { }
        public ClearAuthReadyDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.ClearAuthReadyDelegate.AuthReadyDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate AuthReadyDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearAuthReadyDelegate;
    public void ClearAuthReadyDelegate(FScriptDelegate AuthReadyDelegate) {
        _ptrClearAuthReadyDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.ClearAuthReadyDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)AuthReadyDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearAuthReadyDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.AddAuthReadyDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddAuthReadyDelegate_Parameters : BaseObject {
        public AddAuthReadyDelegate_Parameters() { }
        public AddAuthReadyDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AddAuthReadyDelegate.AuthReadyDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate AuthReadyDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddAuthReadyDelegate;
    public void AddAuthReadyDelegate(FScriptDelegate AuthReadyDelegate) {
        _ptrAddAuthReadyDelegate ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.AddAuthReadyDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)AuthReadyDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddAuthReadyDelegate, @params);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.OnAuthReady
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAuthReady_Parameters : BaseObject {
        public OnAuthReady_Parameters() { }
        public OnAuthReady_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnAuthReady;
    public void OnAuthReady() {
        _ptrOnAuthReady ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.OnAuthReady");

        ProcessEvent(_ptrOnAuthReady, null);
    }

    // Function IpDrv.OnlineAuthInterfaceImpl.IsReady
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class IsReady_Parameters : BaseObject {
        public IsReady_Parameters() { }
        public IsReady_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineAuthInterfaceImpl.IsReady.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsReady;
    public bool IsReady() {
        _ptrIsReady ??= FindFunction("Function IpDrv.OnlineAuthInterfaceImpl.IsReady");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrIsReady, @params);

        return *(bool*)@params;
    }


    // ScriptStruct IpDrv.OnlineAuthInterfaceImpl.AuthCodeRequest
    // 0x64
    public unsafe class FAuthCodeRequest : BaseObject {
        public FAuthCodeRequest() {
            Pointer = Marshal.AllocHGlobal(100);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 100);
            Allocated = true;
        }
        public FAuthCodeRequest(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineAuthInterfaceImpl.AuthCodeRequest.PlayerID
        // 0x0 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // DelegateProperty IpDrv.OnlineAuthInterfaceImpl.AuthCodeRequest.Callback
        // 0x48 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 24, 24);
        }

        // IntProperty IpDrv.OnlineAuthInterfaceImpl.AuthCodeRequest.RequestID
        // 0x60 (0x4)
        public int RequestID {
            get => *(int*)(Pointer + 96);
            set => *(int*)(Pointer + 96) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineAuthInterfaceImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineFriendsInterfaceImpl
// 0x20 (0x60 - 0x80)
// (Compiled | Parsed | Native)
public unsafe partial class UOnlineFriendsInterfaceImpl : UObject {
    public UOnlineFriendsInterfaceImpl() { }
    public UOnlineFriendsInterfaceImpl(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.OnlineFriendsInterfaceImpl.VfTable_IOnlineFriendsInterface
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_IOnlineFriendsInterface {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // DelegateProperty IpDrv.OnlineFriendsInterfaceImpl.__OnReceivedLinkedAccount__Delegate
    // 0x68 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceivedLinkedAccount__Delegate {
        get => new(Pointer + 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 24, 24);
    }


    // Function IpDrv.OnlineFriendsInterfaceImpl.GetActivePlatformId
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetActivePlatformId_Parameters : BaseObject {
        public GetActivePlatformId_Parameters() { }
        public GetActivePlatformId_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineFriendsInterfaceImpl.GetActivePlatformId.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StructProperty IpDrv.OnlineFriendsInterfaceImpl.GetActivePlatformId.AccountId
        // 0x8 (0x48)
        // (Const | Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId AccountId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // StructProperty IpDrv.OnlineFriendsInterfaceImpl.GetActivePlatformId.PlatformId
        // 0x50 (0x48)
        // (Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlatformId {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 72, 72);
        }

        // BoolProperty IpDrv.OnlineFriendsInterfaceImpl.GetActivePlatformId.ReturnValue
        // 0x98 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 152) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 152) |= 0x1;
                else *(uint*)(Pointer + 152) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetActivePlatformId;
    public bool GetActivePlatformId(byte LocalUserNum, U_Types_Core.FUniqueNetId AccountId, ref U_Types_Core.FUniqueNetId PlatformId) {
        _ptrGetActivePlatformId ??= FindFunction("Function IpDrv.OnlineFriendsInterfaceImpl.GetActivePlatformId");

        var @params = stackalloc byte[149];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)AccountId.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy((void*)PlatformId.Pointer, @params + 80, 72, 72);

        ProcessEvent(_ptrGetActivePlatformId, @params);

        var _PlatformIdPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 80, (void*)_PlatformIdPtr, 72, 72);
        PlatformId = new(_PlatformIdPtr) { Allocated = true };

        return *(bool*)(@params + 152);
    }

    // Function IpDrv.OnlineFriendsInterfaceImpl.RequestLinkedAccounts
    // 0x3750E0
    // (Public)
    public unsafe class RequestLinkedAccounts_Parameters : BaseObject {
        public RequestLinkedAccounts_Parameters() { }
        public RequestLinkedAccounts_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineFriendsInterfaceImpl.RequestLinkedAccounts.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.OnlineFriendsInterfaceImpl.RequestLinkedAccounts.AccountIds
        // 0x8 (0x10)
        // (Const | Param | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> AccountIds {
            get => new(Pointer + 8, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // DelegateProperty IpDrv.OnlineFriendsInterfaceImpl.RequestLinkedAccounts.Callback
        // 0x18 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 24, 24);
        }

        // BoolProperty IpDrv.OnlineFriendsInterfaceImpl.RequestLinkedAccounts.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestLinkedAccounts;
    public bool RequestLinkedAccounts(byte LocalUserNum, StructTArray<U_Types_Core.FUniqueNetId> AccountIds, FScriptDelegate Callback) {
        _ptrRequestLinkedAccounts ??= FindFunction("Function IpDrv.OnlineFriendsInterfaceImpl.RequestLinkedAccounts");

        var @params = stackalloc byte[45];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)AccountIds.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 24, 24, 24);

        ProcessEvent(_ptrRequestLinkedAccounts, @params);

        return *(bool*)(@params + 48);
    }

    // Function IpDrv.OnlineFriendsInterfaceImpl.OnReceivedLinkedAccount
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReceivedLinkedAccount_Parameters : BaseObject {
        public OnReceivedLinkedAccount_Parameters() { }
        public OnReceivedLinkedAccount_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineFriendsInterfaceImpl.OnReceivedLinkedAccount.bSuccess
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSuccess {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlineFriendsInterfaceImpl.OnReceivedLinkedAccount.LinkedAccountData
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<ULinkedAccountDetails.FLinkedAccountData> LinkedAccountData {
            get => new(Pointer + 8, 168);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnReceivedLinkedAccount;
    public void OnReceivedLinkedAccount(bool bSuccess, StructTArray<ULinkedAccountDetails.FLinkedAccountData> LinkedAccountData) {
        _ptrOnReceivedLinkedAccount ??= FindFunction("Function IpDrv.OnlineFriendsInterfaceImpl.OnReceivedLinkedAccount");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bSuccess, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)LinkedAccountData.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnReceivedLinkedAccount, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineFriendsInterfaceImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineGameInterfaceImpl
// 0x2B8 (0x60 - 0x318)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineGameInterfaceImpl : UObject {
    public UOnlineGameInterfaceImpl() { }
    public UOnlineGameInterfaceImpl(nint pointer) : base(pointer) { }


    // ObjectProperty IpDrv.OnlineGameInterfaceImpl.OwningSubsystem
    // 0x60 (0x8)
    public UOnlineSubsystemCommonImpl OwningSubsystem {
        get {
            var pointer = *(nint*)(Pointer + 96);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 96) = value.Pointer;
    }

    // ObjectProperty IpDrv.OnlineGameInterfaceImpl.GameSettings
    // 0x68 (0x8)
    // (Const)
    public UOnlineGameSettings GameSettings {
        get {
            var pointer = *(nint*)(Pointer + 104);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 104) = value.Pointer;
    }

    // ObjectProperty IpDrv.OnlineGameInterfaceImpl.GameSearch
    // 0x70 (0x8)
    // (Const)
    public UOnlineGameSearch GameSearch {
        get {
            var pointer = *(nint*)(Pointer + 112);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 112) = value.Pointer;
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.CreateOnlineGameCompleteDelegates
    // 0x78 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> CreateOnlineGameCompleteDelegates {
        get => new(Pointer + 120, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGameCompleteDelegates
    // 0x88 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> UpdateOnlineGameCompleteDelegates {
        get => new(Pointer + 136, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.DestroyOnlineGameCompleteDelegates
    // 0x98 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> DestroyOnlineGameCompleteDelegates {
        get => new(Pointer + 152, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 152), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.JoinOnlineGameCompleteDelegates
    // 0xA8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> JoinOnlineGameCompleteDelegates {
        get => new(Pointer + 168, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.MigrateOnlineGameCompleteDelegates
    // 0xB8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> MigrateOnlineGameCompleteDelegates {
        get => new(Pointer + 184, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGameCompleteDelegates
    // 0xC8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> JoinMigratedOnlineGameCompleteDelegates {
        get => new(Pointer + 200, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.RecalculateSkillRatingCompleteDelegates
    // 0xD8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> RecalculateSkillRatingCompleteDelegates {
        get => new(Pointer + 216, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.StartOnlineGameCompleteDelegates
    // 0xE8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> StartOnlineGameCompleteDelegates {
        get => new(Pointer + 232, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.EndOnlineGameCompleteDelegates
    // 0xF8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> EndOnlineGameCompleteDelegates {
        get => new(Pointer + 248, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.FindOnlineGamesCompleteDelegates
    // 0x108 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> FindOnlineGamesCompleteDelegates {
        get => new(Pointer + 264, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 264), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.CancelFindOnlineGamesCompleteDelegates
    // 0x118 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> CancelFindOnlineGamesCompleteDelegates {
        get => new(Pointer + 280, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // ByteProperty IpDrv.OnlineGameInterfaceImpl.LanBeaconState
    // 0x128 (0x1)
    // (Const)
    public UOnlineSubsystem.ELanBeaconState LanBeaconState {
        get => *(UOnlineSubsystem.ELanBeaconState*)(Pointer + 296);
        set => *(UOnlineSubsystem.ELanBeaconState*)(Pointer + 296) = value;
    }

    // ByteProperty IpDrv.OnlineGameInterfaceImpl.LanNonce
    // 0x129 (0x8)
    // (Const)
    // Fixed array size: 8
    public UnmanagedFixedArray<byte> LanNonce {
        get => new(Pointer + 297, 8);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 297), 8, 8);
    }

    // MISSED OFFSET: 0x3

    // IntProperty IpDrv.OnlineGameInterfaceImpl.LanAnnouncePort
    // 0x134 (0x4)
    // (Const | Config)
    public int LanAnnouncePort {
        get => *(int*)(Pointer + 308);
        set => *(int*)(Pointer + 308) = value;
    }

    // IntProperty IpDrv.OnlineGameInterfaceImpl.LanGameUniqueId
    // 0x138 (0x4)
    // (Const | Config)
    public int LanGameUniqueId {
        get => *(int*)(Pointer + 312);
        set => *(int*)(Pointer + 312) = value;
    }

    // IntProperty IpDrv.OnlineGameInterfaceImpl.LanPacketPlatformMask
    // 0x13C (0x4)
    // (Const | Config)
    public int LanPacketPlatformMask {
        get => *(int*)(Pointer + 316);
        set => *(int*)(Pointer + 316) = value;
    }

    // FloatProperty IpDrv.OnlineGameInterfaceImpl.LanQueryTimeLeft
    // 0x140 (0x4)
    public float LanQueryTimeLeft {
        get => *(float*)(Pointer + 320);
        set => *(float*)(Pointer + 320) = value;
    }

    // FloatProperty IpDrv.OnlineGameInterfaceImpl.LanQueryTimeout
    // 0x144 (0x4)
    // (Config)
    public float LanQueryTimeout {
        get => *(float*)(Pointer + 324);
        set => *(float*)(Pointer + 324) = value;
    }

    // StructProperty IpDrv.OnlineGameInterfaceImpl.LanBeacon
    // 0x148 (0x8)
    // (Const | Native | Transient)
    public nint LanBeacon {
        get => *(nint*)(Pointer + 328);
        set => *(nint*)(Pointer + 328) = value;
    }

    // StructProperty IpDrv.OnlineGameInterfaceImpl.SessionInfo
    // 0x150 (0x8)
    // (Const | Native | Transient)
    public nint SessionInfo {
        get => *(nint*)(Pointer + 336);
        set => *(nint*)(Pointer + 336) = value;
    }

    // ArrayProperty IpDrv.OnlineGameInterfaceImpl.GameInviteAcceptedDelegates
    // 0x158 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> GameInviteAcceptedDelegates {
        get => new(Pointer + 344, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 344), 16, 16);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnFindOnlineGamesComplete__Delegate
    // 0x168 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnFindOnlineGamesComplete__Delegate {
        get => new(Pointer + 360);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 360), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnCreateOnlineGameComplete__Delegate
    // 0x180 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateOnlineGameComplete__Delegate {
        get => new(Pointer + 384);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 384), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnUpdateOnlineGameComplete__Delegate
    // 0x198 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnUpdateOnlineGameComplete__Delegate {
        get => new(Pointer + 408);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 408), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnDestroyOnlineGameComplete__Delegate
    // 0x1B0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDestroyOnlineGameComplete__Delegate {
        get => new(Pointer + 432);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 432), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnCancelFindOnlineGamesComplete__Delegate
    // 0x1C8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCancelFindOnlineGamesComplete__Delegate {
        get => new(Pointer + 456);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 456), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnJoinOnlineGameComplete__Delegate
    // 0x1E0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnJoinOnlineGameComplete__Delegate {
        get => new(Pointer + 480);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 480), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnRegisterPlayerComplete__Delegate
    // 0x1F8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnRegisterPlayerComplete__Delegate {
        get => new(Pointer + 504);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 504), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnUnregisterPlayerComplete__Delegate
    // 0x210 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnUnregisterPlayerComplete__Delegate {
        get => new(Pointer + 528);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 528), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnStartOnlineGameComplete__Delegate
    // 0x228 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnStartOnlineGameComplete__Delegate {
        get => new(Pointer + 552);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 552), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnEndOnlineGameComplete__Delegate
    // 0x240 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnEndOnlineGameComplete__Delegate {
        get => new(Pointer + 576);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 576), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnArbitrationRegistrationComplete__Delegate
    // 0x258 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnArbitrationRegistrationComplete__Delegate {
        get => new(Pointer + 600);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 600), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnGameInviteAccepted__Delegate
    // 0x270 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnGameInviteAccepted__Delegate {
        get => new(Pointer + 624);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 624), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnRecalculateSkillRatingComplete__Delegate
    // 0x288 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnRecalculateSkillRatingComplete__Delegate {
        get => new(Pointer + 648);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 648), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnMigrateOnlineGameComplete__Delegate
    // 0x2A0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnMigrateOnlineGameComplete__Delegate {
        get => new(Pointer + 672);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 672), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnJoinMigratedOnlineGameComplete__Delegate
    // 0x2B8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnJoinMigratedOnlineGameComplete__Delegate {
        get => new(Pointer + 696);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 696), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnQosStatusChanged__Delegate
    // 0x2D0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQosStatusChanged__Delegate {
        get => new(Pointer + 720);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 720), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__EventReportMatchmakingInfo__Delegate
    // 0x2E8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventReportMatchmakingInfo__Delegate {
        get => new(Pointer + 744);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 744), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineGameInterfaceImpl.__OnGamePlayersChanged__Delegate
    // 0x300 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnGamePlayersChanged__Delegate {
        get => new(Pointer + 768);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 768), 24, 24);
    }


    // Function IpDrv.OnlineGameInterfaceImpl.ClearGamePlayersChangedDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class ClearGamePlayersChangedDelegate_Parameters : BaseObject {
        public ClearGamePlayersChangedDelegate_Parameters() { }
        public ClearGamePlayersChangedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearGamePlayersChangedDelegate.GamePlayersChangedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate GamePlayersChangedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearGamePlayersChangedDelegate;
    public void ClearGamePlayersChangedDelegate(FScriptDelegate GamePlayersChangedDelegate) {
        _ptrClearGamePlayersChangedDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearGamePlayersChangedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)GamePlayersChangedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearGamePlayersChangedDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddGamePlayersChangedDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class AddGamePlayersChangedDelegate_Parameters : BaseObject {
        public AddGamePlayersChangedDelegate_Parameters() { }
        public AddGamePlayersChangedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddGamePlayersChangedDelegate.GamePlayersChangedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate GamePlayersChangedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddGamePlayersChangedDelegate;
    public void AddGamePlayersChangedDelegate(FScriptDelegate GamePlayersChangedDelegate) {
        _ptrAddGamePlayersChangedDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddGamePlayersChangedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)GamePlayersChangedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddGamePlayersChangedDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnGamePlayersChanged
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnGamePlayersChanged_Parameters : BaseObject {
        public OnGamePlayersChanged_Parameters() { }
        public OnGamePlayersChanged_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnGamePlayersChanged.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.OnlineGameInterfaceImpl.OnGamePlayersChanged.Players
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer + 8, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnGamePlayersChanged;
    public void OnGamePlayersChanged(FName SessionName, StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrOnGamePlayersChanged ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnGamePlayersChanged");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnGamePlayersChanged, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.SetFriendJoinLocation
    // 0x3750E0
    // (Public)
    public unsafe class SetFriendJoinLocation_Parameters : BaseObject {
        public SetFriendJoinLocation_Parameters() { }
        public SetFriendJoinLocation_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.SetFriendJoinLocation.JoinablePlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId JoinablePlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // StrProperty IpDrv.OnlineGameInterfaceImpl.SetFriendJoinLocation.ServerAddress
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString ServerAddress {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.SetFriendJoinLocation.Visibility
        // 0x58 (0x1)
        // (Param)
        public UOnlineLobbySettings.ELobbyVisibility Visibility {
            get => *(UOnlineLobbySettings.ELobbyVisibility*)(Pointer + 88);
            set => *(UOnlineLobbySettings.ELobbyVisibility*)(Pointer + 88) = value;
        }
    }
    private static UFunction _ptrSetFriendJoinLocation;
    public void SetFriendJoinLocation(U_Types_Core.FUniqueNetId JoinablePlayerID, FString ServerAddress, UOnlineLobbySettings.ELobbyVisibility Visibility) {
        _ptrSetFriendJoinLocation ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.SetFriendJoinLocation");

        var @params = stackalloc byte[89];
        System.Buffer.MemoryCopy((void*)JoinablePlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerAddress.Pointer, @params + 72, 16, 16);
        System.Buffer.MemoryCopy(&Visibility, @params + 88, 1, 1);

        ProcessEvent(_ptrSetFriendJoinLocation, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearReportMatchmakingInfoDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearReportMatchmakingInfoDelegate_Parameters : BaseObject {
        public ClearReportMatchmakingInfoDelegate_Parameters() { }
        public ClearReportMatchmakingInfoDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearReportMatchmakingInfoDelegate.OldDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate OldDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearReportMatchmakingInfoDelegate;
    public void ClearReportMatchmakingInfoDelegate(FScriptDelegate OldDelegate) {
        _ptrClearReportMatchmakingInfoDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearReportMatchmakingInfoDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)OldDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearReportMatchmakingInfoDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddReportMatchmakingInfoDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddReportMatchmakingInfoDelegate_Parameters : BaseObject {
        public AddReportMatchmakingInfoDelegate_Parameters() { }
        public AddReportMatchmakingInfoDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddReportMatchmakingInfoDelegate.NewDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate NewDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddReportMatchmakingInfoDelegate;
    public void AddReportMatchmakingInfoDelegate(FScriptDelegate NewDelegate) {
        _ptrAddReportMatchmakingInfoDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddReportMatchmakingInfoDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)NewDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddReportMatchmakingInfoDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.EventReportMatchmakingInfo
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventReportMatchmakingInfo_Parameters : BaseObject {
        public EventReportMatchmakingInfo_Parameters() { }
        public EventReportMatchmakingInfo_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineGameInterfaceImpl.EventReportMatchmakingInfo.NewInfo
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString NewInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrEventReportMatchmakingInfo;
    public void EventReportMatchmakingInfo(FString NewInfo) {
        _ptrEventReportMatchmakingInfo ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.EventReportMatchmakingInfo");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)NewInfo.Pointer, @params, 16, 16);

        ProcessEvent(_ptrEventReportMatchmakingInfo, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearQosStatusChangedDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class ClearQosStatusChangedDelegate_Parameters : BaseObject {
        public ClearQosStatusChangedDelegate_Parameters() { }
        public ClearQosStatusChangedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearQosStatusChangedDelegate.QosStatusChangedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate QosStatusChangedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearQosStatusChangedDelegate;
    public void ClearQosStatusChangedDelegate(FScriptDelegate QosStatusChangedDelegate) {
        _ptrClearQosStatusChangedDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearQosStatusChangedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)QosStatusChangedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearQosStatusChangedDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddQosStatusChangedDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class AddQosStatusChangedDelegate_Parameters : BaseObject {
        public AddQosStatusChangedDelegate_Parameters() { }
        public AddQosStatusChangedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddQosStatusChangedDelegate.QosStatusChangedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate QosStatusChangedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddQosStatusChangedDelegate;
    public void AddQosStatusChangedDelegate(FScriptDelegate QosStatusChangedDelegate) {
        _ptrAddQosStatusChangedDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddQosStatusChangedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)QosStatusChangedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddQosStatusChangedDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnQosStatusChanged
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQosStatusChanged_Parameters : BaseObject {
        public OnQosStatusChanged_Parameters() { }
        public OnQosStatusChanged_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineGameInterfaceImpl.OnQosStatusChanged.NumComplete
        // 0x0 (0x4)
        // (Param)
        public int NumComplete {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineGameInterfaceImpl.OnQosStatusChanged.NumTotal
        // 0x4 (0x4)
        // (Param)
        public int NumTotal {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrOnQosStatusChanged;
    public void OnQosStatusChanged(int NumComplete, int NumTotal) {
        _ptrOnQosStatusChanged ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnQosStatusChanged");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&NumComplete, @params, 4, 4);
        System.Buffer.MemoryCopy(&NumTotal, @params + 4, 4, 4);

        ProcessEvent(_ptrOnQosStatusChanged, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.BindPlatformSpecificSessionToSearch
    // 0xBA88E0
    // (Native | Public)
    public unsafe class BindPlatformSpecificSessionToSearch_Parameters : BaseObject {
        public BindPlatformSpecificSessionToSearch_Parameters() { }
        public BindPlatformSpecificSessionToSearch_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.BindPlatformSpecificSessionToSearch.SearchingPlayerNum
        // 0x0 (0x1)
        // (Param)
        public byte SearchingPlayerNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.BindPlatformSpecificSessionToSearch.SearchSettings
        // 0x8 (0x8)
        // (Param)
        public UOnlineGameSearch SearchSettings {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.BindPlatformSpecificSessionToSearch.PlatformSpecificInfo
        // 0x10 (0x50)
        // (Param)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 80, 80);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.BindPlatformSpecificSessionToSearch.ReturnValue
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrBindPlatformSpecificSessionToSearch;
    public bool BindPlatformSpecificSessionToSearch(byte SearchingPlayerNum, UOnlineGameSearch SearchSettings, UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrBindPlatformSpecificSessionToSearch ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.BindPlatformSpecificSessionToSearch");

        var @params = stackalloc byte[93];
        System.Buffer.MemoryCopy(&SearchingPlayerNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SearchSettings.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 16, 80, 80);

        _ptrBindPlatformSpecificSessionToSearch.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrBindPlatformSpecificSessionToSearch, @params);
        _ptrBindPlatformSpecificSessionToSearch.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 96);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfoBySessionName
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class ReadPlatformSpecificSessionInfoBySessionName_Parameters : BaseObject {
        public ReadPlatformSpecificSessionInfoBySessionName_Parameters() { }
        public ReadPlatformSpecificSessionInfoBySessionName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfoBySessionName.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfoBySessionName.PlatformSpecificInfo
        // 0x8 (0x50)
        // (Param | OutParam)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 8, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 80, 80);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfoBySessionName.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadPlatformSpecificSessionInfoBySessionName;
    public bool ReadPlatformSpecificSessionInfoBySessionName(FName SessionName, ref UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrReadPlatformSpecificSessionInfoBySessionName ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfoBySessionName");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 8, 80, 80);

        ProcessEvent(_ptrReadPlatformSpecificSessionInfoBySessionName, @params);

        var _PlatformSpecificInfoPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 8, (void*)_PlatformSpecificInfoPtr, 80, 80);
        PlatformSpecificInfo = new(_PlatformSpecificInfoPtr, 80) { Allocated = true };

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfo
    // 0xBA86E0
    // (Native | Public | HasOutParams)
    public unsafe class ReadPlatformSpecificSessionInfo_Parameters : BaseObject {
        public ReadPlatformSpecificSessionInfo_Parameters() { }
        public ReadPlatformSpecificSessionInfo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfo.DesiredGame
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult DesiredGame {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfo.PlatformSpecificInfo
        // 0x10 (0x50)
        // (Param | OutParam)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 80, 80);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfo.ReturnValue
        // 0x60 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 96) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 96) |= 0x1;
                else *(uint*)(Pointer + 96) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrReadPlatformSpecificSessionInfo;
    public bool ReadPlatformSpecificSessionInfo(ref UOnlineGameSearch.FOnlineGameSearchResult DesiredGame, ref UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrReadPlatformSpecificSessionInfo ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ReadPlatformSpecificSessionInfo");

        var @params = stackalloc byte[100];
        System.Buffer.MemoryCopy((void*)DesiredGame.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 16, 80, 80);

        _ptrReadPlatformSpecificSessionInfo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrReadPlatformSpecificSessionInfo, @params);
        _ptrReadPlatformSpecificSessionInfo.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DesiredGamePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_DesiredGamePtr, 16, 16);
        DesiredGame = new(_DesiredGamePtr) { Allocated = true };
        var _PlatformSpecificInfoPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlatformSpecificInfoPtr, 80, 80);
        PlatformSpecificInfo = new(_PlatformSpecificInfoPtr, 80) { Allocated = true };

        return *(bool*)(@params + 96);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.QueryNonAdvertisedData
    // 0x3750E0
    // (Public)
    public unsafe class QueryNonAdvertisedData_Parameters : BaseObject {
        public QueryNonAdvertisedData_Parameters() { }
        public QueryNonAdvertisedData_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineGameInterfaceImpl.QueryNonAdvertisedData.StartAt
        // 0x0 (0x4)
        // (Param)
        public int StartAt {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineGameInterfaceImpl.QueryNonAdvertisedData.NumberToQuery
        // 0x4 (0x4)
        // (Param)
        public int NumberToQuery {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.QueryNonAdvertisedData.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrQueryNonAdvertisedData;
    public bool QueryNonAdvertisedData(int StartAt, int NumberToQuery) {
        _ptrQueryNonAdvertisedData ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.QueryNonAdvertisedData");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&StartAt, @params, 4, 4);
        System.Buffer.MemoryCopy(&NumberToQuery, @params + 4, 4, 4);

        ProcessEvent(_ptrQueryNonAdvertisedData, @params);

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearJoinMigratedOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearJoinMigratedOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearJoinMigratedOnlineGameCompleteDelegate_Parameters() { }
        public ClearJoinMigratedOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearJoinMigratedOnlineGameCompleteDelegate.JoinMigratedOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate JoinMigratedOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearJoinMigratedOnlineGameCompleteDelegate;
    public void ClearJoinMigratedOnlineGameCompleteDelegate(FScriptDelegate JoinMigratedOnlineGameCompleteDelegate) {
        _ptrClearJoinMigratedOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearJoinMigratedOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)JoinMigratedOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearJoinMigratedOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddJoinMigratedOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddJoinMigratedOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddJoinMigratedOnlineGameCompleteDelegate_Parameters() { }
        public AddJoinMigratedOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddJoinMigratedOnlineGameCompleteDelegate.JoinMigratedOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate JoinMigratedOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddJoinMigratedOnlineGameCompleteDelegate;
    public void AddJoinMigratedOnlineGameCompleteDelegate(FScriptDelegate JoinMigratedOnlineGameCompleteDelegate) {
        _ptrAddJoinMigratedOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddJoinMigratedOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)JoinMigratedOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddJoinMigratedOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnJoinMigratedOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnJoinMigratedOnlineGameComplete_Parameters : BaseObject {
        public OnJoinMigratedOnlineGameComplete_Parameters() { }
        public OnJoinMigratedOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnJoinMigratedOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnJoinMigratedOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnJoinMigratedOnlineGameComplete;
    public void OnJoinMigratedOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnJoinMigratedOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnJoinMigratedOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnJoinMigratedOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGame
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class JoinMigratedOnlineGame_Parameters : BaseObject {
        public JoinMigratedOnlineGame_Parameters() { }
        public JoinMigratedOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGame.PlayerNum
        // 0x0 (0x1)
        // (Param)
        public byte PlayerNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // NameProperty IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGame.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGame.DesiredGame
        // 0x10 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult DesiredGame {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGame.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrJoinMigratedOnlineGame;
    public bool JoinMigratedOnlineGame(byte PlayerNum, FName SessionName, ref UOnlineGameSearch.FOnlineGameSearchResult DesiredGame) {
        _ptrJoinMigratedOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.JoinMigratedOnlineGame");

        var @params = stackalloc byte[29];
        System.Buffer.MemoryCopy(&PlayerNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);
        System.Buffer.MemoryCopy((void*)DesiredGame.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrJoinMigratedOnlineGame, @params);

        var _DesiredGamePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_DesiredGamePtr, 16, 16);
        DesiredGame = new(_DesiredGamePtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearMigrateOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class ClearMigrateOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearMigrateOnlineGameCompleteDelegate_Parameters() { }
        public ClearMigrateOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearMigrateOnlineGameCompleteDelegate.MigrateOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate MigrateOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearMigrateOnlineGameCompleteDelegate;
    public void ClearMigrateOnlineGameCompleteDelegate(FScriptDelegate MigrateOnlineGameCompleteDelegate) {
        _ptrClearMigrateOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearMigrateOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)MigrateOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearMigrateOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddMigrateOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class AddMigrateOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddMigrateOnlineGameCompleteDelegate_Parameters() { }
        public AddMigrateOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddMigrateOnlineGameCompleteDelegate.MigrateOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate MigrateOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddMigrateOnlineGameCompleteDelegate;
    public void AddMigrateOnlineGameCompleteDelegate(FScriptDelegate MigrateOnlineGameCompleteDelegate) {
        _ptrAddMigrateOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddMigrateOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)MigrateOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddMigrateOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnMigrateOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnMigrateOnlineGameComplete_Parameters : BaseObject {
        public OnMigrateOnlineGameComplete_Parameters() { }
        public OnMigrateOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnMigrateOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnMigrateOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnMigrateOnlineGameComplete;
    public void OnMigrateOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnMigrateOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnMigrateOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnMigrateOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.MigrateOnlineGame
    // 0x3750E0
    // (Public)
    public unsafe class MigrateOnlineGame_Parameters : BaseObject {
        public MigrateOnlineGame_Parameters() { }
        public MigrateOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.MigrateOnlineGame.HostingPlayerNum
        // 0x0 (0x1)
        // (Param)
        public byte HostingPlayerNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // NameProperty IpDrv.OnlineGameInterfaceImpl.MigrateOnlineGame.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.MigrateOnlineGame.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrMigrateOnlineGame;
    public bool MigrateOnlineGame(byte HostingPlayerNum, FName SessionName) {
        _ptrMigrateOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.MigrateOnlineGame");

        var @params = stackalloc byte[13];
        System.Buffer.MemoryCopy(&HostingPlayerNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);

        ProcessEvent(_ptrMigrateOnlineGame, @params);

        return *(bool*)(@params + 12);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearRecalculateSkillRatingCompleteDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class ClearRecalculateSkillRatingCompleteDelegate_Parameters : BaseObject {
        public ClearRecalculateSkillRatingCompleteDelegate_Parameters() { }
        public ClearRecalculateSkillRatingCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearRecalculateSkillRatingCompleteDelegate.RecalculateSkillRatingGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate RecalculateSkillRatingGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearRecalculateSkillRatingCompleteDelegate;
    public void ClearRecalculateSkillRatingCompleteDelegate(FScriptDelegate RecalculateSkillRatingGameCompleteDelegate) {
        _ptrClearRecalculateSkillRatingCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearRecalculateSkillRatingCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)RecalculateSkillRatingGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearRecalculateSkillRatingCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddRecalculateSkillRatingCompleteDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class AddRecalculateSkillRatingCompleteDelegate_Parameters : BaseObject {
        public AddRecalculateSkillRatingCompleteDelegate_Parameters() { }
        public AddRecalculateSkillRatingCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddRecalculateSkillRatingCompleteDelegate.RecalculateSkillRatingCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate RecalculateSkillRatingCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddRecalculateSkillRatingCompleteDelegate;
    public void AddRecalculateSkillRatingCompleteDelegate(FScriptDelegate RecalculateSkillRatingCompleteDelegate) {
        _ptrAddRecalculateSkillRatingCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddRecalculateSkillRatingCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)RecalculateSkillRatingCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddRecalculateSkillRatingCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnRecalculateSkillRatingComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnRecalculateSkillRatingComplete_Parameters : BaseObject {
        public OnRecalculateSkillRatingComplete_Parameters() { }
        public OnRecalculateSkillRatingComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnRecalculateSkillRatingComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnRecalculateSkillRatingComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnRecalculateSkillRatingComplete;
    public void OnRecalculateSkillRatingComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnRecalculateSkillRatingComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnRecalculateSkillRatingComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnRecalculateSkillRatingComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.RecalculateSkillRating
    // 0x3750E0
    // (Final | Public | HasOutParams)
    public unsafe class RecalculateSkillRating_Parameters : BaseObject {
        public RecalculateSkillRating_Parameters() { }
        public RecalculateSkillRating_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.RecalculateSkillRating.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.OnlineGameInterfaceImpl.RecalculateSkillRating.Players
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer + 8, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.RecalculateSkillRating.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRecalculateSkillRating;
    public bool RecalculateSkillRating(FName SessionName, ref StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrRecalculateSkillRating ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.RecalculateSkillRating");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrRecalculateSkillRating, @params);

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 72) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AcceptGameInvite
    // 0x3750E0
    // (Public)
    public unsafe class AcceptGameInvite_Parameters : BaseObject {
        public AcceptGameInvite_Parameters() { }
        public AcceptGameInvite_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.AcceptGameInvite.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // NameProperty IpDrv.OnlineGameInterfaceImpl.AcceptGameInvite.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.AcceptGameInvite.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAcceptGameInvite;
    public bool AcceptGameInvite(byte LocalUserNum, FName SessionName) {
        _ptrAcceptGameInvite ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AcceptGameInvite");

        var @params = stackalloc byte[13];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);

        ProcessEvent(_ptrAcceptGameInvite, @params);

        return *(bool*)(@params + 12);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearGameInviteAcceptedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearGameInviteAcceptedDelegate_Parameters : BaseObject {
        public ClearGameInviteAcceptedDelegate_Parameters() { }
        public ClearGameInviteAcceptedDelegate_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.ClearGameInviteAcceptedDelegate.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearGameInviteAcceptedDelegate.GameInviteAcceptedDelegate
        // 0x8 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate GameInviteAcceptedDelegate {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }
    private static UFunction _ptrClearGameInviteAcceptedDelegate;
    public void ClearGameInviteAcceptedDelegate(byte LocalUserNum, FScriptDelegate GameInviteAcceptedDelegate) {
        _ptrClearGameInviteAcceptedDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearGameInviteAcceptedDelegate");

        var @params = stackalloc byte[25];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)GameInviteAcceptedDelegate.Pointer, @params + 8, 24, 24);

        ProcessEvent(_ptrClearGameInviteAcceptedDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddGameInviteAcceptedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddGameInviteAcceptedDelegate_Parameters : BaseObject {
        public AddGameInviteAcceptedDelegate_Parameters() { }
        public AddGameInviteAcceptedDelegate_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.AddGameInviteAcceptedDelegate.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddGameInviteAcceptedDelegate.GameInviteAcceptedDelegate
        // 0x8 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate GameInviteAcceptedDelegate {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }
    private static UFunction _ptrAddGameInviteAcceptedDelegate;
    public void AddGameInviteAcceptedDelegate(byte LocalUserNum, FScriptDelegate GameInviteAcceptedDelegate) {
        _ptrAddGameInviteAcceptedDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddGameInviteAcceptedDelegate");

        var @params = stackalloc byte[25];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)GameInviteAcceptedDelegate.Pointer, @params + 8, 24, 24);

        ProcessEvent(_ptrAddGameInviteAcceptedDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnGameInviteAccepted
    // 0x3750E0
    // (Public | Delegate | HasOutParams)
    public unsafe class OnGameInviteAccepted_Parameters : BaseObject {
        public OnGameInviteAccepted_Parameters() { }
        public OnGameInviteAccepted_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.OnGameInviteAccepted.InviteResult
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult InviteResult {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineGameInterfaceImpl.OnGameInviteAccepted.ErrorString
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ErrorString {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrOnGameInviteAccepted;
    public void OnGameInviteAccepted(ref UOnlineGameSearch.FOnlineGameSearchResult InviteResult, FString ErrorString) {
        _ptrOnGameInviteAccepted ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnGameInviteAccepted");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)InviteResult.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ErrorString.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrOnGameInviteAccepted, @params);

        var _InviteResultPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InviteResultPtr, 16, 16);
        InviteResult = new(_InviteResultPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineGameInterfaceImpl.GetArbitratedPlayers
    // 0x3750E0
    // (Final | Public)
    public unsafe class GetArbitratedPlayers_Parameters : BaseObject {
        public GetArbitratedPlayers_Parameters() { }
        public GetArbitratedPlayers_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.GetArbitratedPlayers.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.OnlineGameInterfaceImpl.GetArbitratedPlayers.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<UOnlineSubsystem.FOnlineArbitrationRegistrant> ReturnValue {
            get => new(Pointer + 8, 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetArbitratedPlayers;
    public StructTArray<UOnlineSubsystem.FOnlineArbitrationRegistrant> GetArbitratedPlayers(FName SessionName) {
        _ptrGetArbitratedPlayers ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.GetArbitratedPlayers");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);

        ProcessEvent(_ptrGetArbitratedPlayers, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 88) { Allocated = true };
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearArbitrationRegistrationCompleteDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class ClearArbitrationRegistrationCompleteDelegate_Parameters : BaseObject {
        public ClearArbitrationRegistrationCompleteDelegate_Parameters() { }
        public ClearArbitrationRegistrationCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearArbitrationRegistrationCompleteDelegate.ArbitrationRegistrationCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ArbitrationRegistrationCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearArbitrationRegistrationCompleteDelegate;
    public void ClearArbitrationRegistrationCompleteDelegate(FScriptDelegate ArbitrationRegistrationCompleteDelegate) {
        _ptrClearArbitrationRegistrationCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearArbitrationRegistrationCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ArbitrationRegistrationCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearArbitrationRegistrationCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddArbitrationRegistrationCompleteDelegate
    // 0x3750E0
    // (Final | Public)
    public unsafe class AddArbitrationRegistrationCompleteDelegate_Parameters : BaseObject {
        public AddArbitrationRegistrationCompleteDelegate_Parameters() { }
        public AddArbitrationRegistrationCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddArbitrationRegistrationCompleteDelegate.ArbitrationRegistrationCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ArbitrationRegistrationCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddArbitrationRegistrationCompleteDelegate;
    public void AddArbitrationRegistrationCompleteDelegate(FScriptDelegate ArbitrationRegistrationCompleteDelegate) {
        _ptrAddArbitrationRegistrationCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddArbitrationRegistrationCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ArbitrationRegistrationCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddArbitrationRegistrationCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnArbitrationRegistrationComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnArbitrationRegistrationComplete_Parameters : BaseObject {
        public OnArbitrationRegistrationComplete_Parameters() { }
        public OnArbitrationRegistrationComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnArbitrationRegistrationComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnArbitrationRegistrationComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnArbitrationRegistrationComplete;
    public void OnArbitrationRegistrationComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnArbitrationRegistrationComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnArbitrationRegistrationComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnArbitrationRegistrationComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.RegisterForArbitration
    // 0x3750E0
    // (Final | Public)
    public unsafe class RegisterForArbitration_Parameters : BaseObject {
        public RegisterForArbitration_Parameters() { }
        public RegisterForArbitration_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.RegisterForArbitration.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.RegisterForArbitration.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRegisterForArbitration;
    public bool RegisterForArbitration(FName SessionName) {
        _ptrRegisterForArbitration ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.RegisterForArbitration");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);

        ProcessEvent(_ptrRegisterForArbitration, @params);

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearEndOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearEndOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearEndOnlineGameCompleteDelegate_Parameters() { }
        public ClearEndOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearEndOnlineGameCompleteDelegate.EndOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate EndOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearEndOnlineGameCompleteDelegate;
    public void ClearEndOnlineGameCompleteDelegate(FScriptDelegate EndOnlineGameCompleteDelegate) {
        _ptrClearEndOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearEndOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)EndOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearEndOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddEndOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddEndOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddEndOnlineGameCompleteDelegate_Parameters() { }
        public AddEndOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddEndOnlineGameCompleteDelegate.EndOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate EndOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddEndOnlineGameCompleteDelegate;
    public void AddEndOnlineGameCompleteDelegate(FScriptDelegate EndOnlineGameCompleteDelegate) {
        _ptrAddEndOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddEndOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)EndOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddEndOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnEndOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnEndOnlineGameComplete_Parameters : BaseObject {
        public OnEndOnlineGameComplete_Parameters() { }
        public OnEndOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnEndOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnEndOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnEndOnlineGameComplete;
    public void OnEndOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnEndOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnEndOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnEndOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.EndOnlineGame
    // 0xBA8500
    // (Final | Native | Public)
    public unsafe class EndOnlineGame_Parameters : BaseObject {
        public EndOnlineGame_Parameters() { }
        public EndOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.EndOnlineGame.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.EndOnlineGame.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEndOnlineGame;
    public bool EndOnlineGame(FName SessionName) {
        _ptrEndOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.EndOnlineGame");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);

        _ptrEndOnlineGame.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEndOnlineGame, @params);
        _ptrEndOnlineGame.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearStartOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearStartOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearStartOnlineGameCompleteDelegate_Parameters() { }
        public ClearStartOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearStartOnlineGameCompleteDelegate.StartOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate StartOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearStartOnlineGameCompleteDelegate;
    public void ClearStartOnlineGameCompleteDelegate(FScriptDelegate StartOnlineGameCompleteDelegate) {
        _ptrClearStartOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearStartOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)StartOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearStartOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddStartOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddStartOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddStartOnlineGameCompleteDelegate_Parameters() { }
        public AddStartOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddStartOnlineGameCompleteDelegate.StartOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate StartOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddStartOnlineGameCompleteDelegate;
    public void AddStartOnlineGameCompleteDelegate(FScriptDelegate StartOnlineGameCompleteDelegate) {
        _ptrAddStartOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddStartOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)StartOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddStartOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnStartOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnStartOnlineGameComplete_Parameters : BaseObject {
        public OnStartOnlineGameComplete_Parameters() { }
        public OnStartOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnStartOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnStartOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnStartOnlineGameComplete;
    public void OnStartOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnStartOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnStartOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnStartOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.StartOnlineGame
    // 0xBA8230
    // (Final | Native | Public)
    public unsafe class StartOnlineGame_Parameters : BaseObject {
        public StartOnlineGame_Parameters() { }
        public StartOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.StartOnlineGame.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.StartOnlineGame.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrStartOnlineGame;
    public bool StartOnlineGame(FName SessionName) {
        _ptrStartOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.StartOnlineGame");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);

        _ptrStartOnlineGame.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrStartOnlineGame, @params);
        _ptrStartOnlineGame.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearUnregisterPlayerCompleteDelegate
    // 0x3750E0
    // (Public)
    public unsafe class ClearUnregisterPlayerCompleteDelegate_Parameters : BaseObject {
        public ClearUnregisterPlayerCompleteDelegate_Parameters() { }
        public ClearUnregisterPlayerCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearUnregisterPlayerCompleteDelegate.UnregisterPlayerCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate UnregisterPlayerCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearUnregisterPlayerCompleteDelegate;
    public void ClearUnregisterPlayerCompleteDelegate(FScriptDelegate UnregisterPlayerCompleteDelegate) {
        _ptrClearUnregisterPlayerCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearUnregisterPlayerCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)UnregisterPlayerCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearUnregisterPlayerCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddUnregisterPlayerCompleteDelegate
    // 0x3750E0
    // (Public)
    public unsafe class AddUnregisterPlayerCompleteDelegate_Parameters : BaseObject {
        public AddUnregisterPlayerCompleteDelegate_Parameters() { }
        public AddUnregisterPlayerCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddUnregisterPlayerCompleteDelegate.UnregisterPlayerCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate UnregisterPlayerCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddUnregisterPlayerCompleteDelegate;
    public void AddUnregisterPlayerCompleteDelegate(FScriptDelegate UnregisterPlayerCompleteDelegate) {
        _ptrAddUnregisterPlayerCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddUnregisterPlayerCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)UnregisterPlayerCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddUnregisterPlayerCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnUnregisterPlayerComplete
    // 0x3750E0
    // (Public | Delegate)
    public unsafe class OnUnregisterPlayerComplete_Parameters : BaseObject {
        public OnUnregisterPlayerComplete_Parameters() { }
        public OnUnregisterPlayerComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnUnregisterPlayerComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.OnUnregisterPlayerComplete.PlayerID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnUnregisterPlayerComplete.bWasSuccessful
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnUnregisterPlayerComplete;
    public void OnUnregisterPlayerComplete(FName SessionName, U_Types_Core.FUniqueNetId PlayerID, bool bWasSuccessful) {
        _ptrOnUnregisterPlayerComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnUnregisterPlayerComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 80, 4, 4);

        ProcessEvent(_ptrOnUnregisterPlayerComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.UnregisterPlayers
    // 0x3750E0
    // (Final | Public | HasOutParams)
    public unsafe class UnregisterPlayers_Parameters : BaseObject {
        public UnregisterPlayers_Parameters() { }
        public UnregisterPlayers_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.UnregisterPlayers.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.OnlineGameInterfaceImpl.UnregisterPlayers.Players
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer + 8, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.UnregisterPlayers.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUnregisterPlayers;
    public bool UnregisterPlayers(FName SessionName, ref StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrUnregisterPlayers ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.UnregisterPlayers");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrUnregisterPlayers, @params);

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 72) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.UnregisterPlayer
    // 0x3750E0
    // (Public)
    public unsafe class UnregisterPlayer_Parameters : BaseObject {
        public UnregisterPlayer_Parameters() { }
        public UnregisterPlayer_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.UnregisterPlayer.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.UnregisterPlayer.PlayerID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.UnregisterPlayer.ReturnValue
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUnregisterPlayer;
    public bool UnregisterPlayer(FName SessionName, U_Types_Core.FUniqueNetId PlayerID) {
        _ptrUnregisterPlayer ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.UnregisterPlayer");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 8, 72, 72);

        ProcessEvent(_ptrUnregisterPlayer, @params);

        return *(bool*)(@params + 80);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearRegisterPlayerCompleteDelegate
    // 0x3750E0
    // (Public)
    public unsafe class ClearRegisterPlayerCompleteDelegate_Parameters : BaseObject {
        public ClearRegisterPlayerCompleteDelegate_Parameters() { }
        public ClearRegisterPlayerCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearRegisterPlayerCompleteDelegate.RegisterPlayerCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate RegisterPlayerCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearRegisterPlayerCompleteDelegate;
    public void ClearRegisterPlayerCompleteDelegate(FScriptDelegate RegisterPlayerCompleteDelegate) {
        _ptrClearRegisterPlayerCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearRegisterPlayerCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)RegisterPlayerCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearRegisterPlayerCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddRegisterPlayerCompleteDelegate
    // 0x3750E0
    // (Public)
    public unsafe class AddRegisterPlayerCompleteDelegate_Parameters : BaseObject {
        public AddRegisterPlayerCompleteDelegate_Parameters() { }
        public AddRegisterPlayerCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddRegisterPlayerCompleteDelegate.RegisterPlayerCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate RegisterPlayerCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddRegisterPlayerCompleteDelegate;
    public void AddRegisterPlayerCompleteDelegate(FScriptDelegate RegisterPlayerCompleteDelegate) {
        _ptrAddRegisterPlayerCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddRegisterPlayerCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)RegisterPlayerCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddRegisterPlayerCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnRegisterPlayerComplete
    // 0x3750E0
    // (Public | Delegate)
    public unsafe class OnRegisterPlayerComplete_Parameters : BaseObject {
        public OnRegisterPlayerComplete_Parameters() { }
        public OnRegisterPlayerComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnRegisterPlayerComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.OnRegisterPlayerComplete.PlayerID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnRegisterPlayerComplete.bWasSuccessful
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnRegisterPlayerComplete;
    public void OnRegisterPlayerComplete(FName SessionName, U_Types_Core.FUniqueNetId PlayerID, bool bWasSuccessful) {
        _ptrOnRegisterPlayerComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnRegisterPlayerComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 80, 4, 4);

        ProcessEvent(_ptrOnRegisterPlayerComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.RegisterPlayers
    // 0x3750E0
    // (Final | Public | HasOutParams)
    public unsafe class RegisterPlayers_Parameters : BaseObject {
        public RegisterPlayers_Parameters() { }
        public RegisterPlayers_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayers.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayers.Players
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer + 8, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayers.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRegisterPlayers;
    public bool RegisterPlayers(FName SessionName, ref StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrRegisterPlayers ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.RegisterPlayers");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrRegisterPlayers, @params);

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 72) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.RegisterPlayer
    // 0x3750E0
    // (Public)
    public unsafe class RegisterPlayer_Parameters : BaseObject {
        public RegisterPlayer_Parameters() { }
        public RegisterPlayer_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayer.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayer.PlayerID
        // 0x8 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayer.bWasInvited
        // 0x50 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasInvited {
            get => (*(uint*)(Pointer + 80) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 80) |= 0x1;
                else *(uint*)(Pointer + 80) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.RegisterPlayer.ReturnValue
        // 0x54 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 84) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 84) |= 0x1;
                else *(uint*)(Pointer + 84) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRegisterPlayer;
    public bool RegisterPlayer(FName SessionName, U_Types_Core.FUniqueNetId PlayerID, bool bWasInvited) {
        _ptrRegisterPlayer ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.RegisterPlayer");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy(&bWasInvited, @params + 80, 4, 4);

        ProcessEvent(_ptrRegisterPlayer, @params);

        return *(bool*)(@params + 84);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.GetResolvedConnectString
    // 0xBA8020
    // (Native | Public | HasOutParams)
    public unsafe class GetResolvedConnectString_Parameters : BaseObject {
        public GetResolvedConnectString_Parameters() { }
        public GetResolvedConnectString_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.GetResolvedConnectString.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StrProperty IpDrv.OnlineGameInterfaceImpl.GetResolvedConnectString.ConnectInfo
        // 0x8 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString ConnectInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.GetResolvedConnectString.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetResolvedConnectString;
    public bool GetResolvedConnectString(FName SessionName, ref FString ConnectInfo) {
        _ptrGetResolvedConnectString ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.GetResolvedConnectString");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)ConnectInfo.Pointer, @params + 8, 16, 16);

        _ptrGetResolvedConnectString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetResolvedConnectString, @params);
        _ptrGetResolvedConnectString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ConnectInfoPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ConnectInfoPtr, 16, 16);
        ConnectInfo = new(_ConnectInfoPtr) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearJoinOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearJoinOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearJoinOnlineGameCompleteDelegate_Parameters() { }
        public ClearJoinOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearJoinOnlineGameCompleteDelegate.JoinOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate JoinOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearJoinOnlineGameCompleteDelegate;
    public void ClearJoinOnlineGameCompleteDelegate(FScriptDelegate JoinOnlineGameCompleteDelegate) {
        _ptrClearJoinOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearJoinOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)JoinOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearJoinOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddJoinOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddJoinOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddJoinOnlineGameCompleteDelegate_Parameters() { }
        public AddJoinOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddJoinOnlineGameCompleteDelegate.JoinOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate JoinOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddJoinOnlineGameCompleteDelegate;
    public void AddJoinOnlineGameCompleteDelegate(FScriptDelegate JoinOnlineGameCompleteDelegate) {
        _ptrAddJoinOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddJoinOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)JoinOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddJoinOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnJoinOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnJoinOnlineGameComplete_Parameters : BaseObject {
        public OnJoinOnlineGameComplete_Parameters() { }
        public OnJoinOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnJoinOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnJoinOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnJoinOnlineGameComplete;
    public void OnJoinOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnJoinOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnJoinOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnJoinOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.JoinOnlineGame
    // 0xBA7F20
    // (Native | Public | HasOutParams)
    public unsafe class JoinOnlineGame_Parameters : BaseObject {
        public JoinOnlineGame_Parameters() { }
        public JoinOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.JoinOnlineGame.PlayerNum
        // 0x0 (0x1)
        // (Param)
        public byte PlayerNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // NameProperty IpDrv.OnlineGameInterfaceImpl.JoinOnlineGame.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineGameInterfaceImpl.JoinOnlineGame.DesiredGame
        // 0x10 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult DesiredGame {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.JoinOnlineGame.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrJoinOnlineGame;
    public bool JoinOnlineGame(byte PlayerNum, FName SessionName, ref UOnlineGameSearch.FOnlineGameSearchResult DesiredGame) {
        _ptrJoinOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.JoinOnlineGame");

        var @params = stackalloc byte[29];
        System.Buffer.MemoryCopy(&PlayerNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);
        System.Buffer.MemoryCopy((void*)DesiredGame.Pointer, @params + 16, 16, 16);

        _ptrJoinOnlineGame.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrJoinOnlineGame, @params);
        _ptrJoinOnlineGame.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DesiredGamePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_DesiredGamePtr, 16, 16);
        DesiredGame = new(_DesiredGamePtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.FreeSearchResults
    // 0xBA7E90
    // (Native | Public)
    public unsafe class FreeSearchResults_Parameters : BaseObject {
        public FreeSearchResults_Parameters() { }
        public FreeSearchResults_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.FreeSearchResults.Search
        // 0x0 (0x8)
        // (Param)
        public UOnlineGameSearch Search {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.FreeSearchResults.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFreeSearchResults;
    public bool FreeSearchResults(UOnlineGameSearch Search) {
        _ptrFreeSearchResults ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.FreeSearchResults");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)Search.Pointer, @params, 8, 8);

        _ptrFreeSearchResults.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFreeSearchResults, @params);
        _ptrFreeSearchResults.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearCancelFindOnlineGamesCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearCancelFindOnlineGamesCompleteDelegate_Parameters : BaseObject {
        public ClearCancelFindOnlineGamesCompleteDelegate_Parameters() { }
        public ClearCancelFindOnlineGamesCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearCancelFindOnlineGamesCompleteDelegate.CancelFindOnlineGamesCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate CancelFindOnlineGamesCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearCancelFindOnlineGamesCompleteDelegate;
    public void ClearCancelFindOnlineGamesCompleteDelegate(FScriptDelegate CancelFindOnlineGamesCompleteDelegate) {
        _ptrClearCancelFindOnlineGamesCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearCancelFindOnlineGamesCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CancelFindOnlineGamesCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearCancelFindOnlineGamesCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddCancelFindOnlineGamesCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddCancelFindOnlineGamesCompleteDelegate_Parameters : BaseObject {
        public AddCancelFindOnlineGamesCompleteDelegate_Parameters() { }
        public AddCancelFindOnlineGamesCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddCancelFindOnlineGamesCompleteDelegate.CancelFindOnlineGamesCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate CancelFindOnlineGamesCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddCancelFindOnlineGamesCompleteDelegate;
    public void AddCancelFindOnlineGamesCompleteDelegate(FScriptDelegate CancelFindOnlineGamesCompleteDelegate) {
        _ptrAddCancelFindOnlineGamesCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddCancelFindOnlineGamesCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CancelFindOnlineGamesCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddCancelFindOnlineGamesCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnCancelFindOnlineGamesComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnCancelFindOnlineGamesComplete_Parameters : BaseObject {
        public OnCancelFindOnlineGamesComplete_Parameters() { }
        public OnCancelFindOnlineGamesComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnCancelFindOnlineGamesComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnCancelFindOnlineGamesComplete;
    public void OnCancelFindOnlineGamesComplete(bool bWasSuccessful) {
        _ptrOnCancelFindOnlineGamesComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnCancelFindOnlineGamesComplete");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);

        ProcessEvent(_ptrOnCancelFindOnlineGamesComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.CancelFindOnlineGames
    // 0xBA7D90
    // (Final | Native | Public)
    public unsafe class CancelFindOnlineGames_Parameters : BaseObject {
        public CancelFindOnlineGames_Parameters() { }
        public CancelFindOnlineGames_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.CancelFindOnlineGames.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCancelFindOnlineGames;
    public bool CancelFindOnlineGames() {
        _ptrCancelFindOnlineGames ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.CancelFindOnlineGames");

        var @params = stackalloc byte[4];

        _ptrCancelFindOnlineGames.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCancelFindOnlineGames, @params);
        _ptrCancelFindOnlineGames.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearFindOnlineGamesCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearFindOnlineGamesCompleteDelegate_Parameters : BaseObject {
        public ClearFindOnlineGamesCompleteDelegate_Parameters() { }
        public ClearFindOnlineGamesCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearFindOnlineGamesCompleteDelegate.FindOnlineGamesCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate FindOnlineGamesCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearFindOnlineGamesCompleteDelegate;
    public void ClearFindOnlineGamesCompleteDelegate(FScriptDelegate FindOnlineGamesCompleteDelegate) {
        _ptrClearFindOnlineGamesCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearFindOnlineGamesCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)FindOnlineGamesCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearFindOnlineGamesCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddFindOnlineGamesCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddFindOnlineGamesCompleteDelegate_Parameters : BaseObject {
        public AddFindOnlineGamesCompleteDelegate_Parameters() { }
        public AddFindOnlineGamesCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddFindOnlineGamesCompleteDelegate.FindOnlineGamesCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate FindOnlineGamesCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddFindOnlineGamesCompleteDelegate;
    public void AddFindOnlineGamesCompleteDelegate(FScriptDelegate FindOnlineGamesCompleteDelegate) {
        _ptrAddFindOnlineGamesCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddFindOnlineGamesCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)FindOnlineGamesCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddFindOnlineGamesCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.FindOnlineGames
    // 0xBA7CE0
    // (Native | Public)
    public unsafe class FindOnlineGames_Parameters : BaseObject {
        public FindOnlineGames_Parameters() { }
        public FindOnlineGames_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.FindOnlineGames.SearchingPlayerNum
        // 0x0 (0x1)
        // (Param)
        public byte SearchingPlayerNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.FindOnlineGames.SearchSettings
        // 0x8 (0x8)
        // (Param)
        public UOnlineGameSearch SearchSettings {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.FindOnlineGames.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFindOnlineGames;
    public bool FindOnlineGames(byte SearchingPlayerNum, UOnlineGameSearch SearchSettings) {
        _ptrFindOnlineGames ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.FindOnlineGames");

        var @params = stackalloc byte[13];
        System.Buffer.MemoryCopy(&SearchingPlayerNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SearchSettings.Pointer, @params + 8, 8, 8);

        _ptrFindOnlineGames.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindOnlineGames, @params);
        _ptrFindOnlineGames.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearDestroyOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearDestroyOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearDestroyOnlineGameCompleteDelegate_Parameters() { }
        public ClearDestroyOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearDestroyOnlineGameCompleteDelegate.DestroyOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate DestroyOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearDestroyOnlineGameCompleteDelegate;
    public void ClearDestroyOnlineGameCompleteDelegate(FScriptDelegate DestroyOnlineGameCompleteDelegate) {
        _ptrClearDestroyOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearDestroyOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)DestroyOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearDestroyOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddDestroyOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddDestroyOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddDestroyOnlineGameCompleteDelegate_Parameters() { }
        public AddDestroyOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddDestroyOnlineGameCompleteDelegate.DestroyOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate DestroyOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddDestroyOnlineGameCompleteDelegate;
    public void AddDestroyOnlineGameCompleteDelegate(FScriptDelegate DestroyOnlineGameCompleteDelegate) {
        _ptrAddDestroyOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddDestroyOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)DestroyOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddDestroyOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnDestroyOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDestroyOnlineGameComplete_Parameters : BaseObject {
        public OnDestroyOnlineGameComplete_Parameters() { }
        public OnDestroyOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnDestroyOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnDestroyOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDestroyOnlineGameComplete;
    public void OnDestroyOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnDestroyOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnDestroyOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnDestroyOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.DestroyOnlineGame
    // 0xBA7C50
    // (Native | Public)
    public unsafe class DestroyOnlineGame_Parameters : BaseObject {
        public DestroyOnlineGame_Parameters() { }
        public DestroyOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.DestroyOnlineGame.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.DestroyOnlineGame.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDestroyOnlineGame;
    public bool DestroyOnlineGame(FName SessionName) {
        _ptrDestroyOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.DestroyOnlineGame");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);

        _ptrDestroyOnlineGame.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyOnlineGame, @params);
        _ptrDestroyOnlineGame.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearUpdateOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearUpdateOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearUpdateOnlineGameCompleteDelegate_Parameters() { }
        public ClearUpdateOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearUpdateOnlineGameCompleteDelegate.UpdateOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate UpdateOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearUpdateOnlineGameCompleteDelegate;
    public void ClearUpdateOnlineGameCompleteDelegate(FScriptDelegate UpdateOnlineGameCompleteDelegate) {
        _ptrClearUpdateOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearUpdateOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)UpdateOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearUpdateOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddUpdateOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddUpdateOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddUpdateOnlineGameCompleteDelegate_Parameters() { }
        public AddUpdateOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddUpdateOnlineGameCompleteDelegate.UpdateOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate UpdateOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddUpdateOnlineGameCompleteDelegate;
    public void AddUpdateOnlineGameCompleteDelegate(FScriptDelegate UpdateOnlineGameCompleteDelegate) {
        _ptrAddUpdateOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddUpdateOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)UpdateOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddUpdateOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnUpdateOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnUpdateOnlineGameComplete_Parameters : BaseObject {
        public OnUpdateOnlineGameComplete_Parameters() { }
        public OnUpdateOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnUpdateOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnUpdateOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnUpdateOnlineGameComplete;
    public void OnUpdateOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnUpdateOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnUpdateOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnUpdateOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGame
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class UpdateOnlineGame_Parameters : BaseObject {
        public UpdateOnlineGame_Parameters() { }
        public UpdateOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGame.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGame.UpdatedGameSettings
        // 0x8 (0x8)
        // (Param)
        public UOnlineGameSettings UpdatedGameSettings {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGame.bShouldRefreshOnlineData
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bShouldRefreshOnlineData {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGame.ReturnValue
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUpdateOnlineGame;
    public bool UpdateOnlineGame(FName SessionName, UOnlineGameSettings UpdatedGameSettings, bool bShouldRefreshOnlineData = false) {
        _ptrUpdateOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.UpdateOnlineGame");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)UpdatedGameSettings.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bShouldRefreshOnlineData, @params + 16, 4, 4);

        ProcessEvent(_ptrUpdateOnlineGame, @params);

        return *(bool*)(@params + 20);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.ClearCreateOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearCreateOnlineGameCompleteDelegate_Parameters : BaseObject {
        public ClearCreateOnlineGameCompleteDelegate_Parameters() { }
        public ClearCreateOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.ClearCreateOnlineGameCompleteDelegate.CreateOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate CreateOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearCreateOnlineGameCompleteDelegate;
    public void ClearCreateOnlineGameCompleteDelegate(FScriptDelegate CreateOnlineGameCompleteDelegate) {
        _ptrClearCreateOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.ClearCreateOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CreateOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearCreateOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.AddCreateOnlineGameCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddCreateOnlineGameCompleteDelegate_Parameters : BaseObject {
        public AddCreateOnlineGameCompleteDelegate_Parameters() { }
        public AddCreateOnlineGameCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineGameInterfaceImpl.AddCreateOnlineGameCompleteDelegate.CreateOnlineGameCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate CreateOnlineGameCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddCreateOnlineGameCompleteDelegate;
    public void AddCreateOnlineGameCompleteDelegate(FScriptDelegate CreateOnlineGameCompleteDelegate) {
        _ptrAddCreateOnlineGameCompleteDelegate ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.AddCreateOnlineGameCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CreateOnlineGameCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddCreateOnlineGameCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnCreateOnlineGameComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnCreateOnlineGameComplete_Parameters : BaseObject {
        public OnCreateOnlineGameComplete_Parameters() { }
        public OnCreateOnlineGameComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.OnCreateOnlineGameComplete.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnCreateOnlineGameComplete.bWasSuccessful
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnCreateOnlineGameComplete;
    public void OnCreateOnlineGameComplete(FName SessionName, bool bWasSuccessful) {
        _ptrOnCreateOnlineGameComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnCreateOnlineGameComplete");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 8, 4, 4);

        ProcessEvent(_ptrOnCreateOnlineGameComplete, @params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.CreateOnlineGame
    // 0xBA7B60
    // (Native | Public)
    public unsafe class CreateOnlineGame_Parameters : BaseObject {
        public CreateOnlineGame_Parameters() { }
        public CreateOnlineGame_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineGameInterfaceImpl.CreateOnlineGame.HostingPlayerNum
        // 0x0 (0x1)
        // (Param)
        public byte HostingPlayerNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // NameProperty IpDrv.OnlineGameInterfaceImpl.CreateOnlineGame.SessionName
        // 0x4 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // MISSED OFFSET: 0x4

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.CreateOnlineGame.NewGameSettings
        // 0x10 (0x8)
        // (Param)
        public UOnlineGameSettings NewGameSettings {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.CreateOnlineGame.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCreateOnlineGame;
    public bool CreateOnlineGame(byte HostingPlayerNum, FName SessionName, UOnlineGameSettings NewGameSettings) {
        _ptrCreateOnlineGame ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.CreateOnlineGame");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy(&HostingPlayerNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params + 4, 8, 8);
        System.Buffer.MemoryCopy((void*)NewGameSettings.Pointer, @params + 16, 8, 8);

        _ptrCreateOnlineGame.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCreateOnlineGame, @params);
        _ptrCreateOnlineGame.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.GetGameSearch
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetGameSearch_Parameters : BaseObject {
        public GetGameSearch_Parameters() { }
        public GetGameSearch_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.GetGameSearch.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UOnlineGameSearch ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrGetGameSearch;
    public UOnlineGameSearch GetGameSearch() {
        _ptrGetGameSearch ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.GetGameSearch");

        var @params = stackalloc byte[8];

        ProcessEvent(_ptrGetGameSearch, @params);

        return new(*(nint*)@params);
    }

    // Function IpDrv.OnlineGameInterfaceImpl.GetGameSettings
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetGameSettings_Parameters : BaseObject {
        public GetGameSettings_Parameters() { }
        public GetGameSettings_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlineGameInterfaceImpl.GetGameSettings.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ObjectProperty IpDrv.OnlineGameInterfaceImpl.GetGameSettings.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UOnlineGameSettings ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetGameSettings;
    public UOnlineGameSettings GetGameSettings(FName SessionName) {
        _ptrGetGameSettings ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.GetGameSettings");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);

        ProcessEvent(_ptrGetGameSettings, @params);

        return new(*(nint*)(@params + 8));
    }

    // Function IpDrv.OnlineGameInterfaceImpl.OnFindOnlineGamesComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnFindOnlineGamesComplete_Parameters : BaseObject {
        public OnFindOnlineGamesComplete_Parameters() { }
        public OnFindOnlineGamesComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineGameInterfaceImpl.OnFindOnlineGamesComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnFindOnlineGamesComplete;
    public void OnFindOnlineGamesComplete(bool bWasSuccessful) {
        _ptrOnFindOnlineGamesComplete ??= FindFunction("Function IpDrv.OnlineGameInterfaceImpl.OnFindOnlineGamesComplete");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);

        ProcessEvent(_ptrOnFindOnlineGamesComplete, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineGameInterfaceImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineImageDownloaderWeb
// 0xB0 (0x60 - 0x110)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlineImageDownloaderWeb : UObject {
    public UOnlineImageDownloaderWeb() { }
    public UOnlineImageDownloaderWeb(nint pointer) : base(pointer) { }


    // IntProperty IpDrv.OnlineImageDownloaderWeb.MaxSimultaneousDownloads
    // 0x60 (0x4)
    // (Config)
    public int MaxSimultaneousDownloads {
        get => *(int*)(Pointer + 96);
        set => *(int*)(Pointer + 96) = value;
    }

    // MISSED OFFSET: 0x4

    // StructProperty IpDrv.OnlineImageDownloaderWeb.Downloads
    // 0x68 (0x50)
    // (Native)
    public FMap_Mirror Downloads {
        get => new(Pointer + 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 80, 80);
    }

    // ArrayProperty IpDrv.OnlineImageDownloaderWeb.URLQueue
    // 0xB8 (0x10)
    // (Native)
    public StructTArray<FString> URLQueue {
        get => new(Pointer + 184, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // ObjectProperty IpDrv.OnlineImageDownloaderWeb.Decoder
    // 0xC8 (0x8)
    public UImageDecoder Decoder {
        get {
            var pointer = *(nint*)(Pointer + 200);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 200) = value.Pointer;
    }

    // IntProperty IpDrv.OnlineImageDownloaderWeb.PendingDownloadCount
    // 0xD0 (0x4)
    // (Native | PrivateWrite)
    public int PendingDownloadCount {
        get => *(int*)(Pointer + 208);
        set => *(int*)(Pointer + 208) = value;
    }

    // IntProperty IpDrv.OnlineImageDownloaderWeb.ActiveDownloadCount
    // 0xD4 (0x4)
    // (Native | PrivateWrite)
    public int ActiveDownloadCount {
        get => *(int*)(Pointer + 212);
        set => *(int*)(Pointer + 212) = value;
    }

    // IntProperty IpDrv.OnlineImageDownloaderWeb.SucceededDownloadCount
    // 0xD8 (0x4)
    // (Native | PrivateWrite)
    public int SucceededDownloadCount {
        get => *(int*)(Pointer + 216);
        set => *(int*)(Pointer + 216) = value;
    }

    // IntProperty IpDrv.OnlineImageDownloaderWeb.FailedDownloadCount
    // 0xDC (0x4)
    // (Native | PrivateWrite)
    public int FailedDownloadCount {
        get => *(int*)(Pointer + 220);
        set => *(int*)(Pointer + 220) = value;
    }

    // DelegateProperty IpDrv.OnlineImageDownloaderWeb.__OnOnlineImageFinished__Delegate
    // 0xE0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnOnlineImageFinished__Delegate {
        get => new(Pointer + 224);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 224), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineImageDownloaderWeb.__EventImageDecoded__Delegate
    // 0xF8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventImageDecoded__Delegate {
        get => new(Pointer + 248);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 24, 24);
    }


    // Function IpDrv.OnlineImageDownloaderWeb.GetImageType
    // 0xBA7AA0
    // (Final | Native | Static | Public)
    public unsafe class GetImageType_Parameters : BaseObject {
        public GetImageType_Parameters() { }
        public GetImageType_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.GetImageType.ContentType
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ContentType {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineImageDownloaderWeb.GetImageType.ReturnValue
        // 0x10 (0x1)
        // (Param | OutParam | ReturnParam)
        public U_Types_Core.EImageType ReturnValue {
            get => *(U_Types_Core.EImageType*)(Pointer + 16);
            set => *(U_Types_Core.EImageType*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetImageType;
    public static U_Types_Core.EImageType GetImageType(FString ContentType) {
        _ptrGetImageType ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.GetImageType");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy((void*)ContentType.Pointer, @params, 16, 16);

        _ptrGetImageType.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetImageType, @params);
        _ptrGetImageType.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(U_Types_Core.EImageType*)(@params + 16);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.QueueURLForDownload
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class QueueURLForDownload_Parameters : BaseObject {
        public QueueURLForDownload_Parameters() { }
        public QueueURLForDownload_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownload.NewURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString NewURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownload.InternalCallbackOnComplete
        // 0x10 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate InternalCallbackOnComplete {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownload.ExternalCallback
        // 0x28 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ExternalCallback {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 24, 24);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownload.bSupportSRGB
        // 0x40 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bSupportSRGB {
            get => (*(uint*)(Pointer + 64) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 64) |= 0x1;
                else *(uint*)(Pointer + 64) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrQueueURLForDownload;
    public void QueueURLForDownload(FString NewURL, FScriptDelegate InternalCallbackOnComplete, FScriptDelegate ExternalCallback, bool bSupportSRGB) {
        _ptrQueueURLForDownload ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.QueueURLForDownload");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)NewURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)InternalCallbackOnComplete.Pointer, @params + 16, 24, 24);
        System.Buffer.MemoryCopy((void*)ExternalCallback.Pointer, @params + 40, 24, 24);
        System.Buffer.MemoryCopy(&bSupportSRGB, @params + 64, 4, 4);

        ProcessEvent(_ptrQueueURLForDownload, @params);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.DebugDraw
    // 0x3750E0
    // (Final | Defined | Public | HasDefaults)
    public unsafe class DebugDraw_Parameters : BaseObject {
        public DebugDraw_Parameters() { }
        public DebugDraw_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.DebugDraw.Canvas
        // 0x0 (0x8)
        // (Param)
        public UCanvas Canvas {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrDebugDraw;
    public void DebugDraw(UCanvas Canvas) {
        _ptrDebugDraw ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.DebugDraw");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Canvas.Pointer, @params, 8, 8);

        ProcessEvent(_ptrDebugDraw, @params);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.OnDownloadComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnDownloadComplete_Parameters : BaseObject {
        public OnDownloadComplete_Parameters() { }
        public OnDownloadComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.OnDownloadComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.OnDownloadComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.OnDownloadComplete.bDidSucceed
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bDidSucceed {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDownloadComplete;
    public void OnDownloadComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface Response, bool bDidSucceed) {
        _ptrOnDownloadComplete ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.OnDownloadComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bDidSucceed, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDownloadComplete, @params);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.DownloadNextImage
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class DownloadNextImage_Parameters : BaseObject {
        public DownloadNextImage_Parameters() { }
        public DownloadNextImage_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDownloadNextImage;
    public void DownloadNextImage() {
        _ptrDownloadNextImage ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.DownloadNextImage");

        ProcessEvent(_ptrDownloadNextImage, null);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.RequestOnlineImages
    // 0x3750E0
    // (Defined | HasOptionalParams | Public | HasOutParams)
    public unsafe class RequestOnlineImages_Parameters : BaseObject {
        public RequestOnlineImages_Parameters() { }
        public RequestOnlineImages_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.OnlineImageDownloaderWeb.RequestOnlineImages.URLs
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> URLs {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.RequestOnlineImages.FinishedCallback
        // 0x10 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate FinishedCallback {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.RequestOnlineImages.bSupportSRGB
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bSupportSRGB {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestOnlineImages;
    public void RequestOnlineImages(ref StructTArray<FString> URLs, FScriptDelegate FinishedCallback, bool bSupportSRGB = false) {
        _ptrRequestOnlineImages ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.RequestOnlineImages");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)URLs.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FinishedCallback.Pointer, @params + 16, 24, 24);
        System.Buffer.MemoryCopy(&bSupportSRGB, @params + 40, 4, 4);

        ProcessEvent(_ptrRequestOnlineImages, @params);

        var _URLsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_URLsPtr, 16, 16);
        URLs = new(_URLsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.GetOnlineImageTexture
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetOnlineImageTexture_Parameters : BaseObject {
        public GetOnlineImageTexture_Parameters() { }
        public GetOnlineImageTexture_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.GetOnlineImageTexture.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.GetOnlineImageTexture.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UTexture ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrGetOnlineImageTexture;
    public UTexture GetOnlineImageTexture(FString URL) {
        _ptrGetOnlineImageTexture ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.GetOnlineImageTexture");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetOnlineImageTexture, @params);

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.OnlineImageDownloaderWeb.ClearQueue
    // 0xBA7A60
    // (Final | Native | Private)
    public unsafe class ClearQueue_Parameters : BaseObject {
        public ClearQueue_Parameters() { }
        public ClearQueue_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearQueue;
    public void ClearQueue() {
        _ptrClearQueue ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.ClearQueue");

        _ptrClearQueue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearQueue, null);
        _ptrClearQueue.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.Dequeue
    // 0xBA79B0
    // (Final | Native | Private)
    public unsafe class Dequeue_Parameters : BaseObject {
        public Dequeue_Parameters() { }
        public Dequeue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.Dequeue.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDequeue;
    public FString Dequeue() {
        _ptrDequeue ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.Dequeue");

        var @params = stackalloc byte[16];

        _ptrDequeue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDequeue, @params);
        _ptrDequeue.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.Enqueue
    // 0xBA7860
    // (Final | Native | Private)
    public unsafe class Enqueue_Parameters : BaseObject {
        public Enqueue_Parameters() { }
        public Enqueue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.Enqueue.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrEnqueue;
    public void Enqueue(FString URL) {
        _ptrEnqueue ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.Enqueue");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrEnqueue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEnqueue, @params);
        _ptrEnqueue.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.ClearActiveDownloads
    // 0xBA7740
    // (Final | Native | Private)
    public unsafe class ClearActiveDownloads_Parameters : BaseObject {
        public ClearActiveDownloads_Parameters() { }
        public ClearActiveDownloads_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearActiveDownloads;
    public void ClearActiveDownloads() {
        _ptrClearActiveDownloads ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.ClearActiveDownloads");

        _ptrClearActiveDownloads.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearActiveDownloads, null);
        _ptrClearActiveDownloads.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.ClearCompletedDownloads
    // 0xBA7620
    // (Final | Native | Private)
    public unsafe class ClearCompletedDownloads_Parameters : BaseObject {
        public ClearCompletedDownloads_Parameters() { }
        public ClearCompletedDownloads_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearCompletedDownloads;
    public void ClearCompletedDownloads() {
        _ptrClearCompletedDownloads ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.ClearCompletedDownloads");

        _ptrClearCompletedDownloads.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearCompletedDownloads, null);
        _ptrClearCompletedDownloads.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded_Native
    // 0xBA7500
    // (Final | Native | Private | HasOutParams)
    public unsafe class HandleImageDecoded_Native_Parameters : BaseObject {
        public HandleImageDecoded_Native_Parameters() { }
        public HandleImageDecoded_Native_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded_Native.RequestedURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequestedURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded_Native.DecodedImage
        // 0x10 (0x18)
        // (Const | Param | OutParam | NeedCtorLink)
        public UTexture2DDynamic.FImageLayout DecodedImage {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }
    }
    private static UFunction _ptrHandleImageDecoded_Native;
    public void HandleImageDecoded_Native(FString RequestedURL, ref UTexture2DDynamic.FImageLayout DecodedImage) {
        _ptrHandleImageDecoded_Native ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded_Native");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)RequestedURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DecodedImage.Pointer, @params + 16, 24, 24);

        _ptrHandleImageDecoded_Native.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrHandleImageDecoded_Native, @params);
        _ptrHandleImageDecoded_Native.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DecodedImagePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params + 16, (void*)_DecodedImagePtr, 24, 24);
        DecodedImage = new(_DecodedImagePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded
    // 0x3750E0
    // (Final | Defined | Private | HasOutParams)
    public unsafe class HandleImageDecoded_Parameters : BaseObject {
        public HandleImageDecoded_Parameters() { }
        public HandleImageDecoded_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded.RequestedURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequestedURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded.DecodedImage
        // 0x10 (0x18)
        // (Const | Param | OutParam | NeedCtorLink)
        public UTexture2DDynamic.FImageLayout DecodedImage {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }
    }
    private static UFunction _ptrHandleImageDecoded;
    public void HandleImageDecoded(FString RequestedURL, ref UTexture2DDynamic.FImageLayout DecodedImage) {
        _ptrHandleImageDecoded ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.HandleImageDecoded");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)RequestedURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DecodedImage.Pointer, @params + 16, 24, 24);

        ProcessEvent(_ptrHandleImageDecoded, @params);

        var _DecodedImagePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params + 16, (void*)_DecodedImagePtr, 24, 24);
        DecodedImage = new(_DecodedImagePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.RequeueFailedURL
    // 0xBA72E0
    // (Final | Native | Private)
    public unsafe class RequeueFailedURL_Parameters : BaseObject {
        public RequeueFailedURL_Parameters() { }
        public RequeueFailedURL_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.RequeueFailedURL.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrRequeueFailedURL;
    public void RequeueFailedURL(FString URL) {
        _ptrRequeueFailedURL ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.RequeueFailedURL");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrRequeueFailedURL.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequeueFailedURL, @params);
        _ptrRequeueFailedURL.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.DownloadNextQueuedURL
    // 0xBA72A0
    // (Final | Native | Private)
    public unsafe class DownloadNextQueuedURL_Parameters : BaseObject {
        public DownloadNextQueuedURL_Parameters() { }
        public DownloadNextQueuedURL_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDownloadNextQueuedURL;
    public void DownloadNextQueuedURL() {
        _ptrDownloadNextQueuedURL ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.DownloadNextQueuedURL");

        _ptrDownloadNextQueuedURL.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDownloadNextQueuedURL, null);
        _ptrDownloadNextQueuedURL.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.UpdateActiveDownloadFromResponse
    // 0xBA7170
    // (Final | Native | Private)
    public unsafe class UpdateActiveDownloadFromResponse_Parameters : BaseObject {
        public UpdateActiveDownloadFromResponse_Parameters() { }
        public UpdateActiveDownloadFromResponse_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.UpdateActiveDownloadFromResponse.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.UpdateActiveDownloadFromResponse.Response
        // 0x10 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.UpdateActiveDownloadFromResponse.OnDecodedCallback
        // 0x18 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate OnDecodedCallback {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 24, 24);
        }
    }
    private static UFunction _ptrUpdateActiveDownloadFromResponse;
    public void UpdateActiveDownloadFromResponse(FString URL, UHttpResponseInterface Response, FScriptDelegate OnDecodedCallback) {
        _ptrUpdateActiveDownloadFromResponse ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.UpdateActiveDownloadFromResponse");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy((void*)OnDecodedCallback.Pointer, @params + 24, 24, 24);

        _ptrUpdateActiveDownloadFromResponse.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUpdateActiveDownloadFromResponse, @params);
        _ptrUpdateActiveDownloadFromResponse.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.MarkActiveDownloadFailed
    // 0xBA7000
    // (Final | Native | Private)
    public unsafe class MarkActiveDownloadFailed_Parameters : BaseObject {
        public MarkActiveDownloadFailed_Parameters() { }
        public MarkActiveDownloadFailed_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.MarkActiveDownloadFailed.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrMarkActiveDownloadFailed;
    public void MarkActiveDownloadFailed(FString URL) {
        _ptrMarkActiveDownloadFailed ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.MarkActiveDownloadFailed");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrMarkActiveDownloadFailed.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrMarkActiveDownloadFailed, @params);
        _ptrMarkActiveDownloadFailed.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.QueueURLForDownloadInternal
    // 0xBA6EA0
    // (Final | Native | Private)
    public unsafe class QueueURLForDownloadInternal_Parameters : BaseObject {
        public QueueURLForDownloadInternal_Parameters() { }
        public QueueURLForDownloadInternal_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownloadInternal.NewURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString NewURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownloadInternal.Request
        // 0x10 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownloadInternal.TextureHolder
        // 0x18 (0x8)
        // (Param)
        public UTexture2DDynamic TextureHolder {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.QueueURLForDownloadInternal.OnDecodedCallback
        // 0x20 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate OnDecodedCallback {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 24, 24);
        }
    }
    private static UFunction _ptrQueueURLForDownloadInternal;
    public void QueueURLForDownloadInternal(FString NewURL, UHttpRequestInterface Request, UTexture2DDynamic TextureHolder, FScriptDelegate OnDecodedCallback) {
        _ptrQueueURLForDownloadInternal ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.QueueURLForDownloadInternal");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)NewURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy((void*)TextureHolder.Pointer, @params + 24, 8, 8);
        System.Buffer.MemoryCopy((void*)OnDecodedCallback.Pointer, @params + 32, 24, 24);

        _ptrQueueURLForDownloadInternal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrQueueURLForDownloadInternal, @params);
        _ptrQueueURLForDownloadInternal.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.AddCallbackToDownload
    // 0xBA6D90
    // (Final | Native | Private)
    public unsafe class AddCallbackToDownload_Parameters : BaseObject {
        public AddCallbackToDownload_Parameters() { }
        public AddCallbackToDownload_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.AddCallbackToDownload.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.AddCallbackToDownload.NewCallback
        // 0x10 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate NewCallback {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }
    }
    private static UFunction _ptrAddCallbackToDownload;
    public void AddCallbackToDownload(FString URL, FScriptDelegate NewCallback) {
        _ptrAddCallbackToDownload ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.AddCallbackToDownload");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)NewCallback.Pointer, @params + 16, 24, 24);

        _ptrAddCallbackToDownload.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddCallbackToDownload, @params);
        _ptrAddCallbackToDownload.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.GetDownload
    // 0xBA6B30
    // (Final | Native | Public)
    public unsafe class GetDownload_Parameters : BaseObject {
        public GetDownload_Parameters() { }
        public GetDownload_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.GetDownload.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineImageDownloaderWeb.GetDownload.ReturnValue
        // 0x10 (0x40)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FOnlineImageDownload ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 64, 64);
        }
    }
    private static UFunction _ptrGetDownload;
    public FOnlineImageDownload GetDownload(FString URL) {
        _ptrGetDownload ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.GetDownload");

        var @params = stackalloc byte[80];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrGetDownload.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetDownload, @params);
        _ptrGetDownload.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(64);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 64, 64);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.IsURLQueued
    // 0xBA69B0
    // (Final | Native | Private)
    public unsafe class IsURLQueued_Parameters : BaseObject {
        public IsURLQueued_Parameters() { }
        public IsURLQueued_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.IsURLQueued.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.IsURLQueued.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsURLQueued;
    public bool IsURLQueued(FString URL) {
        _ptrIsURLQueued ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.IsURLQueued");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrIsURLQueued.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsURLQueued, @params);
        _ptrIsURLQueued.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.IsURLActive
    // 0xBA6830
    // (Final | Native | Private)
    public unsafe class IsURLActive_Parameters : BaseObject {
        public IsURLActive_Parameters() { }
        public IsURLActive_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.IsURLActive.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.IsURLActive.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsURLActive;
    public bool IsURLActive(FString URL) {
        _ptrIsURLActive ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.IsURLActive");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrIsURLActive.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsURLActive, @params);
        _ptrIsURLActive.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.DidURLFail
    // 0xBA66B0
    // (Final | Native | Private)
    public unsafe class DidURLFail_Parameters : BaseObject {
        public DidURLFail_Parameters() { }
        public DidURLFail_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.DidURLFail.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.DidURLFail.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDidURLFail;
    public bool DidURLFail(FString URL) {
        _ptrDidURLFail ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.DidURLFail");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrDidURLFail.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDidURLFail, @params);
        _ptrDidURLFail.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.DidURLSucceed
    // 0xBA6530
    // (Final | Native | Private)
    public unsafe class DidURLSucceed_Parameters : BaseObject {
        public DidURLSucceed_Parameters() { }
        public DidURLSucceed_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.DidURLSucceed.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.DidURLSucceed.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDidURLSucceed;
    public bool DidURLSucceed(FString URL) {
        _ptrDidURLSucceed ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.DidURLSucceed");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrDidURLSucceed.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDidURLSucceed, @params);
        _ptrDidURLSucceed.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.IsURLTracked
    // 0xBA63D0
    // (Final | Native | Private)
    public unsafe class IsURLTracked_Parameters : BaseObject {
        public IsURLTracked_Parameters() { }
        public IsURLTracked_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.IsURLTracked.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineImageDownloaderWeb.IsURLTracked.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsURLTracked;
    public bool IsURLTracked(FString URL) {
        _ptrIsURLTracked ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.IsURLTracked");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        _ptrIsURLTracked.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsURLTracked, @params);
        _ptrIsURLTracked.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.AllValues
    // 0xBA60A0
    // (Final | Iterator | Native | HasOptionalParams | Private | HasOutParams)
    public unsafe class AllValues_Parameters : BaseObject {
        public AllValues_Parameters() { }
        public AllValues_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineImageDownloaderWeb.AllValues.OutImage
        // 0x0 (0x40)
        // (Param | OutParam | NeedCtorLink)
        public FOnlineImageDownload OutImage {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // IntProperty IpDrv.OnlineImageDownloaderWeb.AllValues.StartIndex
        // 0x40 (0x4)
        // (OptionalParam | Param)
        public int StartIndex {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }

        // IntProperty IpDrv.OnlineImageDownloaderWeb.AllValues.MaxValues
        // 0x44 (0x4)
        // (OptionalParam | Param)
        public int MaxValues {
            get => *(int*)(Pointer + 68);
            set => *(int*)(Pointer + 68) = value;
        }
    }
    private static UFunction _ptrAllValues;
    public void AllValues(ref FOnlineImageDownload OutImage, int StartIndex = 0, int MaxValues = 0) {
        _ptrAllValues ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.AllValues");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)OutImage.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy(&StartIndex, @params + 64, 4, 4);
        System.Buffer.MemoryCopy(&MaxValues, @params + 68, 4, 4);

        _ptrAllValues.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllValues, @params);
        _ptrAllValues.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutImagePtr = Marshal.AllocHGlobal(64);
        System.Buffer.MemoryCopy(@params, (void*)_OutImagePtr, 64, 64);
        OutImage = new(_OutImagePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.ClearPendingDownloads
    // 0xBA5F70
    // (Final | Native | Public)
    public unsafe class ClearPendingDownloads_Parameters : BaseObject {
        public ClearPendingDownloads_Parameters() { }
        public ClearPendingDownloads_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearPendingDownloads;
    public void ClearPendingDownloads() {
        _ptrClearPendingDownloads ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.ClearPendingDownloads");

        _ptrClearPendingDownloads.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearPendingDownloads, null);
        _ptrClearPendingDownloads.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.ClearAllDownloads
    // 0xBA5F30
    // (Final | Native | Public)
    public unsafe class ClearAllDownloads_Parameters : BaseObject {
        public ClearAllDownloads_Parameters() { }
        public ClearAllDownloads_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearAllDownloads;
    public void ClearAllDownloads() {
        _ptrClearAllDownloads ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.ClearAllDownloads");

        _ptrClearAllDownloads.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearAllDownloads, null);
        _ptrClearAllDownloads.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlineImageDownloaderWeb.EventImageDecoded
    // 0x3750E0
    // (Final | Private | Delegate | HasOutParams)
    public unsafe class EventImageDecoded_Parameters : BaseObject {
        public EventImageDecoded_Parameters() { }
        public EventImageDecoded_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.EventImageDecoded.RequestURL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequestURL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineImageDownloaderWeb.EventImageDecoded.Image
        // 0x10 (0x18)
        // (Const | Param | OutParam | NeedCtorLink)
        public UTexture2DDynamic.FImageLayout Image {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 24, 24);
        }
    }
    private static UFunction _ptrEventImageDecoded;
    public void EventImageDecoded(FString RequestURL, ref UTexture2DDynamic.FImageLayout Image) {
        _ptrEventImageDecoded ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.EventImageDecoded");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)RequestURL.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Image.Pointer, @params + 16, 24, 24);

        ProcessEvent(_ptrEventImageDecoded, @params);

        var _ImagePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ImagePtr, 24, 24);
        Image = new(_ImagePtr) { Allocated = true };
    }

    // Function IpDrv.OnlineImageDownloaderWeb.OnOnlineImageFinished
    // 0x3750E0
    // (Final | Protected | Delegate)
    public unsafe class OnOnlineImageFinished_Parameters : BaseObject {
        public OnOnlineImageFinished_Parameters() { }
        public OnOnlineImageFinished_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineImageDownloaderWeb.OnOnlineImageFinished.ImageInfo
        // 0x0 (0x40)
        // (Param | NeedCtorLink)
        public FOnlineImageDownload ImageInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }
    }
    private static UFunction _ptrOnOnlineImageFinished;
    public void OnOnlineImageFinished(FOnlineImageDownload ImageInfo) {
        _ptrOnOnlineImageFinished ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.OnOnlineImageFinished");

        var @params = stackalloc byte[64];
        System.Buffer.MemoryCopy((void*)ImageInfo.Pointer, @params, 64, 64);

        ProcessEvent(_ptrOnOnlineImageFinished, @params);
    }

    // Function IpDrv.OnlineImageDownloaderWeb.Construct
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Construct_Parameters : BaseObject {
        public Construct_Parameters() { }
        public Construct_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrConstruct;
    public void Construct() {
        _ptrConstruct ??= FindFunction("Function IpDrv.OnlineImageDownloaderWeb.Construct");

        ProcessEvent(_ptrConstruct, null);
    }


    // ScriptStruct IpDrv.OnlineImageDownloaderWeb.OnlineImageDownload
    // 0x40
    public unsafe class FOnlineImageDownload : BaseObject {
        public FOnlineImageDownload() {
            Pointer = Marshal.AllocHGlobal(64);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 64);
            Allocated = true;
        }
        public FOnlineImageDownload(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineImageDownloaderWeb.OnlineImageDownload.URL
        // 0x0 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.OnlineImageDownload.HTTPRequest
        // 0x10 (0x8)
        public UHttpRequestInterface HTTPRequest {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // ByteProperty IpDrv.OnlineImageDownloaderWeb.OnlineImageDownload.Status
        // 0x18 (0x1)
        public EOnlineImageDownloadState Status {
            get => *(EOnlineImageDownloadState*)(Pointer + 24);
            set => *(EOnlineImageDownloadState*)(Pointer + 24) = value;
        }

        // MISSED OFFSET: 0x7

        // ObjectProperty IpDrv.OnlineImageDownloaderWeb.OnlineImageDownload.Texture
        // 0x20 (0x8)
        public UTexture2DDynamic Texture {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }

        // DelegateProperty IpDrv.OnlineImageDownloaderWeb.OnlineImageDownload.DecodedCallbacks
        // 0x28 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate DecodedCallbacks {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 24, 24);
        }
    }


    // Enum IpDrv.OnlineImageDownloaderWeb.EOnlineImageDownloadState
    public enum EOnlineImageDownloadState : byte {
        PIDS_NotStarted = 0,
        PIDS_Downloading = 1,
        PIDS_Succeeded = 2,
        PIDS_Failed = 3,
        PIDS_MAX = 4
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineImageDownloaderWeb");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlineLobbyInterfaceImpl
// 0x260 (0x60 - 0x2C0)
// (Compiled | Parsed | Native)
public unsafe partial class UOnlineLobbyInterfaceImpl : UObject {
    public UOnlineLobbyInterfaceImpl() { }
    public UOnlineLobbyInterfaceImpl(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.CreateLobbyCompleteDelegates
    // 0x60 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> CreateLobbyCompleteDelegates {
        get => new(Pointer + 96, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbiesCompleteDelegates
    // 0x70 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> FindLobbiesCompleteDelegates {
        get => new(Pointer + 112, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.JoinLobbyCompleteDelegates
    // 0x80 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> JoinLobbyCompleteDelegates {
        get => new(Pointer + 128, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbySettingsUpdateDelegates
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbySettingsUpdateDelegates {
        get => new(Pointer + 144, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyMemberSettingsUpdateDelegates
    // 0xA0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyMemberSettingsUpdateDelegates {
        get => new(Pointer + 160, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyMemberStatusUpdateDelegates
    // 0xB0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyMemberStatusUpdateDelegates {
        get => new(Pointer + 176, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyReceiveMessageDelegates
    // 0xC0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyReceiveMessageDelegates {
        get => new(Pointer + 192, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyReceiveBinaryDataDelegates
    // 0xD0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyReceiveBinaryDataDelegates {
        get => new(Pointer + 208, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyJoinGameDelegates
    // 0xE0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyJoinGameDelegates {
        get => new(Pointer + 224, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 224), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyInviteDelegates
    // 0xF0 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyInviteDelegates {
        get => new(Pointer + 240, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 240), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyErrorDelegates
    // 0x100 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyErrorDelegates {
        get => new(Pointer + 256, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbyDestroyedDelegates
    // 0x110 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbyDestroyedDelegates {
        get => new(Pointer + 272, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 272), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.LobbySessionCreatedDelegates
    // 0x120 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> LobbySessionCreatedDelegates {
        get => new(Pointer + 288, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 288), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.HostStartPlayTogetherDelegates
    // 0x130 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> HostStartPlayTogetherDelegates {
        get => new(Pointer + 304, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 304), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.ActiveLobbies
    // 0x140 (0x10)
    // (Const | NeedCtorLink)
    public StructTArray<UOnlineLobbySettings.FActiveLobbyInfo> ActiveLobbies {
        get => new(Pointer + 320, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 320), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.CachedFindLobbyResults
    // 0x150 (0x10)
    // (Const | NeedCtorLink)
    public StructTArray<UOnlineLobbySettings.FBasicLobbyInfo> CachedFindLobbyResults {
        get => new(Pointer + 336, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 336), 16, 16);
    }

    // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.CachedBinaryData
    // 0x160 (0x10)
    // (Const | NeedCtorLink)
    public UnmanagedTArray<byte> CachedBinaryData {
        get => new(Pointer + 352);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 352), 16, 16);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnCreateLobbyComplete__Delegate
    // 0x170 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateLobbyComplete__Delegate {
        get => new(Pointer + 368);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 368), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnFindLobbiesComplete__Delegate
    // 0x188 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnFindLobbiesComplete__Delegate {
        get => new(Pointer + 392);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 392), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnJoinLobbyComplete__Delegate
    // 0x1A0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnJoinLobbyComplete__Delegate {
        get => new(Pointer + 416);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 416), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbySettingsUpdate__Delegate
    // 0x1B8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbySettingsUpdate__Delegate {
        get => new(Pointer + 440);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 440), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyMemberSettingsUpdate__Delegate
    // 0x1D0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyMemberSettingsUpdate__Delegate {
        get => new(Pointer + 464);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 464), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyMemberStatusUpdate__Delegate
    // 0x1E8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyMemberStatusUpdate__Delegate {
        get => new(Pointer + 488);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 488), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyReceiveMessage__Delegate
    // 0x200 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyReceiveMessage__Delegate {
        get => new(Pointer + 512);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 512), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyReceiveBinaryData__Delegate
    // 0x218 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyReceiveBinaryData__Delegate {
        get => new(Pointer + 536);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 536), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyJoinGame__Delegate
    // 0x230 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyJoinGame__Delegate {
        get => new(Pointer + 560);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 560), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyInvite__Delegate
    // 0x248 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyInvite__Delegate {
        get => new(Pointer + 584);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 584), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyDestroyed__Delegate
    // 0x260 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyDestroyed__Delegate {
        get => new(Pointer + 608);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 608), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbySessionCreated__Delegate
    // 0x278 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbySessionCreated__Delegate {
        get => new(Pointer + 632);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 632), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnLobbyError__Delegate
    // 0x290 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnLobbyError__Delegate {
        get => new(Pointer + 656);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 656), 24, 24);
    }

    // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.__OnHostStartPlayTogether__Delegate
    // 0x2A8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnHostStartPlayTogether__Delegate {
        get => new(Pointer + 680);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 680), 24, 24);
    }


    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearHostStartPlayTogetherDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearHostStartPlayTogetherDelegate_Parameters : BaseObject {
        public ClearHostStartPlayTogetherDelegate_Parameters() { }
        public ClearHostStartPlayTogetherDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearHostStartPlayTogetherDelegate.InDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate InDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearHostStartPlayTogetherDelegate;
    public void ClearHostStartPlayTogetherDelegate(FScriptDelegate InDelegate) {
        _ptrClearHostStartPlayTogetherDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearHostStartPlayTogetherDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)InDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearHostStartPlayTogetherDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddHostStartPlayTogetherDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddHostStartPlayTogetherDelegate_Parameters : BaseObject {
        public AddHostStartPlayTogetherDelegate_Parameters() { }
        public AddHostStartPlayTogetherDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddHostStartPlayTogetherDelegate.InDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate InDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddHostStartPlayTogetherDelegate;
    public void AddHostStartPlayTogetherDelegate(FScriptDelegate InDelegate) {
        _ptrAddHostStartPlayTogetherDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddHostStartPlayTogetherDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)InDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddHostStartPlayTogetherDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnHostStartPlayTogether
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnHostStartPlayTogether_Parameters : BaseObject {
        public OnHostStartPlayTogether_Parameters() { }
        public OnHostStartPlayTogether_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.OnHostStartPlayTogether.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }
    }
    private static UFunction _ptrOnHostStartPlayTogether;
    public void OnHostStartPlayTogether(byte LocalUserNum) {
        _ptrOnHostStartPlayTogether ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnHostStartPlayTogether");

        var @params = stackalloc byte[1];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrOnHostStartPlayTogether, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyErrorDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyErrorDelegate_Parameters : BaseObject {
        public ClearLobbyErrorDelegate_Parameters() { }
        public ClearLobbyErrorDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyErrorDelegate.LobbyErrorDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyErrorDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyErrorDelegate;
    public void ClearLobbyErrorDelegate(FScriptDelegate LobbyErrorDelegate) {
        _ptrClearLobbyErrorDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyErrorDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyErrorDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyErrorDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyErrorDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyErrorDelegate_Parameters : BaseObject {
        public AddLobbyErrorDelegate_Parameters() { }
        public AddLobbyErrorDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyErrorDelegate.LobbyErrorDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyErrorDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyErrorDelegate;
    public void AddLobbyErrorDelegate(FScriptDelegate LobbyErrorDelegate) {
        _ptrAddLobbyErrorDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyErrorDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyErrorDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyErrorDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyError
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnLobbyError_Parameters : BaseObject {
        public OnLobbyError_Parameters() { }
        public OnLobbyError_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyError.Error
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrOnLobbyError;
    public void OnLobbyError(FString Error) {
        _ptrOnLobbyError ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyError");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params, 16, 16);

        ProcessEvent(_ptrOnLobbyError, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.GetLobbyMembers
    // 0x3750E0
    // (Final | Defined | Event | Public | HasOutParams)
    public unsafe class GetLobbyMembers_Parameters : BaseObject {
        public GetLobbyMembers_Parameters() { }
        public GetLobbyMembers_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyMembers.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyMembers.Members
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UOnlineLobbySettings.FLobbyMember> Members {
            get => new(Pointer + 16, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyMembers.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetLobbyMembers;
    public bool GetLobbyMembers(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref StructTArray<UOnlineLobbySettings.FLobbyMember> Members) {
        _ptrGetLobbyMembers ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.GetLobbyMembers");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Members.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetLobbyMembers, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _MembersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_MembersPtr, 16, 16);
        Members = new(_MembersPtr, 104) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySessionCretedeDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbySessionCretedeDelegate_Parameters : BaseObject {
        public ClearLobbySessionCretedeDelegate_Parameters() { }
        public ClearLobbySessionCretedeDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySessionCretedeDelegate.LobbySessionCreatedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbySessionCreatedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbySessionCretedeDelegate;
    public void ClearLobbySessionCretedeDelegate(FScriptDelegate LobbySessionCreatedDelegate) {
        _ptrClearLobbySessionCretedeDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySessionCretedeDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbySessionCreatedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbySessionCretedeDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySessionCreatedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbySessionCreatedDelegate_Parameters : BaseObject {
        public ClearLobbySessionCreatedDelegate_Parameters() { }
        public ClearLobbySessionCreatedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySessionCreatedDelegate.LobbySessionCreatedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbySessionCreatedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbySessionCreatedDelegate;
    public void ClearLobbySessionCreatedDelegate(FScriptDelegate LobbySessionCreatedDelegate) {
        _ptrClearLobbySessionCreatedDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySessionCreatedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbySessionCreatedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbySessionCreatedDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbySessionCreatedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbySessionCreatedDelegate_Parameters : BaseObject {
        public AddLobbySessionCreatedDelegate_Parameters() { }
        public AddLobbySessionCreatedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbySessionCreatedDelegate.LobbySessionCreatedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbySessionCreatedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbySessionCreatedDelegate;
    public void AddLobbySessionCreatedDelegate(FScriptDelegate LobbySessionCreatedDelegate) {
        _ptrAddLobbySessionCreatedDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbySessionCreatedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbySessionCreatedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbySessionCreatedDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbySessionCreatedDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbySessionCreatedDelegates_Parameters : BaseObject {
        public TriggerLobbySessionCreatedDelegates_Parameters() { }
        public TriggerLobbySessionCreatedDelegates_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTriggerLobbySessionCreatedDelegates;
    public void TriggerLobbySessionCreatedDelegates() {
        _ptrTriggerLobbySessionCreatedDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbySessionCreatedDelegates");

        ProcessEvent(_ptrTriggerLobbySessionCreatedDelegates, null);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbySessionCreated
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnLobbySessionCreated_Parameters : BaseObject {
        public OnLobbySessionCreated_Parameters() { }
        public OnLobbySessionCreated_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnLobbySessionCreated;
    public void OnLobbySessionCreated() {
        _ptrOnLobbySessionCreated ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbySessionCreated");

        ProcessEvent(_ptrOnLobbySessionCreated, null);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.GetLobbyIndex
    // 0x3750E0
    // (Final | Defined | Event | Public | HasOutParams)
    public unsafe class GetLobbyIndex_Parameters : BaseObject {
        public GetLobbyIndex_Parameters() { }
        public GetLobbyIndex_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyIndex.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyIndex.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetLobbyIndex;
    public int GetLobbyIndex(ref UOnlineSubsystem.FUniqueLobbyId LobbyId) {
        _ptrGetLobbyIndex ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.GetLobbyIndex");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetLobbyIndex, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(int*)(@params + 16);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.RemoveLocalPlayerFromSession
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class RemoveLocalPlayerFromSession_Parameters : BaseObject {
        public RemoveLocalPlayerFromSession_Parameters() { }
        public RemoveLocalPlayerFromSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.RemoveLocalPlayerFromSession.PartyMember
        // 0x0 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyMember {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }
    }
    private static UFunction _ptrRemoveLocalPlayerFromSession;
    public void RemoveLocalPlayerFromSession(ref U_Types_Core.FUniqueNetId PartyMember) {
        _ptrRemoveLocalPlayerFromSession ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.RemoveLocalPlayerFromSession");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)PartyMember.Pointer, @params, 72, 72);

        ProcessEvent(_ptrRemoveLocalPlayerFromSession, @params);

        var _PartyMemberPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params, (void*)_PartyMemberPtr, 72, 72);
        PartyMember = new(_PartyMemberPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLocalPartyMemberToSession
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class AddLocalPartyMemberToSession_Parameters : BaseObject {
        public AddLocalPartyMemberToSession_Parameters() { }
        public AddLocalPartyMemberToSession_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.AddLocalPartyMemberToSession.NewPartyMember
        // 0x0 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId NewPartyMember {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }
    }
    private static UFunction _ptrAddLocalPartyMemberToSession;
    public void AddLocalPartyMemberToSession(ref U_Types_Core.FUniqueNetId NewPartyMember) {
        _ptrAddLocalPartyMemberToSession ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLocalPartyMemberToSession");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)NewPartyMember.Pointer, @params, 72, 72);

        ProcessEvent(_ptrAddLocalPartyMemberToSession, @params);

        var _NewPartyMemberPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params, (void*)_NewPartyMemberPtr, 72, 72);
        NewPartyMember = new(_NewPartyMemberPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.KickPlayer
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class KickPlayer_Parameters : BaseObject {
        public KickPlayer_Parameters() { }
        public KickPlayer_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.KickPlayer.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.KickPlayer.PlayerID
        // 0x10 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.KickPlayer.Reason
        // 0x58 (0x1)
        // (Param)
        public UOnlineLobbySettings.ELobbyKickReason Reason {
            get => *(UOnlineLobbySettings.ELobbyKickReason*)(Pointer + 88);
            set => *(UOnlineLobbySettings.ELobbyKickReason*)(Pointer + 88) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.KickPlayer.ReturnValue
        // 0x5C (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 92) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 92) |= 0x1;
                else *(uint*)(Pointer + 92) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrKickPlayer;
    public bool KickPlayer(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId PlayerID, UOnlineLobbySettings.ELobbyKickReason Reason) {
        _ptrKickPlayer ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.KickPlayer");

        var @params = stackalloc byte[93];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 16, 72, 72);
        System.Buffer.MemoryCopy(&Reason, @params + 88, 1, 1);

        ProcessEvent(_ptrKickPlayer, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _PlayerIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlayerIDPtr, 72, 72);
        PlayerID = new(_PlayerIDPtr) { Allocated = true };

        return *(bool*)(@params + 92);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ShowInviteUI
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class ShowInviteUI_Parameters : BaseObject {
        public ShowInviteUI_Parameters() { }
        public ShowInviteUI_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.ShowInviteUI.LocalUserNum
        // 0x0 (0x1)
        // (Const | Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.ShowInviteUI.LobbyId
        // 0x8 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.ShowInviteUI.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrShowInviteUI;
    public bool ShowInviteUI(byte LocalUserNum, ref UOnlineSubsystem.FUniqueLobbyId LobbyId) {
        _ptrShowInviteUI ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ShowInviteUI");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrShowInviteUI, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyDestroyedDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbyDestroyedDelegates_Parameters : BaseObject {
        public TriggerLobbyDestroyedDelegates_Parameters() { }
        public TriggerLobbyDestroyedDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyDestroyedDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyDestroyedDelegates.Reason
        // 0x4 (0x1)
        // (Param)
        public UOnlineLobbySettings.ELobbyKickReason Reason {
            get => *(UOnlineLobbySettings.ELobbyKickReason*)(Pointer + 4);
            set => *(UOnlineLobbySettings.ELobbyKickReason*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrTriggerLobbyDestroyedDelegates;
    public void TriggerLobbyDestroyedDelegates(int LobbyIndex, UOnlineLobbySettings.ELobbyKickReason Reason) {
        _ptrTriggerLobbyDestroyedDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyDestroyedDelegates");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);
        System.Buffer.MemoryCopy(&Reason, @params + 4, 1, 1);

        ProcessEvent(_ptrTriggerLobbyDestroyedDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyDestroyedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyDestroyedDelegate_Parameters : BaseObject {
        public ClearLobbyDestroyedDelegate_Parameters() { }
        public ClearLobbyDestroyedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyDestroyedDelegate.LobbyDestroyedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyDestroyedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyDestroyedDelegate;
    public void ClearLobbyDestroyedDelegate(FScriptDelegate LobbyDestroyedDelegate) {
        _ptrClearLobbyDestroyedDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyDestroyedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyDestroyedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyDestroyedDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyDestroyedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyDestroyedDelegate_Parameters : BaseObject {
        public AddLobbyDestroyedDelegate_Parameters() { }
        public AddLobbyDestroyedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyDestroyedDelegate.LobbyDestroyedDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyDestroyedDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyDestroyedDelegate;
    public void AddLobbyDestroyedDelegate(FScriptDelegate LobbyDestroyedDelegate) {
        _ptrAddLobbyDestroyedDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyDestroyedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyDestroyedDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyDestroyedDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyDestroyed
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyDestroyed_Parameters : BaseObject {
        public OnLobbyDestroyed_Parameters() { }
        public OnLobbyDestroyed_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyDestroyed.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyDestroyed.Reason
        // 0x10 (0x1)
        // (Param)
        public UOnlineLobbySettings.ELobbyKickReason Reason {
            get => *(UOnlineLobbySettings.ELobbyKickReason*)(Pointer + 16);
            set => *(UOnlineLobbySettings.ELobbyKickReason*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrOnLobbyDestroyed;
    public void OnLobbyDestroyed(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, UOnlineLobbySettings.ELobbyKickReason Reason) {
        _ptrOnLobbyDestroyed ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyDestroyed");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Reason, @params + 16, 1, 1);

        ProcessEvent(_ptrOnLobbyDestroyed, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyInviteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyInviteDelegate_Parameters : BaseObject {
        public ClearLobbyInviteDelegate_Parameters() { }
        public ClearLobbyInviteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyInviteDelegate.LobbyInviteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyInviteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyInviteDelegate;
    public void ClearLobbyInviteDelegate(FScriptDelegate LobbyInviteDelegate) {
        _ptrClearLobbyInviteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyInviteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyInviteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyInviteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyInviteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyInviteDelegate_Parameters : BaseObject {
        public AddLobbyInviteDelegate_Parameters() { }
        public AddLobbyInviteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyInviteDelegate.LobbyInviteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyInviteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyInviteDelegate;
    public void AddLobbyInviteDelegate(FScriptDelegate LobbyInviteDelegate) {
        _ptrAddLobbyInviteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyInviteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyInviteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyInviteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyInvite
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyInvite_Parameters : BaseObject {
        public OnLobbyInvite_Parameters() { }
        public OnLobbyInvite_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyInvite.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyInvite.FriendId
        // 0x10 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId FriendId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyInvite.bAccepted
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bAccepted {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnLobbyInvite;
    public void OnLobbyInvite(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId FriendId, bool bAccepted) {
        _ptrOnLobbyInvite ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyInvite");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FriendId.Pointer, @params + 16, 72, 72);
        System.Buffer.MemoryCopy(&bAccepted, @params + 88, 4, 4);

        ProcessEvent(_ptrOnLobbyInvite, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _FriendIdPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_FriendIdPtr, 72, 72);
        FriendId = new(_FriendIdPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.InviteToLobby
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class InviteToLobby_Parameters : BaseObject {
        public InviteToLobby_Parameters() { }
        public InviteToLobby_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.InviteToLobby.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.InviteToLobby.PlayerID
        // 0x10 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.InviteToLobby.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrInviteToLobby;
    public bool InviteToLobby(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId PlayerID) {
        _ptrInviteToLobby ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.InviteToLobby");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 16, 72, 72);

        ProcessEvent(_ptrInviteToLobby, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _PlayerIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlayerIDPtr, 72, 72);
        PlayerID = new(_PlayerIDPtr) { Allocated = true };

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.CanInviteToLobby
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class CanInviteToLobby_Parameters : BaseObject {
        public CanInviteToLobby_Parameters() { }
        public CanInviteToLobby_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.CanInviteToLobby.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.CanInviteToLobby.PlayerID
        // 0x10 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.CanInviteToLobby.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCanInviteToLobby;
    public bool CanInviteToLobby(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId PlayerID) {
        _ptrCanInviteToLobby ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.CanInviteToLobby");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params + 16, 72, 72);

        ProcessEvent(_ptrCanInviteToLobby, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _PlayerIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PlayerIDPtr, 72, 72);
        PlayerID = new(_PlayerIDPtr) { Allocated = true };

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyOwner
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SetLobbyOwner_Parameters : BaseObject {
        public SetLobbyOwner_Parameters() { }
        public SetLobbyOwner_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyOwner.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyOwner.NewOwner
        // 0x10 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId NewOwner {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyOwner.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetLobbyOwner;
    public bool SetLobbyOwner(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId NewOwner) {
        _ptrSetLobbyOwner ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyOwner");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)NewOwner.Pointer, @params + 16, 72, 72);

        ProcessEvent(_ptrSetLobbyOwner, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _NewOwnerPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_NewOwnerPtr, 72, 72);
        NewOwner = new(_NewOwnerPtr) { Allocated = true };

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyLock
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SetLobbyLock_Parameters : BaseObject {
        public SetLobbyLock_Parameters() { }
        public SetLobbyLock_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyLock.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyLock.bLocked
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bLocked {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyLock.ReturnValue
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetLobbyLock;
    public bool SetLobbyLock(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, bool bLocked) {
        _ptrSetLobbyLock ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyLock");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bLocked, @params + 16, 4, 4);

        ProcessEvent(_ptrSetLobbyLock, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 20);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyServer
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SetLobbyServer_Parameters : BaseObject {
        public SetLobbyServer_Parameters() { }
        public SetLobbyServer_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyServer.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyServer.ServerUID
        // 0x10 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerUID {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyServer.ServerIP
        // 0x58 (0x10)
        // (Param | NeedCtorLink)
        public FString ServerIP {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyServer.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetLobbyServer;
    public bool SetLobbyServer(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId ServerUID, FString ServerIP) {
        _ptrSetLobbyServer ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyServer");

        var @params = stackalloc byte[108];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ServerUID.Pointer, @params + 16, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 88, 16, 16);

        ProcessEvent(_ptrSetLobbyServer, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _ServerUIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ServerUIDPtr, 72, 72);
        ServerUID = new(_ServerUIDPtr) { Allocated = true };

        return *(bool*)(@params + 104);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.RemoveLobbySetting
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class RemoveLobbySetting_Parameters : BaseObject {
        public RemoveLobbySetting_Parameters() { }
        public RemoveLobbySetting_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.RemoveLobbySetting.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.RemoveLobbySetting.Key
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.RemoveLobbySetting.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRemoveLobbySetting;
    public bool RemoveLobbySetting(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, FString Key) {
        _ptrRemoveLobbySetting ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.RemoveLobbySetting");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrRemoveLobbySetting, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbySetting
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SetLobbySetting_Parameters : BaseObject {
        public SetLobbySetting_Parameters() { }
        public SetLobbySetting_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbySetting.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbySetting.Key
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbySetting.Value
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbySetting.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetLobbySetting;
    public bool SetLobbySetting(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, FString Key, FString Value) {
        _ptrSetLobbySetting ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbySetting");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrSetLobbySetting, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 48);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.GetLobbyAdmin
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetLobbyAdmin_Parameters : BaseObject {
        public GetLobbyAdmin_Parameters() { }
        public GetLobbyAdmin_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyAdmin.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyAdmin.AdminId
        // 0x10 (0x48)
        // (Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId AdminId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.GetLobbyAdmin.ReturnValue
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetLobbyAdmin;
    public bool GetLobbyAdmin(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref U_Types_Core.FUniqueNetId AdminId) {
        _ptrGetLobbyAdmin ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.GetLobbyAdmin");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)AdminId.Pointer, @params + 16, 72, 72);

        ProcessEvent(_ptrGetLobbyAdmin, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _AdminIdPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 16, (void*)_AdminIdPtr, 72, 72);
        AdminId = new(_AdminIdPtr) { Allocated = true };

        return *(bool*)(@params + 88);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyJoinGameDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyJoinGameDelegate_Parameters : BaseObject {
        public ClearLobbyJoinGameDelegate_Parameters() { }
        public ClearLobbyJoinGameDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyJoinGameDelegate.LobbyJoinGameDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyJoinGameDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyJoinGameDelegate;
    public void ClearLobbyJoinGameDelegate(FScriptDelegate LobbyJoinGameDelegate) {
        _ptrClearLobbyJoinGameDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyJoinGameDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyJoinGameDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyJoinGameDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyJoinGameDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyJoinGameDelegate_Parameters : BaseObject {
        public AddLobbyJoinGameDelegate_Parameters() { }
        public AddLobbyJoinGameDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyJoinGameDelegate.LobbyJoinGameDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyJoinGameDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyJoinGameDelegate;
    public void AddLobbyJoinGameDelegate(FScriptDelegate LobbyJoinGameDelegate) {
        _ptrAddLobbyJoinGameDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyJoinGameDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyJoinGameDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyJoinGameDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyJoinGameDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public | HasOutParams)
    public unsafe class TriggerLobbyJoinGameDelegates_Parameters : BaseObject {
        public TriggerLobbyJoinGameDelegates_Parameters() { }
        public TriggerLobbyJoinGameDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyJoinGameDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyJoinGameDelegates.ServerId
        // 0x8 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyJoinGameDelegates.ServerIP
        // 0x50 (0x10)
        // (Param | NeedCtorLink)
        public FString ServerIP {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }
    }
    private static UFunction _ptrTriggerLobbyJoinGameDelegates;
    public void TriggerLobbyJoinGameDelegates(int LobbyIndex, ref U_Types_Core.FUniqueNetId ServerId, FString ServerIP) {
        _ptrTriggerLobbyJoinGameDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyJoinGameDelegates");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)ServerId.Pointer, @params + 8, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 80, 16, 16);

        ProcessEvent(_ptrTriggerLobbyJoinGameDelegates, @params);

        var _ServerIdPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ServerIdPtr, 72, 72);
        ServerId = new(_ServerIdPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyJoinGame
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyJoinGame_Parameters : BaseObject {
        public OnLobbyJoinGame_Parameters() { }
        public OnLobbyJoinGame_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyJoinGame.LobbyInfo
        // 0x0 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyJoinGame.ServerId
        // 0x30 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId ServerId {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 72, 72);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyJoinGame.ServerIP
        // 0x78 (0x10)
        // (Param | NeedCtorLink)
        public FString ServerIP {
            get => new(Pointer + 120);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
        }
    }
    private static UFunction _ptrOnLobbyJoinGame;
    public void OnLobbyJoinGame(ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, ref U_Types_Core.FUniqueNetId ServerId, FString ServerIP) {
        _ptrOnLobbyJoinGame ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyJoinGame");

        var @params = stackalloc byte[136];
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params, 48, 48);
        System.Buffer.MemoryCopy((void*)ServerId.Pointer, @params + 48, 72, 72);
        System.Buffer.MemoryCopy((void*)ServerIP.Pointer, @params + 120, 16, 16);

        ProcessEvent(_ptrOnLobbyJoinGame, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
        var _ServerIdPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params + 48, (void*)_ServerIdPtr, 72, 72);
        ServerId = new(_ServerIdPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyReceiveBinaryDataDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyReceiveBinaryDataDelegate_Parameters : BaseObject {
        public ClearLobbyReceiveBinaryDataDelegate_Parameters() { }
        public ClearLobbyReceiveBinaryDataDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyReceiveBinaryDataDelegate.LobbyReceiveBinaryDataDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyReceiveBinaryDataDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyReceiveBinaryDataDelegate;
    public void ClearLobbyReceiveBinaryDataDelegate(FScriptDelegate LobbyReceiveBinaryDataDelegate) {
        _ptrClearLobbyReceiveBinaryDataDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyReceiveBinaryDataDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyReceiveBinaryDataDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyReceiveBinaryDataDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyReceiveBinaryDataDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyReceiveBinaryDataDelegate_Parameters : BaseObject {
        public AddLobbyReceiveBinaryDataDelegate_Parameters() { }
        public AddLobbyReceiveBinaryDataDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyReceiveBinaryDataDelegate.LobbyReceiveBinaryDataDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyReceiveBinaryDataDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyReceiveBinaryDataDelegate;
    public void AddLobbyReceiveBinaryDataDelegate(FScriptDelegate LobbyReceiveBinaryDataDelegate) {
        _ptrAddLobbyReceiveBinaryDataDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyReceiveBinaryDataDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyReceiveBinaryDataDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyReceiveBinaryDataDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveBinaryDataDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbyReceiveBinaryDataDelegates_Parameters : BaseObject {
        public TriggerLobbyReceiveBinaryDataDelegates_Parameters() { }
        public TriggerLobbyReceiveBinaryDataDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveBinaryDataDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveBinaryDataDelegates.MemberIndex
        // 0x4 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrTriggerLobbyReceiveBinaryDataDelegates;
    public void TriggerLobbyReceiveBinaryDataDelegates(int LobbyIndex, int MemberIndex) {
        _ptrTriggerLobbyReceiveBinaryDataDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveBinaryDataDelegates");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 4, 4, 4);

        ProcessEvent(_ptrTriggerLobbyReceiveBinaryDataDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveBinaryData
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyReceiveBinaryData_Parameters : BaseObject {
        public OnLobbyReceiveBinaryData_Parameters() { }
        public OnLobbyReceiveBinaryData_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveBinaryData.LobbyInfo
        // 0x0 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveBinaryData.MemberIndex
        // 0x30 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveBinaryData.Data
        // 0x38 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Data {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrOnLobbyReceiveBinaryData;
    public void OnLobbyReceiveBinaryData(ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, int MemberIndex, ref UnmanagedTArray<byte> Data) {
        _ptrOnLobbyReceiveBinaryData ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveBinaryData");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params, 48, 48);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 48, 4, 4);
        System.Buffer.MemoryCopy((void*)Data.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrOnLobbyReceiveBinaryData, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
        var _DataPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_DataPtr, 16, 16);
        Data = new(_DataPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SendLobbyBinaryData
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SendLobbyBinaryData_Parameters : BaseObject {
        public SendLobbyBinaryData_Parameters() { }
        public SendLobbyBinaryData_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SendLobbyBinaryData.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.SendLobbyBinaryData.Data
        // 0x10 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Data {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SendLobbyBinaryData.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendLobbyBinaryData;
    public bool SendLobbyBinaryData(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, ref UnmanagedTArray<byte> Data) {
        _ptrSendLobbyBinaryData ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SendLobbyBinaryData");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Data.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrSendLobbyBinaryData, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
        var _DataPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_DataPtr, 16, 16);
        Data = new(_DataPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyReceiveMessageDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyReceiveMessageDelegate_Parameters : BaseObject {
        public ClearLobbyReceiveMessageDelegate_Parameters() { }
        public ClearLobbyReceiveMessageDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyReceiveMessageDelegate.LobbyReceiveMessageDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyReceiveMessageDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyReceiveMessageDelegate;
    public void ClearLobbyReceiveMessageDelegate(FScriptDelegate LobbyReceiveMessageDelegate) {
        _ptrClearLobbyReceiveMessageDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyReceiveMessageDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyReceiveMessageDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyReceiveMessageDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyReceiveMessageDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyReceiveMessageDelegate_Parameters : BaseObject {
        public AddLobbyReceiveMessageDelegate_Parameters() { }
        public AddLobbyReceiveMessageDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyReceiveMessageDelegate.LobbyReceiveMessageDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyReceiveMessageDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyReceiveMessageDelegate;
    public void AddLobbyReceiveMessageDelegate(FScriptDelegate LobbyReceiveMessageDelegate) {
        _ptrAddLobbyReceiveMessageDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyReceiveMessageDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyReceiveMessageDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyReceiveMessageDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveMessageDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbyReceiveMessageDelegates_Parameters : BaseObject {
        public TriggerLobbyReceiveMessageDelegates_Parameters() { }
        public TriggerLobbyReceiveMessageDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveMessageDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveMessageDelegates.MemberIndex
        // 0x4 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveMessageDelegates.Type
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Type {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveMessageDelegates.Message
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Message {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrTriggerLobbyReceiveMessageDelegates;
    public void TriggerLobbyReceiveMessageDelegates(int LobbyIndex, int MemberIndex, FString Type, FString Message) {
        _ptrTriggerLobbyReceiveMessageDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyReceiveMessageDelegates");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 4, 4, 4);
        System.Buffer.MemoryCopy((void*)Type.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrTriggerLobbyReceiveMessageDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveMessage
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyReceiveMessage_Parameters : BaseObject {
        public OnLobbyReceiveMessage_Parameters() { }
        public OnLobbyReceiveMessage_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveMessage.LobbyInfo
        // 0x0 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveMessage.MemberIndex
        // 0x30 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveMessage.Type
        // 0x38 (0x10)
        // (Param | NeedCtorLink)
        public FString Type {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveMessage.Message
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Message {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnLobbyReceiveMessage;
    public void OnLobbyReceiveMessage(ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, int MemberIndex, FString Type, FString Message) {
        _ptrOnLobbyReceiveMessage ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyReceiveMessage");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params, 48, 48);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 48, 4, 4);
        System.Buffer.MemoryCopy((void*)Type.Pointer, @params + 56, 16, 16);
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnLobbyReceiveMessage, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SendLobbyMessage
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SendLobbyMessage_Parameters : BaseObject {
        public SendLobbyMessage_Parameters() { }
        public SendLobbyMessage_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SendLobbyMessage.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.SendLobbyMessage.Message
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Message {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SendLobbyMessage.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendLobbyMessage;
    public bool SendLobbyMessage(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, FString Message) {
        _ptrSendLobbyMessage ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SendLobbyMessage");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Message.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrSendLobbyMessage, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyMemberStatusUpdateDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyMemberStatusUpdateDelegate_Parameters : BaseObject {
        public ClearLobbyMemberStatusUpdateDelegate_Parameters() { }
        public ClearLobbyMemberStatusUpdateDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyMemberStatusUpdateDelegate.LobbyMemberStatusUpdateDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyMemberStatusUpdateDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyMemberStatusUpdateDelegate;
    public void ClearLobbyMemberStatusUpdateDelegate(FScriptDelegate LobbyMemberStatusUpdateDelegate) {
        _ptrClearLobbyMemberStatusUpdateDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyMemberStatusUpdateDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyMemberStatusUpdateDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyMemberStatusUpdateDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyMemberStatusUpdateDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyMemberStatusUpdateDelegate_Parameters : BaseObject {
        public AddLobbyMemberStatusUpdateDelegate_Parameters() { }
        public AddLobbyMemberStatusUpdateDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyMemberStatusUpdateDelegate.LobbyMemberStatusUpdateDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyMemberStatusUpdateDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyMemberStatusUpdateDelegate;
    public void AddLobbyMemberStatusUpdateDelegate(FScriptDelegate LobbyMemberStatusUpdateDelegate) {
        _ptrAddLobbyMemberStatusUpdateDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyMemberStatusUpdateDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyMemberStatusUpdateDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyMemberStatusUpdateDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberStatusUpdateDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbyMemberStatusUpdateDelegates_Parameters : BaseObject {
        public TriggerLobbyMemberStatusUpdateDelegates_Parameters() { }
        public TriggerLobbyMemberStatusUpdateDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberStatusUpdateDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberStatusUpdateDelegates.MemberIndex
        // 0x4 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberStatusUpdateDelegates.InstigatorIndex
        // 0x8 (0x4)
        // (Param)
        public int InstigatorIndex {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberStatusUpdateDelegates.Status
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Status {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrTriggerLobbyMemberStatusUpdateDelegates;
    public void TriggerLobbyMemberStatusUpdateDelegates(int LobbyIndex, int MemberIndex, int InstigatorIndex, FString Status) {
        _ptrTriggerLobbyMemberStatusUpdateDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberStatusUpdateDelegates");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&InstigatorIndex, @params + 8, 4, 4);
        System.Buffer.MemoryCopy((void*)Status.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrTriggerLobbyMemberStatusUpdateDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberStatusUpdate
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyMemberStatusUpdate_Parameters : BaseObject {
        public OnLobbyMemberStatusUpdate_Parameters() { }
        public OnLobbyMemberStatusUpdate_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberStatusUpdate.LobbyInfo
        // 0x0 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberStatusUpdate.MemberIndex
        // 0x30 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberStatusUpdate.InstigatorIndex
        // 0x34 (0x4)
        // (Param)
        public int InstigatorIndex {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberStatusUpdate.Status
        // 0x38 (0x10)
        // (Param | NeedCtorLink)
        public FString Status {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrOnLobbyMemberStatusUpdate;
    public void OnLobbyMemberStatusUpdate(ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, int MemberIndex, int InstigatorIndex, FString Status) {
        _ptrOnLobbyMemberStatusUpdate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberStatusUpdate");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params, 48, 48);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&InstigatorIndex, @params + 52, 4, 4);
        System.Buffer.MemoryCopy((void*)Status.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrOnLobbyMemberStatusUpdate, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyMemberSettingsUpdateDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbyMemberSettingsUpdateDelegate_Parameters : BaseObject {
        public ClearLobbyMemberSettingsUpdateDelegate_Parameters() { }
        public ClearLobbyMemberSettingsUpdateDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyMemberSettingsUpdateDelegate.LobbyMemberSettingsUpdateDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyMemberSettingsUpdateDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbyMemberSettingsUpdateDelegate;
    public void ClearLobbyMemberSettingsUpdateDelegate(FScriptDelegate LobbyMemberSettingsUpdateDelegate) {
        _ptrClearLobbyMemberSettingsUpdateDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbyMemberSettingsUpdateDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyMemberSettingsUpdateDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbyMemberSettingsUpdateDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyMemberSettingsUpdateDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbyMemberSettingsUpdateDelegate_Parameters : BaseObject {
        public AddLobbyMemberSettingsUpdateDelegate_Parameters() { }
        public AddLobbyMemberSettingsUpdateDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbyMemberSettingsUpdateDelegate.LobbyMemberSettingsUpdateDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbyMemberSettingsUpdateDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbyMemberSettingsUpdateDelegate;
    public void AddLobbyMemberSettingsUpdateDelegate(FScriptDelegate LobbyMemberSettingsUpdateDelegate) {
        _ptrAddLobbyMemberSettingsUpdateDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbyMemberSettingsUpdateDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbyMemberSettingsUpdateDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbyMemberSettingsUpdateDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberSettingsUpdateDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbyMemberSettingsUpdateDelegates_Parameters : BaseObject {
        public TriggerLobbyMemberSettingsUpdateDelegates_Parameters() { }
        public TriggerLobbyMemberSettingsUpdateDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberSettingsUpdateDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberSettingsUpdateDelegates.MemberIndex
        // 0x4 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrTriggerLobbyMemberSettingsUpdateDelegates;
    public void TriggerLobbyMemberSettingsUpdateDelegates(int LobbyIndex, int MemberIndex) {
        _ptrTriggerLobbyMemberSettingsUpdateDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbyMemberSettingsUpdateDelegates");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 4, 4, 4);

        ProcessEvent(_ptrTriggerLobbyMemberSettingsUpdateDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberSettingsUpdate
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbyMemberSettingsUpdate_Parameters : BaseObject {
        public OnLobbyMemberSettingsUpdate_Parameters() { }
        public OnLobbyMemberSettingsUpdate_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberSettingsUpdate.LobbyInfo
        // 0x0 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberSettingsUpdate.MemberIndex
        // 0x30 (0x4)
        // (Param)
        public int MemberIndex {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrOnLobbyMemberSettingsUpdate;
    public void OnLobbyMemberSettingsUpdate(ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, int MemberIndex) {
        _ptrOnLobbyMemberSettingsUpdate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbyMemberSettingsUpdate");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params, 48, 48);
        System.Buffer.MemoryCopy(&MemberIndex, @params + 48, 4, 4);

        ProcessEvent(_ptrOnLobbyMemberSettingsUpdate, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySettingsUpdateDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearLobbySettingsUpdateDelegate_Parameters : BaseObject {
        public ClearLobbySettingsUpdateDelegate_Parameters() { }
        public ClearLobbySettingsUpdateDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySettingsUpdateDelegate.LobbySettingsUpdateDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbySettingsUpdateDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearLobbySettingsUpdateDelegate;
    public void ClearLobbySettingsUpdateDelegate(FScriptDelegate LobbySettingsUpdateDelegate) {
        _ptrClearLobbySettingsUpdateDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearLobbySettingsUpdateDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbySettingsUpdateDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearLobbySettingsUpdateDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbySettingsUpdateDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddLobbySettingsUpdateDelegate_Parameters : BaseObject {
        public AddLobbySettingsUpdateDelegate_Parameters() { }
        public AddLobbySettingsUpdateDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddLobbySettingsUpdateDelegate.LobbySettingsUpdateDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate LobbySettingsUpdateDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddLobbySettingsUpdateDelegate;
    public void AddLobbySettingsUpdateDelegate(FScriptDelegate LobbySettingsUpdateDelegate) {
        _ptrAddLobbySettingsUpdateDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddLobbySettingsUpdateDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)LobbySettingsUpdateDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddLobbySettingsUpdateDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbySettingsUpdateDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerLobbySettingsUpdateDelegates_Parameters : BaseObject {
        public TriggerLobbySettingsUpdateDelegates_Parameters() { }
        public TriggerLobbySettingsUpdateDelegates_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbySettingsUpdateDelegates.LobbyIndex
        // 0x0 (0x4)
        // (Param)
        public int LobbyIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrTriggerLobbySettingsUpdateDelegates;
    public void TriggerLobbySettingsUpdateDelegates(int LobbyIndex) {
        _ptrTriggerLobbySettingsUpdateDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerLobbySettingsUpdateDelegates");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&LobbyIndex, @params, 4, 4);

        ProcessEvent(_ptrTriggerLobbySettingsUpdateDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbySettingsUpdate
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnLobbySettingsUpdate_Parameters : BaseObject {
        public OnLobbySettingsUpdate_Parameters() { }
        public OnLobbySettingsUpdate_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnLobbySettingsUpdate.LobbyInfo
        // 0x0 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }
    }
    private static UFunction _ptrOnLobbySettingsUpdate;
    public void OnLobbySettingsUpdate(ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo) {
        _ptrOnLobbySettingsUpdate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnLobbySettingsUpdate");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params, 48, 48);

        ProcessEvent(_ptrOnLobbySettingsUpdate, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyUserSetting
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class SetLobbyUserSetting_Parameters : BaseObject {
        public SetLobbyUserSetting_Parameters() { }
        public SetLobbyUserSetting_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyUserSetting.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyUserSetting.Key
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyUserSetting.Value
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.SetLobbyUserSetting.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetLobbyUserSetting;
    public bool SetLobbyUserSetting(ref UOnlineSubsystem.FUniqueLobbyId LobbyId, FString Key, FString Value) {
        _ptrSetLobbyUserSetting ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.SetLobbyUserSetting");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrSetLobbyUserSetting, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 48);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.LeaveLobby
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class LeaveLobby_Parameters : BaseObject {
        public LeaveLobby_Parameters() { }
        public LeaveLobby_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.LeaveLobby.LobbyId
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.LeaveLobby.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLeaveLobby;
    public bool LeaveLobby(ref UOnlineSubsystem.FUniqueLobbyId LobbyId) {
        _ptrLeaveLobby ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.LeaveLobby");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrLeaveLobby, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearJoinLobbyCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearJoinLobbyCompleteDelegate_Parameters : BaseObject {
        public ClearJoinLobbyCompleteDelegate_Parameters() { }
        public ClearJoinLobbyCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearJoinLobbyCompleteDelegate.JoinLobbyCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate JoinLobbyCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearJoinLobbyCompleteDelegate;
    public void ClearJoinLobbyCompleteDelegate(FScriptDelegate JoinLobbyCompleteDelegate) {
        _ptrClearJoinLobbyCompleteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearJoinLobbyCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)JoinLobbyCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearJoinLobbyCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddJoinLobbyCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddJoinLobbyCompleteDelegate_Parameters : BaseObject {
        public AddJoinLobbyCompleteDelegate_Parameters() { }
        public AddJoinLobbyCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddJoinLobbyCompleteDelegate.JoinLobbyCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate JoinLobbyCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddJoinLobbyCompleteDelegate;
    public void AddJoinLobbyCompleteDelegate(FScriptDelegate JoinLobbyCompleteDelegate) {
        _ptrAddJoinLobbyCompleteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddJoinLobbyCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)JoinLobbyCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddJoinLobbyCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerJoinLobbyCompleteDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public | HasOutParams)
    public unsafe class TriggerJoinLobbyCompleteDelegates_Parameters : BaseObject {
        public TriggerJoinLobbyCompleteDelegates_Parameters() { }
        public TriggerJoinLobbyCompleteDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerJoinLobbyCompleteDelegates.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerJoinLobbyCompleteDelegates.LobbyInfo
        // 0x8 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 48, 48);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerJoinLobbyCompleteDelegates.LobbyUID
        // 0x38 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyUID {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerJoinLobbyCompleteDelegates.Error
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrTriggerJoinLobbyCompleteDelegates;
    public void TriggerJoinLobbyCompleteDelegates(bool bWasSuccessful, ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, ref UOnlineSubsystem.FUniqueLobbyId LobbyUID, FString Error) {
        _ptrTriggerJoinLobbyCompleteDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerJoinLobbyCompleteDelegates");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params + 8, 48, 48);
        System.Buffer.MemoryCopy((void*)LobbyUID.Pointer, @params + 56, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrTriggerJoinLobbyCompleteDelegates, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params + 8, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
        var _LobbyUIDPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_LobbyUIDPtr, 16, 16);
        LobbyUID = new(_LobbyUIDPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnJoinLobbyComplete
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnJoinLobbyComplete_Parameters : BaseObject {
        public OnJoinLobbyComplete_Parameters() { }
        public OnJoinLobbyComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.OnJoinLobbyComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnJoinLobbyComplete.LobbyInfo
        // 0x8 (0x30)
        // (Const | Param | OutParam | NeedCtorLink)
        public UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 48, 48);
        }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnJoinLobbyComplete.LobbyUID
        // 0x38 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyUID {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnJoinLobbyComplete.Error
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnJoinLobbyComplete;
    public void OnJoinLobbyComplete(bool bWasSuccessful, ref UOnlineLobbySettings.FActiveLobbyInfo LobbyInfo, ref UOnlineSubsystem.FUniqueLobbyId LobbyUID, FString Error) {
        _ptrOnJoinLobbyComplete ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnJoinLobbyComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)LobbyInfo.Pointer, @params + 8, 48, 48);
        System.Buffer.MemoryCopy((void*)LobbyUID.Pointer, @params + 56, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnJoinLobbyComplete, @params);

        var _LobbyInfoPtr = Marshal.AllocHGlobal(48);
        System.Buffer.MemoryCopy(@params + 8, (void*)_LobbyInfoPtr, 48, 48);
        LobbyInfo = new(_LobbyInfoPtr) { Allocated = true };
        var _LobbyUIDPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_LobbyUIDPtr, 16, 16);
        LobbyUID = new(_LobbyUIDPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.JoinLobby
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class JoinLobby_Parameters : BaseObject {
        public JoinLobby_Parameters() { }
        public JoinLobby_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.JoinLobby.LocalPlayerNum
        // 0x0 (0x4)
        // (Param)
        public int LocalPlayerNum {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.JoinLobby.LobbyId
        // 0x8 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.JoinLobby.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrJoinLobby;
    public bool JoinLobby(int LocalPlayerNum, ref UOnlineSubsystem.FUniqueLobbyId LobbyId) {
        _ptrJoinLobby ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.JoinLobby");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&LocalPlayerNum, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrJoinLobby, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearFindLobbiesCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearFindLobbiesCompleteDelegate_Parameters : BaseObject {
        public ClearFindLobbiesCompleteDelegate_Parameters() { }
        public ClearFindLobbiesCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearFindLobbiesCompleteDelegate.FindLobbiesCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate FindLobbiesCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearFindLobbiesCompleteDelegate;
    public void ClearFindLobbiesCompleteDelegate(FScriptDelegate FindLobbiesCompleteDelegate) {
        _ptrClearFindLobbiesCompleteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearFindLobbiesCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)FindLobbiesCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearFindLobbiesCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddFindLobbiesCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddFindLobbiesCompleteDelegate_Parameters : BaseObject {
        public AddFindLobbiesCompleteDelegate_Parameters() { }
        public AddFindLobbiesCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddFindLobbiesCompleteDelegate.FindLobbiesCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate FindLobbiesCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddFindLobbiesCompleteDelegate;
    public void AddFindLobbiesCompleteDelegate(FScriptDelegate FindLobbiesCompleteDelegate) {
        _ptrAddFindLobbiesCompleteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddFindLobbiesCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)FindLobbiesCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddFindLobbiesCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.TriggerFindLobbiesCompleteDelegates
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class TriggerFindLobbiesCompleteDelegates_Parameters : BaseObject {
        public TriggerFindLobbiesCompleteDelegates_Parameters() { }
        public TriggerFindLobbiesCompleteDelegates_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.TriggerFindLobbiesCompleteDelegates.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrTriggerFindLobbiesCompleteDelegates;
    public void TriggerFindLobbiesCompleteDelegates(bool bWasSuccessful) {
        _ptrTriggerFindLobbiesCompleteDelegates ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.TriggerFindLobbiesCompleteDelegates");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);

        ProcessEvent(_ptrTriggerFindLobbiesCompleteDelegates, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnFindLobbiesComplete
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnFindLobbiesComplete_Parameters : BaseObject {
        public OnFindLobbiesComplete_Parameters() { }
        public OnFindLobbiesComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.OnFindLobbiesComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.OnFindLobbiesComplete.LobbyList
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UOnlineLobbySettings.FBasicLobbyInfo> LobbyList {
            get => new(Pointer + 8, 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnFindLobbiesComplete;
    public void OnFindLobbiesComplete(bool bWasSuccessful, ref StructTArray<UOnlineLobbySettings.FBasicLobbyInfo> LobbyList) {
        _ptrOnFindLobbiesComplete ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnFindLobbiesComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)LobbyList.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnFindLobbiesComplete, @params);

        var _LobbyListPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_LobbyListPtr, 16, 16);
        LobbyList = new(_LobbyListPtr, 32) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.UpdateFoundLobbies
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class UpdateFoundLobbies_Parameters : BaseObject {
        public UpdateFoundLobbies_Parameters() { }
        public UpdateFoundLobbies_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.UpdateFoundLobbies.LobbyId
        // 0x0 (0x10)
        // (OptionalParam | Param)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.UpdateFoundLobbies.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUpdateFoundLobbies;
    public bool UpdateFoundLobbies(UOnlineSubsystem.FUniqueLobbyId LobbyId = null) {
        _ptrUpdateFoundLobbies ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.UpdateFoundLobbies");

        var @params = stackalloc byte[20];
        if (LobbyId != null) System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrUpdateFoundLobbies, @params);

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.FindLobbies
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class FindLobbies_Parameters : BaseObject {
        public FindLobbies_Parameters() { }
        public FindLobbies_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbies.MaxResults
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public int MaxResults {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbies.Filters
        // 0x8 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public StructTArray<UOnlineLobbySettings.FLobbyFilter> Filters {
            get => new(Pointer + 8, 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbies.SortFilters
        // 0x18 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public StructTArray<UOnlineLobbySettings.FLobbySortFilter> SortFilters {
            get => new(Pointer + 24, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbies.MinSlots
        // 0x28 (0x4)
        // (OptionalParam | Param)
        public int MinSlots {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbies.Distance
        // 0x2C (0x1)
        // (OptionalParam | Param)
        public UOnlineLobbySettings.ELobbyDistance Distance {
            get => *(UOnlineLobbySettings.ELobbyDistance*)(Pointer + 44);
            set => *(UOnlineLobbySettings.ELobbyDistance*)(Pointer + 44) = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.FindLobbies.ReturnValue
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFindLobbies;
    public bool FindLobbies(int MaxResults = 0, StructTArray<UOnlineLobbySettings.FLobbyFilter> Filters = null, StructTArray<UOnlineLobbySettings.FLobbySortFilter> SortFilters = null, int MinSlots = 0, UOnlineLobbySettings.ELobbyDistance Distance = 0) {
        _ptrFindLobbies ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.FindLobbies");

        var @params = stackalloc byte[45];
        System.Buffer.MemoryCopy(&MaxResults, @params, 4, 4);
        if (Filters != null) System.Buffer.MemoryCopy((void*)Filters.Pointer, @params + 8, 16, 16);
        if (SortFilters != null) System.Buffer.MemoryCopy((void*)SortFilters.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy(&MinSlots, @params + 40, 4, 4);
        System.Buffer.MemoryCopy(&Distance, @params + 44, 1, 1);

        ProcessEvent(_ptrFindLobbies, @params);

        return *(bool*)(@params + 48);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.ClearCreateLobbyCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearCreateLobbyCompleteDelegate_Parameters : BaseObject {
        public ClearCreateLobbyCompleteDelegate_Parameters() { }
        public ClearCreateLobbyCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.ClearCreateLobbyCompleteDelegate.CreateLobbyCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate CreateLobbyCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearCreateLobbyCompleteDelegate;
    public void ClearCreateLobbyCompleteDelegate(FScriptDelegate CreateLobbyCompleteDelegate) {
        _ptrClearCreateLobbyCompleteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.ClearCreateLobbyCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CreateLobbyCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearCreateLobbyCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.AddCreateLobbyCompleteDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddCreateLobbyCompleteDelegate_Parameters : BaseObject {
        public AddCreateLobbyCompleteDelegate_Parameters() { }
        public AddCreateLobbyCompleteDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlineLobbyInterfaceImpl.AddCreateLobbyCompleteDelegate.CreateLobbyCompleteDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate CreateLobbyCompleteDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddCreateLobbyCompleteDelegate;
    public void AddCreateLobbyCompleteDelegate(FScriptDelegate CreateLobbyCompleteDelegate) {
        _ptrAddCreateLobbyCompleteDelegate ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.AddCreateLobbyCompleteDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CreateLobbyCompleteDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddCreateLobbyCompleteDelegate, @params);
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.OnCreateLobbyComplete
    // 0x3750E0
    // (Final | Public | Delegate | HasOutParams)
    public unsafe class OnCreateLobbyComplete_Parameters : BaseObject {
        public OnCreateLobbyComplete_Parameters() { }
        public OnCreateLobbyComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.OnCreateLobbyComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.OnlineLobbyInterfaceImpl.OnCreateLobbyComplete.LobbyId
        // 0x8 (0x10)
        // (Const | Param | OutParam)
        public UOnlineSubsystem.FUniqueLobbyId LobbyId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.OnlineLobbyInterfaceImpl.OnCreateLobbyComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnCreateLobbyComplete;
    public void OnCreateLobbyComplete(bool bWasSuccessful, ref UOnlineSubsystem.FUniqueLobbyId LobbyId, FString Error) {
        _ptrOnCreateLobbyComplete ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.OnCreateLobbyComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)LobbyId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnCreateLobbyComplete, @params);

        var _LobbyIdPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_LobbyIdPtr, 16, 16);
        LobbyId = new(_LobbyIdPtr) { Allocated = true };
    }

    // Function IpDrv.OnlineLobbyInterfaceImpl.CreateLobby
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class CreateLobby_Parameters : BaseObject {
        public CreateLobby_Parameters() { }
        public CreateLobby_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.CreateLobby.LocalPlayerNum
        // 0x0 (0x4)
        // (Param)
        public int LocalPlayerNum {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlineLobbyInterfaceImpl.CreateLobby.MaxPlayers
        // 0x4 (0x4)
        // (Param)
        public int MaxPlayers {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // ByteProperty IpDrv.OnlineLobbyInterfaceImpl.CreateLobby.Type
        // 0x8 (0x1)
        // (OptionalParam | Param)
        public UOnlineLobbySettings.ELobbyVisibility Type {
            get => *(UOnlineLobbySettings.ELobbyVisibility*)(Pointer + 8);
            set => *(UOnlineLobbySettings.ELobbyVisibility*)(Pointer + 8) = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.OnlineLobbyInterfaceImpl.CreateLobby.InitialSettings
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public StructTArray<UOnlineLobbySettings.FLobbyMetaData> InitialSettings {
            get => new(Pointer + 16, 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.OnlineLobbyInterfaceImpl.CreateLobby.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCreateLobby;
    public bool CreateLobby(int LocalPlayerNum, int MaxPlayers, UOnlineLobbySettings.ELobbyVisibility Type = 0, StructTArray<UOnlineLobbySettings.FLobbyMetaData> InitialSettings = null) {
        _ptrCreateLobby ??= FindFunction("Function IpDrv.OnlineLobbyInterfaceImpl.CreateLobby");

        var @params = stackalloc byte[29];
        System.Buffer.MemoryCopy(&LocalPlayerNum, @params, 4, 4);
        System.Buffer.MemoryCopy(&MaxPlayers, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Type, @params + 8, 1, 1);
        if (InitialSettings != null) System.Buffer.MemoryCopy((void*)InitialSettings.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCreateLobby, @params);

        return *(bool*)(@params + 32);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlineLobbyInterfaceImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlinePersistentAuthInterfaceImpl
// 0x58 (0x60 - 0xB8)
// (Compiled | Parsed | Native)
public unsafe partial class UOnlinePersistentAuthInterfaceImpl : UObject {
    public UOnlinePersistentAuthInterfaceImpl() { }
    public UOnlinePersistentAuthInterfaceImpl(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.OnlinePersistentAuthInterfaceImpl.VfTable_IOnlinePersistentAuthInterface
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_IOnlinePersistentAuthInterface {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // ArrayProperty IpDrv.OnlinePersistentAuthInterfaceImpl.RequestPinGrantCodeDelegates
    // 0x68 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> RequestPinGrantCodeDelegates {
        get => new(Pointer + 104, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }

    // ArrayProperty IpDrv.OnlinePersistentAuthInterfaceImpl.UnderageUserDetectedDelegates
    // 0x78 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptDelegate> UnderageUserDetectedDelegates {
        get => new(Pointer + 120, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.OnlinePersistentAuthInterfaceImpl.__OnReceievedPinGrantCode__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReceievedPinGrantCode__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty IpDrv.OnlinePersistentAuthInterfaceImpl.__OnUnderageUserDetected__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnUnderageUserDetected__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }


    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.AuthWithNintendoAccountToken
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class AuthWithNintendoAccountToken_Parameters : BaseObject {
        public AuthWithNintendoAccountToken_Parameters() { }
        public AuthWithNintendoAccountToken_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.AuthWithNintendoAccountToken.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.AuthWithNintendoAccountToken.NintendoAccountToken
        // 0x8 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public FString NintendoAccountToken {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlinePersistentAuthInterfaceImpl.AuthWithNintendoAccountToken.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAuthWithNintendoAccountToken;
    public bool AuthWithNintendoAccountToken(byte LocalUserNum, ref FString NintendoAccountToken) {
        _ptrAuthWithNintendoAccountToken ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.AuthWithNintendoAccountToken");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)NintendoAccountToken.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrAuthWithNintendoAccountToken, @params);

        var _NintendoAccountTokenPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_NintendoAccountTokenPtr, 16, 16);
        NintendoAccountToken = new(_NintendoAccountTokenPtr) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetTimeUntilAuthExpiration
    // 0x3750E0
    // (Public)
    public unsafe class GetTimeUntilAuthExpiration_Parameters : BaseObject {
        public GetTimeUntilAuthExpiration_Parameters() { }
        public GetTimeUntilAuthExpiration_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetTimeUntilAuthExpiration.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // QWordProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetTimeUntilAuthExpiration.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public ulong ReturnValue {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGetTimeUntilAuthExpiration;
    public ulong GetTimeUntilAuthExpiration(byte LocalUserNum) {
        _ptrGetTimeUntilAuthExpiration ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetTimeUntilAuthExpiration");

        var @params = stackalloc byte[9];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrGetTimeUntilAuthExpiration, @params);

        return *(ulong*)(@params + 8);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetAuthExpirationTimestamp
    // 0x3750E0
    // (Public)
    public unsafe class GetAuthExpirationTimestamp_Parameters : BaseObject {
        public GetAuthExpirationTimestamp_Parameters() { }
        public GetAuthExpirationTimestamp_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetAuthExpirationTimestamp.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // ObjectProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetAuthExpirationTimestamp.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UDateTime ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetAuthExpirationTimestamp;
    public UDateTime GetAuthExpirationTimestamp(byte LocalUserNum) {
        _ptrGetAuthExpirationTimestamp ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetAuthExpirationTimestamp");

        var @params = stackalloc byte[9];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrGetAuthExpirationTimestamp, @params);

        return new(*(nint*)(@params + 8));
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.LaunchAccountPortal
    // 0x3750E0
    // (Public)
    public unsafe class LaunchAccountPortal_Parameters : BaseObject {
        public LaunchAccountPortal_Parameters() { }
        public LaunchAccountPortal_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.LaunchAccountPortal.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlinePersistentAuthInterfaceImpl.LaunchAccountPortal.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLaunchAccountPortal;
    public bool LaunchAccountPortal(byte LocalUserNum) {
        _ptrLaunchAccountPortal ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.LaunchAccountPortal");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrLaunchAccountPortal, @params);

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientSecret
    // 0x3750E0
    // (Public)
    public unsafe class GetClientSecret_Parameters : BaseObject {
        public GetClientSecret_Parameters() { }
        public GetClientSecret_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientSecret.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetClientSecret;
    public FString GetClientSecret() {
        _ptrGetClientSecret ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientSecret");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetClientSecret, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientID
    // 0x3750E0
    // (Public)
    public unsafe class GetClientID_Parameters : BaseObject {
        public GetClientID_Parameters() { }
        public GetClientID_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientID.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetClientID;
    public FString GetClientID() {
        _ptrGetClientID ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientID");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetClientID, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientCredentials
    // 0x3750E0
    // (Public)
    public unsafe class GetClientCredentials_Parameters : BaseObject {
        public GetClientCredentials_Parameters() { }
        public GetClientCredentials_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientCredentials.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetClientCredentials;
    public FString GetClientCredentials() {
        _ptrGetClientCredentials ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetClientCredentials");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetClientCredentials, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetContinuanceToken
    // 0x3750E0
    // (Public)
    public unsafe class GetContinuanceToken_Parameters : BaseObject {
        public GetContinuanceToken_Parameters() { }
        public GetContinuanceToken_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetContinuanceToken.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetContinuanceToken.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetContinuanceToken;
    public FString GetContinuanceToken(byte LocalUserNum) {
        _ptrGetContinuanceToken ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetContinuanceToken");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrGetContinuanceToken, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.UseRefreshToken
    // 0x3750E0
    // (Public)
    public unsafe class UseRefreshToken_Parameters : BaseObject {
        public UseRefreshToken_Parameters() { }
        public UseRefreshToken_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.UseRefreshToken.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.UseRefreshToken.RefreshToken
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString RefreshToken {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.OnlinePersistentAuthInterfaceImpl.UseRefreshToken.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrUseRefreshToken;
    public bool UseRefreshToken(byte LocalUserNum, FString RefreshToken) {
        _ptrUseRefreshToken ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.UseRefreshToken");

        var @params = stackalloc byte[21];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)RefreshToken.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrUseRefreshToken, @params);

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetRefreshToken
    // 0x3750E0
    // (Public)
    public unsafe class GetRefreshToken_Parameters : BaseObject {
        public GetRefreshToken_Parameters() { }
        public GetRefreshToken_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetRefreshToken.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.GetRefreshToken.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetRefreshToken;
    public FString GetRefreshToken(byte LocalUserNum) {
        _ptrGetRefreshToken ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.GetRefreshToken");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrGetRefreshToken, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.RequestPinGrantCode
    // 0x3750E0
    // (Public)
    public unsafe class RequestPinGrantCode_Parameters : BaseObject {
        public RequestPinGrantCode_Parameters() { }
        public RequestPinGrantCode_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.RequestPinGrantCode.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // BoolProperty IpDrv.OnlinePersistentAuthInterfaceImpl.RequestPinGrantCode.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestPinGrantCode;
    public bool RequestPinGrantCode(byte LocalUserNum) {
        _ptrRequestPinGrantCode ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.RequestPinGrantCode");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);

        ProcessEvent(_ptrRequestPinGrantCode, @params);

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.ClearUnderageUserDetectedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearUnderageUserDetectedDelegate_Parameters : BaseObject {
        public ClearUnderageUserDetectedDelegate_Parameters() { }
        public ClearUnderageUserDetectedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlinePersistentAuthInterfaceImpl.ClearUnderageUserDetectedDelegate.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearUnderageUserDetectedDelegate;
    public void ClearUnderageUserDetectedDelegate(FScriptDelegate Callback) {
        _ptrClearUnderageUserDetectedDelegate ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.ClearUnderageUserDetectedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearUnderageUserDetectedDelegate, @params);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.AddUnderageUserDetectedDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddUnderageUserDetectedDelegate_Parameters : BaseObject {
        public AddUnderageUserDetectedDelegate_Parameters() { }
        public AddUnderageUserDetectedDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlinePersistentAuthInterfaceImpl.AddUnderageUserDetectedDelegate.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddUnderageUserDetectedDelegate;
    public void AddUnderageUserDetectedDelegate(FScriptDelegate Callback) {
        _ptrAddUnderageUserDetectedDelegate ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.AddUnderageUserDetectedDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddUnderageUserDetectedDelegate, @params);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.OnUnderageUserDetected
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnUnderageUserDetected_Parameters : BaseObject {
        public OnUnderageUserDetected_Parameters() { }
        public OnUnderageUserDetected_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnUnderageUserDetected.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnUnderageUserDetected.ParentalConsentURL
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString ParentalConsentURL {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnUnderageUserDetected;
    public void OnUnderageUserDetected(byte LocalUserNum, FString ParentalConsentURL) {
        _ptrOnUnderageUserDetected ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.OnUnderageUserDetected");

        var @params = stackalloc byte[17];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)ParentalConsentURL.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnUnderageUserDetected, @params);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.ClearRequestPinGrantCodeDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ClearRequestPinGrantCodeDelegate_Parameters : BaseObject {
        public ClearRequestPinGrantCodeDelegate_Parameters() { }
        public ClearRequestPinGrantCodeDelegate_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.ClearRequestPinGrantCodeDelegate.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.OnlinePersistentAuthInterfaceImpl.ClearRequestPinGrantCodeDelegate.Callback
        // 0x8 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }
    private static UFunction _ptrClearRequestPinGrantCodeDelegate;
    public void ClearRequestPinGrantCodeDelegate(byte LocalUserNum, FScriptDelegate Callback) {
        _ptrClearRequestPinGrantCodeDelegate ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.ClearRequestPinGrantCodeDelegate");

        var @params = stackalloc byte[25];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 8, 24, 24);

        ProcessEvent(_ptrClearRequestPinGrantCodeDelegate, @params);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.AddRequestPinGrantCodeDelegate
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AddRequestPinGrantCodeDelegate_Parameters : BaseObject {
        public AddRequestPinGrantCodeDelegate_Parameters() { }
        public AddRequestPinGrantCodeDelegate_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.AddRequestPinGrantCodeDelegate.LocalUserNum
        // 0x0 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x7

        // DelegateProperty IpDrv.OnlinePersistentAuthInterfaceImpl.AddRequestPinGrantCodeDelegate.Callback
        // 0x8 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }
    private static UFunction _ptrAddRequestPinGrantCodeDelegate;
    public void AddRequestPinGrantCodeDelegate(byte LocalUserNum, FScriptDelegate Callback) {
        _ptrAddRequestPinGrantCodeDelegate ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.AddRequestPinGrantCodeDelegate");

        var @params = stackalloc byte[25];
        System.Buffer.MemoryCopy(&LocalUserNum, @params, 1, 1);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 8, 24, 24);

        ProcessEvent(_ptrAddRequestPinGrantCodeDelegate, @params);
    }

    // Function IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReceievedPinGrantCode_Parameters : BaseObject {
        public OnReceievedPinGrantCode_Parameters() { }
        public OnReceievedPinGrantCode_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode.Result
        // 0x0 (0x1)
        // (Param)
        public UOnlineSubsystem.EPinGrantResult Result {
            get => *(UOnlineSubsystem.EPinGrantResult*)Pointer;
            set => *(UOnlineSubsystem.EPinGrantResult*)Pointer = value;
        }

        // ByteProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode.LocalUserNum
        // 0x1 (0x1)
        // (Param)
        public byte LocalUserNum {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // MISSED OFFSET: 0x6

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode.Code
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Code {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode.URL
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // IntProperty IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode.SecondsUntilExpiration
        // 0x28 (0x4)
        // (Param)
        public int SecondsUntilExpiration {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }
    }
    private static UFunction _ptrOnReceievedPinGrantCode;
    public void OnReceievedPinGrantCode(UOnlineSubsystem.EPinGrantResult Result, byte LocalUserNum, FString Code, FString URL, int SecondsUntilExpiration) {
        _ptrOnReceievedPinGrantCode ??= FindFunction("Function IpDrv.OnlinePersistentAuthInterfaceImpl.OnReceievedPinGrantCode");

        var @params = stackalloc byte[38];
        System.Buffer.MemoryCopy(&Result, @params, 1, 1);
        System.Buffer.MemoryCopy(&LocalUserNum, @params + 1, 1, 1);
        System.Buffer.MemoryCopy((void*)Code.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy(&SecondsUntilExpiration, @params + 40, 4, 4);

        ProcessEvent(_ptrOnReceievedPinGrantCode, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlinePersistentAuthInterfaceImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlinePlaylistManager
// 0xE8 (0x60 - 0x148)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UOnlinePlaylistManager : UObject {
    public UOnlinePlaylistManager() { }
    public UOnlinePlaylistManager(nint pointer) : base(pointer) { }


    public const string PRIVATE_MATCH = "3";
    public const string REC_MATCH = "2";
    public const string RANKED_MATCH = "1";
    public const string PLAYER_MATCH = "0";


    // StructProperty IpDrv.OnlinePlaylistManager.VfTable_FTickableObject
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FTickableObject {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // ArrayProperty IpDrv.OnlinePlaylistManager.Playlists
    // 0x68 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FPlaylist> Playlists {
        get => new(Pointer + 104, 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }

    // ArrayProperty IpDrv.OnlinePlaylistManager.PlaylistFileNames
    // 0x78 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> PlaylistFileNames {
        get => new(Pointer + 120, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // ArrayProperty IpDrv.OnlinePlaylistManager.DatastoresToRefresh
    // 0x88 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FName> DatastoresToRefresh {
        get => new(Pointer + 136, 8);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 16, 16);
    }

    // IntProperty IpDrv.OnlinePlaylistManager.DownloadCount
    // 0x98 (0x4)
    public int DownloadCount {
        get => *(int*)(Pointer + 152);
        set => *(int*)(Pointer + 152) = value;
    }

    // IntProperty IpDrv.OnlinePlaylistManager.SuccessfulCount
    // 0x9C (0x4)
    public int SuccessfulCount {
        get => *(int*)(Pointer + 156);
        set => *(int*)(Pointer + 156) = value;
    }

    // IntProperty IpDrv.OnlinePlaylistManager.VersionNumber
    // 0xA0 (0x4)
    // (Config)
    public int VersionNumber {
        get => *(int*)(Pointer + 160);
        set => *(int*)(Pointer + 160) = value;
    }

    // MISSED OFFSET: 0x4

    // ArrayProperty IpDrv.OnlinePlaylistManager.PopulationData
    // 0xA8 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FPlaylistPopulation> PopulationData {
        get => new(Pointer + 168, 12);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // IntProperty IpDrv.OnlinePlaylistManager.WorldwideTotalPlayers
    // 0xB8 (0x4)
    public int WorldwideTotalPlayers {
        get => *(int*)(Pointer + 184);
        set => *(int*)(Pointer + 184) = value;
    }

    // IntProperty IpDrv.OnlinePlaylistManager.RegionTotalPlayers
    // 0xBC (0x4)
    public int RegionTotalPlayers {
        get => *(int*)(Pointer + 188);
        set => *(int*)(Pointer + 188) = value;
    }

    // InterfaceProperty IpDrv.OnlinePlaylistManager.TitleFileInterface
    // 0xC0 (0x10)
    // (Transient)
    public TInterface<UOnlineTitleFileInterface> TitleFileInterface {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 16, 16);
    }

    // StrProperty IpDrv.OnlinePlaylistManager.PopulationFileName
    // 0xD0 (0x10)
    // (NeedCtorLink)
    public FString PopulationFileName {
        get => new(Pointer + 208);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 16, 16);
    }

    // FloatProperty IpDrv.OnlinePlaylistManager.NextPlaylistPopulationUpdateTime
    // 0xE0 (0x4)
    // (Transient)
    public float NextPlaylistPopulationUpdateTime {
        get => *(float*)(Pointer + 224);
        set => *(float*)(Pointer + 224) = value;
    }

    // FloatProperty IpDrv.OnlinePlaylistManager.PlaylistPopulationUpdateInterval
    // 0xE4 (0x4)
    // (Config)
    public float PlaylistPopulationUpdateInterval {
        get => *(float*)(Pointer + 228);
        set => *(float*)(Pointer + 228) = value;
    }

    // IntProperty IpDrv.OnlinePlaylistManager.MinPlaylistIdToReport
    // 0xE8 (0x4)
    // (Config)
    public int MinPlaylistIdToReport {
        get => *(int*)(Pointer + 232);
        set => *(int*)(Pointer + 232) = value;
    }

    // IntProperty IpDrv.OnlinePlaylistManager.CurrentPlaylistId
    // 0xEC (0x4)
    // (Transient)
    public int CurrentPlaylistId {
        get => *(int*)(Pointer + 236);
        set => *(int*)(Pointer + 236) = value;
    }

    // NameProperty IpDrv.OnlinePlaylistManager.EventsInterfaceName
    // 0xF0 (0x8)
    // (Config)
    public FName EventsInterfaceName {
        get => new(Pointer + 240);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 240), 8, 8);
    }

    // IntProperty IpDrv.OnlinePlaylistManager.DataCenterId
    // 0xF8 (0x4)
    // (Config)
    public int DataCenterId {
        get => *(int*)(Pointer + 248);
        set => *(int*)(Pointer + 248) = value;
    }

    // MISSED OFFSET: 0x4

    // StrProperty IpDrv.OnlinePlaylistManager.DataCenterFileName
    // 0x100 (0x10)
    // (NeedCtorLink)
    public FString DataCenterFileName {
        get => new(Pointer + 256);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 16, 16);
    }

    // FloatProperty IpDrv.OnlinePlaylistManager.LastPlaylistDownloadTime
    // 0x110 (0x4)
    // (Transient)
    public float LastPlaylistDownloadTime {
        get => *(float*)(Pointer + 272);
        set => *(float*)(Pointer + 272) = value;
    }

    // FloatProperty IpDrv.OnlinePlaylistManager.PlaylistRefreshInterval
    // 0x114 (0x4)
    // (Config)
    public float PlaylistRefreshInterval {
        get => *(float*)(Pointer + 276);
        set => *(float*)(Pointer + 276) = value;
    }

    // DelegateProperty IpDrv.OnlinePlaylistManager.__OnReadPlaylistComplete__Delegate
    // 0x118 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReadPlaylistComplete__Delegate {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 24, 24);
    }

    // DelegateProperty IpDrv.OnlinePlaylistManager.__OnPlaylistPopulationDataUpdated__Delegate
    // 0x130 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnPlaylistPopulationDataUpdated__Delegate {
        get => new(Pointer + 304);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 304), 24, 24);
    }


    // Function IpDrv.OnlinePlaylistManager.ParseDataCenterId
    // 0xBABAD0
    // (Final | Native | Public | HasOutParams)
    public unsafe class ParseDataCenterId_Parameters : BaseObject {
        public ParseDataCenterId_Parameters() { }
        public ParseDataCenterId_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.OnlinePlaylistManager.ParseDataCenterId.Data
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Data {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrParseDataCenterId;
    public void ParseDataCenterId(ref UnmanagedTArray<byte> Data) {
        _ptrParseDataCenterId ??= FindFunction("Function IpDrv.OnlinePlaylistManager.ParseDataCenterId");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Data.Pointer, @params, 16, 16);

        _ptrParseDataCenterId.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrParseDataCenterId, @params);
        _ptrParseDataCenterId.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DataPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_DataPtr, 16, 16);
        Data = new(_DataPtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePlaylistManager.OnReadDataCenterIdComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnReadDataCenterIdComplete_Parameters : BaseObject {
        public OnReadDataCenterIdComplete_Parameters() { }
        public OnReadDataCenterIdComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlinePlaylistManager.OnReadDataCenterIdComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePlaylistManager.OnReadDataCenterIdComplete.Filename
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnReadDataCenterIdComplete;
    public void OnReadDataCenterIdComplete(bool bWasSuccessful, FString Filename) {
        _ptrOnReadDataCenterIdComplete ??= FindFunction("Function IpDrv.OnlinePlaylistManager.OnReadDataCenterIdComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnReadDataCenterIdComplete, @params);
    }

    // Function IpDrv.OnlinePlaylistManager.ReadDataCenterId
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ReadDataCenterId_Parameters : BaseObject {
        public ReadDataCenterId_Parameters() { }
        public ReadDataCenterId_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrReadDataCenterId;
    public void ReadDataCenterId() {
        _ptrReadDataCenterId ??= FindFunction("Function IpDrv.OnlinePlaylistManager.ReadDataCenterId");

        ProcessEvent(_ptrReadDataCenterId, null);
    }

    // Function IpDrv.OnlinePlaylistManager.SendPlaylistPopulationUpdate
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class SendPlaylistPopulationUpdate_Parameters : BaseObject {
        public SendPlaylistPopulationUpdate_Parameters() { }
        public SendPlaylistPopulationUpdate_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.SendPlaylistPopulationUpdate.NumPlayers
        // 0x0 (0x4)
        // (Param)
        public int NumPlayers {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrSendPlaylistPopulationUpdate;
    public void SendPlaylistPopulationUpdate(int NumPlayers) {
        _ptrSendPlaylistPopulationUpdate ??= FindFunction("Function IpDrv.OnlinePlaylistManager.SendPlaylistPopulationUpdate");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&NumPlayers, @params, 4, 4);

        ProcessEvent(_ptrSendPlaylistPopulationUpdate, @params);
    }

    // Function IpDrv.OnlinePlaylistManager.GetPopulationInfoFromPlaylist
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetPopulationInfoFromPlaylist_Parameters : BaseObject {
        public GetPopulationInfoFromPlaylist_Parameters() { }
        public GetPopulationInfoFromPlaylist_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetPopulationInfoFromPlaylist.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetPopulationInfoFromPlaylist.WorldwideTotal
        // 0x4 (0x4)
        // (Param | OutParam)
        public int WorldwideTotal {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetPopulationInfoFromPlaylist.RegionTotal
        // 0x8 (0x4)
        // (Param | OutParam)
        public int RegionTotal {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGetPopulationInfoFromPlaylist;
    public void GetPopulationInfoFromPlaylist(int PlaylistId, ref int WorldwideTotal, ref int RegionTotal) {
        _ptrGetPopulationInfoFromPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetPopulationInfoFromPlaylist");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        var _WorldwideTotal = WorldwideTotal;
        System.Buffer.MemoryCopy(&_WorldwideTotal, @params + 4, 4, 4);
        var _RegionTotal = RegionTotal;
        System.Buffer.MemoryCopy(&_RegionTotal, @params + 8, 4, 4);

        ProcessEvent(_ptrGetPopulationInfoFromPlaylist, @params);

        WorldwideTotal = *(int*)(@params + 4);
        RegionTotal = *(int*)(@params + 8);
    }

    // Function IpDrv.OnlinePlaylistManager.ParsePlaylistPopulationData
    // 0xBABA00
    // (Final | Native | Public | HasOutParams)
    public unsafe class ParsePlaylistPopulationData_Parameters : BaseObject {
        public ParsePlaylistPopulationData_Parameters() { }
        public ParsePlaylistPopulationData_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.OnlinePlaylistManager.ParsePlaylistPopulationData.Data
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Data {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrParsePlaylistPopulationData;
    public void ParsePlaylistPopulationData(ref UnmanagedTArray<byte> Data) {
        _ptrParsePlaylistPopulationData ??= FindFunction("Function IpDrv.OnlinePlaylistManager.ParsePlaylistPopulationData");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Data.Pointer, @params, 16, 16);

        _ptrParsePlaylistPopulationData.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrParsePlaylistPopulationData, @params);
        _ptrParsePlaylistPopulationData.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DataPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_DataPtr, 16, 16);
        Data = new(_DataPtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePlaylistManager.OnPlaylistPopulationDataUpdated
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnPlaylistPopulationDataUpdated_Parameters : BaseObject {
        public OnPlaylistPopulationDataUpdated_Parameters() { }
        public OnPlaylistPopulationDataUpdated_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnPlaylistPopulationDataUpdated;
    public void OnPlaylistPopulationDataUpdated() {
        _ptrOnPlaylistPopulationDataUpdated ??= FindFunction("Function IpDrv.OnlinePlaylistManager.OnPlaylistPopulationDataUpdated");

        ProcessEvent(_ptrOnPlaylistPopulationDataUpdated, null);
    }

    // Function IpDrv.OnlinePlaylistManager.OnReadPlaylistPopulationComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnReadPlaylistPopulationComplete_Parameters : BaseObject {
        public OnReadPlaylistPopulationComplete_Parameters() { }
        public OnReadPlaylistPopulationComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlinePlaylistManager.OnReadPlaylistPopulationComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePlaylistManager.OnReadPlaylistPopulationComplete.Filename
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnReadPlaylistPopulationComplete;
    public void OnReadPlaylistPopulationComplete(bool bWasSuccessful, FString Filename) {
        _ptrOnReadPlaylistPopulationComplete ??= FindFunction("Function IpDrv.OnlinePlaylistManager.OnReadPlaylistPopulationComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnReadPlaylistPopulationComplete, @params);
    }

    // Function IpDrv.OnlinePlaylistManager.ReadPlaylistPopulation
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ReadPlaylistPopulation_Parameters : BaseObject {
        public ReadPlaylistPopulation_Parameters() { }
        public ReadPlaylistPopulation_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrReadPlaylistPopulation;
    public void ReadPlaylistPopulation() {
        _ptrReadPlaylistPopulation ??= FindFunction("Function IpDrv.OnlinePlaylistManager.ReadPlaylistPopulation");

        ProcessEvent(_ptrReadPlaylistPopulation, null);
    }

    // Function IpDrv.OnlinePlaylistManager.Reset
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class Reset_Parameters : BaseObject {
        public Reset_Parameters() { }
        public Reset_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrReset;
    public void Reset() {
        _ptrReset ??= FindFunction("Function IpDrv.OnlinePlaylistManager.Reset");

        ProcessEvent(_ptrReset, null);
    }

    // Function IpDrv.OnlinePlaylistManager.GetContentIdsFromPlaylist
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetContentIdsFromPlaylist_Parameters : BaseObject {
        public GetContentIdsFromPlaylist_Parameters() { }
        public GetContentIdsFromPlaylist_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetContentIdsFromPlaylist.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlinePlaylistManager.GetContentIdsFromPlaylist.ContentIds
        // 0x8 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<int> ContentIds {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetContentIdsFromPlaylist;
    public void GetContentIdsFromPlaylist(int PlaylistId, ref UnmanagedTArray<int> ContentIds) {
        _ptrGetContentIdsFromPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetContentIdsFromPlaylist");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)ContentIds.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrGetContentIdsFromPlaylist, @params);

        var _ContentIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ContentIdsPtr, 16, 16);
        ContentIds = new(_ContentIdsPtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePlaylistManager.GetMapCycleFromPlaylist
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetMapCycleFromPlaylist_Parameters : BaseObject {
        public GetMapCycleFromPlaylist_Parameters() { }
        public GetMapCycleFromPlaylist_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetMapCycleFromPlaylist.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty IpDrv.OnlinePlaylistManager.GetMapCycleFromPlaylist.MapCycle
        // 0x8 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FName> MapCycle {
            get => new(Pointer + 8, 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetMapCycleFromPlaylist;
    public void GetMapCycleFromPlaylist(int PlaylistId, ref StructTArray<FName> MapCycle) {
        _ptrGetMapCycleFromPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetMapCycleFromPlaylist");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)MapCycle.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrGetMapCycleFromPlaylist, @params);

        var _MapCyclePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_MapCyclePtr, 16, 16);
        MapCycle = new(_MapCyclePtr, 8) { Allocated = true };
    }

    // Function IpDrv.OnlinePlaylistManager.GetUrlFromPlaylist
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetUrlFromPlaylist_Parameters : BaseObject {
        public GetUrlFromPlaylist_Parameters() { }
        public GetUrlFromPlaylist_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetUrlFromPlaylist.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePlaylistManager.GetUrlFromPlaylist.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetUrlFromPlaylist;
    public FString GetUrlFromPlaylist(int PlaylistId) {
        _ptrGetUrlFromPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetUrlFromPlaylist");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);

        ProcessEvent(_ptrGetUrlFromPlaylist, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePlaylistManager.GetMatchType
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetMatchType_Parameters : BaseObject {
        public GetMatchType_Parameters() { }
        public GetMatchType_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetMatchType.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetMatchType.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrGetMatchType;
    public int GetMatchType(int PlaylistId) {
        _ptrGetMatchType ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetMatchType");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);

        ProcessEvent(_ptrGetMatchType, @params);

        return *(int*)(@params + 4);
    }

    // Function IpDrv.OnlinePlaylistManager.IsPlaylistArbitrated
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class IsPlaylistArbitrated_Parameters : BaseObject {
        public IsPlaylistArbitrated_Parameters() { }
        public IsPlaylistArbitrated_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.IsPlaylistArbitrated.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // BoolProperty IpDrv.OnlinePlaylistManager.IsPlaylistArbitrated.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsPlaylistArbitrated;
    public bool IsPlaylistArbitrated(int PlaylistId) {
        _ptrIsPlaylistArbitrated ??= FindFunction("Function IpDrv.OnlinePlaylistManager.IsPlaylistArbitrated");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);

        ProcessEvent(_ptrIsPlaylistArbitrated, @params);

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.OnlinePlaylistManager.GetLoadBalanceIdFromPlaylist
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetLoadBalanceIdFromPlaylist_Parameters : BaseObject {
        public GetLoadBalanceIdFromPlaylist_Parameters() { }
        public GetLoadBalanceIdFromPlaylist_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetLoadBalanceIdFromPlaylist.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetLoadBalanceIdFromPlaylist.LoadBalanceId
        // 0x4 (0x4)
        // (Param | OutParam)
        public int LoadBalanceId {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrGetLoadBalanceIdFromPlaylist;
    public void GetLoadBalanceIdFromPlaylist(int PlaylistId, ref int LoadBalanceId) {
        _ptrGetLoadBalanceIdFromPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetLoadBalanceIdFromPlaylist");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        var _LoadBalanceId = LoadBalanceId;
        System.Buffer.MemoryCopy(&_LoadBalanceId, @params + 4, 4, 4);

        ProcessEvent(_ptrGetLoadBalanceIdFromPlaylist, @params);

        LoadBalanceId = *(int*)(@params + 4);
    }

    // Function IpDrv.OnlinePlaylistManager.GetTeamInfoFromPlaylist
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetTeamInfoFromPlaylist_Parameters : BaseObject {
        public GetTeamInfoFromPlaylist_Parameters() { }
        public GetTeamInfoFromPlaylist_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetTeamInfoFromPlaylist.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetTeamInfoFromPlaylist.TeamSize
        // 0x4 (0x4)
        // (Param | OutParam)
        public int TeamSize {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetTeamInfoFromPlaylist.TeamCount
        // 0x8 (0x4)
        // (Param | OutParam)
        public int TeamCount {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetTeamInfoFromPlaylist.MaxPartySize
        // 0xC (0x4)
        // (Param | OutParam)
        public int MaxPartySize {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrGetTeamInfoFromPlaylist;
    public void GetTeamInfoFromPlaylist(int PlaylistId, ref int TeamSize, ref int TeamCount, ref int MaxPartySize) {
        _ptrGetTeamInfoFromPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetTeamInfoFromPlaylist");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        var _TeamSize = TeamSize;
        System.Buffer.MemoryCopy(&_TeamSize, @params + 4, 4, 4);
        var _TeamCount = TeamCount;
        System.Buffer.MemoryCopy(&_TeamCount, @params + 8, 4, 4);
        var _MaxPartySize = MaxPartySize;
        System.Buffer.MemoryCopy(&_MaxPartySize, @params + 12, 4, 4);

        ProcessEvent(_ptrGetTeamInfoFromPlaylist, @params);

        TeamSize = *(int*)(@params + 4);
        TeamCount = *(int*)(@params + 8);
        MaxPartySize = *(int*)(@params + 12);
    }

    // Function IpDrv.OnlinePlaylistManager.PlaylistSupportsDedicatedServers
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class PlaylistSupportsDedicatedServers_Parameters : BaseObject {
        public PlaylistSupportsDedicatedServers_Parameters() { }
        public PlaylistSupportsDedicatedServers_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.PlaylistSupportsDedicatedServers.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // BoolProperty IpDrv.OnlinePlaylistManager.PlaylistSupportsDedicatedServers.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrPlaylistSupportsDedicatedServers;
    public bool PlaylistSupportsDedicatedServers(int PlaylistId) {
        _ptrPlaylistSupportsDedicatedServers ??= FindFunction("Function IpDrv.OnlinePlaylistManager.PlaylistSupportsDedicatedServers");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);

        ProcessEvent(_ptrPlaylistSupportsDedicatedServers, @params);

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.OnlinePlaylistManager.HasAnyGameSettings
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class HasAnyGameSettings_Parameters : BaseObject {
        public HasAnyGameSettings_Parameters() { }
        public HasAnyGameSettings_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.HasAnyGameSettings.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // BoolProperty IpDrv.OnlinePlaylistManager.HasAnyGameSettings.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrHasAnyGameSettings;
    public bool HasAnyGameSettings(int PlaylistId) {
        _ptrHasAnyGameSettings ??= FindFunction("Function IpDrv.OnlinePlaylistManager.HasAnyGameSettings");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);

        ProcessEvent(_ptrHasAnyGameSettings, @params);

        return *(bool*)(@params + 4);
    }

    // Function IpDrv.OnlinePlaylistManager.GetGameSettings
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetGameSettings_Parameters : BaseObject {
        public GetGameSettings_Parameters() { }
        public GetGameSettings_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.GetGameSettings.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.GetGameSettings.GameSettingsId
        // 0x4 (0x4)
        // (Param)
        public int GameSettingsId {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // ObjectProperty IpDrv.OnlinePlaylistManager.GetGameSettings.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UOnlineGameSettings ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetGameSettings;
    public UOnlineGameSettings GetGameSettings(int PlaylistId, int GameSettingsId) {
        _ptrGetGameSettings ??= FindFunction("Function IpDrv.OnlinePlaylistManager.GetGameSettings");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);
        System.Buffer.MemoryCopy(&GameSettingsId, @params + 4, 4, 4);

        ProcessEvent(_ptrGetGameSettings, @params);

        return new(*(nint*)(@params + 8));
    }

    // Function IpDrv.OnlinePlaylistManager.FinalizePlaylistObjects
    // 0xBAB9C0
    // (Final | Native | Public)
    public unsafe class FinalizePlaylistObjects_Parameters : BaseObject {
        public FinalizePlaylistObjects_Parameters() { }
        public FinalizePlaylistObjects_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrFinalizePlaylistObjects;
    public void FinalizePlaylistObjects() {
        _ptrFinalizePlaylistObjects ??= FindFunction("Function IpDrv.OnlinePlaylistManager.FinalizePlaylistObjects");

        _ptrFinalizePlaylistObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFinalizePlaylistObjects, null);
        _ptrFinalizePlaylistObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlinePlaylistManager.OnReadTitleFileComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnReadTitleFileComplete_Parameters : BaseObject {
        public OnReadTitleFileComplete_Parameters() { }
        public OnReadTitleFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlinePlaylistManager.OnReadTitleFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePlaylistManager.OnReadTitleFileComplete.Filename
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnReadTitleFileComplete;
    public void OnReadTitleFileComplete(bool bWasSuccessful, FString Filename) {
        _ptrOnReadTitleFileComplete ??= FindFunction("Function IpDrv.OnlinePlaylistManager.OnReadTitleFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnReadTitleFileComplete, @params);
    }

    // Function IpDrv.OnlinePlaylistManager.ShouldRefreshPlaylists
    // 0xBAB910
    // (Final | Native | Public)
    public unsafe class ShouldRefreshPlaylists_Parameters : BaseObject {
        public ShouldRefreshPlaylists_Parameters() { }
        public ShouldRefreshPlaylists_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlinePlaylistManager.ShouldRefreshPlaylists.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrShouldRefreshPlaylists;
    public bool ShouldRefreshPlaylists() {
        _ptrShouldRefreshPlaylists ??= FindFunction("Function IpDrv.OnlinePlaylistManager.ShouldRefreshPlaylists");

        var @params = stackalloc byte[4];

        _ptrShouldRefreshPlaylists.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrShouldRefreshPlaylists, @params);
        _ptrShouldRefreshPlaylists.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function IpDrv.OnlinePlaylistManager.DetermineFilesToDownload
    // 0xBAB8D0
    // (Final | Native | Public)
    public unsafe class DetermineFilesToDownload_Parameters : BaseObject {
        public DetermineFilesToDownload_Parameters() { }
        public DetermineFilesToDownload_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDetermineFilesToDownload;
    public void DetermineFilesToDownload() {
        _ptrDetermineFilesToDownload ??= FindFunction("Function IpDrv.OnlinePlaylistManager.DetermineFilesToDownload");

        _ptrDetermineFilesToDownload.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDetermineFilesToDownload, null);
        _ptrDetermineFilesToDownload.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.OnlinePlaylistManager.DownloadPlaylist
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class DownloadPlaylist_Parameters : BaseObject {
        public DownloadPlaylist_Parameters() { }
        public DownloadPlaylist_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDownloadPlaylist;
    public void DownloadPlaylist() {
        _ptrDownloadPlaylist ??= FindFunction("Function IpDrv.OnlinePlaylistManager.DownloadPlaylist");

        ProcessEvent(_ptrDownloadPlaylist, null);
    }

    // Function IpDrv.OnlinePlaylistManager.OnReadPlaylistComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReadPlaylistComplete_Parameters : BaseObject {
        public OnReadPlaylistComplete_Parameters() { }
        public OnReadPlaylistComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlinePlaylistManager.OnReadPlaylistComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnReadPlaylistComplete;
    public void OnReadPlaylistComplete(bool bWasSuccessful) {
        _ptrOnReadPlaylistComplete ??= FindFunction("Function IpDrv.OnlinePlaylistManager.OnReadPlaylistComplete");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);

        ProcessEvent(_ptrOnReadPlaylistComplete, @params);
    }


    // ScriptStruct IpDrv.OnlinePlaylistManager.PlaylistPopulation
    // 0xC
    public unsafe class FPlaylistPopulation : BaseObject {
        public FPlaylistPopulation() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FPlaylistPopulation(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.PlaylistPopulation.PlaylistId
        // 0x0 (0x4)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.PlaylistPopulation.WorldwideTotal
        // 0x4 (0x4)
        public int WorldwideTotal {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.PlaylistPopulation.RegionTotal
        // 0x8 (0x4)
        public int RegionTotal {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }

    // ScriptStruct IpDrv.OnlinePlaylistManager.Playlist
    // 0x80
    public unsafe class FPlaylist : BaseObject {
        public FPlaylist() {
            Pointer = Marshal.AllocHGlobal(128);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 128);
            Allocated = true;
        }
        public FPlaylist(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.OnlinePlaylistManager.Playlist.ConfiguredGames
        // 0x0 (0x10)
        // (NeedCtorLink)
        public StructTArray<FConfiguredGameSetting> ConfiguredGames {
            get => new(Pointer, 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.OnlinePlaylistManager.Playlist.PlaylistId
        // 0x10 (0x4)
        public int PlaylistId {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.Playlist.LoadBalanceId
        // 0x14 (0x4)
        public int LoadBalanceId {
            get => *(int*)(Pointer + 20);
            set => *(int*)(Pointer + 20) = value;
        }

        // StrProperty IpDrv.OnlinePlaylistManager.Playlist.LocalizationString
        // 0x18 (0x10)
        // (NeedCtorLink)
        public FString LocalizationString {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // ArrayProperty IpDrv.OnlinePlaylistManager.Playlist.ContentIds
        // 0x28 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<int> ContentIds {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }

        // IntProperty IpDrv.OnlinePlaylistManager.Playlist.TeamSize
        // 0x38 (0x4)
        public int TeamSize {
            get => *(int*)(Pointer + 56);
            set => *(int*)(Pointer + 56) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.Playlist.TeamCount
        // 0x3C (0x4)
        public int TeamCount {
            get => *(int*)(Pointer + 60);
            set => *(int*)(Pointer + 60) = value;
        }

        // IntProperty IpDrv.OnlinePlaylistManager.Playlist.MaxPartySize
        // 0x40 (0x4)
        public int MaxPartySize {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePlaylistManager.Playlist.Name
        // 0x48 (0x10)
        // (NeedCtorLink)
        public FString Name {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // StrProperty IpDrv.OnlinePlaylistManager.Playlist.URL
        // 0x58 (0x10)
        // (NeedCtorLink)
        public FString URL {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }

        // IntProperty IpDrv.OnlinePlaylistManager.Playlist.MatchType
        // 0x68 (0x4)
        public int MatchType {
            get => *(int*)(Pointer + 104);
            set => *(int*)(Pointer + 104) = value;
        }

        // BoolProperty IpDrv.OnlinePlaylistManager.Playlist.bDisableDedicatedServerSearches
        // 0x6C (0x4)
        // Bitmask: 0x00000001
        public bool bDisableDedicatedServerSearches {
            get => (*(uint*)(Pointer + 108) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 108) |= 0x1;
                else *(uint*)(Pointer + 108) &= ~(uint)0x1;
            }
        }

        // ArrayProperty IpDrv.OnlinePlaylistManager.Playlist.MapCycle
        // 0x70 (0x10)
        // (NeedCtorLink)
        public StructTArray<FName> MapCycle {
            get => new(Pointer + 112, 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
        }
    }

    // ScriptStruct IpDrv.OnlinePlaylistManager.ConfiguredGameSetting
    // 0x30
    public unsafe class FConfiguredGameSetting : BaseObject {
        public FConfiguredGameSetting() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FConfiguredGameSetting(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.OnlinePlaylistManager.ConfiguredGameSetting.GameSettingId
        // 0x0 (0x4)
        public int GameSettingId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePlaylistManager.ConfiguredGameSetting.GameSettingsClassName
        // 0x8 (0x10)
        // (NeedCtorLink)
        public FString GameSettingsClassName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.OnlinePlaylistManager.ConfiguredGameSetting.URL
        // 0x18 (0x10)
        // (NeedCtorLink)
        public FString URL {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // ObjectProperty IpDrv.OnlinePlaylistManager.ConfiguredGameSetting.GameSettings
        // 0x28 (0x8)
        // (Transient)
        public UOnlineGameSettings GameSettings {
            get {
                var pointer = *(nint*)(Pointer + 40);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 40) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlinePlaylistManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlinePurchaseInterfaceImpl
// 0x30 (0x60 - 0x90)
// (Compiled | Parsed | Native)
public unsafe partial class UOnlinePurchaseInterfaceImpl : UObject {
    public UOnlinePurchaseInterfaceImpl() { }
    public UOnlinePurchaseInterfaceImpl(nint pointer) : base(pointer) { }


    // DelegateProperty IpDrv.OnlinePurchaseInterfaceImpl.__EventGetAppPriceInfoComplete__Delegate
    // 0x60 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventGetAppPriceInfoComplete__Delegate {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 24, 24);
    }

    // DelegateProperty IpDrv.OnlinePurchaseInterfaceImpl.__OnMicroTxnResponse__Delegate
    // 0x78 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnMicroTxnResponse__Delegate {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 24, 24);
    }


    // Function IpDrv.OnlinePurchaseInterfaceImpl.ClearMicroTxnResponseDelegate
    // 0x3750E0
    // (Public)
    public unsafe class ClearMicroTxnResponseDelegate_Parameters : BaseObject {
        public ClearMicroTxnResponseDelegate_Parameters() { }
        public ClearMicroTxnResponseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlinePurchaseInterfaceImpl.ClearMicroTxnResponseDelegate.ResponseMicroTxnDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ResponseMicroTxnDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrClearMicroTxnResponseDelegate;
    public void ClearMicroTxnResponseDelegate(FScriptDelegate ResponseMicroTxnDelegate) {
        _ptrClearMicroTxnResponseDelegate ??= FindFunction("Function IpDrv.OnlinePurchaseInterfaceImpl.ClearMicroTxnResponseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ResponseMicroTxnDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrClearMicroTxnResponseDelegate, @params);
    }

    // Function IpDrv.OnlinePurchaseInterfaceImpl.AddMicroTxnResponseDelegate
    // 0x3750E0
    // (Public)
    public unsafe class AddMicroTxnResponseDelegate_Parameters : BaseObject {
        public AddMicroTxnResponseDelegate_Parameters() { }
        public AddMicroTxnResponseDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty IpDrv.OnlinePurchaseInterfaceImpl.AddMicroTxnResponseDelegate.ResponseMicroTxnDelegate
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate ResponseMicroTxnDelegate {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAddMicroTxnResponseDelegate;
    public void AddMicroTxnResponseDelegate(FScriptDelegate ResponseMicroTxnDelegate) {
        _ptrAddMicroTxnResponseDelegate ??= FindFunction("Function IpDrv.OnlinePurchaseInterfaceImpl.AddMicroTxnResponseDelegate");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ResponseMicroTxnDelegate.Pointer, @params, 24, 24);

        ProcessEvent(_ptrAddMicroTxnResponseDelegate, @params);
    }

    // Function IpDrv.OnlinePurchaseInterfaceImpl.OnMicroTxnResponse
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnMicroTxnResponse_Parameters : BaseObject {
        public OnMicroTxnResponse_Parameters() { }
        public OnMicroTxnResponse_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.OnlinePurchaseInterfaceImpl.OnMicroTxnResponse.bAuthorized
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bAuthorized {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // QWordProperty IpDrv.OnlinePurchaseInterfaceImpl.OnMicroTxnResponse.OrderId
        // 0x8 (0x8)
        // (Param)
        public ulong OrderId {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrOnMicroTxnResponse;
    public void OnMicroTxnResponse(bool bAuthorized, ulong OrderId) {
        _ptrOnMicroTxnResponse ??= FindFunction("Function IpDrv.OnlinePurchaseInterfaceImpl.OnMicroTxnResponse");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&bAuthorized, @params, 4, 4);
        System.Buffer.MemoryCopy(&OrderId, @params + 8, 8, 8);

        ProcessEvent(_ptrOnMicroTxnResponse, @params);
    }

    // Function IpDrv.OnlinePurchaseInterfaceImpl.FormatCurrency
    // 0x3750E0
    // (Defined | Public)
    public unsafe class FormatCurrency_Parameters : BaseObject {
        public FormatCurrency_Parameters() { }
        public FormatCurrency_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.OnlinePurchaseInterfaceImpl.FormatCurrency.Currency
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Currency {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.OnlinePurchaseInterfaceImpl.FormatCurrency.Price
        // 0x10 (0x4)
        // (Param)
        public int Price {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.OnlinePurchaseInterfaceImpl.FormatCurrency.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrFormatCurrency;
    public FString FormatCurrency(FString Currency, int Price) {
        _ptrFormatCurrency ??= FindFunction("Function IpDrv.OnlinePurchaseInterfaceImpl.FormatCurrency");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Currency.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Price, @params + 16, 4, 4);

        ProcessEvent(_ptrFormatCurrency, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.OnlinePurchaseInterfaceImpl.GetAppPriceInfo
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetAppPriceInfo_Parameters : BaseObject {
        public GetAppPriceInfo_Parameters() { }
        public GetAppPriceInfo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.OnlinePurchaseInterfaceImpl.GetAppPriceInfo.PlayerID
        // 0x0 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ArrayProperty IpDrv.OnlinePurchaseInterfaceImpl.GetAppPriceInfo.AppNames
        // 0x48 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FName> AppNames {
            get => new(Pointer + 72, 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // DelegateProperty IpDrv.OnlinePurchaseInterfaceImpl.GetAppPriceInfo.Callback
        // 0x58 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 24, 24);
        }

        // BoolProperty IpDrv.OnlinePurchaseInterfaceImpl.GetAppPriceInfo.ReturnValue
        // 0x70 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 112) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x1;
                else *(uint*)(Pointer + 112) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetAppPriceInfo;
    public bool GetAppPriceInfo(ref U_Types_Core.FUniqueNetId PlayerID, ref StructTArray<FName> AppNames, FScriptDelegate Callback) {
        _ptrGetAppPriceInfo ??= FindFunction("Function IpDrv.OnlinePurchaseInterfaceImpl.GetAppPriceInfo");

        var @params = stackalloc byte[116];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)AppNames.Pointer, @params + 72, 16, 16);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 88, 24, 24);

        ProcessEvent(_ptrGetAppPriceInfo, @params);

        var _PlayerIDPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params, (void*)_PlayerIDPtr, 72, 72);
        PlayerID = new(_PlayerIDPtr) { Allocated = true };
        var _AppNamesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 72, (void*)_AppNamesPtr, 16, 16);
        AppNames = new(_AppNamesPtr, 8) { Allocated = true };

        return *(bool*)(@params + 112);
    }

    // Function IpDrv.OnlinePurchaseInterfaceImpl.EventGetAppPriceInfoComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventGetAppPriceInfoComplete_Parameters : BaseObject {
        public EventGetAppPriceInfoComplete_Parameters() { }
        public EventGetAppPriceInfoComplete_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.OnlinePurchaseInterfaceImpl.EventGetAppPriceInfoComplete.AppName
        // 0x0 (0x8)
        // (Param)
        public FName AppName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StrProperty IpDrv.OnlinePurchaseInterfaceImpl.EventGetAppPriceInfoComplete.Price
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Price {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.OnlinePurchaseInterfaceImpl.EventGetAppPriceInfoComplete.DiscountPrice
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString DiscountPrice {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // IntProperty IpDrv.OnlinePurchaseInterfaceImpl.EventGetAppPriceInfoComplete.DiscountPercentage
        // 0x28 (0x4)
        // (Param)
        public int DiscountPercentage {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }
    }
    private static UFunction _ptrEventGetAppPriceInfoComplete;
    public void EventGetAppPriceInfoComplete(FName AppName, FString Price, FString DiscountPrice, int DiscountPercentage) {
        _ptrEventGetAppPriceInfoComplete ??= FindFunction("Function IpDrv.OnlinePurchaseInterfaceImpl.EventGetAppPriceInfoComplete");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)AppName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Price.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)DiscountPrice.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy(&DiscountPercentage, @params + 40, 4, 4);

        ProcessEvent(_ptrEventGetAppPriceInfoComplete, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlinePurchaseInterfaceImpl");
            return _staticClass;
        }
    }
}

// Class IpDrv.PartyBeacon
// 0x48 (0x60 - 0xA8)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UPartyBeacon : UObject {
    public UPartyBeacon() { }
    public UPartyBeacon(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.PartyBeacon.VfTable_FTickableObject
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FTickableObject {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }

    // IntProperty IpDrv.PartyBeacon.PartyBeaconPort
    // 0x68 (0x4)
    // (Config)
    public int PartyBeaconPort {
        get => *(int*)(Pointer + 104);
        set => *(int*)(Pointer + 104) = value;
    }

    // MISSED OFFSET: 0x4

    // StructProperty IpDrv.PartyBeacon.Socket
    // 0x70 (0x8)
    // (Native | Transient)
    public nint Socket {
        get => *(nint*)(Pointer + 112);
        set => *(nint*)(Pointer + 112) = value;
    }

    // BoolProperty IpDrv.PartyBeacon.bIsInTick
    // 0x78 (0x4)
    // Bitmask: 0x00000001
    public bool bIsInTick {
        get => (*(uint*)(Pointer + 120) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x1;
            else *(uint*)(Pointer + 120) &= ~(uint)0x1;
        }
    }

    // BoolProperty IpDrv.PartyBeacon.bWantsDeferredDestroy
    // 0x78 (0x4)
    // Bitmask: 0x00000002
    public bool bWantsDeferredDestroy {
        get => (*(uint*)(Pointer + 120) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x2;
            else *(uint*)(Pointer + 120) &= ~(uint)0x2;
        }
    }

    // BoolProperty IpDrv.PartyBeacon.bShouldTick
    // 0x78 (0x4)
    // Bitmask: 0x00000004
    public bool bShouldTick {
        get => (*(uint*)(Pointer + 120) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x4;
            else *(uint*)(Pointer + 120) &= ~(uint)0x4;
        }
    }

    // FloatProperty IpDrv.PartyBeacon.HeartbeatTimeout
    // 0x7C (0x4)
    // (Config)
    public float HeartbeatTimeout {
        get => *(float*)(Pointer + 124);
        set => *(float*)(Pointer + 124) = value;
    }

    // FloatProperty IpDrv.PartyBeacon.ElapsedHeartbeatTime
    // 0x80 (0x4)
    public float ElapsedHeartbeatTime {
        get => *(float*)(Pointer + 128);
        set => *(float*)(Pointer + 128) = value;
    }

    // NameProperty IpDrv.PartyBeacon.BeaconName
    // 0x84 (0x8)
    public FName BeaconName {
        get => new(Pointer + 132);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 132), 8, 8);
    }

    // MISSED OFFSET: 0x4

    // DelegateProperty IpDrv.PartyBeacon.__OnDestroyComplete__Delegate
    // 0x90 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDestroyComplete__Delegate {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 24, 24);
    }


    // Function IpDrv.PartyBeacon.OnDestroyComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDestroyComplete_Parameters : BaseObject {
        public OnDestroyComplete_Parameters() { }
        public OnDestroyComplete_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnDestroyComplete;
    public void OnDestroyComplete() {
        _ptrOnDestroyComplete ??= FindFunction("Function IpDrv.PartyBeacon.OnDestroyComplete");

        ProcessEvent(_ptrOnDestroyComplete, null);
    }

    // Function IpDrv.PartyBeacon.DestroyBeacon
    // 0x669880
    // (Native | Event | Public)
    public unsafe class DestroyBeacon_Parameters : BaseObject {
        public DestroyBeacon_Parameters() { }
        public DestroyBeacon_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyBeacon;
    public void DestroyBeacon() {
        _ptrDestroyBeacon ??= FindFunction("Function IpDrv.PartyBeacon.DestroyBeacon");

        _ptrDestroyBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyBeacon, null);
        _ptrDestroyBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }


    // ScriptStruct IpDrv.PartyBeacon.PartyReservation
    // 0x60
    public unsafe class FPartyReservation : BaseObject {
        public FPartyReservation() {
            Pointer = Marshal.AllocHGlobal(96);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 96);
            Allocated = true;
        }
        public FPartyReservation(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.PartyBeacon.PartyReservation.TeamNum
        // 0x0 (0x4)
        public int TeamNum {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.PartyBeacon.PartyReservation.PartyLeader
        // 0x8 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 72, 72);
        }

        // ArrayProperty IpDrv.PartyBeacon.PartyReservation.PartyMembers
        // 0x50 (0x10)
        // (NeedCtorLink)
        public StructTArray<FPlayerReservation> PartyMembers {
            get => new(Pointer + 80, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }
    }

    // ScriptStruct IpDrv.PartyBeacon.PlayerReservation
    // 0x64
    public unsafe class FPlayerReservation : BaseObject {
        public FPlayerReservation() {
            Pointer = Marshal.AllocHGlobal(100);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 100);
            Allocated = true;
        }
        public FPlayerReservation(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeacon.PlayerReservation.NetId
        // 0x0 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId NetId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // IntProperty IpDrv.PartyBeacon.PlayerReservation.Skill
        // 0x48 (0x4)
        public int Skill {
            get => *(int*)(Pointer + 72);
            set => *(int*)(Pointer + 72) = value;
        }

        // IntProperty IpDrv.PartyBeacon.PlayerReservation.XpLevel
        // 0x4C (0x4)
        public int XpLevel {
            get => *(int*)(Pointer + 76);
            set => *(int*)(Pointer + 76) = value;
        }

        // StructProperty IpDrv.PartyBeacon.PlayerReservation.Mu
        // 0x50 (0x8)
        public FDouble Mu {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 8, 8);
        }

        // StructProperty IpDrv.PartyBeacon.PlayerReservation.Sigma
        // 0x58 (0x8)
        public FDouble Sigma {
            get => new(Pointer + 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 8, 8);
        }

        // FloatProperty IpDrv.PartyBeacon.PlayerReservation.ElapsedSessionTime
        // 0x60 (0x4)
        public float ElapsedSessionTime {
            get => *(float*)(Pointer + 96);
            set => *(float*)(Pointer + 96) = value;
        }
    }


    // Enum IpDrv.PartyBeacon.EPartyReservationResult
    public enum EPartyReservationResult : byte {
        PRR_GeneralError = 0,
        PRR_PartyLimitReached = 1,
        PRR_IncorrectPlayerCount = 2,
        PRR_RequestTimedOut = 3,
        PRR_ReservationDuplicate = 4,
        PRR_ReservationNotFound = 5,
        PRR_ReservationAccepted = 6,
        PRR_ReservationDenied = 7,
        PRR_MAX = 8
    }

    // Enum IpDrv.PartyBeacon.EReservationPacketType
    public enum EReservationPacketType : byte {
        RPT_UnknownPacketType = 0,
        RPT_ClientReservationRequest = 1,
        RPT_ClientReservationUpdateRequest = 2,
        RPT_ClientCancellationRequest = 3,
        RPT_HostReservationResponse = 4,
        RPT_HostReservationCountUpdate = 5,
        RPT_HostTravelRequest = 6,
        RPT_HostIsReady = 7,
        RPT_HostHasCancelled = 8,
        RPT_Heartbeat = 9,
        RPT_MAX = 10
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.PartyBeacon");
            return _staticClass;
        }
    }
}

// Class IpDrv.PartyBeaconClient
// 0x118 (0xA8 - 0x1C0)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UPartyBeaconClient : UPartyBeacon {
    public UPartyBeaconClient() { }
    public UPartyBeaconClient(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.PartyBeaconClient.HostPendingRequest
    // 0xA8 (0x10)
    // (Const)
    public UOnlineGameSearch.FOnlineGameSearchResult HostPendingRequest {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // StructProperty IpDrv.PartyBeaconClient.PendingRequest
    // 0xB8 (0x60)
    // (NeedCtorLink)
    public UPartyBeacon.FPartyReservation PendingRequest {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 96, 96);
    }

    // ByteProperty IpDrv.PartyBeaconClient.ClientBeaconState
    // 0x118 (0x1)
    public EPartyBeaconClientState ClientBeaconState {
        get => *(EPartyBeaconClientState*)(Pointer + 280);
        set => *(EPartyBeaconClientState*)(Pointer + 280) = value;
    }

    // ByteProperty IpDrv.PartyBeaconClient.ClientBeaconRequestType
    // 0x119 (0x1)
    public EPartyBeaconClientRequest ClientBeaconRequestType {
        get => *(EPartyBeaconClientRequest*)(Pointer + 281);
        set => *(EPartyBeaconClientRequest*)(Pointer + 281) = value;
    }

    // MISSED OFFSET: 0x2

    // FloatProperty IpDrv.PartyBeaconClient.ReservationRequestTimeout
    // 0x11C (0x4)
    // (Config)
    public float ReservationRequestTimeout {
        get => *(float*)(Pointer + 284);
        set => *(float*)(Pointer + 284) = value;
    }

    // FloatProperty IpDrv.PartyBeaconClient.ReservationRequestElapsedTime
    // 0x120 (0x4)
    public float ReservationRequestElapsedTime {
        get => *(float*)(Pointer + 288);
        set => *(float*)(Pointer + 288) = value;
    }

    // MISSED OFFSET: 0x4

    // StrProperty IpDrv.PartyBeaconClient.ResolverClassName
    // 0x128 (0x10)
    // (Config | NeedCtorLink)
    public FString ResolverClassName {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 16, 16);
    }

    // ClassProperty IpDrv.PartyBeaconClient.ResolverClass
    // 0x138 (0x8)
    public UClass ResolverClass {
        get {
            var pointer = *(nint*)(Pointer + 312);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 312) = value.Pointer;
    }

    // ObjectProperty IpDrv.PartyBeaconClient.Resolver
    // 0x140 (0x8)
    public UClientBeaconAddressResolver Resolver {
        get {
            var pointer = *(nint*)(Pointer + 320);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 320) = value.Pointer;
    }

    // DelegateProperty IpDrv.PartyBeaconClient.__OnReservationRequestComplete__Delegate
    // 0x148 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReservationRequestComplete__Delegate {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 24, 24);
    }

    // DelegateProperty IpDrv.PartyBeaconClient.__OnReservationCountUpdated__Delegate
    // 0x160 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReservationCountUpdated__Delegate {
        get => new(Pointer + 352);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 352), 24, 24);
    }

    // DelegateProperty IpDrv.PartyBeaconClient.__OnTravelRequestReceived__Delegate
    // 0x178 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnTravelRequestReceived__Delegate {
        get => new(Pointer + 376);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 376), 24, 24);
    }

    // DelegateProperty IpDrv.PartyBeaconClient.__OnHostIsReady__Delegate
    // 0x190 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnHostIsReady__Delegate {
        get => new(Pointer + 400);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 400), 24, 24);
    }

    // DelegateProperty IpDrv.PartyBeaconClient.__OnHostHasCancelled__Delegate
    // 0x1A8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnHostHasCancelled__Delegate {
        get => new(Pointer + 424);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 424), 24, 24);
    }


    // Function IpDrv.PartyBeaconClient.DestroyBeacon
    // 0x669880
    // (Native | Event | Public)
    public unsafe class DestroyBeacon_Parameters : BaseObject {
        public DestroyBeacon_Parameters() { }
        public DestroyBeacon_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyBeacon;
    public void DestroyBeacon() {
        _ptrDestroyBeacon ??= FindFunction("Function IpDrv.PartyBeaconClient.DestroyBeacon");

        _ptrDestroyBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyBeacon, null);
        _ptrDestroyBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconClient.CancelReservation
    // 0xBAC200
    // (Final | Native | Public)
    public unsafe class CancelReservation_Parameters : BaseObject {
        public CancelReservation_Parameters() { }
        public CancelReservation_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconClient.CancelReservation.CancellingPartyLeader
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId CancellingPartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // BoolProperty IpDrv.PartyBeaconClient.CancelReservation.ReturnValue
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrCancelReservation;
    public bool CancelReservation(U_Types_Core.FUniqueNetId CancellingPartyLeader) {
        _ptrCancelReservation ??= FindFunction("Function IpDrv.PartyBeaconClient.CancelReservation");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)CancellingPartyLeader.Pointer, @params, 72, 72);

        _ptrCancelReservation.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCancelReservation, @params);
        _ptrCancelReservation.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 72);
    }

    // Function IpDrv.PartyBeaconClient.RequestReservationUpdate
    // 0xBABF50
    // (Final | Native | Public | HasOutParams)
    public unsafe class RequestReservationUpdate_Parameters : BaseObject {
        public RequestReservationUpdate_Parameters() { }
        public RequestReservationUpdate_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconClient.RequestReservationUpdate.DesiredHost
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult DesiredHost {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.PartyBeaconClient.RequestReservationUpdate.RequestingPartyLeader
        // 0x10 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId RequestingPartyLeader {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // ArrayProperty IpDrv.PartyBeaconClient.RequestReservationUpdate.PlayersToAdd
        // 0x58 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UPartyBeacon.FPlayerReservation> PlayersToAdd {
            get => new(Pointer + 88, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }

        // BoolProperty IpDrv.PartyBeaconClient.RequestReservationUpdate.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestReservationUpdate;
    public bool RequestReservationUpdate(ref UOnlineGameSearch.FOnlineGameSearchResult DesiredHost, U_Types_Core.FUniqueNetId RequestingPartyLeader, ref StructTArray<UPartyBeacon.FPlayerReservation> PlayersToAdd) {
        _ptrRequestReservationUpdate ??= FindFunction("Function IpDrv.PartyBeaconClient.RequestReservationUpdate");

        var @params = stackalloc byte[108];
        System.Buffer.MemoryCopy((void*)DesiredHost.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)RequestingPartyLeader.Pointer, @params + 16, 72, 72);
        System.Buffer.MemoryCopy((void*)PlayersToAdd.Pointer, @params + 88, 16, 16);

        _ptrRequestReservationUpdate.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequestReservationUpdate, @params);
        _ptrRequestReservationUpdate.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DesiredHostPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_DesiredHostPtr, 16, 16);
        DesiredHost = new(_DesiredHostPtr) { Allocated = true };
        var _PlayersToAddPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 88, (void*)_PlayersToAddPtr, 16, 16);
        PlayersToAdd = new(_PlayersToAddPtr, 104) { Allocated = true };

        return *(bool*)(@params + 104);
    }

    // Function IpDrv.PartyBeaconClient.RequestReservation
    // 0xBABD20
    // (Final | Native | Public | HasOutParams)
    public unsafe class RequestReservation_Parameters : BaseObject {
        public RequestReservation_Parameters() { }
        public RequestReservation_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconClient.RequestReservation.DesiredHost
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public UOnlineGameSearch.FOnlineGameSearchResult DesiredHost {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.PartyBeaconClient.RequestReservation.RequestingPartyLeader
        // 0x10 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId RequestingPartyLeader {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }

        // ArrayProperty IpDrv.PartyBeaconClient.RequestReservation.Players
        // 0x58 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UPartyBeacon.FPlayerReservation> Players {
            get => new(Pointer + 88, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 88), 16, 16);
        }

        // BoolProperty IpDrv.PartyBeaconClient.RequestReservation.ReturnValue
        // 0x68 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 104) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 104) |= 0x1;
                else *(uint*)(Pointer + 104) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrRequestReservation;
    public bool RequestReservation(ref UOnlineGameSearch.FOnlineGameSearchResult DesiredHost, U_Types_Core.FUniqueNetId RequestingPartyLeader, ref StructTArray<UPartyBeacon.FPlayerReservation> Players) {
        _ptrRequestReservation ??= FindFunction("Function IpDrv.PartyBeaconClient.RequestReservation");

        var @params = stackalloc byte[108];
        System.Buffer.MemoryCopy((void*)DesiredHost.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)RequestingPartyLeader.Pointer, @params + 16, 72, 72);
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params + 88, 16, 16);

        _ptrRequestReservation.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRequestReservation, @params);
        _ptrRequestReservation.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _DesiredHostPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_DesiredHostPtr, 16, 16);
        DesiredHost = new(_DesiredHostPtr) { Allocated = true };
        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 88, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 104) { Allocated = true };

        return *(bool*)(@params + 104);
    }

    // Function IpDrv.PartyBeaconClient.OnHostHasCancelled
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnHostHasCancelled_Parameters : BaseObject {
        public OnHostHasCancelled_Parameters() { }
        public OnHostHasCancelled_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnHostHasCancelled;
    public void OnHostHasCancelled() {
        _ptrOnHostHasCancelled ??= FindFunction("Function IpDrv.PartyBeaconClient.OnHostHasCancelled");

        ProcessEvent(_ptrOnHostHasCancelled, null);
    }

    // Function IpDrv.PartyBeaconClient.OnHostIsReady
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnHostIsReady_Parameters : BaseObject {
        public OnHostIsReady_Parameters() { }
        public OnHostIsReady_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnHostIsReady;
    public void OnHostIsReady() {
        _ptrOnHostIsReady ??= FindFunction("Function IpDrv.PartyBeaconClient.OnHostIsReady");

        ProcessEvent(_ptrOnHostIsReady, null);
    }

    // Function IpDrv.PartyBeaconClient.OnTravelRequestReceived
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnTravelRequestReceived_Parameters : BaseObject {
        public OnTravelRequestReceived_Parameters() { }
        public OnTravelRequestReceived_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.PartyBeaconClient.OnTravelRequestReceived.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ClassProperty IpDrv.PartyBeaconClient.OnTravelRequestReceived.SearchClass
        // 0x8 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ByteProperty IpDrv.PartyBeaconClient.OnTravelRequestReceived.PlatformSpecificInfo
        // 0x10 (0x50)
        // (Param)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 80, 80);
        }
    }
    private static UFunction _ptrOnTravelRequestReceived;
    public void OnTravelRequestReceived(FName SessionName, UClass SearchClass, UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrOnTravelRequestReceived ??= FindFunction("Function IpDrv.PartyBeaconClient.OnTravelRequestReceived");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 16, 80, 80);

        ProcessEvent(_ptrOnTravelRequestReceived, @params);
    }

    // Function IpDrv.PartyBeaconClient.OnReservationCountUpdated
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReservationCountUpdated_Parameters : BaseObject {
        public OnReservationCountUpdated_Parameters() { }
        public OnReservationCountUpdated_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.PartyBeaconClient.OnReservationCountUpdated.ReservationRemaining
        // 0x0 (0x4)
        // (Param)
        public int ReservationRemaining {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrOnReservationCountUpdated;
    public void OnReservationCountUpdated(int ReservationRemaining) {
        _ptrOnReservationCountUpdated ??= FindFunction("Function IpDrv.PartyBeaconClient.OnReservationCountUpdated");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&ReservationRemaining, @params, 4, 4);

        ProcessEvent(_ptrOnReservationCountUpdated, @params);
    }

    // Function IpDrv.PartyBeaconClient.OnReservationRequestComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReservationRequestComplete_Parameters : BaseObject {
        public OnReservationRequestComplete_Parameters() { }
        public OnReservationRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty IpDrv.PartyBeaconClient.OnReservationRequestComplete.ReservationResult
        // 0x0 (0x1)
        // (Param)
        public UPartyBeacon.EPartyReservationResult ReservationResult {
            get => *(UPartyBeacon.EPartyReservationResult*)Pointer;
            set => *(UPartyBeacon.EPartyReservationResult*)Pointer = value;
        }
    }
    private static UFunction _ptrOnReservationRequestComplete;
    public void OnReservationRequestComplete(UPartyBeacon.EPartyReservationResult ReservationResult) {
        _ptrOnReservationRequestComplete ??= FindFunction("Function IpDrv.PartyBeaconClient.OnReservationRequestComplete");

        var @params = stackalloc byte[1];
        System.Buffer.MemoryCopy(&ReservationResult, @params, 1, 1);

        ProcessEvent(_ptrOnReservationRequestComplete, @params);
    }


    // Enum IpDrv.PartyBeaconClient.EPartyBeaconClientRequest
    public enum EPartyBeaconClientRequest : byte {
        PBClientRequest_NewReservation = 0,
        PBClientRequest_UpdateReservation = 1,
        PBClientRequest_MAX = 2
    }

    // Enum IpDrv.PartyBeaconClient.EPartyBeaconClientState
    public enum EPartyBeaconClientState : byte {
        PBCS_None = 0,
        PBCS_Connecting = 1,
        PBCS_Connected = 2,
        PBCS_ConnectionFailed = 3,
        PBCS_AwaitingResponse = 4,
        PBCS_Closed = 5,
        PBCS_MAX = 6
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.PartyBeaconClient");
            return _staticClass;
        }
    }
}

// Class IpDrv.PartyBeaconHost
// 0x98 (0xA8 - 0x140)
// (Compiled | Config | Parsed | Native)
public unsafe partial class UPartyBeaconHost : UPartyBeacon {
    public UPartyBeaconHost() { }
    public UPartyBeaconHost(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.PartyBeaconHost.Clients
    // 0xA8 (0x10)
    // (Const | NeedCtorLink)
    public StructTArray<FClientBeaconConnection> Clients {
        get => new(Pointer + 168, 88);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // IntProperty IpDrv.PartyBeaconHost.NumTeams
    // 0xB8 (0x4)
    // (Const)
    public int NumTeams {
        get => *(int*)(Pointer + 184);
        set => *(int*)(Pointer + 184) = value;
    }

    // IntProperty IpDrv.PartyBeaconHost.NumPlayersPerTeam
    // 0xBC (0x4)
    // (Const)
    public int NumPlayersPerTeam {
        get => *(int*)(Pointer + 188);
        set => *(int*)(Pointer + 188) = value;
    }

    // IntProperty IpDrv.PartyBeaconHost.NumReservations
    // 0xC0 (0x4)
    // (Const)
    public int NumReservations {
        get => *(int*)(Pointer + 192);
        set => *(int*)(Pointer + 192) = value;
    }

    // IntProperty IpDrv.PartyBeaconHost.NumConsumedReservations
    // 0xC4 (0x4)
    // (Const)
    public int NumConsumedReservations {
        get => *(int*)(Pointer + 196);
        set => *(int*)(Pointer + 196) = value;
    }

    // ArrayProperty IpDrv.PartyBeaconHost.Reservations
    // 0xC8 (0x10)
    // (Const | NeedCtorLink)
    public StructTArray<UPartyBeacon.FPartyReservation> Reservations {
        get => new(Pointer + 200, 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 16, 16);
    }

    // NameProperty IpDrv.PartyBeaconHost.OnlineSessionName
    // 0xD8 (0x8)
    public FName OnlineSessionName {
        get => new(Pointer + 216);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 8, 8);
    }

    // IntProperty IpDrv.PartyBeaconHost.ConnectionBacklog
    // 0xE0 (0x4)
    // (Config)
    public int ConnectionBacklog {
        get => *(int*)(Pointer + 224);
        set => *(int*)(Pointer + 224) = value;
    }

    // IntProperty IpDrv.PartyBeaconHost.ForceTeamNum
    // 0xE4 (0x4)
    // (Const)
    public int ForceTeamNum {
        get => *(int*)(Pointer + 228);
        set => *(int*)(Pointer + 228) = value;
    }

    // IntProperty IpDrv.PartyBeaconHost.ReservedHostTeamNum
    // 0xE8 (0x4)
    // (Const)
    public int ReservedHostTeamNum {
        get => *(int*)(Pointer + 232);
        set => *(int*)(Pointer + 232) = value;
    }

    // BoolProperty IpDrv.PartyBeaconHost.bBestFitTeamAssignment
    // 0xEC (0x4)
    // Bitmask: 0x00000001
    public bool bBestFitTeamAssignment {
        get => (*(uint*)(Pointer + 236) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 236) |= 0x1;
            else *(uint*)(Pointer + 236) &= ~(uint)0x1;
        }
    }

    // ByteProperty IpDrv.PartyBeaconHost.BeaconState
    // 0xF0 (0x1)
    // (Const)
    public EPartyBeaconHostState BeaconState {
        get => *(EPartyBeaconHostState*)(Pointer + 240);
        set => *(EPartyBeaconHostState*)(Pointer + 240) = value;
    }

    // MISSED OFFSET: 0x7

    // DelegateProperty IpDrv.PartyBeaconHost.__OnReservationChange__Delegate
    // 0xF8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReservationChange__Delegate {
        get => new(Pointer + 248);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 24, 24);
    }

    // DelegateProperty IpDrv.PartyBeaconHost.__OnReservationsFull__Delegate
    // 0x110 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReservationsFull__Delegate {
        get => new(Pointer + 272);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 272), 24, 24);
    }

    // DelegateProperty IpDrv.PartyBeaconHost.__OnClientCancellationReceived__Delegate
    // 0x128 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnClientCancellationReceived__Delegate {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 24, 24);
    }


    // Function IpDrv.PartyBeaconHost.GetMaxAvailableTeamSize
    // 0xBADE20
    // (Final | Native | Public)
    public unsafe class GetMaxAvailableTeamSize_Parameters : BaseObject {
        public GetMaxAvailableTeamSize_Parameters() { }
        public GetMaxAvailableTeamSize_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.PartyBeaconHost.GetMaxAvailableTeamSize.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetMaxAvailableTeamSize;
    public int GetMaxAvailableTeamSize() {
        _ptrGetMaxAvailableTeamSize ??= FindFunction("Function IpDrv.PartyBeaconHost.GetMaxAvailableTeamSize");

        var @params = stackalloc byte[4];

        _ptrGetMaxAvailableTeamSize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetMaxAvailableTeamSize, @params);
        _ptrGetMaxAvailableTeamSize.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function IpDrv.PartyBeaconHost.GetPartyLeaders
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetPartyLeaders_Parameters : BaseObject {
        public GetPartyLeaders_Parameters() { }
        public GetPartyLeaders_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.PartyBeaconHost.GetPartyLeaders.PartyLeaders
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> PartyLeaders {
            get => new(Pointer, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetPartyLeaders;
    public void GetPartyLeaders(ref StructTArray<U_Types_Core.FUniqueNetId> PartyLeaders) {
        _ptrGetPartyLeaders ??= FindFunction("Function IpDrv.PartyBeaconHost.GetPartyLeaders");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)PartyLeaders.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetPartyLeaders, @params);

        var _PartyLeadersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_PartyLeadersPtr, 16, 16);
        PartyLeaders = new(_PartyLeadersPtr, 72) { Allocated = true };
    }

    // Function IpDrv.PartyBeaconHost.GetPlayers
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams | HasDefaults)
    public unsafe class GetPlayers_Parameters : BaseObject {
        public GetPlayers_Parameters() { }
        public GetPlayers_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.PartyBeaconHost.GetPlayers.Players
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<U_Types_Core.FUniqueNetId> Players {
            get => new(Pointer, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetPlayers;
    public void GetPlayers(ref StructTArray<U_Types_Core.FUniqueNetId> Players) {
        _ptrGetPlayers ??= FindFunction("Function IpDrv.PartyBeaconHost.GetPlayers");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Players.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetPlayers, @params);

        var _PlayersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_PlayersPtr, 16, 16);
        Players = new(_PlayersPtr, 72) { Allocated = true };
    }

    // Function IpDrv.PartyBeaconHost.AppendReservationSkillsToSearch
    // 0xBADDA0
    // (Final | Native | Public)
    public unsafe class AppendReservationSkillsToSearch_Parameters : BaseObject {
        public AppendReservationSkillsToSearch_Parameters() { }
        public AppendReservationSkillsToSearch_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.PartyBeaconHost.AppendReservationSkillsToSearch.Search
        // 0x0 (0x8)
        // (Param)
        public UOnlineGameSearch Search {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrAppendReservationSkillsToSearch;
    public void AppendReservationSkillsToSearch(UOnlineGameSearch Search) {
        _ptrAppendReservationSkillsToSearch ??= FindFunction("Function IpDrv.PartyBeaconHost.AppendReservationSkillsToSearch");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Search.Pointer, @params, 8, 8);

        _ptrAppendReservationSkillsToSearch.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAppendReservationSkillsToSearch, @params);
        _ptrAppendReservationSkillsToSearch.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconHost.UnregisterParty
    // 0x3750E0
    // (Final | Defined | Event | Public | HasDefaults)
    public unsafe class UnregisterParty_Parameters : BaseObject {
        public UnregisterParty_Parameters() { }
        public UnregisterParty_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.UnregisterParty.PartyLeader
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }
    }
    private static UFunction _ptrUnregisterParty;
    public void UnregisterParty(U_Types_Core.FUniqueNetId PartyLeader) {
        _ptrUnregisterParty ??= FindFunction("Function IpDrv.PartyBeaconHost.UnregisterParty");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)PartyLeader.Pointer, @params, 72, 72);

        ProcessEvent(_ptrUnregisterParty, @params);
    }

    // Function IpDrv.PartyBeaconHost.UnregisterPartyMembers
    // 0x3750E0
    // (Final | Defined | Event | Public | HasDefaults)
    public unsafe class UnregisterPartyMembers_Parameters : BaseObject {
        public UnregisterPartyMembers_Parameters() { }
        public UnregisterPartyMembers_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrUnregisterPartyMembers;
    public void UnregisterPartyMembers() {
        _ptrUnregisterPartyMembers ??= FindFunction("Function IpDrv.PartyBeaconHost.UnregisterPartyMembers");

        ProcessEvent(_ptrUnregisterPartyMembers, null);
    }

    // Function IpDrv.PartyBeaconHost.RegisterPartyMembers
    // 0x3750E0
    // (Final | Defined | Event | Public | HasDefaults)
    public unsafe class RegisterPartyMembers_Parameters : BaseObject {
        public RegisterPartyMembers_Parameters() { }
        public RegisterPartyMembers_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrRegisterPartyMembers;
    public void RegisterPartyMembers() {
        _ptrRegisterPartyMembers ??= FindFunction("Function IpDrv.PartyBeaconHost.RegisterPartyMembers");

        ProcessEvent(_ptrRegisterPartyMembers, null);
    }

    // Function IpDrv.PartyBeaconHost.AreReservationsFull
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class AreReservationsFull_Parameters : BaseObject {
        public AreReservationsFull_Parameters() { }
        public AreReservationsFull_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.PartyBeaconHost.AreReservationsFull.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAreReservationsFull;
    public bool AreReservationsFull() {
        _ptrAreReservationsFull ??= FindFunction("Function IpDrv.PartyBeaconHost.AreReservationsFull");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrAreReservationsFull, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.PartyBeaconHost.TellClientsHostHasCancelled
    // 0xBADC10
    // (Final | Native | Public)
    public unsafe class TellClientsHostHasCancelled_Parameters : BaseObject {
        public TellClientsHostHasCancelled_Parameters() { }
        public TellClientsHostHasCancelled_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTellClientsHostHasCancelled;
    public void TellClientsHostHasCancelled() {
        _ptrTellClientsHostHasCancelled ??= FindFunction("Function IpDrv.PartyBeaconHost.TellClientsHostHasCancelled");

        _ptrTellClientsHostHasCancelled.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTellClientsHostHasCancelled, null);
        _ptrTellClientsHostHasCancelled.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconHost.TellClientsHostIsReady
    // 0xBADA80
    // (Final | Native | Public)
    public unsafe class TellClientsHostIsReady_Parameters : BaseObject {
        public TellClientsHostIsReady_Parameters() { }
        public TellClientsHostIsReady_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTellClientsHostIsReady;
    public void TellClientsHostIsReady() {
        _ptrTellClientsHostIsReady ??= FindFunction("Function IpDrv.PartyBeaconHost.TellClientsHostIsReady");

        _ptrTellClientsHostIsReady.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTellClientsHostIsReady, null);
        _ptrTellClientsHostIsReady.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconHost.TellClientsToTravel
    // 0xBAD970
    // (Final | Native | Public)
    public unsafe class TellClientsToTravel_Parameters : BaseObject {
        public TellClientsToTravel_Parameters() { }
        public TellClientsToTravel_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.PartyBeaconHost.TellClientsToTravel.SessionName
        // 0x0 (0x8)
        // (Param)
        public FName SessionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ClassProperty IpDrv.PartyBeaconHost.TellClientsToTravel.SearchClass
        // 0x8 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ByteProperty IpDrv.PartyBeaconHost.TellClientsToTravel.PlatformSpecificInfo
        // 0x10 (0x50)
        // (Param)
        // Fixed array size: 80
        public UnmanagedFixedArray<byte> PlatformSpecificInfo {
            get => new(Pointer + 16, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 80, 80);
        }
    }
    private static UFunction _ptrTellClientsToTravel;
    public void TellClientsToTravel(FName SessionName, UClass SearchClass, UnmanagedFixedArray<byte> PlatformSpecificInfo) {
        _ptrTellClientsToTravel ??= FindFunction("Function IpDrv.PartyBeaconHost.TellClientsToTravel");

        var @params = stackalloc byte[96];
        System.Buffer.MemoryCopy((void*)SessionName.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)PlatformSpecificInfo.Pointer, @params + 16, 80, 80);

        _ptrTellClientsToTravel.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTellClientsToTravel, @params);
        _ptrTellClientsToTravel.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconHost.DestroyBeacon
    // 0x669880
    // (Native | Event | Public)
    public unsafe class DestroyBeacon_Parameters : BaseObject {
        public DestroyBeacon_Parameters() { }
        public DestroyBeacon_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyBeacon;
    public void DestroyBeacon() {
        _ptrDestroyBeacon ??= FindFunction("Function IpDrv.PartyBeaconHost.DestroyBeacon");

        _ptrDestroyBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDestroyBeacon, null);
        _ptrDestroyBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconHost.OnClientCancellationReceived
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnClientCancellationReceived_Parameters : BaseObject {
        public OnClientCancellationReceived_Parameters() { }
        public OnClientCancellationReceived_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.OnClientCancellationReceived.PartyLeader
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }
    }
    private static UFunction _ptrOnClientCancellationReceived;
    public void OnClientCancellationReceived(U_Types_Core.FUniqueNetId PartyLeader) {
        _ptrOnClientCancellationReceived ??= FindFunction("Function IpDrv.PartyBeaconHost.OnClientCancellationReceived");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)PartyLeader.Pointer, @params, 72, 72);

        ProcessEvent(_ptrOnClientCancellationReceived, @params);
    }

    // Function IpDrv.PartyBeaconHost.OnReservationsFull
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReservationsFull_Parameters : BaseObject {
        public OnReservationsFull_Parameters() { }
        public OnReservationsFull_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnReservationsFull;
    public void OnReservationsFull() {
        _ptrOnReservationsFull ??= FindFunction("Function IpDrv.PartyBeaconHost.OnReservationsFull");

        ProcessEvent(_ptrOnReservationsFull, null);
    }

    // Function IpDrv.PartyBeaconHost.OnReservationChange
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReservationChange_Parameters : BaseObject {
        public OnReservationChange_Parameters() { }
        public OnReservationChange_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrOnReservationChange;
    public void OnReservationChange() {
        _ptrOnReservationChange ??= FindFunction("Function IpDrv.PartyBeaconHost.OnReservationChange");

        ProcessEvent(_ptrOnReservationChange, null);
    }

    // Function IpDrv.PartyBeaconHost.HandlePlayerLogout
    // 0xBAD7F0
    // (Final | Native | Public)
    public unsafe class HandlePlayerLogout_Parameters : BaseObject {
        public HandlePlayerLogout_Parameters() { }
        public HandlePlayerLogout_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.HandlePlayerLogout.PlayerID
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PlayerID {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // BoolProperty IpDrv.PartyBeaconHost.HandlePlayerLogout.bMaintainParty
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bMaintainParty {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrHandlePlayerLogout;
    public void HandlePlayerLogout(U_Types_Core.FUniqueNetId PlayerID, bool bMaintainParty) {
        _ptrHandlePlayerLogout ??= FindFunction("Function IpDrv.PartyBeaconHost.HandlePlayerLogout");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)PlayerID.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&bMaintainParty, @params + 72, 4, 4);

        _ptrHandlePlayerLogout.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrHandlePlayerLogout, @params);
        _ptrHandlePlayerLogout.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.PartyBeaconHost.GetExistingReservation
    // 0xBAD6E0
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetExistingReservation_Parameters : BaseObject {
        public GetExistingReservation_Parameters() { }
        public GetExistingReservation_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.GetExistingReservation.PartyLeader
        // 0x0 (0x48)
        // (Const | Param | OutParam | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // IntProperty IpDrv.PartyBeaconHost.GetExistingReservation.ReturnValue
        // 0x48 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 72);
            set => *(int*)(Pointer + 72) = value;
        }
    }
    private static UFunction _ptrGetExistingReservation;
    public int GetExistingReservation(ref U_Types_Core.FUniqueNetId PartyLeader) {
        _ptrGetExistingReservation ??= FindFunction("Function IpDrv.PartyBeaconHost.GetExistingReservation");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)PartyLeader.Pointer, @params, 72, 72);

        _ptrGetExistingReservation.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetExistingReservation, @params);
        _ptrGetExistingReservation.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PartyLeaderPtr = Marshal.AllocHGlobal(72);
        System.Buffer.MemoryCopy(@params, (void*)_PartyLeaderPtr, 72, 72);
        PartyLeader = new(_PartyLeaderPtr) { Allocated = true };

        return *(int*)(@params + 72);
    }

    // Function IpDrv.PartyBeaconHost.UpdatePartyReservationEntry
    // 0xBAD4F0
    // (Final | Native | Public | HasOutParams)
    public unsafe class UpdatePartyReservationEntry_Parameters : BaseObject {
        public UpdatePartyReservationEntry_Parameters() { }
        public UpdatePartyReservationEntry_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.UpdatePartyReservationEntry.PartyLeader
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ArrayProperty IpDrv.PartyBeaconHost.UpdatePartyReservationEntry.PlayerMembers
        // 0x48 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UPartyBeacon.FPlayerReservation> PlayerMembers {
            get => new(Pointer + 72, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // ByteProperty IpDrv.PartyBeaconHost.UpdatePartyReservationEntry.ReturnValue
        // 0x58 (0x1)
        // (Param | OutParam | ReturnParam)
        public UPartyBeacon.EPartyReservationResult ReturnValue {
            get => *(UPartyBeacon.EPartyReservationResult*)(Pointer + 88);
            set => *(UPartyBeacon.EPartyReservationResult*)(Pointer + 88) = value;
        }
    }
    private static UFunction _ptrUpdatePartyReservationEntry;
    public UPartyBeacon.EPartyReservationResult UpdatePartyReservationEntry(U_Types_Core.FUniqueNetId PartyLeader, ref StructTArray<UPartyBeacon.FPlayerReservation> PlayerMembers) {
        _ptrUpdatePartyReservationEntry ??= FindFunction("Function IpDrv.PartyBeaconHost.UpdatePartyReservationEntry");

        var @params = stackalloc byte[89];
        System.Buffer.MemoryCopy((void*)PartyLeader.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)PlayerMembers.Pointer, @params + 72, 16, 16);

        _ptrUpdatePartyReservationEntry.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUpdatePartyReservationEntry, @params);
        _ptrUpdatePartyReservationEntry.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlayerMembersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 72, (void*)_PlayerMembersPtr, 16, 16);
        PlayerMembers = new(_PlayerMembersPtr, 104) { Allocated = true };

        return *(UPartyBeacon.EPartyReservationResult*)(@params + 88);
    }

    // Function IpDrv.PartyBeaconHost.AddPartyReservationEntry
    // 0xBAD2A0
    // (Final | Native | Public | HasOutParams)
    public unsafe class AddPartyReservationEntry_Parameters : BaseObject {
        public AddPartyReservationEntry_Parameters() { }
        public AddPartyReservationEntry_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.AddPartyReservationEntry.PartyLeader
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // ArrayProperty IpDrv.PartyBeaconHost.AddPartyReservationEntry.PlayerMembers
        // 0x48 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<UPartyBeacon.FPlayerReservation> PlayerMembers {
            get => new(Pointer + 72, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // IntProperty IpDrv.PartyBeaconHost.AddPartyReservationEntry.TeamNum
        // 0x58 (0x4)
        // (Param)
        public int TeamNum {
            get => *(int*)(Pointer + 88);
            set => *(int*)(Pointer + 88) = value;
        }

        // BoolProperty IpDrv.PartyBeaconHost.AddPartyReservationEntry.bIsHost
        // 0x5C (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bIsHost {
            get => (*(uint*)(Pointer + 92) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 92) |= 0x1;
                else *(uint*)(Pointer + 92) &= ~(uint)0x1;
            }
        }

        // ByteProperty IpDrv.PartyBeaconHost.AddPartyReservationEntry.ReturnValue
        // 0x60 (0x1)
        // (Param | OutParam | ReturnParam)
        public UPartyBeacon.EPartyReservationResult ReturnValue {
            get => *(UPartyBeacon.EPartyReservationResult*)(Pointer + 96);
            set => *(UPartyBeacon.EPartyReservationResult*)(Pointer + 96) = value;
        }
    }
    private static UFunction _ptrAddPartyReservationEntry;
    public UPartyBeacon.EPartyReservationResult AddPartyReservationEntry(U_Types_Core.FUniqueNetId PartyLeader, ref StructTArray<UPartyBeacon.FPlayerReservation> PlayerMembers, int TeamNum, bool bIsHost) {
        _ptrAddPartyReservationEntry ??= FindFunction("Function IpDrv.PartyBeaconHost.AddPartyReservationEntry");

        var @params = stackalloc byte[97];
        System.Buffer.MemoryCopy((void*)PartyLeader.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy((void*)PlayerMembers.Pointer, @params + 72, 16, 16);
        System.Buffer.MemoryCopy(&TeamNum, @params + 88, 4, 4);
        System.Buffer.MemoryCopy(&bIsHost, @params + 92, 4, 4);

        _ptrAddPartyReservationEntry.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddPartyReservationEntry, @params);
        _ptrAddPartyReservationEntry.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PlayerMembersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 72, (void*)_PlayerMembersPtr, 16, 16);
        PlayerMembers = new(_PlayerMembersPtr, 104) { Allocated = true };

        return *(UPartyBeacon.EPartyReservationResult*)(@params + 96);
    }

    // Function IpDrv.PartyBeaconHost.InitHostBeacon
    // 0xBAD150
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class InitHostBeacon_Parameters : BaseObject {
        public InitHostBeacon_Parameters() { }
        public InitHostBeacon_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.PartyBeaconHost.InitHostBeacon.InNumTeams
        // 0x0 (0x4)
        // (Param)
        public int InNumTeams {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.PartyBeaconHost.InitHostBeacon.InNumPlayersPerTeam
        // 0x4 (0x4)
        // (Param)
        public int InNumPlayersPerTeam {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty IpDrv.PartyBeaconHost.InitHostBeacon.InNumReservations
        // 0x8 (0x4)
        // (Param)
        public int InNumReservations {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // NameProperty IpDrv.PartyBeaconHost.InitHostBeacon.InSessionName
        // 0xC (0x8)
        // (Param)
        public FName InSessionName {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }

        // IntProperty IpDrv.PartyBeaconHost.InitHostBeacon.InForceTeamNum
        // 0x14 (0x4)
        // (OptionalParam | Param)
        public int InForceTeamNum {
            get => *(int*)(Pointer + 20);
            set => *(int*)(Pointer + 20) = value;
        }

        // BoolProperty IpDrv.PartyBeaconHost.InitHostBeacon.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrInitHostBeacon;
    public bool InitHostBeacon(int InNumTeams, int InNumPlayersPerTeam, int InNumReservations, FName InSessionName, int InForceTeamNum = 0) {
        _ptrInitHostBeacon ??= FindFunction("Function IpDrv.PartyBeaconHost.InitHostBeacon");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy(&InNumTeams, @params, 4, 4);
        System.Buffer.MemoryCopy(&InNumPlayersPerTeam, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&InNumReservations, @params + 8, 4, 4);
        System.Buffer.MemoryCopy((void*)InSessionName.Pointer, @params + 12, 8, 8);
        System.Buffer.MemoryCopy(&InForceTeamNum, @params + 20, 4, 4);

        _ptrInitHostBeacon.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrInitHostBeacon, @params);
        _ptrInitHostBeacon.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.PartyBeaconHost.PauseReservationRequests
    // 0xBAD0C0
    // (Final | Native | Public)
    public unsafe class PauseReservationRequests_Parameters : BaseObject {
        public PauseReservationRequests_Parameters() { }
        public PauseReservationRequests_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.PartyBeaconHost.PauseReservationRequests.bPause
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bPause {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrPauseReservationRequests;
    public void PauseReservationRequests(bool bPause) {
        _ptrPauseReservationRequests ??= FindFunction("Function IpDrv.PartyBeaconHost.PauseReservationRequests");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bPause, @params, 4, 4);

        _ptrPauseReservationRequests.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrPauseReservationRequests, @params);
        _ptrPauseReservationRequests.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }


    // ScriptStruct IpDrv.PartyBeaconHost.ClientBeaconConnection
    // 0x58
    public unsafe class FClientBeaconConnection : BaseObject {
        public FClientBeaconConnection() {
            Pointer = Marshal.AllocHGlobal(88);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 88);
            Allocated = true;
        }
        public FClientBeaconConnection(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.PartyBeaconHost.ClientBeaconConnection.PartyLeader
        // 0x0 (0x48)
        // (NeedCtorLink)
        public U_Types_Core.FUniqueNetId PartyLeader {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // FloatProperty IpDrv.PartyBeaconHost.ClientBeaconConnection.ElapsedHeartbeatTime
        // 0x48 (0x4)
        public float ElapsedHeartbeatTime {
            get => *(float*)(Pointer + 72);
            set => *(float*)(Pointer + 72) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty IpDrv.PartyBeaconHost.ClientBeaconConnection.Socket
        // 0x50 (0x8)
        // (Native | Transient)
        public nint Socket {
            get => *(nint*)(Pointer + 80);
            set => *(nint*)(Pointer + 80) = value;
        }
    }


    // Enum IpDrv.PartyBeaconHost.EPartyBeaconHostState
    public enum EPartyBeaconHostState : byte {
        PBHS_AllowReservations = 0,
        PBHS_DenyReservations = 1,
        PBHS_MAX = 2
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.PartyBeaconHost");
            return _staticClass;
        }
    }
}

// Class IpDrv.TargetUserChatPermChangedEvent
// 0x94 (0x60 - 0xF4)
// (Compiled | Parsed | Native)
public unsafe partial class UTargetUserChatPermChangedEvent : UObject {
    public UTargetUserChatPermChangedEvent() { }
    public UTargetUserChatPermChangedEvent(nint pointer) : base(pointer) { }


    // StructProperty IpDrv.TargetUserChatPermChangedEvent.PlayerID
    // 0x60 (0x48)
    // (NeedCtorLink)
    public U_Types_Core.FUniqueNetId PlayerID {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 72, 72);
    }

    // StructProperty IpDrv.TargetUserChatPermChangedEvent.TargetId
    // 0xA8 (0x48)
    // (NeedCtorLink)
    public U_Types_Core.FUniqueNetId TargetId {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 72, 72);
    }

    // BoolProperty IpDrv.TargetUserChatPermChangedEvent.bAllowed
    // 0xF0 (0x4)
    // Bitmask: 0x00000001
    public bool bAllowed {
        get => (*(uint*)(Pointer + 240) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 240) |= 0x1;
            else *(uint*)(Pointer + 240) &= ~(uint)0x1;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.TargetUserChatPermChangedEvent");
            return _staticClass;
        }
    }
}

// Class IpDrv.TcpipConnection
// 0x28 (0xB1E8 - 0xB210)
// (Config | Transient | Native | Hidden | Intrinsic)
public unsafe partial class UTcpipConnection : UNetConnection {
    public UTcpipConnection() { }
    public UTcpipConnection(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x28


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.TcpipConnection");
            return _staticClass;
        }
    }
}

// Class IpDrv.TcpNetDriver
// 0x78 (0x208 - 0x280)
// (Config | Transient | Native | Intrinsic)
public unsafe partial class UTcpNetDriver : UNetDriver {
    public UTcpNetDriver() { }
    public UTcpNetDriver(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x58

    // BoolProperty IpDrv.TcpNetDriver.AllowPlayerPortUnreach
    // 0x260 (0x4)
    // Bitmask: 0x00000001
    // (Config)
    public bool AllowPlayerPortUnreach {
        get => (*(uint*)(Pointer + 608) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 608) |= 0x1;
            else *(uint*)(Pointer + 608) &= ~(uint)0x1;
        }
    }

    // BoolProperty IpDrv.TcpNetDriver.LogPortUnreach
    // 0x264 (0x4)
    // Bitmask: 0x00000001
    // (Config)
    public bool LogPortUnreach {
        get => (*(uint*)(Pointer + 612) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 612) |= 0x1;
            else *(uint*)(Pointer + 612) &= ~(uint)0x1;
        }
    }

    // MISSED OFFSET: 0x18


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.TcpNetDriver");
            return _staticClass;
        }
    }
}

// Class IpDrv.WebRequest
// 0x100 (0x60 - 0x160)
// (Compiled | Parsed | Native)
public unsafe partial class UWebRequest : UObject {
    public UWebRequest() { }
    public UWebRequest(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.WebRequest.RemoteAddr
    // 0x60 (0x10)
    // (NeedCtorLink)
    public FString RemoteAddr {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // StrProperty IpDrv.WebRequest.URI
    // 0x70 (0x10)
    // (NeedCtorLink)
    public FString URI {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }

    // StrProperty IpDrv.WebRequest.Username
    // 0x80 (0x10)
    // (NeedCtorLink)
    public FString Username {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // StrProperty IpDrv.WebRequest.Password
    // 0x90 (0x10)
    // (NeedCtorLink)
    public FString Password {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // IntProperty IpDrv.WebRequest.ContentLength
    // 0xA0 (0x4)
    public int ContentLength {
        get => *(int*)(Pointer + 160);
        set => *(int*)(Pointer + 160) = value;
    }

    // MISSED OFFSET: 0x4

    // StrProperty IpDrv.WebRequest.ContentType
    // 0xA8 (0x10)
    // (NeedCtorLink)
    public FString ContentType {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // ByteProperty IpDrv.WebRequest.RequestType
    // 0xB8 (0x1)
    public ERequestType RequestType {
        get => *(ERequestType*)(Pointer + 184);
        set => *(ERequestType*)(Pointer + 184) = value;
    }

    // MISSED OFFSET: 0x7

    // StructProperty IpDrv.WebRequest.HeaderMap
    // 0xC0 (0x50)
    // (Const | Native)
    public FMap_Mirror HeaderMap {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 80, 80);
    }

    // StructProperty IpDrv.WebRequest.VariableMap
    // 0x110 (0x50)
    // (Const | Native)
    public FMap_Mirror VariableMap {
        get => new(Pointer + 272);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 272), 80, 80);
    }


    // Function IpDrv.WebRequest.GetHexDigit
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetHexDigit_Parameters : BaseObject {
        public GetHexDigit_Parameters() { }
        public GetHexDigit_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.GetHexDigit.D
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString D {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.WebRequest.GetHexDigit.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetHexDigit;
    public int GetHexDigit(FString D) {
        _ptrGetHexDigit ??= FindFunction("Function IpDrv.WebRequest.GetHexDigit");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)D.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetHexDigit, @params);

        return *(int*)(@params + 16);
    }

    // Function IpDrv.WebRequest.DecodeFormData
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class DecodeFormData_Parameters : BaseObject {
        public DecodeFormData_Parameters() { }
        public DecodeFormData_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.DecodeFormData.Data
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Data {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDecodeFormData;
    public void DecodeFormData(FString Data) {
        _ptrDecodeFormData ??= FindFunction("Function IpDrv.WebRequest.DecodeFormData");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Data.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDecodeFormData, @params);
    }

    // Function IpDrv.WebRequest.ProcessHeaderString
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ProcessHeaderString_Parameters : BaseObject {
        public ProcessHeaderString_Parameters() { }
        public ProcessHeaderString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.ProcessHeaderString.S
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrProcessHeaderString;
    public void ProcessHeaderString(FString S) {
        _ptrProcessHeaderString ??= FindFunction("Function IpDrv.WebRequest.ProcessHeaderString");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        ProcessEvent(_ptrProcessHeaderString, @params);
    }

    // Function IpDrv.WebRequest.Dump
    // 0x8B6890
    // (Final | Native | Public)
    public unsafe class Dump_Parameters : BaseObject {
        public Dump_Parameters() { }
        public Dump_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDump;
    public void Dump() {
        _ptrDump ??= FindFunction("Function IpDrv.WebRequest.Dump");

        _ptrDump.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDump, null);
        _ptrDump.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.WebRequest.GetVariables
    // 0xBB01D0
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetVariables_Parameters : BaseObject {
        public GetVariables_Parameters() { }
        public GetVariables_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.WebRequest.GetVariables.varNames
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FString> varNames {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetVariables;
    public void GetVariables(ref StructTArray<FString> varNames) {
        _ptrGetVariables ??= FindFunction("Function IpDrv.WebRequest.GetVariables");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)varNames.Pointer, @params, 16, 16);

        _ptrGetVariables.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetVariables, @params);
        _ptrGetVariables.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _varNamesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_varNamesPtr, 16, 16);
        varNames = new(_varNamesPtr, 16) { Allocated = true };
    }

    // Function IpDrv.WebRequest.GetVariableNumber
    // 0xBAFF60
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GetVariableNumber_Parameters : BaseObject {
        public GetVariableNumber_Parameters() { }
        public GetVariableNumber_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.GetVariableNumber.VariableName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString VariableName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.WebRequest.GetVariableNumber.Number
        // 0x10 (0x4)
        // (Param)
        public int Number {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.WebRequest.GetVariableNumber.DefaultValue
        // 0x18 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString DefaultValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.WebRequest.GetVariableNumber.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrGetVariableNumber;
    public FString GetVariableNumber(FString VariableName, int Number, FString DefaultValue = null) {
        _ptrGetVariableNumber ??= FindFunction("Function IpDrv.WebRequest.GetVariableNumber");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)VariableName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Number, @params + 16, 4, 4);
        if (DefaultValue != null) System.Buffer.MemoryCopy((void*)DefaultValue.Pointer, @params + 24, 16, 16);

        _ptrGetVariableNumber.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetVariableNumber, @params);
        _ptrGetVariableNumber.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.WebRequest.GetVariableCount
    // 0xBAFE30
    // (Final | Native | Public)
    public unsafe class GetVariableCount_Parameters : BaseObject {
        public GetVariableCount_Parameters() { }
        public GetVariableCount_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.GetVariableCount.VariableName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString VariableName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.WebRequest.GetVariableCount.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetVariableCount;
    public int GetVariableCount(FString VariableName) {
        _ptrGetVariableCount ??= FindFunction("Function IpDrv.WebRequest.GetVariableCount");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)VariableName.Pointer, @params, 16, 16);

        _ptrGetVariableCount.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetVariableCount, @params);
        _ptrGetVariableCount.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function IpDrv.WebRequest.GetVariable
    // 0xBAFC10
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GetVariable_Parameters : BaseObject {
        public GetVariable_Parameters() { }
        public GetVariable_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.GetVariable.VariableName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString VariableName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebRequest.GetVariable.DefaultValue
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString DefaultValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.WebRequest.GetVariable.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetVariable;
    public FString GetVariable(FString VariableName, FString DefaultValue = null) {
        _ptrGetVariable ??= FindFunction("Function IpDrv.WebRequest.GetVariable");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)VariableName.Pointer, @params, 16, 16);
        if (DefaultValue != null) System.Buffer.MemoryCopy((void*)DefaultValue.Pointer, @params + 16, 16, 16);

        _ptrGetVariable.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetVariable, @params);
        _ptrGetVariable.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.WebRequest.AddVariable
    // 0xBAFB10
    // (Final | Native | Public)
    public unsafe class AddVariable_Parameters : BaseObject {
        public AddVariable_Parameters() { }
        public AddVariable_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.AddVariable.VariableName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString VariableName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebRequest.AddVariable.Value
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrAddVariable;
    public void AddVariable(FString VariableName, FString Value) {
        _ptrAddVariable ??= FindFunction("Function IpDrv.WebRequest.AddVariable");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)VariableName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);

        _ptrAddVariable.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddVariable, @params);
        _ptrAddVariable.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.WebRequest.GetHeaders
    // 0xBAF9F0
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetHeaders_Parameters : BaseObject {
        public GetHeaders_Parameters() { }
        public GetHeaders_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.WebRequest.GetHeaders.Headers
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FString> Headers {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetHeaders;
    public void GetHeaders(ref StructTArray<FString> Headers) {
        _ptrGetHeaders ??= FindFunction("Function IpDrv.WebRequest.GetHeaders");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Headers.Pointer, @params, 16, 16);

        _ptrGetHeaders.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHeaders, @params);
        _ptrGetHeaders.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _HeadersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_HeadersPtr, 16, 16);
        Headers = new(_HeadersPtr, 16) { Allocated = true };
    }

    // Function IpDrv.WebRequest.GetHeader
    // 0xBAF7D0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GetHeader_Parameters : BaseObject {
        public GetHeader_Parameters() { }
        public GetHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.GetHeader.HeaderName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString HeaderName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebRequest.GetHeader.DefaultValue
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString DefaultValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.WebRequest.GetHeader.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetHeader;
    public FString GetHeader(FString HeaderName, FString DefaultValue = null) {
        _ptrGetHeader ??= FindFunction("Function IpDrv.WebRequest.GetHeader");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)HeaderName.Pointer, @params, 16, 16);
        if (DefaultValue != null) System.Buffer.MemoryCopy((void*)DefaultValue.Pointer, @params + 16, 16, 16);

        _ptrGetHeader.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHeader, @params);
        _ptrGetHeader.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.WebRequest.AddHeader
    // 0xBAF6D0
    // (Final | Native | Public)
    public unsafe class AddHeader_Parameters : BaseObject {
        public AddHeader_Parameters() { }
        public AddHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.AddHeader.HeaderName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString HeaderName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebRequest.AddHeader.Value
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrAddHeader;
    public void AddHeader(FString HeaderName, FString Value) {
        _ptrAddHeader ??= FindFunction("Function IpDrv.WebRequest.AddHeader");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)HeaderName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);

        _ptrAddHeader.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddHeader, @params);
        _ptrAddHeader.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.WebRequest.EncodeBase64
    // 0xBAF5D0
    // (Final | Native | Static | Public)
    public unsafe class EncodeBase64_Parameters : BaseObject {
        public EncodeBase64_Parameters() { }
        public EncodeBase64_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.EncodeBase64.Decoded
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Decoded {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebRequest.EncodeBase64.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncodeBase64;
    public static FString EncodeBase64(FString Decoded) {
        _ptrEncodeBase64 ??= FindFunction("Function IpDrv.WebRequest.EncodeBase64");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Decoded.Pointer, @params, 16, 16);

        _ptrEncodeBase64.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncodeBase64, @params);
        _ptrEncodeBase64.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.WebRequest.DecodeBase64
    // 0xBAF4D0
    // (Final | Native | Static | Public)
    public unsafe class DecodeBase64_Parameters : BaseObject {
        public DecodeBase64_Parameters() { }
        public DecodeBase64_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebRequest.DecodeBase64.Encoded
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Encoded {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebRequest.DecodeBase64.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecodeBase64;
    public static FString DecodeBase64(FString Encoded) {
        _ptrDecodeBase64 ??= FindFunction("Function IpDrv.WebRequest.DecodeBase64");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Encoded.Pointer, @params, 16, 16);

        _ptrDecodeBase64.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecodeBase64, @params);
        _ptrDecodeBase64.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    // Enum IpDrv.WebRequest.ERequestType
    public enum ERequestType : byte {
        Request_GET = 0,
        Request_POST = 1,
        Request_MAX = 2
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.WebRequest");
            return _staticClass;
        }
    }
}

// Class IpDrv.WebResponse
// 0x8C (0x60 - 0xEC)
// (Compiled | Config | Parsed | Localized | Native)
public unsafe partial class UWebResponse : UObject {
    public UWebResponse() { }
    public UWebResponse(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.WebResponse.Headers
    // 0x60 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> Headers {
        get => new(Pointer + 96, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // StructProperty IpDrv.WebResponse.ReplacementMap
    // 0x70 (0x50)
    // (Const | Native)
    public FMap_Mirror ReplacementMap {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 80, 80);
    }

    // StrProperty IpDrv.WebResponse.IncludePath
    // 0xC0 (0x10)
    // (Const | Config | NeedCtorLink)
    public FString IncludePath {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 16, 16);
    }

    // StrProperty IpDrv.WebResponse.CharSet
    // 0xD0 (0x10)
    // (Const | Localized | NeedCtorLink)
    public FString CharSet {
        get => new(Pointer + 208);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 16, 16);
    }

    // ObjectProperty IpDrv.WebResponse.Connection
    // 0xE0 (0x8)
    public AWebConnection Connection {
        get {
            var pointer = *(nint*)(Pointer + 224);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 224) = value.Pointer;
    }

    // BoolProperty IpDrv.WebResponse.bSentText
    // 0xE8 (0x4)
    // Bitmask: 0x00000001
    public bool bSentText {
        get => (*(uint*)(Pointer + 232) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 232) |= 0x1;
            else *(uint*)(Pointer + 232) &= ~(uint)0x1;
        }
    }

    // BoolProperty IpDrv.WebResponse.bSentResponse
    // 0xE8 (0x4)
    // Bitmask: 0x00000002
    public bool bSentResponse {
        get => (*(uint*)(Pointer + 232) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 232) |= 0x2;
            else *(uint*)(Pointer + 232) &= ~(uint)0x2;
        }
    }


    // Function IpDrv.WebResponse.SentResponse
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class SentResponse_Parameters : BaseObject {
        public SentResponse_Parameters() { }
        public SentResponse_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.WebResponse.SentResponse.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSentResponse;
    public bool SentResponse() {
        _ptrSentResponse ??= FindFunction("Function IpDrv.WebResponse.SentResponse");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrSentResponse, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.WebResponse.SentText
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class SentText_Parameters : BaseObject {
        public SentText_Parameters() { }
        public SentText_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.WebResponse.SentText.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSentText;
    public bool SentText() {
        _ptrSentText ??= FindFunction("Function IpDrv.WebResponse.SentText");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrSentText, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.WebResponse.Redirect
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class Redirect_Parameters : BaseObject {
        public Redirect_Parameters() { }
        public Redirect_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.Redirect.URL
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URL {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrRedirect;
    public void Redirect(FString URL) {
        _ptrRedirect ??= FindFunction("Function IpDrv.WebResponse.Redirect");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)URL.Pointer, @params, 16, 16);

        ProcessEvent(_ptrRedirect, @params);
    }

    // Function IpDrv.WebResponse.SendStandardHeaders
    // 0x3750E0
    // (Final | Defined | HasOptionalParams | Public)
    public unsafe class SendStandardHeaders_Parameters : BaseObject {
        public SendStandardHeaders_Parameters() { }
        public SendStandardHeaders_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.SendStandardHeaders.ContentType
        // 0x0 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString ContentType {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.SendStandardHeaders.bCache
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bCache {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendStandardHeaders;
    public void SendStandardHeaders(FString ContentType = null, bool bCache = false) {
        _ptrSendStandardHeaders ??= FindFunction("Function IpDrv.WebResponse.SendStandardHeaders");

        var @params = stackalloc byte[20];
        if (ContentType != null) System.Buffer.MemoryCopy((void*)ContentType.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bCache, @params + 16, 4, 4);

        ProcessEvent(_ptrSendStandardHeaders, @params);
    }

    // Function IpDrv.WebResponse.HTTPError
    // 0x3750E0
    // (Final | Defined | HasOptionalParams | Public)
    public unsafe class HTTPError_Parameters : BaseObject {
        public HTTPError_Parameters() { }
        public HTTPError_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.WebResponse.HTTPError.ErrorNum
        // 0x0 (0x4)
        // (Param)
        public int ErrorNum {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.WebResponse.HTTPError.Data
        // 0x8 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString Data {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrHTTPError;
    public void HTTPError(int ErrorNum, FString Data = null) {
        _ptrHTTPError ??= FindFunction("Function IpDrv.WebResponse.HTTPError");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&ErrorNum, @params, 4, 4);
        if (Data != null) System.Buffer.MemoryCopy((void*)Data.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrHTTPError, @params);
    }

    // Function IpDrv.WebResponse.SendHeaders
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class SendHeaders_Parameters : BaseObject {
        public SendHeaders_Parameters() { }
        public SendHeaders_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrSendHeaders;
    public void SendHeaders() {
        _ptrSendHeaders ??= FindFunction("Function IpDrv.WebResponse.SendHeaders");

        ProcessEvent(_ptrSendHeaders, null);
    }

    // Function IpDrv.WebResponse.AddHeader
    // 0x3750E0
    // (Final | Defined | HasOptionalParams | Public)
    public unsafe class AddHeader_Parameters : BaseObject {
        public AddHeader_Parameters() { }
        public AddHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.AddHeader.Header
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Header {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.AddHeader.bReplace
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bReplace {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAddHeader;
    public void AddHeader(FString Header, bool bReplace = false) {
        _ptrAddHeader ??= FindFunction("Function IpDrv.WebResponse.AddHeader");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Header.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bReplace, @params + 16, 4, 4);

        ProcessEvent(_ptrAddHeader, @params);
    }

    // Function IpDrv.WebResponse.HTTPHeader
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class HTTPHeader_Parameters : BaseObject {
        public HTTPHeader_Parameters() { }
        public HTTPHeader_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.HTTPHeader.Header
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Header {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrHTTPHeader;
    public void HTTPHeader(FString Header) {
        _ptrHTTPHeader ??= FindFunction("Function IpDrv.WebResponse.HTTPHeader");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Header.Pointer, @params, 16, 16);

        ProcessEvent(_ptrHTTPHeader, @params);
    }

    // Function IpDrv.WebResponse.HttpResponse
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class HttpResponse_Parameters : BaseObject {
        public HttpResponse_Parameters() { }
        public HttpResponse_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.HttpResponse.Header
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Header {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrHttpResponse;
    public void HttpResponse(FString Header) {
        _ptrHttpResponse ??= FindFunction("Function IpDrv.WebResponse.HttpResponse");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Header.Pointer, @params, 16, 16);

        ProcessEvent(_ptrHttpResponse, @params);
    }

    // Function IpDrv.WebResponse.FailAuthentication
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class FailAuthentication_Parameters : BaseObject {
        public FailAuthentication_Parameters() { }
        public FailAuthentication_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.FailAuthentication.Realm
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Realm {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrFailAuthentication;
    public void FailAuthentication(FString Realm) {
        _ptrFailAuthentication ??= FindFunction("Function IpDrv.WebResponse.FailAuthentication");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Realm.Pointer, @params, 16, 16);

        ProcessEvent(_ptrFailAuthentication, @params);
    }

    // Function IpDrv.WebResponse.SendCachedFile
    // 0x3750E0
    // (Final | Defined | HasOptionalParams | Public)
    public unsafe class SendCachedFile_Parameters : BaseObject {
        public SendCachedFile_Parameters() { }
        public SendCachedFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.SendCachedFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebResponse.SendCachedFile.ContentType
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString ContentType {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.SendCachedFile.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendCachedFile;
    public bool SendCachedFile(FString Filename, FString ContentType = null) {
        _ptrSendCachedFile ??= FindFunction("Function IpDrv.WebResponse.SendCachedFile");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);
        if (ContentType != null) System.Buffer.MemoryCopy((void*)ContentType.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrSendCachedFile, @params);

        return *(bool*)(@params + 32);
    }

    // Function IpDrv.WebResponse.SendBinary
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class SendBinary_Parameters : BaseObject {
        public SendBinary_Parameters() { }
        public SendBinary_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.WebResponse.SendBinary.Count
        // 0x0 (0x4)
        // (Param)
        public int Count {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // ByteProperty IpDrv.WebResponse.SendBinary.B
        // 0x4 (0xFF)
        // (Param)
        // Fixed array size: 255
        public UnmanagedFixedArray<byte> B {
            get => new(Pointer + 4, 255);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 255, 255);
        }
    }
    private static UFunction _ptrSendBinary;
    public void SendBinary(int Count, UnmanagedFixedArray<byte> B) {
        _ptrSendBinary ??= FindFunction("Function IpDrv.WebResponse.SendBinary");

        var @params = stackalloc byte[259];
        System.Buffer.MemoryCopy(&Count, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 255, 255);

        ProcessEvent(_ptrSendBinary, @params);
    }

    // Function IpDrv.WebResponse.SendText
    // 0x3750E0
    // (Final | Defined | Event | HasOptionalParams | Public)
    public unsafe class SendText_Parameters : BaseObject {
        public SendText_Parameters() { }
        public SendText_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.SendText.Text
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.SendText.bNoCRLF
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bNoCRLF {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSendText;
    public void SendText(FString Text, bool bNoCRLF = false) {
        _ptrSendText ??= FindFunction("Function IpDrv.WebResponse.SendText");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bNoCRLF, @params + 16, 4, 4);

        ProcessEvent(_ptrSendText, @params);
    }

    // Function IpDrv.WebResponse.Dump
    // 0x8B6890
    // (Final | Native | Public)
    public unsafe class Dump_Parameters : BaseObject {
        public Dump_Parameters() { }
        public Dump_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDump;
    public void Dump() {
        _ptrDump ??= FindFunction("Function IpDrv.WebResponse.Dump");

        _ptrDump.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDump, null);
        _ptrDump.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.WebResponse.GetHTTPExpiration
    // 0xBB2E80
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GetHTTPExpiration_Parameters : BaseObject {
        public GetHTTPExpiration_Parameters() { }
        public GetHTTPExpiration_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.WebResponse.GetHTTPExpiration.OffsetSeconds
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public int OffsetSeconds {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.WebResponse.GetHTTPExpiration.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrGetHTTPExpiration;
    public FString GetHTTPExpiration(int OffsetSeconds = 0) {
        _ptrGetHTTPExpiration ??= FindFunction("Function IpDrv.WebResponse.GetHTTPExpiration");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&OffsetSeconds, @params, 4, 4);

        _ptrGetHTTPExpiration.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetHTTPExpiration, @params);
        _ptrGetHTTPExpiration.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.WebResponse.LoadParsedUHTM
    // 0xBB2D80
    // (Final | Native | Public)
    public unsafe class LoadParsedUHTM_Parameters : BaseObject {
        public LoadParsedUHTM_Parameters() { }
        public LoadParsedUHTM_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.LoadParsedUHTM.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebResponse.LoadParsedUHTM.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrLoadParsedUHTM;
    public FString LoadParsedUHTM(FString Filename) {
        _ptrLoadParsedUHTM ??= FindFunction("Function IpDrv.WebResponse.LoadParsedUHTM");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrLoadParsedUHTM.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrLoadParsedUHTM, @params);
        _ptrLoadParsedUHTM.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.WebResponse.IncludeBinaryFile
    // 0xBB2CC0
    // (Final | Native | Public)
    public unsafe class IncludeBinaryFile_Parameters : BaseObject {
        public IncludeBinaryFile_Parameters() { }
        public IncludeBinaryFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.IncludeBinaryFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.IncludeBinaryFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIncludeBinaryFile;
    public bool IncludeBinaryFile(FString Filename) {
        _ptrIncludeBinaryFile ??= FindFunction("Function IpDrv.WebResponse.IncludeBinaryFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrIncludeBinaryFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIncludeBinaryFile, @params);
        _ptrIncludeBinaryFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.WebResponse.IncludeUHTM
    // 0xBB2B50
    // (Final | Native | Public)
    public unsafe class IncludeUHTM_Parameters : BaseObject {
        public IncludeUHTM_Parameters() { }
        public IncludeUHTM_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.IncludeUHTM.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.IncludeUHTM.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIncludeUHTM;
    public bool IncludeUHTM(FString Filename) {
        _ptrIncludeUHTM ??= FindFunction("Function IpDrv.WebResponse.IncludeUHTM");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrIncludeUHTM.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIncludeUHTM, @params);
        _ptrIncludeUHTM.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.WebResponse.ClearSubst
    // 0xBB2B10
    // (Final | Native | Public)
    public unsafe class ClearSubst_Parameters : BaseObject {
        public ClearSubst_Parameters() { }
        public ClearSubst_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearSubst;
    public void ClearSubst() {
        _ptrClearSubst ??= FindFunction("Function IpDrv.WebResponse.ClearSubst");

        _ptrClearSubst.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrClearSubst, null);
        _ptrClearSubst.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.WebResponse.Subst
    // 0xBB29D0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class Subst_Parameters : BaseObject {
        public Subst_Parameters() { }
        public Subst_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.Subst.Variable
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Variable {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebResponse.Subst.Value
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.Subst.bClear
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bClear {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSubst;
    public void Subst(FString Variable, FString Value, bool bClear = false) {
        _ptrSubst ??= FindFunction("Function IpDrv.WebResponse.Subst");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Variable.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bClear, @params + 32, 4, 4);

        _ptrSubst.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSubst, @params);
        _ptrSubst.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function IpDrv.WebResponse.FileExists
    // 0xBB2910
    // (Final | Native | Public)
    public unsafe class FileExists_Parameters : BaseObject {
        public FileExists_Parameters() { }
        public FileExists_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebResponse.FileExists.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.WebResponse.FileExists.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrFileExists;
    public bool FileExists(FString Filename) {
        _ptrFileExists ??= FindFunction("Function IpDrv.WebResponse.FileExists");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        _ptrFileExists.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFileExists, @params);
        _ptrFileExists.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.WebResponse");
            return _staticClass;
        }
    }
}

// Class IpDrv.OnlinePlaylistProvider
// 0x30 (0x9C - 0xCC)
// (Compiled | Config | Transient | Parsed | Localized | Native | PerObjectConfig)
public unsafe partial class UOnlinePlaylistProvider : UUIResourceDataProvider {
    public UOnlinePlaylistProvider() { }
    public UOnlinePlaylistProvider(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x4

    // IntProperty IpDrv.OnlinePlaylistProvider.PlaylistId
    // 0xA0 (0x4)
    // (Config)
    public int PlaylistId {
        get => *(int*)(Pointer + 160);
        set => *(int*)(Pointer + 160) = value;
    }

    // MISSED OFFSET: 0x4

    // ArrayProperty IpDrv.OnlinePlaylistProvider.PlaylistGameTypeNames
    // 0xA8 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FName> PlaylistGameTypeNames {
        get => new(Pointer + 168, 8);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }

    // StrProperty IpDrv.OnlinePlaylistProvider.DisplayName
    // 0xB8 (0x10)
    // (Const | Config | Localized | NeedCtorLink)
    public FString DisplayName {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // IntProperty IpDrv.OnlinePlaylistProvider.Priority
    // 0xC8 (0x4)
    // (Config)
    public int Priority {
        get => *(int*)(Pointer + 200);
        set => *(int*)(Pointer + 200) = value;
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.OnlinePlaylistProvider");
            return _staticClass;
        }
    }
}

// Class IpDrv.UIDataStore_OnlinePlaylists
// 0x60 (0xA0 - 0x100)
// (Compiled | Config | Transient | Parsed | Native)
public unsafe partial class UUIDataStore_OnlinePlaylists : UUIDataStore {
    public UUIDataStore_OnlinePlaylists() { }
    public UUIDataStore_OnlinePlaylists(nint pointer) : base(pointer) { }


    public const string PRIVATEPROVIDERTAG = "PlaylistsPrivate";
    public const string RECMODEPROVIDERTAG = "PlaylistsRecMode";
    public const string UNRANKEDPROVIDERTAG = "PlaylistsUnranked";
    public const string RANKEDPROVIDERTAG = "PlaylistsRanked";


    // StrProperty IpDrv.UIDataStore_OnlinePlaylists.ProviderClassName
    // 0xA0 (0x10)
    // (Config | NeedCtorLink)
    public FString ProviderClassName {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // ClassProperty IpDrv.UIDataStore_OnlinePlaylists.ProviderClass
    // 0xB0 (0x8)
    // (Transient)
    public UClass ProviderClass {
        get {
            var pointer = *(nint*)(Pointer + 176);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 176) = value.Pointer;
    }

    // ArrayProperty IpDrv.UIDataStore_OnlinePlaylists.RankedDataProviders
    // 0xB8 (0x10)
    // (Const | NeedCtorLink)
    public PointerTArray<UUIResourceDataProvider> RankedDataProviders {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // ArrayProperty IpDrv.UIDataStore_OnlinePlaylists.UnrankedDataProviders
    // 0xC8 (0x10)
    // (Const | NeedCtorLink)
    public PointerTArray<UUIResourceDataProvider> UnrankedDataProviders {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 16, 16);
    }

    // ArrayProperty IpDrv.UIDataStore_OnlinePlaylists.RecModeDataProviders
    // 0xD8 (0x10)
    // (Const | NeedCtorLink)
    public PointerTArray<UUIResourceDataProvider> RecModeDataProviders {
        get => new(Pointer + 216);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 16, 16);
    }

    // ArrayProperty IpDrv.UIDataStore_OnlinePlaylists.PrivateDataProviders
    // 0xE8 (0x10)
    // (Const | NeedCtorLink)
    public PointerTArray<UUIResourceDataProvider> PrivateDataProviders {
        get => new(Pointer + 232);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // ObjectProperty IpDrv.UIDataStore_OnlinePlaylists.PlaylistMan
    // 0xF8 (0x8)
    public UOnlinePlaylistManager PlaylistMan {
        get {
            var pointer = *(nint*)(Pointer + 248);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 248) = value.Pointer;
    }


    // Function IpDrv.UIDataStore_OnlinePlaylists.GetMatchTypeForPlaylistId
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class GetMatchTypeForPlaylistId_Parameters : BaseObject {
        public GetMatchTypeForPlaylistId_Parameters() { }
        public GetMatchTypeForPlaylistId_Parameters(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.UIDataStore_OnlinePlaylists.GetMatchTypeForPlaylistId.PlaylistId
        // 0x0 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty IpDrv.UIDataStore_OnlinePlaylists.GetMatchTypeForPlaylistId.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrGetMatchTypeForPlaylistId;
    public int GetMatchTypeForPlaylistId(int PlaylistId) {
        _ptrGetMatchTypeForPlaylistId ??= FindFunction("Function IpDrv.UIDataStore_OnlinePlaylists.GetMatchTypeForPlaylistId");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&PlaylistId, @params, 4, 4);

        ProcessEvent(_ptrGetMatchTypeForPlaylistId, @params);

        return *(int*)(@params + 4);
    }

    // Function IpDrv.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class GetOnlinePlaylistProvider_Parameters : BaseObject {
        public GetOnlinePlaylistProvider_Parameters() { }
        public GetOnlinePlaylistProvider_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider.ProviderTag
        // 0x0 (0x8)
        // (Param)
        public FName ProviderTag {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // IntProperty IpDrv.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider.PlaylistId
        // 0x8 (0x4)
        // (Param)
        public int PlaylistId {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty IpDrv.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider.ProviderIndex
        // 0xC (0x4)
        // (OptionalParam | Param | OutParam)
        public int ProviderIndex {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // ObjectProperty IpDrv.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UOnlinePlaylistProvider ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrGetOnlinePlaylistProvider;
    public static UOnlinePlaylistProvider GetOnlinePlaylistProvider(FName ProviderTag, int PlaylistId, ref int ProviderIndex) {
        _ptrGetOnlinePlaylistProvider ??= FindFunction("Function IpDrv.UIDataStore_OnlinePlaylists.GetOnlinePlaylistProvider");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ProviderTag.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&PlaylistId, @params + 8, 4, 4);
        var _ProviderIndex = ProviderIndex;
        System.Buffer.MemoryCopy(&_ProviderIndex, @params + 12, 4, 4);

        StaticClass.ProcessEvent(_ptrGetOnlinePlaylistProvider, @params);

        ProviderIndex = *(int*)(@params + 12);

        return new(*(nint*)(@params + 16));
    }

    // Function IpDrv.UIDataStore_OnlinePlaylists.GetPlaylistProvider
    // 0xBA5D70
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetPlaylistProvider_Parameters : BaseObject {
        public GetPlaylistProvider_Parameters() { }
        public GetPlaylistProvider_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.UIDataStore_OnlinePlaylists.GetPlaylistProvider.ProviderTag
        // 0x0 (0x8)
        // (Param)
        public FName ProviderTag {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // IntProperty IpDrv.UIDataStore_OnlinePlaylists.GetPlaylistProvider.ProviderIndex
        // 0x8 (0x4)
        // (Param)
        public int ProviderIndex {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // MISSED OFFSET: 0x4

        // ObjectProperty IpDrv.UIDataStore_OnlinePlaylists.GetPlaylistProvider.out_Provider
        // 0x10 (0x8)
        // (Param | OutParam)
        public UUIResourceDataProvider out_Provider {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // BoolProperty IpDrv.UIDataStore_OnlinePlaylists.GetPlaylistProvider.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetPlaylistProvider;
    public bool GetPlaylistProvider(FName ProviderTag, int ProviderIndex, ref UUIResourceDataProvider out_Provider) {
        _ptrGetPlaylistProvider ??= FindFunction("Function IpDrv.UIDataStore_OnlinePlaylists.GetPlaylistProvider");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)ProviderTag.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&ProviderIndex, @params + 8, 4, 4);
        System.Buffer.MemoryCopy((void*)out_Provider.Pointer, @params + 16, 8, 8);

        _ptrGetPlaylistProvider.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetPlaylistProvider, @params);
        _ptrGetPlaylistProvider.FunctionFlags |= (ulong)EFunctionFlags.Native;

        out_Provider = new(*(nint*)(@params + 16));

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.UIDataStore_OnlinePlaylists.GetResourceProviders
    // 0xBA5C50
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetResourceProviders_Parameters : BaseObject {
        public GetResourceProviders_Parameters() { }
        public GetResourceProviders_Parameters(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.UIDataStore_OnlinePlaylists.GetResourceProviders.ProviderTag
        // 0x0 (0x8)
        // (Param)
        public FName ProviderTag {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ArrayProperty IpDrv.UIDataStore_OnlinePlaylists.GetResourceProviders.out_Providers
        // 0x8 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public PointerTArray<UUIResourceDataProvider> out_Providers {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // BoolProperty IpDrv.UIDataStore_OnlinePlaylists.GetResourceProviders.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetResourceProviders;
    public bool GetResourceProviders(FName ProviderTag, ref PointerTArray<UUIResourceDataProvider> out_Providers) {
        _ptrGetResourceProviders ??= FindFunction("Function IpDrv.UIDataStore_OnlinePlaylists.GetResourceProviders");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)ProviderTag.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)out_Providers.Pointer, @params + 8, 16, 16);

        _ptrGetResourceProviders.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetResourceProviders, @params);
        _ptrGetResourceProviders.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _out_ProvidersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_out_ProvidersPtr, 16, 16);
        out_Providers = new(_out_ProvidersPtr) { Allocated = true };

        return *(bool*)(@params + 24);
    }

    // Function IpDrv.UIDataStore_OnlinePlaylists.Init
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class Init_Parameters : BaseObject {
        public Init_Parameters() { }
        public Init_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrInit;
    public void Init() {
        _ptrInit ??= FindFunction("Function IpDrv.UIDataStore_OnlinePlaylists.Init");

        ProcessEvent(_ptrInit, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.UIDataStore_OnlinePlaylists");
            return _staticClass;
        }
    }
}

// Class IpDrv.WebApplication
// 0x20 (0x60 - 0x80)
// (Compiled | Parsed)
public unsafe partial class UWebApplication : UObject {
    public UWebApplication() { }
    public UWebApplication(nint pointer) : base(pointer) { }


    // ObjectProperty IpDrv.WebApplication.WorldInfo
    // 0x60 (0x8)
    public AWorldInfo WorldInfo {
        get {
            var pointer = *(nint*)(Pointer + 96);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 96) = value.Pointer;
    }

    // ObjectProperty IpDrv.WebApplication.WebServer
    // 0x68 (0x8)
    public AWebServer WebServer {
        get {
            var pointer = *(nint*)(Pointer + 104);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 104) = value.Pointer;
    }

    // StrProperty IpDrv.WebApplication.Path
    // 0x70 (0x10)
    // (NeedCtorLink)
    public FString Path {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }


    // Function IpDrv.WebApplication.PostQuery
    // 0x3750E0
    // (Final | Public)
    public unsafe class PostQuery_Parameters : BaseObject {
        public PostQuery_Parameters() { }
        public PostQuery_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.WebApplication.PostQuery.Request
        // 0x0 (0x8)
        // (Param)
        public UWebRequest Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.WebApplication.PostQuery.Response
        // 0x8 (0x8)
        // (Param)
        public UWebResponse Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrPostQuery;
    public void PostQuery(UWebRequest Request, UWebResponse Response) {
        _ptrPostQuery ??= FindFunction("Function IpDrv.WebApplication.PostQuery");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);

        ProcessEvent(_ptrPostQuery, @params);
    }

    // Function IpDrv.WebApplication.Query
    // 0x3750E0
    // (Public)
    public unsafe class Query_Parameters : BaseObject {
        public Query_Parameters() { }
        public Query_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.WebApplication.Query.Request
        // 0x0 (0x8)
        // (Param)
        public UWebRequest Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.WebApplication.Query.Response
        // 0x8 (0x8)
        // (Param)
        public UWebResponse Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrQuery;
    public void Query(UWebRequest Request, UWebResponse Response) {
        _ptrQuery ??= FindFunction("Function IpDrv.WebApplication.Query");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);

        ProcessEvent(_ptrQuery, @params);
    }

    // Function IpDrv.WebApplication.PreQuery
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class PreQuery_Parameters : BaseObject {
        public PreQuery_Parameters() { }
        public PreQuery_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.WebApplication.PreQuery.Request
        // 0x0 (0x8)
        // (Param)
        public UWebRequest Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.WebApplication.PreQuery.Response
        // 0x8 (0x8)
        // (Param)
        public UWebResponse Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.WebApplication.PreQuery.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrPreQuery;
    public bool PreQuery(UWebRequest Request, UWebResponse Response) {
        _ptrPreQuery ??= FindFunction("Function IpDrv.WebApplication.PreQuery");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);

        ProcessEvent(_ptrPreQuery, @params);

        return *(bool*)(@params + 16);
    }

    // Function IpDrv.WebApplication.CleanupApp
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class CleanupApp_Parameters : BaseObject {
        public CleanupApp_Parameters() { }
        public CleanupApp_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCleanupApp;
    public void CleanupApp() {
        _ptrCleanupApp ??= FindFunction("Function IpDrv.WebApplication.CleanupApp");

        ProcessEvent(_ptrCleanupApp, null);
    }

    // Function IpDrv.WebApplication.Cleanup
    // 0x3750E0
    // (Final | Public)
    public unsafe class Cleanup_Parameters : BaseObject {
        public Cleanup_Parameters() { }
        public Cleanup_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCleanup;
    public void Cleanup() {
        _ptrCleanup ??= FindFunction("Function IpDrv.WebApplication.Cleanup");

        ProcessEvent(_ptrCleanup, null);
    }

    // Function IpDrv.WebApplication.Init
    // 0x3750E0
    // (Public)
    public unsafe class Init_Parameters : BaseObject {
        public Init_Parameters() { }
        public Init_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrInit;
    public void Init() {
        _ptrInit ??= FindFunction("Function IpDrv.WebApplication.Init");

        ProcessEvent(_ptrInit, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.WebApplication");
            return _staticClass;
        }
    }
}

// Class IpDrv.WebServer
// 0x1D0 (0x2D8 - 0x4A8)
// (Compiled | Config | Transient | Parsed | Hidden)
public unsafe partial class AWebServer : ATcpLink {
    public AWebServer() { }
    public AWebServer(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.WebServer.ServerName
    // 0x2D8 (0x10)
    // (Config | NeedCtorLink)
    public FString ServerName {
        get => new(Pointer + 728);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 728), 16, 16);
    }

    // StrProperty IpDrv.WebServer.Applications
    // 0x2E8 (0xA0)
    // (Config | NeedCtorLink)
    // Fixed array size: 10
    public StructFixedArray<FString> Applications {
        get => new(Pointer + 744, 16, 10);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 744), 160, 160);
    }

    // StrProperty IpDrv.WebServer.ApplicationPaths
    // 0x388 (0xA0)
    // (Config | NeedCtorLink)
    // Fixed array size: 10
    public StructFixedArray<FString> ApplicationPaths {
        get => new(Pointer + 904, 16, 10);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 904), 160, 160);
    }

    // BoolProperty IpDrv.WebServer.bEnabled
    // 0x428 (0x4)
    // Bitmask: 0x00000001
    // (Config)
    public bool bEnabled {
        get => (*(uint*)(Pointer + 1064) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 1064) |= 0x1;
            else *(uint*)(Pointer + 1064) &= ~(uint)0x1;
        }
    }

    // IntProperty IpDrv.WebServer.ListenPort
    // 0x42C (0x4)
    // (Config)
    public int ListenPort {
        get => *(int*)(Pointer + 1068);
        set => *(int*)(Pointer + 1068) = value;
    }

    // IntProperty IpDrv.WebServer.MaxConnections
    // 0x430 (0x4)
    // (Config)
    public int MaxConnections {
        get => *(int*)(Pointer + 1072);
        set => *(int*)(Pointer + 1072) = value;
    }

    // IntProperty IpDrv.WebServer.DefaultApplication
    // 0x434 (0x4)
    // (Config)
    public int DefaultApplication {
        get => *(int*)(Pointer + 1076);
        set => *(int*)(Pointer + 1076) = value;
    }

    // IntProperty IpDrv.WebServer.ExpirationSeconds
    // 0x438 (0x4)
    // (Config)
    public int ExpirationSeconds {
        get => *(int*)(Pointer + 1080);
        set => *(int*)(Pointer + 1080) = value;
    }

    // MISSED OFFSET: 0x4

    // StrProperty IpDrv.WebServer.ServerURL
    // 0x440 (0x10)
    // (NeedCtorLink)
    public FString ServerURL {
        get => new(Pointer + 1088);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 1088), 16, 16);
    }

    // ObjectProperty IpDrv.WebServer.ApplicationObjects
    // 0x450 (0x50)
    // Fixed array size: 10
    public PointerFixedArray<UWebApplication> ApplicationObjects {
        get => new(Pointer + 1104, 10);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 1104), 80, 80);
    }

    // IntProperty IpDrv.WebServer.ConnectionCount
    // 0x4A0 (0x4)
    public int ConnectionCount {
        get => *(int*)(Pointer + 1184);
        set => *(int*)(Pointer + 1184) = value;
    }

    // IntProperty IpDrv.WebServer.ConnID
    // 0x4A4 (0x4)
    public int ConnID {
        get => *(int*)(Pointer + 1188);
        set => *(int*)(Pointer + 1188) = value;
    }


    // Function IpDrv.WebServer.GetApplication
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetApplication_Parameters : BaseObject {
        public GetApplication_Parameters() { }
        public GetApplication_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebServer.GetApplication.URI
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString URI {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.WebServer.GetApplication.SubURI
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString SubURI {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ObjectProperty IpDrv.WebServer.GetApplication.ReturnValue
        // 0x20 (0x8)
        // (Param | OutParam | ReturnParam)
        public UWebApplication ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }
    private static UFunction _ptrGetApplication;
    public UWebApplication GetApplication(FString URI, ref FString SubURI) {
        _ptrGetApplication ??= FindFunction("Function IpDrv.WebServer.GetApplication");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)URI.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SubURI.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetApplication, @params);

        var _SubURIPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_SubURIPtr, 16, 16);
        SubURI = new(_SubURIPtr) { Allocated = true };

        return new(*(nint*)(@params + 32));
    }

    // Function IpDrv.WebServer.LostChild
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class LostChild_Parameters : BaseObject {
        public LostChild_Parameters() { }
        public LostChild_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.WebServer.LostChild.C
        // 0x0 (0x8)
        // (Param)
        public AActor C {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrLostChild;
    public void LostChild(AActor C) {
        _ptrLostChild ??= FindFunction("Function IpDrv.WebServer.LostChild");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 8, 8);

        ProcessEvent(_ptrLostChild, @params);
    }

    // Function IpDrv.WebServer.GainedChild
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class GainedChild_Parameters : BaseObject {
        public GainedChild_Parameters() { }
        public GainedChild_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.WebServer.GainedChild.C
        // 0x0 (0x8)
        // (Param)
        public AActor C {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrGainedChild;
    public void GainedChild(AActor C) {
        _ptrGainedChild ??= FindFunction("Function IpDrv.WebServer.GainedChild");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 8, 8);

        ProcessEvent(_ptrGainedChild, @params);
    }

    // Function IpDrv.WebServer.Destroyed
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Destroyed_Parameters : BaseObject {
        public Destroyed_Parameters() { }
        public Destroyed_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDestroyed;
    public void Destroyed() {
        _ptrDestroyed ??= FindFunction("Function IpDrv.WebServer.Destroyed");

        ProcessEvent(_ptrDestroyed, null);
    }

    // Function IpDrv.WebServer.PostBeginPlay
    // 0x3750E0
    // (Defined | Public | HasDefaults)
    public unsafe class PostBeginPlay_Parameters : BaseObject {
        public PostBeginPlay_Parameters() { }
        public PostBeginPlay_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrPostBeginPlay;
    public void PostBeginPlay() {
        _ptrPostBeginPlay ??= FindFunction("Function IpDrv.WebServer.PostBeginPlay");

        ProcessEvent(_ptrPostBeginPlay, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.WebServer");
            return _staticClass;
        }
    }
}

// Class IpDrv.HelloWeb
// 0x0 (0x80 - 0x80)
// (Compiled | Parsed)
public unsafe partial class UHelloWeb : UWebApplication {
    public UHelloWeb() { }
    public UHelloWeb(nint pointer) : base(pointer) { }


    // Function IpDrv.HelloWeb.Query
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Query_Parameters : BaseObject {
        public Query_Parameters() { }
        public Query_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.HelloWeb.Query.Request
        // 0x0 (0x8)
        // (Param)
        public UWebRequest Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.HelloWeb.Query.Response
        // 0x8 (0x8)
        // (Param)
        public UWebResponse Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrQuery;
    public void Query(UWebRequest Request, UWebResponse Response) {
        _ptrQuery ??= FindFunction("Function IpDrv.HelloWeb.Query");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);

        ProcessEvent(_ptrQuery, @params);
    }

    // Function IpDrv.HelloWeb.Init
    // 0x3750E0
    // (Defined | Public)
    public unsafe class Init_Parameters : BaseObject {
        public Init_Parameters() { }
        public Init_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrInit;
    public void Init() {
        _ptrInit ??= FindFunction("Function IpDrv.HelloWeb.Init");

        ProcessEvent(_ptrInit, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.HelloWeb");
            return _staticClass;
        }
    }
}

// Class IpDrv.ImageServer
// 0x0 (0x80 - 0x80)
// (Compiled | Parsed)
public unsafe partial class UImageServer : UWebApplication {
    public UImageServer() { }
    public UImageServer(nint pointer) : base(pointer) { }


    // Function IpDrv.ImageServer.Query
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Query_Parameters : BaseObject {
        public Query_Parameters() { }
        public Query_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.ImageServer.Query.Request
        // 0x0 (0x8)
        // (Param)
        public UWebRequest Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.ImageServer.Query.Response
        // 0x8 (0x8)
        // (Param)
        public UWebResponse Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrQuery;
    public void Query(UWebRequest Request, UWebResponse Response) {
        _ptrQuery ??= FindFunction("Function IpDrv.ImageServer.Query");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);

        ProcessEvent(_ptrQuery, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.ImageServer");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpServiceConfig
// 0x40 (0x60 - 0xA0)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpServiceConfig : UObject {
    public UMcpServiceConfig() { }
    public UMcpServiceConfig(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpServiceConfig.Protocol
    // 0x60 (0x10)
    // (Config | NeedCtorLink)
    public FString Protocol {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // StrProperty IpDrv.McpServiceConfig.Domain
    // 0x70 (0x10)
    // (Config | NeedCtorLink)
    public FString Domain {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }

    // StrProperty IpDrv.McpServiceConfig.AppKey
    // 0x80 (0x10)
    // (NeedCtorLink)
    public FString AppKey {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // StrProperty IpDrv.McpServiceConfig.AppSecret
    // 0x90 (0x10)
    // (NeedCtorLink)
    public FString AppSecret {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }


    // Function IpDrv.McpServiceConfig.GetUserAuthTicket
    // 0x3750E0
    // (Final | Public)
    public unsafe class GetUserAuthTicket_Parameters : BaseObject {
        public GetUserAuthTicket_Parameters() { }
        public GetUserAuthTicket_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpServiceConfig.GetUserAuthTicket.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpServiceConfig.GetUserAuthTicket.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetUserAuthTicket;
    public FString GetUserAuthTicket(FString McpId) {
        _ptrGetUserAuthTicket ??= FindFunction("Function IpDrv.McpServiceConfig.GetUserAuthTicket");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetUserAuthTicket, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpServiceConfig");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpClashMobBase
// 0xA0 (0x78 - 0x118)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpClashMobBase : UMcpServiceBase {
    public UMcpClashMobBase() { }
    public UMcpClashMobBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpClashMobBase.McpClashMobClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpClashMobClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.McpClashMobBase.__OnQueryChallengeListComplete__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryChallengeListComplete__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty IpDrv.McpClashMobBase.__OnDownloadChallengeFileComplete__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDownloadChallengeFileComplete__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }

    // DelegateProperty IpDrv.McpClashMobBase.__OnAcceptChallengeComplete__Delegate
    // 0xB8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAcceptChallengeComplete__Delegate {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 24, 24);
    }

    // DelegateProperty IpDrv.McpClashMobBase.__OnQueryChallengeUserStatusComplete__Delegate
    // 0xD0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryChallengeUserStatusComplete__Delegate {
        get => new(Pointer + 208);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 24, 24);
    }

    // DelegateProperty IpDrv.McpClashMobBase.__OnUpdateChallengeUserProgressComplete__Delegate
    // 0xE8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnUpdateChallengeUserProgressComplete__Delegate {
        get => new(Pointer + 232);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 24, 24);
    }

    // DelegateProperty IpDrv.McpClashMobBase.__OnUpdateChallengeUserRewardComplete__Delegate
    // 0x100 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnUpdateChallengeUserRewardComplete__Delegate {
        get => new(Pointer + 256);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 24, 24);
    }


    // Function IpDrv.McpClashMobBase.UpdateChallengeUserReward
    // 0x3750E0
    // (Public)
    public unsafe class UpdateChallengeUserReward_Parameters : BaseObject {
        public UpdateChallengeUserReward_Parameters() { }
        public UpdateChallengeUserReward_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.UpdateChallengeUserReward.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.UpdateChallengeUserReward.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobBase.UpdateChallengeUserReward.UserReward
        // 0x20 (0x4)
        // (Param)
        public int UserReward {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrUpdateChallengeUserReward;
    public void UpdateChallengeUserReward(FString UniqueChallengeId, FString UniqueUserId, int UserReward) {
        _ptrUpdateChallengeUserReward ??= FindFunction("Function IpDrv.McpClashMobBase.UpdateChallengeUserReward");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&UserReward, @params + 32, 4, 4);

        ProcessEvent(_ptrUpdateChallengeUserReward, @params);
    }

    // Function IpDrv.McpClashMobBase.OnUpdateChallengeUserRewardComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnUpdateChallengeUserRewardComplete_Parameters : BaseObject {
        public OnUpdateChallengeUserRewardComplete_Parameters() { }
        public OnUpdateChallengeUserRewardComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserRewardComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserRewardComplete.UniqueChallengeId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserRewardComplete.UniqueUserId
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserRewardComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnUpdateChallengeUserRewardComplete;
    public void OnUpdateChallengeUserRewardComplete(bool bWasSuccessful, FString UniqueChallengeId, FString UniqueUserId, FString Error) {
        _ptrOnUpdateChallengeUserRewardComplete ??= FindFunction("Function IpDrv.McpClashMobBase.OnUpdateChallengeUserRewardComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnUpdateChallengeUserRewardComplete, @params);
    }

    // Function IpDrv.McpClashMobBase.UpdateChallengeUserProgress
    // 0x3750E0
    // (Public)
    public unsafe class UpdateChallengeUserProgress_Parameters : BaseObject {
        public UpdateChallengeUserProgress_Parameters() { }
        public UpdateChallengeUserProgress_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.UpdateChallengeUserProgress.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.UpdateChallengeUserProgress.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpClashMobBase.UpdateChallengeUserProgress.bDidComplete
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bDidComplete {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // IntProperty IpDrv.McpClashMobBase.UpdateChallengeUserProgress.GoalProgress
        // 0x24 (0x4)
        // (Param)
        public int GoalProgress {
            get => *(int*)(Pointer + 36);
            set => *(int*)(Pointer + 36) = value;
        }
    }
    private static UFunction _ptrUpdateChallengeUserProgress;
    public void UpdateChallengeUserProgress(FString UniqueChallengeId, FString UniqueUserId, bool bDidComplete, int GoalProgress) {
        _ptrUpdateChallengeUserProgress ??= FindFunction("Function IpDrv.McpClashMobBase.UpdateChallengeUserProgress");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bDidComplete, @params + 32, 4, 4);
        System.Buffer.MemoryCopy(&GoalProgress, @params + 36, 4, 4);

        ProcessEvent(_ptrUpdateChallengeUserProgress, @params);
    }

    // Function IpDrv.McpClashMobBase.OnUpdateChallengeUserProgressComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnUpdateChallengeUserProgressComplete_Parameters : BaseObject {
        public OnUpdateChallengeUserProgressComplete_Parameters() { }
        public OnUpdateChallengeUserProgressComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserProgressComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserProgressComplete.UniqueChallengeId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserProgressComplete.UniqueUserId
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnUpdateChallengeUserProgressComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnUpdateChallengeUserProgressComplete;
    public void OnUpdateChallengeUserProgressComplete(bool bWasSuccessful, FString UniqueChallengeId, FString UniqueUserId, FString Error) {
        _ptrOnUpdateChallengeUserProgressComplete ??= FindFunction("Function IpDrv.McpClashMobBase.OnUpdateChallengeUserProgressComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnUpdateChallengeUserProgressComplete, @params);
    }

    // Function IpDrv.McpClashMobBase.GetChallengeUserStatus
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetChallengeUserStatus_Parameters : BaseObject {
        public GetChallengeUserStatus_Parameters() { }
        public GetChallengeUserStatus_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.GetChallengeUserStatus.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.GetChallengeUserStatus.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty IpDrv.McpClashMobBase.GetChallengeUserStatus.OutChallengeUserStatus
        // 0x20 (0x90)
        // (Param | OutParam | NeedCtorLink)
        public FMcpClashMobChallengeUserStatus OutChallengeUserStatus {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 144, 144);
        }
    }
    private static UFunction _ptrGetChallengeUserStatus;
    public void GetChallengeUserStatus(FString UniqueChallengeId, FString UniqueUserId, ref FMcpClashMobChallengeUserStatus OutChallengeUserStatus) {
        _ptrGetChallengeUserStatus ??= FindFunction("Function IpDrv.McpClashMobBase.GetChallengeUserStatus");

        var @params = stackalloc byte[176];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)OutChallengeUserStatus.Pointer, @params + 32, 144, 144);

        ProcessEvent(_ptrGetChallengeUserStatus, @params);

        var _OutChallengeUserStatusPtr = Marshal.AllocHGlobal(144);
        System.Buffer.MemoryCopy(@params + 32, (void*)_OutChallengeUserStatusPtr, 144, 144);
        OutChallengeUserStatus = new(_OutChallengeUserStatusPtr) { Allocated = true };
    }

    // Function IpDrv.McpClashMobBase.QueryChallengeMultiUserStatus
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class QueryChallengeMultiUserStatus_Parameters : BaseObject {
        public QueryChallengeMultiUserStatus_Parameters() { }
        public QueryChallengeMultiUserStatus_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.QueryChallengeMultiUserStatus.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.QueryChallengeMultiUserStatus.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobBase.QueryChallengeMultiUserStatus.UserIdsToRead
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> UserIdsToRead {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrQueryChallengeMultiUserStatus;
    public void QueryChallengeMultiUserStatus(FString UniqueChallengeId, FString UniqueUserId, ref StructTArray<FString> UserIdsToRead) {
        _ptrQueryChallengeMultiUserStatus ??= FindFunction("Function IpDrv.McpClashMobBase.QueryChallengeMultiUserStatus");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UserIdsToRead.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrQueryChallengeMultiUserStatus, @params);

        var _UserIdsToReadPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_UserIdsToReadPtr, 16, 16);
        UserIdsToRead = new(_UserIdsToReadPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpClashMobBase.QueryChallengeUserStatus
    // 0x3750E0
    // (Public)
    public unsafe class QueryChallengeUserStatus_Parameters : BaseObject {
        public QueryChallengeUserStatus_Parameters() { }
        public QueryChallengeUserStatus_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.QueryChallengeUserStatus.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.QueryChallengeUserStatus.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryChallengeUserStatus;
    public void QueryChallengeUserStatus(FString UniqueChallengeId, FString UniqueUserId) {
        _ptrQueryChallengeUserStatus ??= FindFunction("Function IpDrv.McpClashMobBase.QueryChallengeUserStatus");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryChallengeUserStatus, @params);
    }

    // Function IpDrv.McpClashMobBase.OnQueryChallengeUserStatusComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryChallengeUserStatusComplete_Parameters : BaseObject {
        public OnQueryChallengeUserStatusComplete_Parameters() { }
        public OnQueryChallengeUserStatusComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.OnQueryChallengeUserStatusComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.OnQueryChallengeUserStatusComplete.UniqueChallengeId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnQueryChallengeUserStatusComplete.UniqueUserId
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnQueryChallengeUserStatusComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryChallengeUserStatusComplete;
    public void OnQueryChallengeUserStatusComplete(bool bWasSuccessful, FString UniqueChallengeId, FString UniqueUserId, FString Error) {
        _ptrOnQueryChallengeUserStatusComplete ??= FindFunction("Function IpDrv.McpClashMobBase.OnQueryChallengeUserStatusComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnQueryChallengeUserStatusComplete, @params);
    }

    // Function IpDrv.McpClashMobBase.AcceptChallenge
    // 0x3750E0
    // (Public)
    public unsafe class AcceptChallenge_Parameters : BaseObject {
        public AcceptChallenge_Parameters() { }
        public AcceptChallenge_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.AcceptChallenge.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.AcceptChallenge.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrAcceptChallenge;
    public void AcceptChallenge(FString UniqueChallengeId, FString UniqueUserId) {
        _ptrAcceptChallenge ??= FindFunction("Function IpDrv.McpClashMobBase.AcceptChallenge");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrAcceptChallenge, @params);
    }

    // Function IpDrv.McpClashMobBase.OnAcceptChallengeComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAcceptChallengeComplete_Parameters : BaseObject {
        public OnAcceptChallengeComplete_Parameters() { }
        public OnAcceptChallengeComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.OnAcceptChallengeComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.OnAcceptChallengeComplete.UniqueChallengeId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnAcceptChallengeComplete.UniqueUserId
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnAcceptChallengeComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnAcceptChallengeComplete;
    public void OnAcceptChallengeComplete(bool bWasSuccessful, FString UniqueChallengeId, FString UniqueUserId, FString Error) {
        _ptrOnAcceptChallengeComplete ??= FindFunction("Function IpDrv.McpClashMobBase.OnAcceptChallengeComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnAcceptChallengeComplete, @params);
    }

    // Function IpDrv.McpClashMobBase.DeleteCachedChallengeFile
    // 0x3750E0
    // (Public)
    public unsafe class DeleteCachedChallengeFile_Parameters : BaseObject {
        public DeleteCachedChallengeFile_Parameters() { }
        public DeleteCachedChallengeFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.DeleteCachedChallengeFile.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.DeleteCachedChallengeFile.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDeleteCachedChallengeFile;
    public void DeleteCachedChallengeFile(FString UniqueChallengeId, FString DLName) {
        _ptrDeleteCachedChallengeFile ??= FindFunction("Function IpDrv.McpClashMobBase.DeleteCachedChallengeFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDeleteCachedChallengeFile, @params);
    }

    // Function IpDrv.McpClashMobBase.ClearCachedChallengeFile
    // 0x3750E0
    // (Public)
    public unsafe class ClearCachedChallengeFile_Parameters : BaseObject {
        public ClearCachedChallengeFile_Parameters() { }
        public ClearCachedChallengeFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.ClearCachedChallengeFile.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.ClearCachedChallengeFile.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrClearCachedChallengeFile;
    public void ClearCachedChallengeFile(FString UniqueChallengeId, FString DLName) {
        _ptrClearCachedChallengeFile ??= FindFunction("Function IpDrv.McpClashMobBase.ClearCachedChallengeFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrClearCachedChallengeFile, @params);
    }

    // Function IpDrv.McpClashMobBase.GetChallengeFileContents
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetChallengeFileContents_Parameters : BaseObject {
        public GetChallengeFileContents_Parameters() { }
        public GetChallengeFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.GetChallengeFileContents.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.GetChallengeFileContents.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobBase.GetChallengeFileContents.OutFileContents
        // 0x20 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> OutFileContents {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetChallengeFileContents;
    public void GetChallengeFileContents(FString UniqueChallengeId, FString DLName, ref UnmanagedTArray<byte> OutFileContents) {
        _ptrGetChallengeFileContents ??= FindFunction("Function IpDrv.McpClashMobBase.GetChallengeFileContents");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)OutFileContents.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrGetChallengeFileContents, @params);

        var _OutFileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_OutFileContentsPtr, 16, 16);
        OutFileContents = new(_OutFileContentsPtr) { Allocated = true };
    }

    // Function IpDrv.McpClashMobBase.DownloadChallengeFile
    // 0x3750E0
    // (Public)
    public unsafe class DownloadChallengeFile_Parameters : BaseObject {
        public DownloadChallengeFile_Parameters() { }
        public DownloadChallengeFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.DownloadChallengeFile.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.DownloadChallengeFile.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDownloadChallengeFile;
    public void DownloadChallengeFile(FString UniqueChallengeId, FString DLName) {
        _ptrDownloadChallengeFile ??= FindFunction("Function IpDrv.McpClashMobBase.DownloadChallengeFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDownloadChallengeFile, @params);
    }

    // Function IpDrv.McpClashMobBase.GetChallengeFileList
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetChallengeFileList_Parameters : BaseObject {
        public GetChallengeFileList_Parameters() { }
        public GetChallengeFileList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.GetChallengeFileList.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobBase.GetChallengeFileList.OutChallengeFiles
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpClashMobChallengeFile> OutChallengeFiles {
            get => new(Pointer + 16, 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetChallengeFileList;
    public void GetChallengeFileList(FString UniqueChallengeId, ref StructTArray<FMcpClashMobChallengeFile> OutChallengeFiles) {
        _ptrGetChallengeFileList ??= FindFunction("Function IpDrv.McpClashMobBase.GetChallengeFileList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutChallengeFiles.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetChallengeFileList, @params);

        var _OutChallengeFilesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutChallengeFilesPtr, 16, 16);
        OutChallengeFiles = new(_OutChallengeFilesPtr, 96) { Allocated = true };
    }

    // Function IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDownloadChallengeFileComplete_Parameters : BaseObject {
        public OnDownloadChallengeFileComplete_Parameters() { }
        public OnDownloadChallengeFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete.UniqueChallengeId
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete.DLName
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete.Filename
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete.Error
        // 0x38 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrOnDownloadChallengeFileComplete;
    public void OnDownloadChallengeFileComplete(bool bWasSuccessful, FString UniqueChallengeId, FString DLName, FString Filename, FString Error) {
        _ptrOnDownloadChallengeFileComplete ??= FindFunction("Function IpDrv.McpClashMobBase.OnDownloadChallengeFileComplete");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 24, 16, 16);
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params + 40, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrOnDownloadChallengeFileComplete, @params);
    }

    // Function IpDrv.McpClashMobBase.GetChallengeList
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetChallengeList_Parameters : BaseObject {
        public GetChallengeList_Parameters() { }
        public GetChallengeList_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpClashMobBase.GetChallengeList.OutChallengeEvents
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpClashMobChallengeEvent> OutChallengeEvents {
            get => new(Pointer, 224);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetChallengeList;
    public void GetChallengeList(ref StructTArray<FMcpClashMobChallengeEvent> OutChallengeEvents) {
        _ptrGetChallengeList ??= FindFunction("Function IpDrv.McpClashMobBase.GetChallengeList");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)OutChallengeEvents.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetChallengeList, @params);

        var _OutChallengeEventsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_OutChallengeEventsPtr, 16, 16);
        OutChallengeEvents = new(_OutChallengeEventsPtr, 224) { Allocated = true };
    }

    // Function IpDrv.McpClashMobBase.QueryChallengeList
    // 0x3750E0
    // (Public)
    public unsafe class QueryChallengeList_Parameters : BaseObject {
        public QueryChallengeList_Parameters() { }
        public QueryChallengeList_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrQueryChallengeList;
    public void QueryChallengeList() {
        _ptrQueryChallengeList ??= FindFunction("Function IpDrv.McpClashMobBase.QueryChallengeList");

        ProcessEvent(_ptrQueryChallengeList, null);
    }

    // Function IpDrv.McpClashMobBase.OnQueryChallengeListComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryChallengeListComplete_Parameters : BaseObject {
        public OnQueryChallengeListComplete_Parameters() { }
        public OnQueryChallengeListComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.OnQueryChallengeListComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.OnQueryChallengeListComplete.Error
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryChallengeListComplete;
    public void OnQueryChallengeListComplete(bool bWasSuccessful, FString Error) {
        _ptrOnQueryChallengeListComplete ??= FindFunction("Function IpDrv.McpClashMobBase.OnQueryChallengeListComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnQueryChallengeListComplete, @params);
    }

    // Function IpDrv.McpClashMobBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpClashMobBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpClashMobBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpClashMobBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus
    // 0x8C
    public unsafe class FMcpClashMobChallengeUserStatus : BaseObject {
        public FMcpClashMobChallengeUserStatus() {
            Pointer = Marshal.AllocHGlobal(140);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 140);
            Allocated = true;
        }
        public FMcpClashMobChallengeUserStatus(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.unique_challenge_id
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString unique_challenge_id {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.unique_user_id
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString unique_user_id {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.num_attempts
        // 0x20 (0x4)
        public int num_attempts {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.num_successful_attempts
        // 0x24 (0x4)
        public int num_successful_attempts {
            get => *(int*)(Pointer + 36);
            set => *(int*)(Pointer + 36) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.goal_progress
        // 0x28 (0x4)
        public int goal_progress {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.did_complete
        // 0x2C (0x4)
        // Bitmask: 0x00000001
        public bool did_complete {
            get => (*(uint*)(Pointer + 44) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 44) |= 0x1;
                else *(uint*)(Pointer + 44) &= ~(uint)0x1;
            }
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.last_update_time
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString last_update_time {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.user_award_given
        // 0x40 (0x4)
        public int user_award_given {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.accept_time
        // 0x48 (0x10)
        // (NeedCtorLink)
        public FString accept_time {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.did_preregister
        // 0x58 (0x4)
        // Bitmask: 0x00000001
        public bool did_preregister {
            get => (*(uint*)(Pointer + 88) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 88) |= 0x1;
                else *(uint*)(Pointer + 88) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.facebook_like_time
        // 0x60 (0x10)
        // (NeedCtorLink)
        public FString facebook_like_time {
            get => new(Pointer + 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.enrolled_via_facebook
        // 0x70 (0x4)
        // Bitmask: 0x00000001
        public bool enrolled_via_facebook {
            get => (*(uint*)(Pointer + 112) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x1;
                else *(uint*)(Pointer + 112) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.liked_via_facebook
        // 0x70 (0x4)
        // Bitmask: 0x00000002
        public bool liked_via_facebook {
            get => (*(uint*)(Pointer + 112) & 0x2) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x2;
                else *(uint*)(Pointer + 112) &= ~(uint)0x2;
            }
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.commented_via_facebook
        // 0x70 (0x4)
        // Bitmask: 0x00000004
        public bool commented_via_facebook {
            get => (*(uint*)(Pointer + 112) & 0x4) != 0;
            set {
                if (value) *(uint*)(Pointer + 112) |= 0x4;
                else *(uint*)(Pointer + 112) &= ~(uint)0x4;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.twitter_retweet_time
        // 0x78 (0x10)
        // (NeedCtorLink)
        public FString twitter_retweet_time {
            get => new(Pointer + 120);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.enrolled_via_twitter
        // 0x88 (0x4)
        // Bitmask: 0x00000001
        public bool enrolled_via_twitter {
            get => (*(uint*)(Pointer + 136) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 136) |= 0x1;
                else *(uint*)(Pointer + 136) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeUserStatus.retweeted
        // 0x88 (0x4)
        // Bitmask: 0x00000002
        public bool retweeted {
            get => (*(uint*)(Pointer + 136) & 0x2) != 0;
            set {
                if (value) *(uint*)(Pointer + 136) |= 0x2;
                else *(uint*)(Pointer + 136) &= ~(uint)0x2;
            }
        }
    }

    // ScriptStruct IpDrv.McpClashMobBase.McpClashMobChallengeEvent
    // 0xE0
    public unsafe class FMcpClashMobChallengeEvent : BaseObject {
        public FMcpClashMobChallengeEvent() {
            Pointer = Marshal.AllocHGlobal(224);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 224);
            Allocated = true;
        }
        public FMcpClashMobChallengeEvent(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.unique_challenge_id
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString unique_challenge_id {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.visible_date
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString visible_date {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.start_date
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString start_date {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.end_date
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString end_date {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.completed_date
        // 0x40 (0x10)
        // (NeedCtorLink)
        public FString completed_date {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.purge_date
        // 0x50 (0x10)
        // (NeedCtorLink)
        public FString purge_date {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.challenge_type
        // 0x60 (0x10)
        // (NeedCtorLink)
        public FString challenge_type {
            get => new(Pointer + 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.num_attempts
        // 0x70 (0x4)
        public int num_attempts {
            get => *(int*)(Pointer + 112);
            set => *(int*)(Pointer + 112) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.num_successful_attempts
        // 0x74 (0x4)
        public int num_successful_attempts {
            get => *(int*)(Pointer + 116);
            set => *(int*)(Pointer + 116) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.goal_value
        // 0x78 (0x4)
        public int goal_value {
            get => *(int*)(Pointer + 120);
            set => *(int*)(Pointer + 120) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.goal_start_value
        // 0x7C (0x4)
        public int goal_start_value {
            get => *(int*)(Pointer + 124);
            set => *(int*)(Pointer + 124) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.goal_current_value
        // 0x80 (0x4)
        public int goal_current_value {
            get => *(int*)(Pointer + 128);
            set => *(int*)(Pointer + 128) = value;
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.has_started
        // 0x84 (0x4)
        // Bitmask: 0x00000001
        public bool has_started {
            get => (*(uint*)(Pointer + 132) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 132) |= 0x1;
                else *(uint*)(Pointer + 132) &= ~(uint)0x1;
            }
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.is_visible
        // 0x84 (0x4)
        // Bitmask: 0x00000002
        public bool is_visible {
            get => (*(uint*)(Pointer + 132) & 0x2) != 0;
            set {
                if (value) *(uint*)(Pointer + 132) |= 0x2;
                else *(uint*)(Pointer + 132) &= ~(uint)0x2;
            }
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.has_completed
        // 0x84 (0x4)
        // Bitmask: 0x00000004
        public bool has_completed {
            get => (*(uint*)(Pointer + 132) & 0x4) != 0;
            set {
                if (value) *(uint*)(Pointer + 132) |= 0x4;
                else *(uint*)(Pointer + 132) &= ~(uint)0x4;
            }
        }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.was_successful
        // 0x84 (0x4)
        // Bitmask: 0x00000008
        public bool was_successful {
            get => (*(uint*)(Pointer + 132) & 0x8) != 0;
            set {
                if (value) *(uint*)(Pointer + 132) |= 0x8;
                else *(uint*)(Pointer + 132) &= ~(uint)0x8;
            }
        }

        // ArrayProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.file_list
        // 0x88 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpClashMobChallengeFile> file_list {
            get => new(Pointer + 136, 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_likes
        // 0x98 (0x4)
        public int facebook_likes {
            get => *(int*)(Pointer + 152);
            set => *(int*)(Pointer + 152) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_comments
        // 0x9C (0x4)
        public int facebook_comments {
            get => *(int*)(Pointer + 156);
            set => *(int*)(Pointer + 156) = value;
        }

        // FloatProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_like_scaler
        // 0xA0 (0x4)
        public float facebook_like_scaler {
            get => *(float*)(Pointer + 160);
            set => *(float*)(Pointer + 160) = value;
        }

        // FloatProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_comment_scaler
        // 0xA4 (0x4)
        public float facebook_comment_scaler {
            get => *(float*)(Pointer + 164);
            set => *(float*)(Pointer + 164) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_like_goal_progress
        // 0xA8 (0x4)
        public int facebook_like_goal_progress {
            get => *(int*)(Pointer + 168);
            set => *(int*)(Pointer + 168) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_comment_goal_progress
        // 0xAC (0x4)
        public int facebook_comment_goal_progress {
            get => *(int*)(Pointer + 172);
            set => *(int*)(Pointer + 172) = value;
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.facebook_id
        // 0xB0 (0x10)
        // (NeedCtorLink)
        public FString facebook_id {
            get => new(Pointer + 176);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.twitter_retweets
        // 0xC0 (0x4)
        public int twitter_retweets {
            get => *(int*)(Pointer + 192);
            set => *(int*)(Pointer + 192) = value;
        }

        // FloatProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.twitter_retweets_scaler
        // 0xC4 (0x4)
        public float twitter_retweets_scaler {
            get => *(float*)(Pointer + 196);
            set => *(float*)(Pointer + 196) = value;
        }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.twitter_goal_progress
        // 0xC8 (0x4)
        public int twitter_goal_progress {
            get => *(int*)(Pointer + 200);
            set => *(int*)(Pointer + 200) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeEvent.twitter_id
        // 0xD0 (0x10)
        // (NeedCtorLink)
        public FString twitter_id {
            get => new(Pointer + 208);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpClashMobBase.McpClashMobPushNotification
    // 0x44
    public unsafe class FMcpClashMobPushNotification : BaseObject {
        public FMcpClashMobPushNotification() {
            Pointer = Marshal.AllocHGlobal(68);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 68);
            Allocated = true;
        }
        public FMcpClashMobPushNotification(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpClashMobBase.McpClashMobPushNotification.device_tokens
        // 0x0 (0x10)
        // (NeedCtorLink)
        public StructTArray<FString> device_tokens {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobPushNotification.badge_type
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString badge_type {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobPushNotification.Sound
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString Sound {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobPushNotification.Message
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString Message {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StructProperty IpDrv.McpClashMobBase.McpClashMobPushNotification.Params
        // 0x40 (0x4)
        public FMcpClashMobPushNotificationParams Params {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 4, 4);
        }
    }

    // ScriptStruct IpDrv.McpClashMobBase.McpClashMobPushNotificationParams
    // 0x4
    public unsafe class FMcpClashMobPushNotificationParams : BaseObject {
        public FMcpClashMobPushNotificationParams() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FMcpClashMobPushNotificationParams(nint pointer) : base(pointer) { }

        // IntProperty IpDrv.McpClashMobBase.McpClashMobPushNotificationParams.bah
        // 0x0 (0x4)
        public int bah {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }

    // ScriptStruct IpDrv.McpClashMobBase.McpClashMobChallengeFile
    // 0x59
    public unsafe class FMcpClashMobChallengeFile : BaseObject {
        public FMcpClashMobChallengeFile() {
            Pointer = Marshal.AllocHGlobal(89);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 89);
            Allocated = true;
        }
        public FMcpClashMobChallengeFile(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.should_keep_post_challenge
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        public bool should_keep_post_challenge {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.title_id
        // 0x8 (0x10)
        // (NeedCtorLink)
        public FString title_id {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.file_name
        // 0x18 (0x10)
        // (NeedCtorLink)
        public FString file_name {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.dl_name
        // 0x28 (0x10)
        // (NeedCtorLink)
        public FString dl_name {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.hash_code
        // 0x38 (0x10)
        // (NeedCtorLink)
        public FString hash_code {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }

        // StrProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.Type
        // 0x48 (0x10)
        // (NeedCtorLink)
        public FString Type {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }

        // ByteProperty IpDrv.McpClashMobBase.McpClashMobChallengeFile.Status
        // 0x58 (0x1)
        public McpChallengeFileStatus Status {
            get => *(McpChallengeFileStatus*)(Pointer + 88);
            set => *(McpChallengeFileStatus*)(Pointer + 88) = value;
        }
    }


    // Enum IpDrv.McpClashMobBase.McpChallengeFileStatus
    public enum McpChallengeFileStatus : byte {
        MCFS_NotStarted = 0,
        MCFS_Pending = 1,
        MCFS_Success = 2,
        MCFS_Failed = 3,
        MCFS_MAX = 4
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpClashMobBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpClashMobFileDownload
// 0x0 (0x128 - 0x128)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpClashMobFileDownload : UOnlineTitleFileDownloadWeb {
    public UMcpClashMobFileDownload() { }
    public UMcpClashMobFileDownload(nint pointer) : base(pointer) { }


    // Function IpDrv.McpClashMobFileDownload.GetUrlForFile
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetUrlForFile_Parameters : BaseObject {
        public GetUrlForFile_Parameters() { }
        public GetUrlForFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobFileDownload.GetUrlForFile.Filename
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Filename {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobFileDownload.GetUrlForFile.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetUrlForFile;
    public FString GetUrlForFile(FString Filename) {
        _ptrGetUrlForFile ??= FindFunction("Function IpDrv.McpClashMobFileDownload.GetUrlForFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Filename.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetUrlForFile, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpClashMobFileDownload");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpClashMobManager
// 0x150 (0x118 - 0x268)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpClashMobManager : UMcpClashMobBase {
    public UMcpClashMobManager() { }
    public UMcpClashMobManager(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpClashMobManager.ChallengeListUrl
    // 0x118 (0x10)
    // (Config | NeedCtorLink)
    public FString ChallengeListUrl {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // StrProperty IpDrv.McpClashMobManager.ChallengeStatusUrl
    // 0x128 (0x10)
    // (Config | NeedCtorLink)
    public FString ChallengeStatusUrl {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 16, 16);
    }

    // StrProperty IpDrv.McpClashMobManager.ChallengeMultiStatusUrl
    // 0x138 (0x10)
    // (Config | NeedCtorLink)
    public FString ChallengeMultiStatusUrl {
        get => new(Pointer + 312);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 16, 16);
    }

    // StrProperty IpDrv.McpClashMobManager.AcceptChallengeUrl
    // 0x148 (0x10)
    // (Config | NeedCtorLink)
    public FString AcceptChallengeUrl {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 16, 16);
    }

    // StrProperty IpDrv.McpClashMobManager.UpdateChallengeProgressUrl
    // 0x158 (0x10)
    // (Config | NeedCtorLink)
    public FString UpdateChallengeProgressUrl {
        get => new(Pointer + 344);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 344), 16, 16);
    }

    // StrProperty IpDrv.McpClashMobManager.UpdateRewardProgressUrl
    // 0x168 (0x10)
    // (Config | NeedCtorLink)
    public FString UpdateRewardProgressUrl {
        get => new(Pointer + 360);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 360), 16, 16);
    }

    // ObjectProperty IpDrv.McpClashMobManager.HTTPRequestChallengeList
    // 0x178 (0x8)
    public UHttpRequestInterface HTTPRequestChallengeList {
        get {
            var pointer = *(nint*)(Pointer + 376);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 376) = value.Pointer;
    }

    // ArrayProperty IpDrv.McpClashMobManager.ChallengeUserRequests
    // 0x180 (0x10)
    // (NeedCtorLink)
    public StructTArray<FMcpChallengeUserRequest> ChallengeUserRequests {
        get => new(Pointer + 384, 80);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 384), 16, 16);
    }

    // ArrayProperty IpDrv.McpClashMobManager.ChallengeEvents
    // 0x190 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpClashMobBase.FMcpClashMobChallengeEvent> ChallengeEvents {
        get => new(Pointer + 400, 224);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 400), 16, 16);
    }

    // ArrayProperty IpDrv.McpClashMobManager.ChallengeUserStatus
    // 0x1A0 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpClashMobBase.FMcpClashMobChallengeUserStatus> ChallengeUserStatus {
        get => new(Pointer + 416, 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 416), 16, 16);
    }

    // StructProperty IpDrv.McpClashMobManager.TempChallengeUserStatus
    // 0x1B0 (0x90)
    // (NeedCtorLink)
    public UMcpClashMobBase.FMcpClashMobChallengeUserStatus TempChallengeUserStatus {
        get => new(Pointer + 432);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 432), 144, 144);
    }

    // ArrayProperty IpDrv.McpClashMobManager.TempChallengeUserStatusArray
    // 0x240 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpClashMobBase.FMcpClashMobChallengeUserStatus> TempChallengeUserStatusArray {
        get => new(Pointer + 576, 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 576), 16, 16);
    }

    // InterfaceProperty IpDrv.McpClashMobManager.FileCache
    // 0x250 (0x10)
    public TInterface<UOnlineTitleFileCacheInterface> FileCache {
        get => new(Pointer + 592);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 592), 16, 16);
    }

    // ObjectProperty IpDrv.McpClashMobManager.FileDownloader
    // 0x260 (0x8)
    public UMcpClashMobFileDownload FileDownloader {
        get {
            var pointer = *(nint*)(Pointer + 608);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 608) = value.Pointer;
    }


    // Function IpDrv.McpClashMobManager.OnUpdateChallengeUserRewardHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnUpdateChallengeUserRewardHTTPRequestComplete_Parameters : BaseObject {
        public OnUpdateChallengeUserRewardHTTPRequestComplete_Parameters() { }
        public OnUpdateChallengeUserRewardHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobManager.OnUpdateChallengeUserRewardHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpClashMobManager.OnUpdateChallengeUserRewardHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpClashMobManager.OnUpdateChallengeUserRewardHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnUpdateChallengeUserRewardHTTPRequestComplete;
    public void OnUpdateChallengeUserRewardHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnUpdateChallengeUserRewardHTTPRequestComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnUpdateChallengeUserRewardHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnUpdateChallengeUserRewardHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.UpdateChallengeUserReward
    // 0x3750E0
    // (Defined | Public)
    public unsafe class UpdateChallengeUserReward_Parameters : BaseObject {
        public UpdateChallengeUserReward_Parameters() { }
        public UpdateChallengeUserReward_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.UpdateChallengeUserReward.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.UpdateChallengeUserReward.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpClashMobManager.UpdateChallengeUserReward.UserReward
        // 0x20 (0x4)
        // (Param)
        public int UserReward {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrUpdateChallengeUserReward;
    public void UpdateChallengeUserReward(FString UniqueChallengeId, FString UniqueUserId, int UserReward) {
        _ptrUpdateChallengeUserReward ??= FindFunction("Function IpDrv.McpClashMobManager.UpdateChallengeUserReward");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&UserReward, @params + 32, 4, 4);

        ProcessEvent(_ptrUpdateChallengeUserReward, @params);
    }

    // Function IpDrv.McpClashMobManager.OnUpdateChallengeUserProgressHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnUpdateChallengeUserProgressHTTPRequestComplete_Parameters : BaseObject {
        public OnUpdateChallengeUserProgressHTTPRequestComplete_Parameters() { }
        public OnUpdateChallengeUserProgressHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobManager.OnUpdateChallengeUserProgressHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpClashMobManager.OnUpdateChallengeUserProgressHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpClashMobManager.OnUpdateChallengeUserProgressHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnUpdateChallengeUserProgressHTTPRequestComplete;
    public void OnUpdateChallengeUserProgressHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnUpdateChallengeUserProgressHTTPRequestComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnUpdateChallengeUserProgressHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnUpdateChallengeUserProgressHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.UpdateChallengeUserProgress
    // 0x3750E0
    // (Defined | Public)
    public unsafe class UpdateChallengeUserProgress_Parameters : BaseObject {
        public UpdateChallengeUserProgress_Parameters() { }
        public UpdateChallengeUserProgress_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.UpdateChallengeUserProgress.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.UpdateChallengeUserProgress.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpClashMobManager.UpdateChallengeUserProgress.bDidComplete
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bDidComplete {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // IntProperty IpDrv.McpClashMobManager.UpdateChallengeUserProgress.GoalProgress
        // 0x24 (0x4)
        // (Param)
        public int GoalProgress {
            get => *(int*)(Pointer + 36);
            set => *(int*)(Pointer + 36) = value;
        }
    }
    private static UFunction _ptrUpdateChallengeUserProgress;
    public void UpdateChallengeUserProgress(FString UniqueChallengeId, FString UniqueUserId, bool bDidComplete, int GoalProgress) {
        _ptrUpdateChallengeUserProgress ??= FindFunction("Function IpDrv.McpClashMobManager.UpdateChallengeUserProgress");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bDidComplete, @params + 32, 4, 4);
        System.Buffer.MemoryCopy(&GoalProgress, @params + 36, 4, 4);

        ProcessEvent(_ptrUpdateChallengeUserProgress, @params);
    }

    // Function IpDrv.McpClashMobManager.GetChallengeUserStatus
    // 0x3750E0
    // (Defined | Public | HasOutParams | HasDefaults)
    public unsafe class GetChallengeUserStatus_Parameters : BaseObject {
        public GetChallengeUserStatus_Parameters() { }
        public GetChallengeUserStatus_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.GetChallengeUserStatus.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.GetChallengeUserStatus.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty IpDrv.McpClashMobManager.GetChallengeUserStatus.OutChallengeUserStatus
        // 0x20 (0x90)
        // (Param | OutParam | NeedCtorLink)
        public UMcpClashMobBase.FMcpClashMobChallengeUserStatus OutChallengeUserStatus {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 144, 144);
        }
    }
    private static UFunction _ptrGetChallengeUserStatus;
    public void GetChallengeUserStatus(FString UniqueChallengeId, FString UniqueUserId, ref UMcpClashMobBase.FMcpClashMobChallengeUserStatus OutChallengeUserStatus) {
        _ptrGetChallengeUserStatus ??= FindFunction("Function IpDrv.McpClashMobManager.GetChallengeUserStatus");

        var @params = stackalloc byte[176];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)OutChallengeUserStatus.Pointer, @params + 32, 144, 144);

        ProcessEvent(_ptrGetChallengeUserStatus, @params);

        var _OutChallengeUserStatusPtr = Marshal.AllocHGlobal(144);
        System.Buffer.MemoryCopy(@params + 32, (void*)_OutChallengeUserStatusPtr, 144, 144);
        OutChallengeUserStatus = new(_OutChallengeUserStatusPtr) { Allocated = true };
    }

    // Function IpDrv.McpClashMobManager.OnQueryChallengeMultiStatusHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnQueryChallengeMultiStatusHTTPRequestComplete_Parameters : BaseObject {
        public OnQueryChallengeMultiStatusHTTPRequestComplete_Parameters() { }
        public OnQueryChallengeMultiStatusHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobManager.OnQueryChallengeMultiStatusHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpClashMobManager.OnQueryChallengeMultiStatusHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpClashMobManager.OnQueryChallengeMultiStatusHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryChallengeMultiStatusHTTPRequestComplete;
    public void OnQueryChallengeMultiStatusHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryChallengeMultiStatusHTTPRequestComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnQueryChallengeMultiStatusHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryChallengeMultiStatusHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.QueryChallengeMultiUserStatus
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class QueryChallengeMultiUserStatus_Parameters : BaseObject {
        public QueryChallengeMultiUserStatus_Parameters() { }
        public QueryChallengeMultiUserStatus_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.QueryChallengeMultiUserStatus.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.QueryChallengeMultiUserStatus.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.QueryChallengeMultiUserStatus.UserIdsToRead
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> UserIdsToRead {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrQueryChallengeMultiUserStatus;
    public void QueryChallengeMultiUserStatus(FString UniqueChallengeId, FString UniqueUserId, ref StructTArray<FString> UserIdsToRead) {
        _ptrQueryChallengeMultiUserStatus ??= FindFunction("Function IpDrv.McpClashMobManager.QueryChallengeMultiUserStatus");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UserIdsToRead.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrQueryChallengeMultiUserStatus, @params);

        var _UserIdsToReadPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_UserIdsToReadPtr, 16, 16);
        UserIdsToRead = new(_UserIdsToReadPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpClashMobManager.OnQueryChallengeStatusHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnQueryChallengeStatusHTTPRequestComplete_Parameters : BaseObject {
        public OnQueryChallengeStatusHTTPRequestComplete_Parameters() { }
        public OnQueryChallengeStatusHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobManager.OnQueryChallengeStatusHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpClashMobManager.OnQueryChallengeStatusHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpClashMobManager.OnQueryChallengeStatusHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryChallengeStatusHTTPRequestComplete;
    public void OnQueryChallengeStatusHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryChallengeStatusHTTPRequestComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnQueryChallengeStatusHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryChallengeStatusHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.QueryChallengeUserStatus
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryChallengeUserStatus_Parameters : BaseObject {
        public QueryChallengeUserStatus_Parameters() { }
        public QueryChallengeUserStatus_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.QueryChallengeUserStatus.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.QueryChallengeUserStatus.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryChallengeUserStatus;
    public void QueryChallengeUserStatus(FString UniqueChallengeId, FString UniqueUserId) {
        _ptrQueryChallengeUserStatus ??= FindFunction("Function IpDrv.McpClashMobManager.QueryChallengeUserStatus");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryChallengeUserStatus, @params);
    }

    // Function IpDrv.McpClashMobManager.OnAcceptChallengeHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnAcceptChallengeHTTPRequestComplete_Parameters : BaseObject {
        public OnAcceptChallengeHTTPRequestComplete_Parameters() { }
        public OnAcceptChallengeHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobManager.OnAcceptChallengeHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpClashMobManager.OnAcceptChallengeHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpClashMobManager.OnAcceptChallengeHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnAcceptChallengeHTTPRequestComplete;
    public void OnAcceptChallengeHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnAcceptChallengeHTTPRequestComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnAcceptChallengeHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnAcceptChallengeHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.AcceptChallenge
    // 0x3750E0
    // (Defined | Public)
    public unsafe class AcceptChallenge_Parameters : BaseObject {
        public AcceptChallenge_Parameters() { }
        public AcceptChallenge_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.AcceptChallenge.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.AcceptChallenge.UniqueUserId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrAcceptChallenge;
    public void AcceptChallenge(FString UniqueChallengeId, FString UniqueUserId) {
        _ptrAcceptChallenge ??= FindFunction("Function IpDrv.McpClashMobManager.AcceptChallenge");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrAcceptChallenge, @params);
    }

    // Function IpDrv.McpClashMobManager.DeleteCachedChallengeFile
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteCachedChallengeFile_Parameters : BaseObject {
        public DeleteCachedChallengeFile_Parameters() { }
        public DeleteCachedChallengeFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.DeleteCachedChallengeFile.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.DeleteCachedChallengeFile.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDeleteCachedChallengeFile;
    public void DeleteCachedChallengeFile(FString UniqueChallengeId, FString DLName) {
        _ptrDeleteCachedChallengeFile ??= FindFunction("Function IpDrv.McpClashMobManager.DeleteCachedChallengeFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDeleteCachedChallengeFile, @params);
    }

    // Function IpDrv.McpClashMobManager.ClearCachedChallengeFile
    // 0x3750E0
    // (Defined | Public)
    public unsafe class ClearCachedChallengeFile_Parameters : BaseObject {
        public ClearCachedChallengeFile_Parameters() { }
        public ClearCachedChallengeFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.ClearCachedChallengeFile.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.ClearCachedChallengeFile.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrClearCachedChallengeFile;
    public void ClearCachedChallengeFile(FString UniqueChallengeId, FString DLName) {
        _ptrClearCachedChallengeFile ??= FindFunction("Function IpDrv.McpClashMobManager.ClearCachedChallengeFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrClearCachedChallengeFile, @params);
    }

    // Function IpDrv.McpClashMobManager.GetChallengeFileContents
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetChallengeFileContents_Parameters : BaseObject {
        public GetChallengeFileContents_Parameters() { }
        public GetChallengeFileContents_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.GetChallengeFileContents.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.GetChallengeFileContents.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.GetChallengeFileContents.OutFileContents
        // 0x20 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> OutFileContents {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetChallengeFileContents;
    public void GetChallengeFileContents(FString UniqueChallengeId, FString DLName, ref UnmanagedTArray<byte> OutFileContents) {
        _ptrGetChallengeFileContents ??= FindFunction("Function IpDrv.McpClashMobManager.GetChallengeFileContents");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)OutFileContents.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrGetChallengeFileContents, @params);

        var _OutFileContentsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_OutFileContentsPtr, 16, 16);
        OutFileContents = new(_OutFileContentsPtr) { Allocated = true };
    }

    // Function IpDrv.McpClashMobManager.OnDownloadMcpFileComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDownloadMcpFileComplete_Parameters : BaseObject {
        public OnDownloadMcpFileComplete_Parameters() { }
        public OnDownloadMcpFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobManager.OnDownloadMcpFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobManager.OnDownloadMcpFileComplete.DLName
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnDownloadMcpFileComplete;
    public void OnDownloadMcpFileComplete(bool bWasSuccessful, FString DLName) {
        _ptrOnDownloadMcpFileComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnDownloadMcpFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnDownloadMcpFileComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.OnLoadCachedFileComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnLoadCachedFileComplete_Parameters : BaseObject {
        public OnLoadCachedFileComplete_Parameters() { }
        public OnLoadCachedFileComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpClashMobManager.OnLoadCachedFileComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpClashMobManager.OnLoadCachedFileComplete.DLName
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnLoadCachedFileComplete;
    public void OnLoadCachedFileComplete(bool bWasSuccessful, FString DLName) {
        _ptrOnLoadCachedFileComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnLoadCachedFileComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnLoadCachedFileComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.DownloadChallengeFile
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DownloadChallengeFile_Parameters : BaseObject {
        public DownloadChallengeFile_Parameters() { }
        public DownloadChallengeFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.DownloadChallengeFile.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpClashMobManager.DownloadChallengeFile.DLName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString DLName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDownloadChallengeFile;
    public void DownloadChallengeFile(FString UniqueChallengeId, FString DLName) {
        _ptrDownloadChallengeFile ??= FindFunction("Function IpDrv.McpClashMobManager.DownloadChallengeFile");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)DLName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDownloadChallengeFile, @params);
    }

    // Function IpDrv.McpClashMobManager.GetChallengeFileList
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetChallengeFileList_Parameters : BaseObject {
        public GetChallengeFileList_Parameters() { }
        public GetChallengeFileList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.GetChallengeFileList.UniqueChallengeId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.GetChallengeFileList.OutChallengeFiles
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpClashMobBase.FMcpClashMobChallengeFile> OutChallengeFiles {
            get => new(Pointer + 16, 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetChallengeFileList;
    public void GetChallengeFileList(FString UniqueChallengeId, ref StructTArray<UMcpClashMobBase.FMcpClashMobChallengeFile> OutChallengeFiles) {
        _ptrGetChallengeFileList ??= FindFunction("Function IpDrv.McpClashMobManager.GetChallengeFileList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueChallengeId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutChallengeFiles.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetChallengeFileList, @params);

        var _OutChallengeFilesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutChallengeFilesPtr, 16, 16);
        OutChallengeFiles = new(_OutChallengeFilesPtr, 96) { Allocated = true };
    }

    // Function IpDrv.McpClashMobManager.GetChallengeList
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetChallengeList_Parameters : BaseObject {
        public GetChallengeList_Parameters() { }
        public GetChallengeList_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpClashMobManager.GetChallengeList.OutChallengeEvents
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpClashMobBase.FMcpClashMobChallengeEvent> OutChallengeEvents {
            get => new(Pointer, 224);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetChallengeList;
    public void GetChallengeList(ref StructTArray<UMcpClashMobBase.FMcpClashMobChallengeEvent> OutChallengeEvents) {
        _ptrGetChallengeList ??= FindFunction("Function IpDrv.McpClashMobManager.GetChallengeList");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)OutChallengeEvents.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetChallengeList, @params);

        var _OutChallengeEventsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_OutChallengeEventsPtr, 16, 16);
        OutChallengeEvents = new(_OutChallengeEventsPtr, 224) { Allocated = true };
    }

    // Function IpDrv.McpClashMobManager.OnQueryChallengeListHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnQueryChallengeListHTTPRequestComplete_Parameters : BaseObject {
        public OnQueryChallengeListHTTPRequestComplete_Parameters() { }
        public OnQueryChallengeListHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpClashMobManager.OnQueryChallengeListHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpClashMobManager.OnQueryChallengeListHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpClashMobManager.OnQueryChallengeListHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryChallengeListHTTPRequestComplete;
    public void OnQueryChallengeListHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryChallengeListHTTPRequestComplete ??= FindFunction("Function IpDrv.McpClashMobManager.OnQueryChallengeListHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryChallengeListHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpClashMobManager.QueryChallengeList
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryChallengeList_Parameters : BaseObject {
        public QueryChallengeList_Parameters() { }
        public QueryChallengeList_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrQueryChallengeList;
    public void QueryChallengeList() {
        _ptrQueryChallengeList ??= FindFunction("Function IpDrv.McpClashMobManager.QueryChallengeList");

        ProcessEvent(_ptrQueryChallengeList, null);
    }

    // Function IpDrv.McpClashMobManager.Init
    // 0x3750E0
    // (Defined | Public)
    public unsafe class Init_Parameters : BaseObject {
        public Init_Parameters() { }
        public Init_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrInit;
    public void Init() {
        _ptrInit ??= FindFunction("Function IpDrv.McpClashMobManager.Init");

        ProcessEvent(_ptrInit, null);
    }


    // ScriptStruct IpDrv.McpClashMobManager.McpChallengeUserRequest
    // 0x50
    public unsafe class FMcpChallengeUserRequest : BaseObject {
        public FMcpChallengeUserRequest() {
            Pointer = Marshal.AllocHGlobal(80);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 80);
            Allocated = true;
        }
        public FMcpChallengeUserRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.McpChallengeUserRequest.UniqueUserId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.McpChallengeUserRequest.ChallengeStatusRequests
        // 0x10 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpChallengeRequest> ChallengeStatusRequests {
            get => new(Pointer + 16, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.McpChallengeUserRequest.ChallengeAcceptRequests
        // 0x20 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpChallengeRequest> ChallengeAcceptRequests {
            get => new(Pointer + 32, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.McpChallengeUserRequest.ChallengeUpdateProgressRequests
        // 0x30 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpChallengeRequest> ChallengeUpdateProgressRequests {
            get => new(Pointer + 48, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // ArrayProperty IpDrv.McpClashMobManager.McpChallengeUserRequest.ChallengeUpdateRewardRequests
        // 0x40 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpChallengeRequest> ChallengeUpdateRewardRequests {
            get => new(Pointer + 64, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpClashMobManager.McpChallengeRequest
    // 0x18
    public unsafe class FMcpChallengeRequest : BaseObject {
        public FMcpChallengeRequest() {
            Pointer = Marshal.AllocHGlobal(24);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 24);
            Allocated = true;
        }
        public FMcpChallengeRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpClashMobManager.McpChallengeRequest.UniqueChallengeId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString UniqueChallengeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.McpClashMobManager.McpChallengeRequest.HTTPRequest
        // 0x10 (0x8)
        public UHttpRequestInterface HTTPRequest {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpClashMobManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpGroupsBase
// 0xF8 (0x78 - 0x170)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpGroupsBase : UMcpServiceBase {
    public UMcpGroupsBase() { }
    public UMcpGroupsBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpGroupsBase.McpGroupsManagerClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpGroupsManagerClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // ArrayProperty IpDrv.McpGroupsBase.GroupLists
    // 0x88 (0x10)
    // (NeedCtorLink)
    public StructTArray<FMcpGroupList> GroupLists {
        get => new(Pointer + 136, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 16, 16);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnCreateGroupComplete__Delegate
    // 0x98 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateGroupComplete__Delegate {
        get => new(Pointer + 152);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 152), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnDeleteGroupComplete__Delegate
    // 0xB0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteGroupComplete__Delegate {
        get => new(Pointer + 176);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnQueryGroupsComplete__Delegate
    // 0xC8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryGroupsComplete__Delegate {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnQueryGroupMembersComplete__Delegate
    // 0xE0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryGroupMembersComplete__Delegate {
        get => new(Pointer + 224);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 224), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnAddGroupMembersComplete__Delegate
    // 0xF8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAddGroupMembersComplete__Delegate {
        get => new(Pointer + 248);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnRemoveGroupMembersComplete__Delegate
    // 0x110 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnRemoveGroupMembersComplete__Delegate {
        get => new(Pointer + 272);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 272), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnDeleteAllGroupsComplete__Delegate
    // 0x128 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteAllGroupsComplete__Delegate {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnQueryGroupInvitesComplete__Delegate
    // 0x140 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryGroupInvitesComplete__Delegate {
        get => new(Pointer + 320);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 320), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsBase.__OnAcceptGroupInviteComplete__Delegate
    // 0x158 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAcceptGroupInviteComplete__Delegate {
        get => new(Pointer + 344);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 344), 24, 24);
    }


    // Function IpDrv.McpGroupsBase.OnAcceptGroupInviteComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAcceptGroupInviteComplete_Parameters : BaseObject {
        public OnAcceptGroupInviteComplete_Parameters() { }
        public OnAcceptGroupInviteComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnAcceptGroupInviteComplete.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnAcceptGroupInviteComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnAcceptGroupInviteComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnAcceptGroupInviteComplete;
    public void OnAcceptGroupInviteComplete(FString GroupId, bool bWasSuccessful, FString Error) {
        _ptrOnAcceptGroupInviteComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnAcceptGroupInviteComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnAcceptGroupInviteComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.AcceptGroupInvite
    // 0x3750E0
    // (Public)
    public unsafe class AcceptGroupInvite_Parameters : BaseObject {
        public AcceptGroupInvite_Parameters() { }
        public AcceptGroupInvite_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.AcceptGroupInvite.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.AcceptGroupInvite.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.AcceptGroupInvite.bShouldAccept
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bShouldAccept {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAcceptGroupInvite;
    public void AcceptGroupInvite(FString UniqueUserId, FString GroupId, bool bShouldAccept) {
        _ptrAcceptGroupInvite ??= FindFunction("Function IpDrv.McpGroupsBase.AcceptGroupInvite");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bShouldAccept, @params + 32, 4, 4);

        ProcessEvent(_ptrAcceptGroupInvite, @params);
    }

    // Function IpDrv.McpGroupsBase.GetGroupInviteList
    // 0x3750E0
    // (Final | Public | HasOutParams)
    public unsafe class GetGroupInviteList_Parameters : BaseObject {
        public GetGroupInviteList_Parameters() { }
        public GetGroupInviteList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.GetGroupInviteList.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpGroupsBase.GetGroupInviteList.InviteList
        // 0x10 (0x20)
        // (Param | OutParam | NeedCtorLink)
        public FMcpGroupList InviteList {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 32, 32);
        }
    }
    private static UFunction _ptrGetGroupInviteList;
    public void GetGroupInviteList(FString UserId, ref FMcpGroupList InviteList) {
        _ptrGetGroupInviteList ??= FindFunction("Function IpDrv.McpGroupsBase.GetGroupInviteList");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)InviteList.Pointer, @params + 16, 32, 32);

        ProcessEvent(_ptrGetGroupInviteList, @params);

        var _InviteListPtr = Marshal.AllocHGlobal(32);
        System.Buffer.MemoryCopy(@params + 16, (void*)_InviteListPtr, 32, 32);
        InviteList = new(_InviteListPtr) { Allocated = true };
    }

    // Function IpDrv.McpGroupsBase.OnQueryGroupInvitesComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryGroupInvitesComplete_Parameters : BaseObject {
        public OnQueryGroupInvitesComplete_Parameters() { }
        public OnQueryGroupInvitesComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpGroupsBase.OnQueryGroupInvitesComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnQueryGroupInvitesComplete.Error
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryGroupInvitesComplete;
    public void OnQueryGroupInvitesComplete(bool bWasSuccessful, FString Error) {
        _ptrOnQueryGroupInvitesComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnQueryGroupInvitesComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnQueryGroupInvitesComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.QueryGroupInvites
    // 0x3750E0
    // (Final | Public)
    public unsafe class QueryGroupInvites_Parameters : BaseObject {
        public QueryGroupInvites_Parameters() { }
        public QueryGroupInvites_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.QueryGroupInvites.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryGroupInvites;
    public void QueryGroupInvites(FString UniqueUserId) {
        _ptrQueryGroupInvites ??= FindFunction("Function IpDrv.McpGroupsBase.QueryGroupInvites");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryGroupInvites, @params);
    }

    // Function IpDrv.McpGroupsBase.OnDeleteAllGroupsComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteAllGroupsComplete_Parameters : BaseObject {
        public OnDeleteAllGroupsComplete_Parameters() { }
        public OnDeleteAllGroupsComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnDeleteAllGroupsComplete.RequesterId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequesterId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnDeleteAllGroupsComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnDeleteAllGroupsComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteAllGroupsComplete;
    public void OnDeleteAllGroupsComplete(FString RequesterId, bool bWasSuccessful, FString Error) {
        _ptrOnDeleteAllGroupsComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnDeleteAllGroupsComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)RequesterId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnDeleteAllGroupsComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.DeleteAllGroups
    // 0x3750E0
    // (Public)
    public unsafe class DeleteAllGroups_Parameters : BaseObject {
        public DeleteAllGroups_Parameters() { }
        public DeleteAllGroups_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.DeleteAllGroups.OwnerId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString OwnerId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDeleteAllGroups;
    public void DeleteAllGroups(FString OwnerId) {
        _ptrDeleteAllGroups ??= FindFunction("Function IpDrv.McpGroupsBase.DeleteAllGroups");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)OwnerId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDeleteAllGroups, @params);
    }

    // Function IpDrv.McpGroupsBase.OnRemoveGroupMembersComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnRemoveGroupMembersComplete_Parameters : BaseObject {
        public OnRemoveGroupMembersComplete_Parameters() { }
        public OnRemoveGroupMembersComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnRemoveGroupMembersComplete.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnRemoveGroupMembersComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnRemoveGroupMembersComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnRemoveGroupMembersComplete;
    public void OnRemoveGroupMembersComplete(FString GroupId, bool bWasSuccessful, FString Error) {
        _ptrOnRemoveGroupMembersComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnRemoveGroupMembersComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnRemoveGroupMembersComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.RemoveGroupMembers
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class RemoveGroupMembers_Parameters : BaseObject {
        public RemoveGroupMembers_Parameters() { }
        public RemoveGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.RemoveGroupMembers.OwnerId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString OwnerId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.RemoveGroupMembers.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsBase.RemoveGroupMembers.MemberIds
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> MemberIds {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrRemoveGroupMembers;
    public void RemoveGroupMembers(FString OwnerId, FString GroupId, ref StructTArray<FString> MemberIds) {
        _ptrRemoveGroupMembers ??= FindFunction("Function IpDrv.McpGroupsBase.RemoveGroupMembers");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)OwnerId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)MemberIds.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrRemoveGroupMembers, @params);

        var _MemberIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_MemberIdsPtr, 16, 16);
        MemberIds = new(_MemberIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpGroupsBase.OnAddGroupMembersComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAddGroupMembersComplete_Parameters : BaseObject {
        public OnAddGroupMembersComplete_Parameters() { }
        public OnAddGroupMembersComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnAddGroupMembersComplete.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnAddGroupMembersComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnAddGroupMembersComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnAddGroupMembersComplete;
    public void OnAddGroupMembersComplete(FString GroupId, bool bWasSuccessful, FString Error) {
        _ptrOnAddGroupMembersComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnAddGroupMembersComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnAddGroupMembersComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.AddGroupMembers
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class AddGroupMembers_Parameters : BaseObject {
        public AddGroupMembers_Parameters() { }
        public AddGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.AddGroupMembers.OwnerId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString OwnerId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.AddGroupMembers.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsBase.AddGroupMembers.MemberIds
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> MemberIds {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.AddGroupMembers.bRequiresAcceptance
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bRequiresAcceptance {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAddGroupMembers;
    public void AddGroupMembers(FString OwnerId, FString GroupId, ref StructTArray<FString> MemberIds, bool bRequiresAcceptance) {
        _ptrAddGroupMembers ??= FindFunction("Function IpDrv.McpGroupsBase.AddGroupMembers");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)OwnerId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)MemberIds.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bRequiresAcceptance, @params + 48, 4, 4);

        ProcessEvent(_ptrAddGroupMembers, @params);

        var _MemberIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_MemberIdsPtr, 16, 16);
        MemberIds = new(_MemberIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpGroupsBase.GetGroupMembers
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetGroupMembers_Parameters : BaseObject {
        public GetGroupMembers_Parameters() { }
        public GetGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.GetGroupMembers.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsBase.GetGroupMembers.GroupMembers
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpGroupMember> GroupMembers {
            get => new(Pointer + 16, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetGroupMembers;
    public void GetGroupMembers(FString GroupId, ref StructTArray<FMcpGroupMember> GroupMembers) {
        _ptrGetGroupMembers ??= FindFunction("Function IpDrv.McpGroupsBase.GetGroupMembers");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupMembers.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetGroupMembers, @params);

        var _GroupMembersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_GroupMembersPtr, 16, 16);
        GroupMembers = new(_GroupMembersPtr, 24) { Allocated = true };
    }

    // Function IpDrv.McpGroupsBase.OnQueryGroupMembersComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryGroupMembersComplete_Parameters : BaseObject {
        public OnQueryGroupMembersComplete_Parameters() { }
        public OnQueryGroupMembersComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnQueryGroupMembersComplete.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnQueryGroupMembersComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnQueryGroupMembersComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryGroupMembersComplete;
    public void OnQueryGroupMembersComplete(FString GroupId, bool bWasSuccessful, FString Error) {
        _ptrOnQueryGroupMembersComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnQueryGroupMembersComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQueryGroupMembersComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.QueryGroupMembers
    // 0x3750E0
    // (Public)
    public unsafe class QueryGroupMembers_Parameters : BaseObject {
        public QueryGroupMembers_Parameters() { }
        public QueryGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.QueryGroupMembers.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.QueryGroupMembers.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryGroupMembers;
    public void QueryGroupMembers(FString UniqueUserId, FString GroupId) {
        _ptrQueryGroupMembers ??= FindFunction("Function IpDrv.McpGroupsBase.QueryGroupMembers");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryGroupMembers, @params);
    }

    // Function IpDrv.McpGroupsBase.GetGroupList
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetGroupList_Parameters : BaseObject {
        public GetGroupList_Parameters() { }
        public GetGroupList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.GetGroupList.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpGroupsBase.GetGroupList.GroupList
        // 0x10 (0x20)
        // (Param | OutParam | NeedCtorLink)
        public FMcpGroupList GroupList {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 32, 32);
        }
    }
    private static UFunction _ptrGetGroupList;
    public void GetGroupList(FString UserId, ref FMcpGroupList GroupList) {
        _ptrGetGroupList ??= FindFunction("Function IpDrv.McpGroupsBase.GetGroupList");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupList.Pointer, @params + 16, 32, 32);

        ProcessEvent(_ptrGetGroupList, @params);

        var _GroupListPtr = Marshal.AllocHGlobal(32);
        System.Buffer.MemoryCopy(@params + 16, (void*)_GroupListPtr, 32, 32);
        GroupList = new(_GroupListPtr) { Allocated = true };
    }

    // Function IpDrv.McpGroupsBase.OnQueryGroupsComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryGroupsComplete_Parameters : BaseObject {
        public OnQueryGroupsComplete_Parameters() { }
        public OnQueryGroupsComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnQueryGroupsComplete.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnQueryGroupsComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnQueryGroupsComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryGroupsComplete;
    public void OnQueryGroupsComplete(FString UserId, bool bWasSuccessful, FString Error) {
        _ptrOnQueryGroupsComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnQueryGroupsComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQueryGroupsComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.QueryGroups
    // 0x3750E0
    // (Public)
    public unsafe class QueryGroups_Parameters : BaseObject {
        public QueryGroups_Parameters() { }
        public QueryGroups_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.QueryGroups.RequesterId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequesterId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryGroups;
    public void QueryGroups(FString RequesterId) {
        _ptrQueryGroups ??= FindFunction("Function IpDrv.McpGroupsBase.QueryGroups");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)RequesterId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryGroups, @params);
    }

    // Function IpDrv.McpGroupsBase.OnDeleteGroupComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteGroupComplete_Parameters : BaseObject {
        public OnDeleteGroupComplete_Parameters() { }
        public OnDeleteGroupComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.OnDeleteGroupComplete.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnDeleteGroupComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnDeleteGroupComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteGroupComplete;
    public void OnDeleteGroupComplete(FString GroupId, bool bWasSuccessful, FString Error) {
        _ptrOnDeleteGroupComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnDeleteGroupComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnDeleteGroupComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.DeleteGroup
    // 0x3750E0
    // (Public)
    public unsafe class DeleteGroup_Parameters : BaseObject {
        public DeleteGroup_Parameters() { }
        public DeleteGroup_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.DeleteGroup.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.DeleteGroup.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDeleteGroup;
    public void DeleteGroup(FString UniqueUserId, FString GroupId) {
        _ptrDeleteGroup ??= FindFunction("Function IpDrv.McpGroupsBase.DeleteGroup");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDeleteGroup, @params);
    }

    // Function IpDrv.McpGroupsBase.OnCreateGroupComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnCreateGroupComplete_Parameters : BaseObject {
        public OnCreateGroupComplete_Parameters() { }
        public OnCreateGroupComplete_Parameters(nint pointer) : base(pointer) { }

        // StructProperty IpDrv.McpGroupsBase.OnCreateGroupComplete.Group
        // 0x0 (0x48)
        // (Param | NeedCtorLink)
        public FMcpGroup Group {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 72, 72);
        }

        // BoolProperty IpDrv.McpGroupsBase.OnCreateGroupComplete.bWasSuccessful
        // 0x48 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 72) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 72) |= 0x1;
                else *(uint*)(Pointer + 72) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpGroupsBase.OnCreateGroupComplete.Error
        // 0x50 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }
    }
    private static UFunction _ptrOnCreateGroupComplete;
    public void OnCreateGroupComplete(FMcpGroup Group, bool bWasSuccessful, FString Error) {
        _ptrOnCreateGroupComplete ??= FindFunction("Function IpDrv.McpGroupsBase.OnCreateGroupComplete");

        var @params = stackalloc byte[92];
        System.Buffer.MemoryCopy((void*)Group.Pointer, @params, 72, 72);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 72, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 80, 16, 16);

        ProcessEvent(_ptrOnCreateGroupComplete, @params);
    }

    // Function IpDrv.McpGroupsBase.CreateGroup
    // 0x3750E0
    // (Public)
    public unsafe class CreateGroup_Parameters : BaseObject {
        public CreateGroup_Parameters() { }
        public CreateGroup_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.CreateGroup.OwnerId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString OwnerId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.CreateGroup.GroupName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrCreateGroup;
    public void CreateGroup(FString OwnerId, FString GroupName) {
        _ptrCreateGroup ??= FindFunction("Function IpDrv.McpGroupsBase.CreateGroup");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)OwnerId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCreateGroup, @params);
    }

    // Function IpDrv.McpGroupsBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpGroupsBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpGroupsBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpGroupsBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpGroupsBase.McpGroupList
    // 0x20
    public unsafe class FMcpGroupList : BaseObject {
        public FMcpGroupList() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FMcpGroupList(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.McpGroupList.RequesterId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString RequesterId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsBase.McpGroupList.Groups
        // 0x10 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpGroup> Groups {
            get => new(Pointer + 16, 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpGroupsBase.McpGroup
    // 0x48
    public unsafe class FMcpGroup : BaseObject {
        public FMcpGroup() {
            Pointer = Marshal.AllocHGlobal(72);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 72);
            Allocated = true;
        }
        public FMcpGroup(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.McpGroup.OwnerId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString OwnerId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.McpGroup.GroupId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpGroupsBase.McpGroup.GroupName
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString GroupName {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ByteProperty IpDrv.McpGroupsBase.McpGroup.AccessLevel
        // 0x30 (0x1)
        public EMcpGroupAccessLevel AccessLevel {
            get => *(EMcpGroupAccessLevel*)(Pointer + 48);
            set => *(EMcpGroupAccessLevel*)(Pointer + 48) = value;
        }

        // MISSED OFFSET: 0x7

        // ArrayProperty IpDrv.McpGroupsBase.McpGroup.Members
        // 0x38 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpGroupMember> Members {
            get => new(Pointer + 56, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpGroupsBase.McpGroupMember
    // 0x11
    public unsafe class FMcpGroupMember : BaseObject {
        public FMcpGroupMember() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FMcpGroupMember(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsBase.McpGroupMember.MemberId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString MemberId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty IpDrv.McpGroupsBase.McpGroupMember.AcceptState
        // 0x10 (0x1)
        public EMcpGroupAcceptState AcceptState {
            get => *(EMcpGroupAcceptState*)(Pointer + 16);
            set => *(EMcpGroupAcceptState*)(Pointer + 16) = value;
        }
    }


    // Enum IpDrv.McpGroupsBase.EMcpGroupAccessLevel
    public enum EMcpGroupAccessLevel : byte {
        MGAL_Owner = 0,
        MGAL_Member = 1,
        MGAL_Public = 2,
        MGAL_MAX = 3
    }

    // Enum IpDrv.McpGroupsBase.EMcpGroupAcceptState
    public enum EMcpGroupAcceptState : byte {
        MGAS_Error = 0,
        MGAS_Pending = 1,
        MGAS_Accepted = 2,
        MGAS_MAX = 3
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpGroupsBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpGroupsManager
// 0xF0 (0x170 - 0x260)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpGroupsManager : UMcpGroupsBase {
    public UMcpGroupsManager() { }
    public UMcpGroupsManager(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpGroupsManager.CreateGroupUrl
    // 0x170 (0x10)
    // (Config | NeedCtorLink)
    public FString CreateGroupUrl {
        get => new(Pointer + 368);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 368), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.DeleteGroupUrl
    // 0x180 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteGroupUrl {
        get => new(Pointer + 384);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 384), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.QueryGroupsUrl
    // 0x190 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryGroupsUrl {
        get => new(Pointer + 400);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 400), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.QueryGroupMembersUrl
    // 0x1A0 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryGroupMembersUrl {
        get => new(Pointer + 416);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 416), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.AddGroupMembersUrl
    // 0x1B0 (0x10)
    // (Config | NeedCtorLink)
    public FString AddGroupMembersUrl {
        get => new(Pointer + 432);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 432), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.RemoveGroupMembersUrl
    // 0x1C0 (0x10)
    // (Config | NeedCtorLink)
    public FString RemoveGroupMembersUrl {
        get => new(Pointer + 448);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 448), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.DeleteAllGroupsUrl
    // 0x1D0 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteAllGroupsUrl {
        get => new(Pointer + 464);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 464), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.AcceptGroupInviteUrl
    // 0x1E0 (0x10)
    // (Config | NeedCtorLink)
    public FString AcceptGroupInviteUrl {
        get => new(Pointer + 480);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 480), 16, 16);
    }

    // StrProperty IpDrv.McpGroupsManager.RejectGroupInviteUrl
    // 0x1F0 (0x10)
    // (Config | NeedCtorLink)
    public FString RejectGroupInviteUrl {
        get => new(Pointer + 496);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 496), 16, 16);
    }

    // DelegateProperty IpDrv.McpGroupsManager.__OnQueryGroupsRequestComplete__Delegate
    // 0x200 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryGroupsRequestComplete__Delegate {
        get => new(Pointer + 512);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 512), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsManager.__OnQueryGroupMembersRequestComplete__Delegate
    // 0x218 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryGroupMembersRequestComplete__Delegate {
        get => new(Pointer + 536);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 536), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsManager.__OnAddGroupMembersRequestComplete__Delegate
    // 0x230 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAddGroupMembersRequestComplete__Delegate {
        get => new(Pointer + 560);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 560), 24, 24);
    }

    // DelegateProperty IpDrv.McpGroupsManager.__OnAcceptGroupInviteRequestComplete__Delegate
    // 0x248 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAcceptGroupInviteRequestComplete__Delegate {
        get => new(Pointer + 584);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 584), 24, 24);
    }


    // Function IpDrv.McpGroupsManager.CacheGroupMember
    // 0x3750E0
    // (Final | Defined | Public | HasDefaults)
    public unsafe class CacheGroupMember_Parameters : BaseObject {
        public CacheGroupMember_Parameters() { }
        public CacheGroupMember_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.CacheGroupMember.MemberId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString MemberId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.CacheGroupMember.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ByteProperty IpDrv.McpGroupsManager.CacheGroupMember.AcceptState
        // 0x20 (0x1)
        // (Param)
        public UMcpGroupsBase.EMcpGroupAcceptState AcceptState {
            get => *(UMcpGroupsBase.EMcpGroupAcceptState*)(Pointer + 32);
            set => *(UMcpGroupsBase.EMcpGroupAcceptState*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrCacheGroupMember;
    public void CacheGroupMember(FString MemberId, FString GroupId, UMcpGroupsBase.EMcpGroupAcceptState AcceptState) {
        _ptrCacheGroupMember ??= FindFunction("Function IpDrv.McpGroupsManager.CacheGroupMember");

        var @params = stackalloc byte[33];
        System.Buffer.MemoryCopy((void*)MemberId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&AcceptState, @params + 32, 1, 1);

        ProcessEvent(_ptrCacheGroupMember, @params);
    }

    // Function IpDrv.McpGroupsManager.CacheGroup
    // 0x3750E0
    // (Final | Defined | Public | HasDefaults)
    public unsafe class CacheGroup_Parameters : BaseObject {
        public CacheGroup_Parameters() { }
        public CacheGroup_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.CacheGroup.RequesterId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequesterId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpGroupsManager.CacheGroup.Group
        // 0x10 (0x48)
        // (Param | NeedCtorLink)
        public UMcpGroupsBase.FMcpGroup Group {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 72, 72);
        }
    }
    private static UFunction _ptrCacheGroup;
    public void CacheGroup(FString RequesterId, UMcpGroupsBase.FMcpGroup Group) {
        _ptrCacheGroup ??= FindFunction("Function IpDrv.McpGroupsManager.CacheGroup");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)RequesterId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Group.Pointer, @params + 16, 72, 72);

        ProcessEvent(_ptrCacheGroup, @params);
    }

    // Function IpDrv.McpGroupsManager.OnAcceptGroupInviteRequestComplete
    // 0x3750E0
    // (Final | Defined | Public | Delegate)
    public unsafe class OnAcceptGroupInviteRequestComplete_Parameters : BaseObject {
        public OnAcceptGroupInviteRequestComplete_Parameters() { }
        public OnAcceptGroupInviteRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnAcceptGroupInviteRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnAcceptGroupInviteRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnAcceptGroupInviteRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnAcceptGroupInviteRequestComplete;
    public void OnAcceptGroupInviteRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnAcceptGroupInviteRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnAcceptGroupInviteRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnAcceptGroupInviteRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.AcceptGroupInvite
    // 0x3750E0
    // (Defined | Public)
    public unsafe class AcceptGroupInvite_Parameters : BaseObject {
        public AcceptGroupInvite_Parameters() { }
        public AcceptGroupInvite_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.AcceptGroupInvite.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.AcceptGroupInvite.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsManager.AcceptGroupInvite.bShouldAccept
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bShouldAccept {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAcceptGroupInvite;
    public void AcceptGroupInvite(FString UniqueUserId, FString GroupId, bool bShouldAccept) {
        _ptrAcceptGroupInvite ??= FindFunction("Function IpDrv.McpGroupsManager.AcceptGroupInvite");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bShouldAccept, @params + 32, 4, 4);

        ProcessEvent(_ptrAcceptGroupInvite, @params);
    }

    // Function IpDrv.McpGroupsManager.OnDeleteAllGroupsRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteAllGroupsRequestComplete_Parameters : BaseObject {
        public OnDeleteAllGroupsRequestComplete_Parameters() { }
        public OnDeleteAllGroupsRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnDeleteAllGroupsRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnDeleteAllGroupsRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnDeleteAllGroupsRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteAllGroupsRequestComplete;
    public void OnDeleteAllGroupsRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnDeleteAllGroupsRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnDeleteAllGroupsRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteAllGroupsRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.DeleteAllGroups
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteAllGroups_Parameters : BaseObject {
        public DeleteAllGroups_Parameters() { }
        public DeleteAllGroups_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.DeleteAllGroups.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDeleteAllGroups;
    public void DeleteAllGroups(FString UniqueUserId) {
        _ptrDeleteAllGroups ??= FindFunction("Function IpDrv.McpGroupsManager.DeleteAllGroups");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDeleteAllGroups, @params);
    }

    // Function IpDrv.McpGroupsManager.OnRemoveGroupMembersRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnRemoveGroupMembersRequestComplete_Parameters : BaseObject {
        public OnRemoveGroupMembersRequestComplete_Parameters() { }
        public OnRemoveGroupMembersRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnRemoveGroupMembersRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnRemoveGroupMembersRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnRemoveGroupMembersRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnRemoveGroupMembersRequestComplete;
    public void OnRemoveGroupMembersRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnRemoveGroupMembersRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnRemoveGroupMembersRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnRemoveGroupMembersRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.RemoveGroupMembers
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class RemoveGroupMembers_Parameters : BaseObject {
        public RemoveGroupMembers_Parameters() { }
        public RemoveGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.RemoveGroupMembers.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.RemoveGroupMembers.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsManager.RemoveGroupMembers.MemberIds
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> MemberIds {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrRemoveGroupMembers;
    public void RemoveGroupMembers(FString UniqueUserId, FString GroupId, ref StructTArray<FString> MemberIds) {
        _ptrRemoveGroupMembers ??= FindFunction("Function IpDrv.McpGroupsManager.RemoveGroupMembers");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)MemberIds.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrRemoveGroupMembers, @params);

        var _MemberIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_MemberIdsPtr, 16, 16);
        MemberIds = new(_MemberIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpGroupsManager.OnAddGroupMembersRequestComplete
    // 0x3750E0
    // (Final | Defined | Public | Delegate)
    public unsafe class OnAddGroupMembersRequestComplete_Parameters : BaseObject {
        public OnAddGroupMembersRequestComplete_Parameters() { }
        public OnAddGroupMembersRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnAddGroupMembersRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnAddGroupMembersRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnAddGroupMembersRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnAddGroupMembersRequestComplete;
    public void OnAddGroupMembersRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnAddGroupMembersRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnAddGroupMembersRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnAddGroupMembersRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.AddGroupMembers
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class AddGroupMembers_Parameters : BaseObject {
        public AddGroupMembers_Parameters() { }
        public AddGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.AddGroupMembers.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.AddGroupMembers.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsManager.AddGroupMembers.MemberIds
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> MemberIds {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpGroupsManager.AddGroupMembers.bRequiresAcceptance
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bRequiresAcceptance {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAddGroupMembers;
    public void AddGroupMembers(FString UniqueUserId, FString GroupId, ref StructTArray<FString> MemberIds, bool bRequiresAcceptance) {
        _ptrAddGroupMembers ??= FindFunction("Function IpDrv.McpGroupsManager.AddGroupMembers");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)MemberIds.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bRequiresAcceptance, @params + 48, 4, 4);

        ProcessEvent(_ptrAddGroupMembers, @params);

        var _MemberIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_MemberIdsPtr, 16, 16);
        MemberIds = new(_MemberIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpGroupsManager.GetGroupMembers
    // 0x3750E0
    // (Defined | Public | HasOutParams | HasDefaults)
    public unsafe class GetGroupMembers_Parameters : BaseObject {
        public GetGroupMembers_Parameters() { }
        public GetGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.GetGroupMembers.GroupId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpGroupsManager.GetGroupMembers.GroupMembers
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpGroupsBase.FMcpGroupMember> GroupMembers {
            get => new(Pointer + 16, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetGroupMembers;
    public void GetGroupMembers(FString GroupId, ref StructTArray<UMcpGroupsBase.FMcpGroupMember> GroupMembers) {
        _ptrGetGroupMembers ??= FindFunction("Function IpDrv.McpGroupsManager.GetGroupMembers");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupMembers.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetGroupMembers, @params);

        var _GroupMembersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_GroupMembersPtr, 16, 16);
        GroupMembers = new(_GroupMembersPtr, 24) { Allocated = true };
    }

    // Function IpDrv.McpGroupsManager.OnQueryGroupMembersRequestComplete
    // 0x3750E0
    // (Final | Defined | Public | Delegate)
    public unsafe class OnQueryGroupMembersRequestComplete_Parameters : BaseObject {
        public OnQueryGroupMembersRequestComplete_Parameters() { }
        public OnQueryGroupMembersRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnQueryGroupMembersRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnQueryGroupMembersRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnQueryGroupMembersRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryGroupMembersRequestComplete;
    public void OnQueryGroupMembersRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnQueryGroupMembersRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnQueryGroupMembersRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryGroupMembersRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.QueryGroupMembers
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryGroupMembers_Parameters : BaseObject {
        public QueryGroupMembers_Parameters() { }
        public QueryGroupMembers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.QueryGroupMembers.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.QueryGroupMembers.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryGroupMembers;
    public void QueryGroupMembers(FString UniqueUserId, FString GroupId) {
        _ptrQueryGroupMembers ??= FindFunction("Function IpDrv.McpGroupsManager.QueryGroupMembers");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryGroupMembers, @params);
    }

    // Function IpDrv.McpGroupsManager.GetGroupList
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetGroupList_Parameters : BaseObject {
        public GetGroupList_Parameters() { }
        public GetGroupList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.GetGroupList.UserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpGroupsManager.GetGroupList.GroupList
        // 0x10 (0x20)
        // (Param | OutParam | NeedCtorLink)
        public UMcpGroupsBase.FMcpGroupList GroupList {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 32, 32);
        }
    }
    private static UFunction _ptrGetGroupList;
    public void GetGroupList(FString UserId, ref UMcpGroupsBase.FMcpGroupList GroupList) {
        _ptrGetGroupList ??= FindFunction("Function IpDrv.McpGroupsManager.GetGroupList");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)UserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupList.Pointer, @params + 16, 32, 32);

        ProcessEvent(_ptrGetGroupList, @params);

        var _GroupListPtr = Marshal.AllocHGlobal(32);
        System.Buffer.MemoryCopy(@params + 16, (void*)_GroupListPtr, 32, 32);
        GroupList = new(_GroupListPtr) { Allocated = true };
    }

    // Function IpDrv.McpGroupsManager.OnQueryGroupsRequestComplete
    // 0x3750E0
    // (Final | Defined | Public | Delegate | HasDefaults)
    public unsafe class OnQueryGroupsRequestComplete_Parameters : BaseObject {
        public OnQueryGroupsRequestComplete_Parameters() { }
        public OnQueryGroupsRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnQueryGroupsRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnQueryGroupsRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnQueryGroupsRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryGroupsRequestComplete;
    public void OnQueryGroupsRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnQueryGroupsRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnQueryGroupsRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryGroupsRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.QueryGroups
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryGroups_Parameters : BaseObject {
        public QueryGroups_Parameters() { }
        public QueryGroups_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.QueryGroups.RequesterId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString RequesterId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryGroups;
    public void QueryGroups(FString RequesterId) {
        _ptrQueryGroups ??= FindFunction("Function IpDrv.McpGroupsManager.QueryGroups");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)RequesterId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryGroups, @params);
    }

    // Function IpDrv.McpGroupsManager.OnDeleteGroupRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteGroupRequestComplete_Parameters : BaseObject {
        public OnDeleteGroupRequestComplete_Parameters() { }
        public OnDeleteGroupRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnDeleteGroupRequestComplete.OriginalRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface OriginalRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnDeleteGroupRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnDeleteGroupRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteGroupRequestComplete;
    public void OnDeleteGroupRequestComplete(UHttpRequestInterface OriginalRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnDeleteGroupRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnDeleteGroupRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OriginalRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteGroupRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.DeleteGroup
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteGroup_Parameters : BaseObject {
        public DeleteGroup_Parameters() { }
        public DeleteGroup_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.DeleteGroup.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.DeleteGroup.GroupId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDeleteGroup;
    public void DeleteGroup(FString UniqueUserId, FString GroupId) {
        _ptrDeleteGroup ??= FindFunction("Function IpDrv.McpGroupsManager.DeleteGroup");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDeleteGroup, @params);
    }

    // Function IpDrv.McpGroupsManager.OnCreateGroupRequestComplete
    // 0x3750E0
    // (Final | Defined | Public | HasDefaults)
    public unsafe class OnCreateGroupRequestComplete_Parameters : BaseObject {
        public OnCreateGroupRequestComplete_Parameters() { }
        public OnCreateGroupRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpGroupsManager.OnCreateGroupRequestComplete.CreateGroupRequest
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface CreateGroupRequest {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpGroupsManager.OnCreateGroupRequestComplete.HttpResponse
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface HttpResponse {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpGroupsManager.OnCreateGroupRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnCreateGroupRequestComplete;
    public void OnCreateGroupRequestComplete(UHttpRequestInterface CreateGroupRequest, UHttpResponseInterface HttpResponse, bool bWasSuccessful) {
        _ptrOnCreateGroupRequestComplete ??= FindFunction("Function IpDrv.McpGroupsManager.OnCreateGroupRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)CreateGroupRequest.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)HttpResponse.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnCreateGroupRequestComplete, @params);
    }

    // Function IpDrv.McpGroupsManager.CreateGroup
    // 0x3750E0
    // (Defined | Public | HasDefaults)
    public unsafe class CreateGroup_Parameters : BaseObject {
        public CreateGroup_Parameters() { }
        public CreateGroup_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpGroupsManager.CreateGroup.UniqueUserId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString UniqueUserId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpGroupsManager.CreateGroup.GroupName
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString GroupName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrCreateGroup;
    public void CreateGroup(FString UniqueUserId, FString GroupName) {
        _ptrCreateGroup ??= FindFunction("Function IpDrv.McpGroupsManager.CreateGroup");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)UniqueUserId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)GroupName.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCreateGroup, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpGroupsManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpIdMappingBase
// 0x40 (0x78 - 0xB8)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpIdMappingBase : UMcpServiceBase {
    public UMcpIdMappingBase() { }
    public UMcpIdMappingBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpIdMappingBase.McpIdMappingClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpIdMappingClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.McpIdMappingBase.__OnAddMappingComplete__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAddMappingComplete__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty IpDrv.McpIdMappingBase.__OnQueryMappingsComplete__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryMappingsComplete__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }


    // Function IpDrv.McpIdMappingBase.GetIdMappings
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetIdMappings_Parameters : BaseObject {
        public GetIdMappings_Parameters() { }
        public GetIdMappings_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingBase.GetIdMappings.ExternalType
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpIdMappingBase.GetIdMappings.IDMappings
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpIdMapping> IDMappings {
            get => new(Pointer + 16, 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetIdMappings;
    public void GetIdMappings(FString ExternalType, ref StructTArray<FMcpIdMapping> IDMappings) {
        _ptrGetIdMappings ??= FindFunction("Function IpDrv.McpIdMappingBase.GetIdMappings");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)IDMappings.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetIdMappings, @params);

        var _IDMappingsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_IDMappingsPtr, 16, 16);
        IDMappings = new(_IDMappingsPtr, 48) { Allocated = true };
    }

    // Function IpDrv.McpIdMappingBase.OnQueryMappingsComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryMappingsComplete_Parameters : BaseObject {
        public OnQueryMappingsComplete_Parameters() { }
        public OnQueryMappingsComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingBase.OnQueryMappingsComplete.ExternalType
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpIdMappingBase.OnQueryMappingsComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpIdMappingBase.OnQueryMappingsComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryMappingsComplete;
    public void OnQueryMappingsComplete(FString ExternalType, bool bWasSuccessful, FString Error) {
        _ptrOnQueryMappingsComplete ??= FindFunction("Function IpDrv.McpIdMappingBase.OnQueryMappingsComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQueryMappingsComplete, @params);
    }

    // Function IpDrv.McpIdMappingBase.QueryMappings
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class QueryMappings_Parameters : BaseObject {
        public QueryMappings_Parameters() { }
        public QueryMappings_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpIdMappingBase.QueryMappings.ExternalIds
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> ExternalIds {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.QueryMappings.ExternalType
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryMappings;
    public void QueryMappings(ref StructTArray<FString> ExternalIds, FString ExternalType) {
        _ptrQueryMappings ??= FindFunction("Function IpDrv.McpIdMappingBase.QueryMappings");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ExternalIds.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryMappings, @params);

        var _ExternalIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ExternalIdsPtr, 16, 16);
        ExternalIds = new(_ExternalIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpIdMappingBase.OnAddMappingComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAddMappingComplete_Parameters : BaseObject {
        public OnAddMappingComplete_Parameters() { }
        public OnAddMappingComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingBase.OnAddMappingComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.OnAddMappingComplete.ExternalId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.OnAddMappingComplete.ExternalType
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpIdMappingBase.OnAddMappingComplete.bWasSuccessful
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpIdMappingBase.OnAddMappingComplete.Error
        // 0x38 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrOnAddMappingComplete;
    public void OnAddMappingComplete(FString McpId, FString ExternalId, FString ExternalType, bool bWasSuccessful, FString Error) {
        _ptrOnAddMappingComplete ??= FindFunction("Function IpDrv.McpIdMappingBase.OnAddMappingComplete");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 48, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrOnAddMappingComplete, @params);
    }

    // Function IpDrv.McpIdMappingBase.AddMapping
    // 0x3750E0
    // (Public)
    public unsafe class AddMapping_Parameters : BaseObject {
        public AddMapping_Parameters() { }
        public AddMapping_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingBase.AddMapping.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.AddMapping.ExternalId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.AddMapping.ExternalType
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAddMapping;
    public void AddMapping(FString McpId, FString ExternalId, FString ExternalType) {
        _ptrAddMapping ??= FindFunction("Function IpDrv.McpIdMappingBase.AddMapping");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrAddMapping, @params);
    }

    // Function IpDrv.McpIdMappingBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpIdMappingBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpIdMappingBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpIdMappingBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpIdMappingBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpIdMappingBase.McpIdMapping
    // 0x30
    public unsafe class FMcpIdMapping : BaseObject {
        public FMcpIdMapping() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FMcpIdMapping(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingBase.McpIdMapping.McpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.McpIdMapping.ExternalId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString ExternalId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingBase.McpIdMapping.ExternalType
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpIdMappingBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpIdMappingManager
// 0x50 (0xB8 - 0x108)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpIdMappingManager : UMcpIdMappingBase {
    public UMcpIdMappingManager() { }
    public UMcpIdMappingManager(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.McpIdMappingManager.AccountMappings
    // 0xB8 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpIdMappingBase.FMcpIdMapping> AccountMappings {
        get => new(Pointer + 184, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 16, 16);
    }

    // StrProperty IpDrv.McpIdMappingManager.AddMappingUrl
    // 0xC8 (0x10)
    // (Config | NeedCtorLink)
    public FString AddMappingUrl {
        get => new(Pointer + 200);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 200), 16, 16);
    }

    // StrProperty IpDrv.McpIdMappingManager.QueryMappingUrl
    // 0xD8 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryMappingUrl {
        get => new(Pointer + 216);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 16, 16);
    }

    // ArrayProperty IpDrv.McpIdMappingManager.AddMappingRequests
    // 0xE8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FAddMappingRequest> AddMappingRequests {
        get => new(Pointer + 232, 56);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // ArrayProperty IpDrv.McpIdMappingManager.QueryMappingRequests
    // 0xF8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FQueryMappingRequest> QueryMappingRequests {
        get => new(Pointer + 248, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 16, 16);
    }


    // Function IpDrv.McpIdMappingManager.GetIdMappings
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetIdMappings_Parameters : BaseObject {
        public GetIdMappings_Parameters() { }
        public GetIdMappings_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingManager.GetIdMappings.ExternalType
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpIdMappingManager.GetIdMappings.IDMappings
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpIdMappingBase.FMcpIdMapping> IDMappings {
            get => new(Pointer + 16, 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetIdMappings;
    public void GetIdMappings(FString ExternalType, ref StructTArray<UMcpIdMappingBase.FMcpIdMapping> IDMappings) {
        _ptrGetIdMappings ??= FindFunction("Function IpDrv.McpIdMappingManager.GetIdMappings");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)IDMappings.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetIdMappings, @params);

        var _IDMappingsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_IDMappingsPtr, 16, 16);
        IDMappings = new(_IDMappingsPtr, 48) { Allocated = true };
    }

    // Function IpDrv.McpIdMappingManager.OnQueryMappingsRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnQueryMappingsRequestComplete_Parameters : BaseObject {
        public OnQueryMappingsRequestComplete_Parameters() { }
        public OnQueryMappingsRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpIdMappingManager.OnQueryMappingsRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpIdMappingManager.OnQueryMappingsRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpIdMappingManager.OnQueryMappingsRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryMappingsRequestComplete;
    public void OnQueryMappingsRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryMappingsRequestComplete ??= FindFunction("Function IpDrv.McpIdMappingManager.OnQueryMappingsRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryMappingsRequestComplete, @params);
    }

    // Function IpDrv.McpIdMappingManager.QueryMappings
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class QueryMappings_Parameters : BaseObject {
        public QueryMappings_Parameters() { }
        public QueryMappings_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpIdMappingManager.QueryMappings.ExternalIds
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> ExternalIds {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingManager.QueryMappings.ExternalType
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryMappings;
    public void QueryMappings(ref StructTArray<FString> ExternalIds, FString ExternalType) {
        _ptrQueryMappings ??= FindFunction("Function IpDrv.McpIdMappingManager.QueryMappings");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ExternalIds.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryMappings, @params);

        var _ExternalIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ExternalIdsPtr, 16, 16);
        ExternalIds = new(_ExternalIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpIdMappingManager.OnAddMappingRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnAddMappingRequestComplete_Parameters : BaseObject {
        public OnAddMappingRequestComplete_Parameters() { }
        public OnAddMappingRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpIdMappingManager.OnAddMappingRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpIdMappingManager.OnAddMappingRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpIdMappingManager.OnAddMappingRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnAddMappingRequestComplete;
    public void OnAddMappingRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnAddMappingRequestComplete ??= FindFunction("Function IpDrv.McpIdMappingManager.OnAddMappingRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnAddMappingRequestComplete, @params);
    }

    // Function IpDrv.McpIdMappingManager.AddMapping
    // 0x3750E0
    // (Defined | Public)
    public unsafe class AddMapping_Parameters : BaseObject {
        public AddMapping_Parameters() { }
        public AddMapping_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingManager.AddMapping.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingManager.AddMapping.ExternalId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingManager.AddMapping.ExternalType
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAddMapping;
    public void AddMapping(FString McpId, FString ExternalId, FString ExternalType) {
        _ptrAddMapping ??= FindFunction("Function IpDrv.McpIdMappingManager.AddMapping");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ExternalType.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrAddMapping, @params);
    }


    // ScriptStruct IpDrv.McpIdMappingManager.QueryMappingRequest
    // 0x18
    public unsafe class FQueryMappingRequest : BaseObject {
        public FQueryMappingRequest() {
            Pointer = Marshal.AllocHGlobal(24);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 24);
            Allocated = true;
        }
        public FQueryMappingRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingManager.QueryMappingRequest.ExternalType
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.McpIdMappingManager.QueryMappingRequest.Request
        // 0x10 (0x8)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }

    // ScriptStruct IpDrv.McpIdMappingManager.AddMappingRequest
    // 0x38
    public unsafe class FAddMappingRequest : BaseObject {
        public FAddMappingRequest() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FAddMappingRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpIdMappingManager.AddMappingRequest.McpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingManager.AddMappingRequest.ExternalId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString ExternalId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpIdMappingManager.AddMappingRequest.ExternalType
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString ExternalType {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ObjectProperty IpDrv.McpIdMappingManager.AddMappingRequest.Request
        // 0x30 (0x8)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 48);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 48) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpIdMappingManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpManagedValueManagerBase
// 0x70 (0x78 - 0xE8)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpManagedValueManagerBase : UMcpServiceBase {
    public UMcpManagedValueManagerBase() { }
    public UMcpManagedValueManagerBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpManagedValueManagerBase.McpManagedValueManagerClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpManagedValueManagerClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.McpManagedValueManagerBase.__OnCreateSaveSlotComplete__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateSaveSlotComplete__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty IpDrv.McpManagedValueManagerBase.__OnReadSaveSlotComplete__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnReadSaveSlotComplete__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }

    // DelegateProperty IpDrv.McpManagedValueManagerBase.__OnUpdateValueComplete__Delegate
    // 0xB8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnUpdateValueComplete__Delegate {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 24, 24);
    }

    // DelegateProperty IpDrv.McpManagedValueManagerBase.__OnDeleteValueComplete__Delegate
    // 0xD0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteValueComplete__Delegate {
        get => new(Pointer + 208);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 24, 24);
    }


    // Function IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteValueComplete_Parameters : BaseObject {
        public OnDeleteValueComplete_Parameters() { }
        public OnDeleteValueComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }

        // BoolProperty IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete.bWasSuccessful
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete.Error
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteValueComplete;
    public void OnDeleteValueComplete(FString McpId, FString SaveSlot, FName ValueId, bool bWasSuccessful, FString Error) {
        _ptrOnDeleteValueComplete ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.OnDeleteValueComplete");

        var @params = stackalloc byte[60];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 40, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 48, 16, 16);

        ProcessEvent(_ptrOnDeleteValueComplete, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.DeleteValue
    // 0x3750E0
    // (Public)
    public unsafe class DeleteValue_Parameters : BaseObject {
        public DeleteValue_Parameters() { }
        public DeleteValue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.DeleteValue.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.DeleteValue.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManagerBase.DeleteValue.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }
    }
    private static UFunction _ptrDeleteValue;
    public void DeleteValue(FString McpId, FString SaveSlot, FName ValueId) {
        _ptrDeleteValue ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.DeleteValue");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);

        ProcessEvent(_ptrDeleteValue, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnUpdateValueComplete_Parameters : BaseObject {
        public OnUpdateValueComplete_Parameters() { }
        public OnUpdateValueComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }

        // IntProperty IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete.Value
        // 0x28 (0x4)
        // (Param)
        public int Value {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }

        // BoolProperty IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete.bWasSuccessful
        // 0x2C (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 44) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 44) |= 0x1;
                else *(uint*)(Pointer + 44) &= ~(uint)0x1;
            }
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete.Error
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }
    private static UFunction _ptrOnUpdateValueComplete;
    public void OnUpdateValueComplete(FString McpId, FString SaveSlot, FName ValueId, int Value, bool bWasSuccessful, FString Error) {
        _ptrOnUpdateValueComplete ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.OnUpdateValueComplete");

        var @params = stackalloc byte[64];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);
        System.Buffer.MemoryCopy(&Value, @params + 40, 4, 4);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 44, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 48, 16, 16);

        ProcessEvent(_ptrOnUpdateValueComplete, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.UpdateValue
    // 0x3750E0
    // (Public)
    public unsafe class UpdateValue_Parameters : BaseObject {
        public UpdateValue_Parameters() { }
        public UpdateValue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.UpdateValue.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.UpdateValue.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManagerBase.UpdateValue.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }

        // IntProperty IpDrv.McpManagedValueManagerBase.UpdateValue.Value
        // 0x28 (0x4)
        // (Param)
        public int Value {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }
    }
    private static UFunction _ptrUpdateValue;
    public void UpdateValue(FString McpId, FString SaveSlot, FName ValueId, int Value) {
        _ptrUpdateValue ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.UpdateValue");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);
        System.Buffer.MemoryCopy(&Value, @params + 40, 4, 4);

        ProcessEvent(_ptrUpdateValue, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.GetValue
    // 0x3750E0
    // (Public)
    public unsafe class GetValue_Parameters : BaseObject {
        public GetValue_Parameters() { }
        public GetValue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.GetValue.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.GetValue.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManagerBase.GetValue.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }

        // IntProperty IpDrv.McpManagedValueManagerBase.GetValue.ReturnValue
        // 0x28 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }
    }
    private static UFunction _ptrGetValue;
    public int GetValue(FString McpId, FString SaveSlot, FName ValueId) {
        _ptrGetValue ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.GetValue");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);

        ProcessEvent(_ptrGetValue, @params);

        return *(int*)(@params + 40);
    }

    // Function IpDrv.McpManagedValueManagerBase.GetValues
    // 0x3750E0
    // (Public)
    public unsafe class GetValues_Parameters : BaseObject {
        public GetValues_Parameters() { }
        public GetValues_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.GetValues.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.GetValues.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpManagedValueManagerBase.GetValues.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FManagedValue> ReturnValue {
            get => new(Pointer + 32, 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetValues;
    public StructTArray<FManagedValue> GetValues(FString McpId, FString SaveSlot) {
        _ptrGetValues ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.GetValues");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetValues, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 12) { Allocated = true };
    }

    // Function IpDrv.McpManagedValueManagerBase.OnReadSaveSlotComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnReadSaveSlotComplete_Parameters : BaseObject {
        public OnReadSaveSlotComplete_Parameters() { }
        public OnReadSaveSlotComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnReadSaveSlotComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnReadSaveSlotComplete.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpManagedValueManagerBase.OnReadSaveSlotComplete.bWasSuccessful
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpManagedValueManagerBase.OnReadSaveSlotComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnReadSaveSlotComplete;
    public void OnReadSaveSlotComplete(FString McpId, FString SaveSlot, bool bWasSuccessful, FString Error) {
        _ptrOnReadSaveSlotComplete ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.OnReadSaveSlotComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnReadSaveSlotComplete, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.ReadSaveSlot
    // 0x3750E0
    // (Public)
    public unsafe class ReadSaveSlot_Parameters : BaseObject {
        public ReadSaveSlot_Parameters() { }
        public ReadSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.ReadSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.ReadSaveSlot.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrReadSaveSlot;
    public void ReadSaveSlot(FString McpId, FString SaveSlot) {
        _ptrReadSaveSlot ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.ReadSaveSlot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrReadSaveSlot, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.OnCreateSaveSlotComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnCreateSaveSlotComplete_Parameters : BaseObject {
        public OnCreateSaveSlotComplete_Parameters() { }
        public OnCreateSaveSlotComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnCreateSaveSlotComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.OnCreateSaveSlotComplete.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpManagedValueManagerBase.OnCreateSaveSlotComplete.bWasSuccessful
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpManagedValueManagerBase.OnCreateSaveSlotComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnCreateSaveSlotComplete;
    public void OnCreateSaveSlotComplete(FString McpId, FString SaveSlot, bool bWasSuccessful, FString Error) {
        _ptrOnCreateSaveSlotComplete ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.OnCreateSaveSlotComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnCreateSaveSlotComplete, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.CreateSaveSlot
    // 0x3750E0
    // (Public)
    public unsafe class CreateSaveSlot_Parameters : BaseObject {
        public CreateSaveSlot_Parameters() { }
        public CreateSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.CreateSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.CreateSaveSlot.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrCreateSaveSlot;
    public void CreateSaveSlot(FString McpId, FString SaveSlot) {
        _ptrCreateSaveSlot ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.CreateSaveSlot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCreateSaveSlot, @params);
    }

    // Function IpDrv.McpManagedValueManagerBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpManagedValueManagerBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpManagedValueManagerBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpManagedValueManagerBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpManagedValueManagerBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpManagedValueManagerBase.ManagedValueSaveSlot
    // 0x30
    public unsafe class FManagedValueSaveSlot : BaseObject {
        public FManagedValueSaveSlot() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FManagedValueSaveSlot(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManagerBase.ManagedValueSaveSlot.OwningMcpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString OwningMcpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManagerBase.ManagedValueSaveSlot.SaveSlot
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpManagedValueManagerBase.ManagedValueSaveSlot.Values
        // 0x20 (0x10)
        // (NeedCtorLink)
        public StructTArray<FManagedValue> Values {
            get => new(Pointer + 32, 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpManagedValueManagerBase.ManagedValue
    // 0xC
    public unsafe class FManagedValue : BaseObject {
        public FManagedValue() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FManagedValue(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.McpManagedValueManagerBase.ManagedValue.ValueId
        // 0x0 (0x8)
        public FName ValueId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // IntProperty IpDrv.McpManagedValueManagerBase.ManagedValue.Value
        // 0x8 (0x4)
        public int Value {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpManagedValueManagerBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpManagedValueManager
// 0x90 (0xE8 - 0x178)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpManagedValueManager : UMcpManagedValueManagerBase {
    public UMcpManagedValueManager() { }
    public UMcpManagedValueManager(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpManagedValueManager.CreateSaveSlotUrl
    // 0xE8 (0x10)
    // (Config | NeedCtorLink)
    public FString CreateSaveSlotUrl {
        get => new(Pointer + 232);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // StrProperty IpDrv.McpManagedValueManager.ReadSaveSlotUrl
    // 0xF8 (0x10)
    // (Config | NeedCtorLink)
    public FString ReadSaveSlotUrl {
        get => new(Pointer + 248);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 16, 16);
    }

    // StrProperty IpDrv.McpManagedValueManager.UpdateValueUrl
    // 0x108 (0x10)
    // (Config | NeedCtorLink)
    public FString UpdateValueUrl {
        get => new(Pointer + 264);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 264), 16, 16);
    }

    // StrProperty IpDrv.McpManagedValueManager.DeleteValueUrl
    // 0x118 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteValueUrl {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // ArrayProperty IpDrv.McpManagedValueManager.SaveSlots
    // 0x128 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpManagedValueManagerBase.FManagedValueSaveSlot> SaveSlots {
        get => new(Pointer + 296, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 16, 16);
    }

    // ArrayProperty IpDrv.McpManagedValueManager.CreateSaveSlotRequests
    // 0x138 (0x10)
    // (NeedCtorLink)
    public StructTArray<FSaveSlotRequestState> CreateSaveSlotRequests {
        get => new(Pointer + 312, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 16, 16);
    }

    // ArrayProperty IpDrv.McpManagedValueManager.ReadSaveSlotRequests
    // 0x148 (0x10)
    // (NeedCtorLink)
    public StructTArray<FSaveSlotRequestState> ReadSaveSlotRequests {
        get => new(Pointer + 328, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 16, 16);
    }

    // ArrayProperty IpDrv.McpManagedValueManager.UpdateValueRequests
    // 0x158 (0x10)
    // (NeedCtorLink)
    public StructTArray<FValueRequestState> UpdateValueRequests {
        get => new(Pointer + 344, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 344), 16, 16);
    }

    // ArrayProperty IpDrv.McpManagedValueManager.DeleteValueRequests
    // 0x168 (0x10)
    // (NeedCtorLink)
    public StructTArray<FValueRequestState> DeleteValueRequests {
        get => new(Pointer + 360, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 360), 16, 16);
    }


    // Function IpDrv.McpManagedValueManager.OnDeleteValueRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteValueRequestComplete_Parameters : BaseObject {
        public OnDeleteValueRequestComplete_Parameters() { }
        public OnDeleteValueRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpManagedValueManager.OnDeleteValueRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpManagedValueManager.OnDeleteValueRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpManagedValueManager.OnDeleteValueRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteValueRequestComplete;
    public void OnDeleteValueRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnDeleteValueRequestComplete ??= FindFunction("Function IpDrv.McpManagedValueManager.OnDeleteValueRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteValueRequestComplete, @params);
    }

    // Function IpDrv.McpManagedValueManager.DeleteValue
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteValue_Parameters : BaseObject {
        public DeleteValue_Parameters() { }
        public DeleteValue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.DeleteValue.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.DeleteValue.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManager.DeleteValue.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }
    }
    private static UFunction _ptrDeleteValue;
    public void DeleteValue(FString McpId, FString SaveSlot, FName ValueId) {
        _ptrDeleteValue ??= FindFunction("Function IpDrv.McpManagedValueManager.DeleteValue");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);

        ProcessEvent(_ptrDeleteValue, @params);
    }

    // Function IpDrv.McpManagedValueManager.OnUpdateValueRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnUpdateValueRequestComplete_Parameters : BaseObject {
        public OnUpdateValueRequestComplete_Parameters() { }
        public OnUpdateValueRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpManagedValueManager.OnUpdateValueRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpManagedValueManager.OnUpdateValueRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpManagedValueManager.OnUpdateValueRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnUpdateValueRequestComplete;
    public void OnUpdateValueRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnUpdateValueRequestComplete ??= FindFunction("Function IpDrv.McpManagedValueManager.OnUpdateValueRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnUpdateValueRequestComplete, @params);
    }

    // Function IpDrv.McpManagedValueManager.UpdateValue
    // 0x3750E0
    // (Defined | Public)
    public unsafe class UpdateValue_Parameters : BaseObject {
        public UpdateValue_Parameters() { }
        public UpdateValue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.UpdateValue.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.UpdateValue.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManager.UpdateValue.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }

        // IntProperty IpDrv.McpManagedValueManager.UpdateValue.Value
        // 0x28 (0x4)
        // (Param)
        public int Value {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }
    }
    private static UFunction _ptrUpdateValue;
    public void UpdateValue(FString McpId, FString SaveSlot, FName ValueId, int Value) {
        _ptrUpdateValue ??= FindFunction("Function IpDrv.McpManagedValueManager.UpdateValue");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);
        System.Buffer.MemoryCopy(&Value, @params + 40, 4, 4);

        ProcessEvent(_ptrUpdateValue, @params);
    }

    // Function IpDrv.McpManagedValueManager.GetValue
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetValue_Parameters : BaseObject {
        public GetValue_Parameters() { }
        public GetValue_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.GetValue.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.GetValue.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // NameProperty IpDrv.McpManagedValueManager.GetValue.ValueId
        // 0x20 (0x8)
        // (Param)
        public FName ValueId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 8, 8);
        }

        // IntProperty IpDrv.McpManagedValueManager.GetValue.ReturnValue
        // 0x28 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }
    }
    private static UFunction _ptrGetValue;
    public int GetValue(FString McpId, FString SaveSlot, FName ValueId) {
        _ptrGetValue ??= FindFunction("Function IpDrv.McpManagedValueManager.GetValue");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ValueId.Pointer, @params + 32, 8, 8);

        ProcessEvent(_ptrGetValue, @params);

        return *(int*)(@params + 40);
    }

    // Function IpDrv.McpManagedValueManager.GetValues
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetValues_Parameters : BaseObject {
        public GetValues_Parameters() { }
        public GetValues_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.GetValues.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.GetValues.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpManagedValueManager.GetValues.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<UMcpManagedValueManagerBase.FManagedValue> ReturnValue {
            get => new(Pointer + 32, 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetValues;
    public StructTArray<UMcpManagedValueManagerBase.FManagedValue> GetValues(FString McpId, FString SaveSlot) {
        _ptrGetValues ??= FindFunction("Function IpDrv.McpManagedValueManager.GetValues");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrGetValues, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 12) { Allocated = true };
    }

    // Function IpDrv.McpManagedValueManager.OnReadSaveSlotRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnReadSaveSlotRequestComplete_Parameters : BaseObject {
        public OnReadSaveSlotRequestComplete_Parameters() { }
        public OnReadSaveSlotRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpManagedValueManager.OnReadSaveSlotRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpManagedValueManager.OnReadSaveSlotRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpManagedValueManager.OnReadSaveSlotRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnReadSaveSlotRequestComplete;
    public void OnReadSaveSlotRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnReadSaveSlotRequestComplete ??= FindFunction("Function IpDrv.McpManagedValueManager.OnReadSaveSlotRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnReadSaveSlotRequestComplete, @params);
    }

    // Function IpDrv.McpManagedValueManager.ReadSaveSlot
    // 0x3750E0
    // (Defined | Public)
    public unsafe class ReadSaveSlot_Parameters : BaseObject {
        public ReadSaveSlot_Parameters() { }
        public ReadSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.ReadSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.ReadSaveSlot.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrReadSaveSlot;
    public void ReadSaveSlot(FString McpId, FString SaveSlot) {
        _ptrReadSaveSlot ??= FindFunction("Function IpDrv.McpManagedValueManager.ReadSaveSlot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrReadSaveSlot, @params);
    }

    // Function IpDrv.McpManagedValueManager.ParseValuesForSaveSlot
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ParseValuesForSaveSlot_Parameters : BaseObject {
        public ParseValuesForSaveSlot_Parameters() { }
        public ParseValuesForSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.ParseValuesForSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.ParseValuesForSaveSlot.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.ParseValuesForSaveSlot.JsonPayload
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString JsonPayload {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrParseValuesForSaveSlot;
    public void ParseValuesForSaveSlot(FString McpId, FString SaveSlot, FString JsonPayload) {
        _ptrParseValuesForSaveSlot ??= FindFunction("Function IpDrv.McpManagedValueManager.ParseValuesForSaveSlot");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)JsonPayload.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrParseValuesForSaveSlot, @params);
    }

    // Function IpDrv.McpManagedValueManager.FindSaveSlotIndex
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class FindSaveSlotIndex_Parameters : BaseObject {
        public FindSaveSlotIndex_Parameters() { }
        public FindSaveSlotIndex_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.FindSaveSlotIndex.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.FindSaveSlotIndex.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpManagedValueManager.FindSaveSlotIndex.ReturnValue
        // 0x20 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrFindSaveSlotIndex;
    public int FindSaveSlotIndex(FString McpId, FString SaveSlot) {
        _ptrFindSaveSlotIndex ??= FindFunction("Function IpDrv.McpManagedValueManager.FindSaveSlotIndex");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrFindSaveSlotIndex, @params);

        return *(int*)(@params + 32);
    }

    // Function IpDrv.McpManagedValueManager.OnCreateSaveSlotRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnCreateSaveSlotRequestComplete_Parameters : BaseObject {
        public OnCreateSaveSlotRequestComplete_Parameters() { }
        public OnCreateSaveSlotRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpManagedValueManager.OnCreateSaveSlotRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpManagedValueManager.OnCreateSaveSlotRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpManagedValueManager.OnCreateSaveSlotRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnCreateSaveSlotRequestComplete;
    public void OnCreateSaveSlotRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnCreateSaveSlotRequestComplete ??= FindFunction("Function IpDrv.McpManagedValueManager.OnCreateSaveSlotRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnCreateSaveSlotRequestComplete, @params);
    }

    // Function IpDrv.McpManagedValueManager.CreateSaveSlot
    // 0x3750E0
    // (Defined | Public)
    public unsafe class CreateSaveSlot_Parameters : BaseObject {
        public CreateSaveSlot_Parameters() { }
        public CreateSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.CreateSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.CreateSaveSlot.SaveSlot
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrCreateSaveSlot;
    public void CreateSaveSlot(FString McpId, FString SaveSlot) {
        _ptrCreateSaveSlot ??= FindFunction("Function IpDrv.McpManagedValueManager.CreateSaveSlot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlot.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrCreateSaveSlot, @params);
    }


    // ScriptStruct IpDrv.McpManagedValueManager.ValueRequestState
    // 0x8 (0x28 - 0x30)
    public unsafe class FValueRequestState : FSaveSlotRequestState {
        public FValueRequestState() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FValueRequestState(nint pointer) : base(pointer) { }

        // NameProperty IpDrv.McpManagedValueManager.ValueRequestState.ValueId
        // 0x28 (0x8)
        public FName ValueId {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 8, 8);
        }
    }

    // ScriptStruct IpDrv.McpManagedValueManager.SaveSlotRequestState
    // 0x28
    public unsafe class FSaveSlotRequestState : BaseObject {
        public FSaveSlotRequestState() {
            Pointer = Marshal.AllocHGlobal(40);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 40);
            Allocated = true;
        }
        public FSaveSlotRequestState(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpManagedValueManager.SaveSlotRequestState.McpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpManagedValueManager.SaveSlotRequestState.SaveSlot
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString SaveSlot {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ObjectProperty IpDrv.McpManagedValueManager.SaveSlotRequestState.Request
        // 0x20 (0x8)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpManagedValueManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpServerTimeBase
// 0x28 (0x78 - 0xA0)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpServerTimeBase : UMcpServiceBase {
    public UMcpServerTimeBase() { }
    public UMcpServerTimeBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpServerTimeBase.McpServerTimeClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpServerTimeClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.McpServerTimeBase.__OnQueryServerTimeComplete__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryServerTimeComplete__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }


    // Function IpDrv.McpServerTimeBase.GetLastServerTime
    // 0x3750E0
    // (Public)
    public unsafe class GetLastServerTime_Parameters : BaseObject {
        public GetLastServerTime_Parameters() { }
        public GetLastServerTime_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpServerTimeBase.GetLastServerTime.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetLastServerTime;
    public FString GetLastServerTime() {
        _ptrGetLastServerTime ??= FindFunction("Function IpDrv.McpServerTimeBase.GetLastServerTime");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetLastServerTime, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.McpServerTimeBase.OnQueryServerTimeComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryServerTimeComplete_Parameters : BaseObject {
        public OnQueryServerTimeComplete_Parameters() { }
        public OnQueryServerTimeComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpServerTimeBase.OnQueryServerTimeComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpServerTimeBase.OnQueryServerTimeComplete.DateTimeStr
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString DateTimeStr {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // StrProperty IpDrv.McpServerTimeBase.OnQueryServerTimeComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryServerTimeComplete;
    public void OnQueryServerTimeComplete(bool bWasSuccessful, FString DateTimeStr, FString Error) {
        _ptrOnQueryServerTimeComplete ??= FindFunction("Function IpDrv.McpServerTimeBase.OnQueryServerTimeComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)DateTimeStr.Pointer, @params + 8, 16, 16);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQueryServerTimeComplete, @params);
    }

    // Function IpDrv.McpServerTimeBase.QueryServerTime
    // 0x3750E0
    // (Public)
    public unsafe class QueryServerTime_Parameters : BaseObject {
        public QueryServerTime_Parameters() { }
        public QueryServerTime_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrQueryServerTime;
    public void QueryServerTime() {
        _ptrQueryServerTime ??= FindFunction("Function IpDrv.McpServerTimeBase.QueryServerTime");

        ProcessEvent(_ptrQueryServerTime, null);
    }

    // Function IpDrv.McpServerTimeBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpServerTimeBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpServerTimeBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpServerTimeBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpServerTimeBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpServerTimeBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpServerTimeManager
// 0x28 (0xA0 - 0xC8)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpServerTimeManager : UMcpServerTimeBase {
    public UMcpServerTimeManager() { }
    public UMcpServerTimeManager(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpServerTimeManager.TimeStampUrl
    // 0xA0 (0x10)
    // (Config | NeedCtorLink)
    public FString TimeStampUrl {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // StrProperty IpDrv.McpServerTimeManager.LastTimeStamp
    // 0xB0 (0x10)
    // (NeedCtorLink)
    public FString LastTimeStamp {
        get => new(Pointer + 176);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 16, 16);
    }

    // ObjectProperty IpDrv.McpServerTimeManager.HTTPRequestServerTime
    // 0xC0 (0x8)
    public UHttpRequestInterface HTTPRequestServerTime {
        get {
            var pointer = *(nint*)(Pointer + 192);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 192) = value.Pointer;
    }


    // Function IpDrv.McpServerTimeManager.GetLastServerTime
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetLastServerTime_Parameters : BaseObject {
        public GetLastServerTime_Parameters() { }
        public GetLastServerTime_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpServerTimeManager.GetLastServerTime.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetLastServerTime;
    public FString GetLastServerTime() {
        _ptrGetLastServerTime ??= FindFunction("Function IpDrv.McpServerTimeManager.GetLastServerTime");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetLastServerTime, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function IpDrv.McpServerTimeManager.OnQueryServerTimeHTTPRequestComplete
    // 0x3750E0
    // (Final | Defined | Private)
    public unsafe class OnQueryServerTimeHTTPRequestComplete_Parameters : BaseObject {
        public OnQueryServerTimeHTTPRequestComplete_Parameters() { }
        public OnQueryServerTimeHTTPRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpServerTimeManager.OnQueryServerTimeHTTPRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpServerTimeManager.OnQueryServerTimeHTTPRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpServerTimeManager.OnQueryServerTimeHTTPRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryServerTimeHTTPRequestComplete;
    public void OnQueryServerTimeHTTPRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryServerTimeHTTPRequestComplete ??= FindFunction("Function IpDrv.McpServerTimeManager.OnQueryServerTimeHTTPRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryServerTimeHTTPRequestComplete, @params);
    }

    // Function IpDrv.McpServerTimeManager.QueryServerTime
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryServerTime_Parameters : BaseObject {
        public QueryServerTime_Parameters() { }
        public QueryServerTime_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrQueryServerTime;
    public void QueryServerTime() {
        _ptrQueryServerTime ??= FindFunction("Function IpDrv.McpServerTimeManager.QueryServerTime");

        ProcessEvent(_ptrQueryServerTime, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpServerTimeManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpUserInventoryBase
// 0x100 (0x78 - 0x178)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpUserInventoryBase : UMcpServiceBase {
    public UMcpUserInventoryBase() { }
    public UMcpUserInventoryBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpUserInventoryBase.McpUserInventoryClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpUserInventoryClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnCreateSaveSlotComplete__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnCreateSaveSlotComplete__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnDeleteSaveSlotComplete__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteSaveSlotComplete__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnQuerySaveSlotListComplete__Delegate
    // 0xB8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQuerySaveSlotListComplete__Delegate {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnQueryInventoryItemsComplete__Delegate
    // 0xD0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryInventoryItemsComplete__Delegate {
        get => new(Pointer + 208);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnPurchaseItemComplete__Delegate
    // 0xE8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnPurchaseItemComplete__Delegate {
        get => new(Pointer + 232);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnSellItemComplete__Delegate
    // 0x100 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnSellItemComplete__Delegate {
        get => new(Pointer + 256);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnEarnItemComplete__Delegate
    // 0x118 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnEarnItemComplete__Delegate {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnConsumeItemComplete__Delegate
    // 0x130 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnConsumeItemComplete__Delegate {
        get => new(Pointer + 304);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 304), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnDeleteItemComplete__Delegate
    // 0x148 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteItemComplete__Delegate {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserInventoryBase.__OnRecordIapComplete__Delegate
    // 0x160 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnRecordIapComplete__Delegate {
        get => new(Pointer + 352);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 352), 24, 24);
    }


    // Function IpDrv.McpUserInventoryBase.OnRecordIapComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnRecordIapComplete_Parameters : BaseObject {
        public OnRecordIapComplete_Parameters() { }
        public OnRecordIapComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnRecordIapComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnRecordIapComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.OnRecordIapComplete.UpdatedItemIds
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> UpdatedItemIds {
            get => new(Pointer + 32, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnRecordIapComplete.bWasSuccessful
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnRecordIapComplete.Error
        // 0x38 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrOnRecordIapComplete;
    public void OnRecordIapComplete(FString McpId, FString SaveSlotId, StructTArray<FString> UpdatedItemIds, bool bWasSuccessful, FString Error) {
        _ptrOnRecordIapComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnRecordIapComplete");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UpdatedItemIds.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 48, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrOnRecordIapComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.RecordIap
    // 0x3750E0
    // (Public)
    public unsafe class RecordIap_Parameters : BaseObject {
        public RecordIap_Parameters() { }
        public RecordIap_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.RecordIap.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.RecordIap.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.RecordIap.Receipt
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString Receipt {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrRecordIap;
    public void RecordIap(FString McpId, FString SaveSlotId, FString Receipt) {
        _ptrRecordIap ??= FindFunction("Function IpDrv.McpUserInventoryBase.RecordIap");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)Receipt.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrRecordIap, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnDeleteItemComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteItemComplete_Parameters : BaseObject {
        public OnDeleteItemComplete_Parameters() { }
        public OnDeleteItemComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteItemComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteItemComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteItemComplete.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnDeleteItemComplete.bWasSuccessful
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteItemComplete.Error
        // 0x38 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteItemComplete;
    public void OnDeleteItemComplete(FString McpId, FString SaveSlotId, FString InstanceItemId, bool bWasSuccessful, FString Error) {
        _ptrOnDeleteItemComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnDeleteItemComplete");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 48, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrOnDeleteItemComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.DeleteItem
    // 0x3750E0
    // (Public)
    public unsafe class DeleteItem_Parameters : BaseObject {
        public DeleteItem_Parameters() { }
        public DeleteItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.DeleteItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.DeleteItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.DeleteItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.DeleteItem.StoreVersion
        // 0x30 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrDeleteItem;
    public void DeleteItem(FString McpId, FString SaveSlotId, FString InstanceItemId, int StoreVersion) {
        _ptrDeleteItem ??= FindFunction("Function IpDrv.McpUserInventoryBase.DeleteItem");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 48, 4, 4);

        ProcessEvent(_ptrDeleteItem, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnConsumeItemComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnConsumeItemComplete_Parameters : BaseObject {
        public OnConsumeItemComplete_Parameters() { }
        public OnConsumeItemComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnConsumeItemComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnConsumeItemComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnConsumeItemComplete.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.OnConsumeItemComplete.UpdatedItemIds
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> UpdatedItemIds {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnConsumeItemComplete.bWasSuccessful
        // 0x40 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 64) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 64) |= 0x1;
                else *(uint*)(Pointer + 64) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnConsumeItemComplete.Error
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnConsumeItemComplete;
    public void OnConsumeItemComplete(FString McpId, FString SaveSlotId, FString InstanceItemId, StructTArray<FString> UpdatedItemIds, bool bWasSuccessful, FString Error) {
        _ptrOnConsumeItemComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnConsumeItemComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)UpdatedItemIds.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 64, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnConsumeItemComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.ConsumeItem
    // 0x3750E0
    // (Public)
    public unsafe class ConsumeItem_Parameters : BaseObject {
        public ConsumeItem_Parameters() { }
        public ConsumeItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.ConsumeItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.ConsumeItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.ConsumeItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.ConsumeItem.Quantity
        // 0x30 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.McpUserInventoryBase.ConsumeItem.StoreVersion
        // 0x34 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }
    }
    private static UFunction _ptrConsumeItem;
    public void ConsumeItem(FString McpId, FString SaveSlotId, FString InstanceItemId, int Quantity, int StoreVersion) {
        _ptrConsumeItem ??= FindFunction("Function IpDrv.McpUserInventoryBase.ConsumeItem");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 52, 4, 4);

        ProcessEvent(_ptrConsumeItem, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnEarnItemComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnEarnItemComplete_Parameters : BaseObject {
        public OnEarnItemComplete_Parameters() { }
        public OnEarnItemComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnEarnItemComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnEarnItemComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnEarnItemComplete.GlobalItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.OnEarnItemComplete.UpdatedItemIds
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> UpdatedItemIds {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnEarnItemComplete.bWasSuccessful
        // 0x40 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 64) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 64) |= 0x1;
                else *(uint*)(Pointer + 64) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnEarnItemComplete.Error
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnEarnItemComplete;
    public void OnEarnItemComplete(FString McpId, FString SaveSlotId, FString GlobalItemId, StructTArray<FString> UpdatedItemIds, bool bWasSuccessful, FString Error) {
        _ptrOnEarnItemComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnEarnItemComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)GlobalItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)UpdatedItemIds.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 64, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnEarnItemComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.EarnItem
    // 0x3750E0
    // (Public)
    public unsafe class EarnItem_Parameters : BaseObject {
        public EarnItem_Parameters() { }
        public EarnItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.EarnItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.EarnItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.EarnItem.GlobalItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.EarnItem.Quantity
        // 0x30 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.McpUserInventoryBase.EarnItem.StoreVersion
        // 0x34 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }
    }
    private static UFunction _ptrEarnItem;
    public void EarnItem(FString McpId, FString SaveSlotId, FString GlobalItemId, int Quantity, int StoreVersion) {
        _ptrEarnItem ??= FindFunction("Function IpDrv.McpUserInventoryBase.EarnItem");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)GlobalItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 52, 4, 4);

        ProcessEvent(_ptrEarnItem, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnSellItemComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnSellItemComplete_Parameters : BaseObject {
        public OnSellItemComplete_Parameters() { }
        public OnSellItemComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnSellItemComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnSellItemComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnSellItemComplete.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.OnSellItemComplete.UpdatedItemIds
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> UpdatedItemIds {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnSellItemComplete.bWasSuccessful
        // 0x40 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 64) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 64) |= 0x1;
                else *(uint*)(Pointer + 64) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnSellItemComplete.Error
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnSellItemComplete;
    public void OnSellItemComplete(FString McpId, FString SaveSlotId, FString InstanceItemId, StructTArray<FString> UpdatedItemIds, bool bWasSuccessful, FString Error) {
        _ptrOnSellItemComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnSellItemComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)UpdatedItemIds.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 64, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnSellItemComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.SellItem
    // 0x3750E0
    // (HasOptionalParams | Public | HasOutParams)
    public unsafe class SellItem_Parameters : BaseObject {
        public SellItem_Parameters() { }
        public SellItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.SellItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.SellItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.SellItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.SellItem.Quantity
        // 0x30 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.McpUserInventoryBase.SellItem.StoreVersion
        // 0x34 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.SellItem.ExpectedResultItems
        // 0x38 (0x10)
        // (Const | OptionalParam | Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpInventoryItemContainer> ExpectedResultItems {
            get => new(Pointer + 56, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrSellItem;
    public void SellItem(FString McpId, FString SaveSlotId, FString InstanceItemId, int Quantity, int StoreVersion, ref StructTArray<FMcpInventoryItemContainer> ExpectedResultItems) {
        _ptrSellItem ??= FindFunction("Function IpDrv.McpUserInventoryBase.SellItem");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 52, 4, 4);
        if (ExpectedResultItems != null) System.Buffer.MemoryCopy((void*)ExpectedResultItems.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrSellItem, @params);

        var _ExpectedResultItemsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_ExpectedResultItemsPtr, 16, 16);
        ExpectedResultItems = new(_ExpectedResultItemsPtr, 24) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryBase.OnPurchaseItemComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnPurchaseItemComplete_Parameters : BaseObject {
        public OnPurchaseItemComplete_Parameters() { }
        public OnPurchaseItemComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnPurchaseItemComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnPurchaseItemComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnPurchaseItemComplete.GlobalItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.OnPurchaseItemComplete.UpdatedItemIds
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> UpdatedItemIds {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnPurchaseItemComplete.bWasSuccessful
        // 0x40 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 64) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 64) |= 0x1;
                else *(uint*)(Pointer + 64) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnPurchaseItemComplete.Error
        // 0x48 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 72);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 16, 16);
        }
    }
    private static UFunction _ptrOnPurchaseItemComplete;
    public void OnPurchaseItemComplete(FString McpId, FString SaveSlotId, FString GlobalItemId, StructTArray<FString> UpdatedItemIds, bool bWasSuccessful, FString Error) {
        _ptrOnPurchaseItemComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnPurchaseItemComplete");

        var @params = stackalloc byte[84];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)GlobalItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)UpdatedItemIds.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 64, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 72, 16, 16);

        ProcessEvent(_ptrOnPurchaseItemComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.PurchaseItem
    // 0x3750E0
    // (Public)
    public unsafe class PurchaseItem_Parameters : BaseObject {
        public PurchaseItem_Parameters() { }
        public PurchaseItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.PurchaseItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.PurchaseItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.PurchaseItem.GlobalItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.PurchaseItem.PurchaseItemIds
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> PurchaseItemIds {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.PurchaseItem.Quantity
        // 0x40 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }

        // IntProperty IpDrv.McpUserInventoryBase.PurchaseItem.StoreVersion
        // 0x44 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 68);
            set => *(int*)(Pointer + 68) = value;
        }

        // FloatProperty IpDrv.McpUserInventoryBase.PurchaseItem.Scalar
        // 0x48 (0x4)
        // (Param)
        public float Scalar {
            get => *(float*)(Pointer + 72);
            set => *(float*)(Pointer + 72) = value;
        }
    }
    private static UFunction _ptrPurchaseItem;
    public void PurchaseItem(FString McpId, FString SaveSlotId, FString GlobalItemId, StructTArray<FString> PurchaseItemIds, int Quantity, int StoreVersion, float Scalar) {
        _ptrPurchaseItem ??= FindFunction("Function IpDrv.McpUserInventoryBase.PurchaseItem");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)GlobalItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)PurchaseItemIds.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 64, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 68, 4, 4);
        System.Buffer.MemoryCopy(&Scalar, @params + 72, 4, 4);

        ProcessEvent(_ptrPurchaseItem, @params);
    }

    // Function IpDrv.McpUserInventoryBase.GetInventoryItem
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetInventoryItem_Parameters : BaseObject {
        public GetInventoryItem_Parameters() { }
        public GetInventoryItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.GetInventoryItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.GetInventoryItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.GetInventoryItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StructProperty IpDrv.McpUserInventoryBase.GetInventoryItem.OutInventoryItem
        // 0x30 (0x50)
        // (Param | OutParam | NeedCtorLink)
        public FMcpInventoryItem OutInventoryItem {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 80, 80);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.GetInventoryItem.ReturnValue
        // 0x80 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 128) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 128) |= 0x1;
                else *(uint*)(Pointer + 128) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetInventoryItem;
    public bool GetInventoryItem(FString McpId, FString SaveSlotId, FString InstanceItemId, ref FMcpInventoryItem OutInventoryItem) {
        _ptrGetInventoryItem ??= FindFunction("Function IpDrv.McpUserInventoryBase.GetInventoryItem");

        var @params = stackalloc byte[132];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)OutInventoryItem.Pointer, @params + 48, 80, 80);

        ProcessEvent(_ptrGetInventoryItem, @params);

        var _OutInventoryItemPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 48, (void*)_OutInventoryItemPtr, 80, 80);
        OutInventoryItem = new(_OutInventoryItemPtr) { Allocated = true };

        return *(bool*)(@params + 128);
    }

    // Function IpDrv.McpUserInventoryBase.GetInventoryItems
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetInventoryItems_Parameters : BaseObject {
        public GetInventoryItems_Parameters() { }
        public GetInventoryItems_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.GetInventoryItems.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.GetInventoryItems.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.GetInventoryItems.OutInventoryItems
        // 0x20 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpInventoryItem> OutInventoryItems {
            get => new(Pointer + 32, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetInventoryItems;
    public void GetInventoryItems(FString McpId, FString SaveSlotId, ref StructTArray<FMcpInventoryItem> OutInventoryItems) {
        _ptrGetInventoryItems ??= FindFunction("Function IpDrv.McpUserInventoryBase.GetInventoryItems");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)OutInventoryItems.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrGetInventoryItems, @params);

        var _OutInventoryItemsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_OutInventoryItemsPtr, 16, 16);
        OutInventoryItems = new(_OutInventoryItemsPtr, 80) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryBase.OnQueryInventoryItemsComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryInventoryItemsComplete_Parameters : BaseObject {
        public OnQueryInventoryItemsComplete_Parameters() { }
        public OnQueryInventoryItemsComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnQueryInventoryItemsComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnQueryInventoryItemsComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnQueryInventoryItemsComplete.bWasSuccessful
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnQueryInventoryItemsComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryInventoryItemsComplete;
    public void OnQueryInventoryItemsComplete(FString McpId, FString SaveSlotId, bool bWasSuccessful, FString Error) {
        _ptrOnQueryInventoryItemsComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnQueryInventoryItemsComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnQueryInventoryItemsComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.QueryInventoryItems
    // 0x3750E0
    // (Public)
    public unsafe class QueryInventoryItems_Parameters : BaseObject {
        public QueryInventoryItems_Parameters() { }
        public QueryInventoryItems_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.QueryInventoryItems.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.QueryInventoryItems.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryInventoryItems;
    public void QueryInventoryItems(FString McpId, FString SaveSlotId) {
        _ptrQueryInventoryItems ??= FindFunction("Function IpDrv.McpUserInventoryBase.QueryInventoryItems");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryInventoryItems, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnQuerySaveSlotListComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQuerySaveSlotListComplete_Parameters : BaseObject {
        public OnQuerySaveSlotListComplete_Parameters() { }
        public OnQuerySaveSlotListComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnQuerySaveSlotListComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnQuerySaveSlotListComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnQuerySaveSlotListComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnQuerySaveSlotListComplete;
    public void OnQuerySaveSlotListComplete(FString McpId, bool bWasSuccessful, FString Error) {
        _ptrOnQuerySaveSlotListComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnQuerySaveSlotListComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnQuerySaveSlotListComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.GetSaveSlotList
    // 0x3750E0
    // (Public)
    public unsafe class GetSaveSlotList_Parameters : BaseObject {
        public GetSaveSlotList_Parameters() { }
        public GetSaveSlotList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.GetSaveSlotList.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.GetSaveSlotList.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FString> ReturnValue {
            get => new(Pointer + 16, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetSaveSlotList;
    public StructTArray<FString> GetSaveSlotList(FString McpId) {
        _ptrGetSaveSlotList ??= FindFunction("Function IpDrv.McpUserInventoryBase.GetSaveSlotList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetSaveSlotList, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryBase.QuerySaveSlotList
    // 0x3750E0
    // (Public)
    public unsafe class QuerySaveSlotList_Parameters : BaseObject {
        public QuerySaveSlotList_Parameters() { }
        public QuerySaveSlotList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.QuerySaveSlotList.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQuerySaveSlotList;
    public void QuerySaveSlotList(FString McpId) {
        _ptrQuerySaveSlotList ??= FindFunction("Function IpDrv.McpUserInventoryBase.QuerySaveSlotList");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQuerySaveSlotList, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnDeleteSaveSlotComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteSaveSlotComplete_Parameters : BaseObject {
        public OnDeleteSaveSlotComplete_Parameters() { }
        public OnDeleteSaveSlotComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteSaveSlotComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteSaveSlotComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnDeleteSaveSlotComplete.bWasSuccessful
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnDeleteSaveSlotComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteSaveSlotComplete;
    public void OnDeleteSaveSlotComplete(FString McpId, FString SaveSlotId, bool bWasSuccessful, FString Error) {
        _ptrOnDeleteSaveSlotComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnDeleteSaveSlotComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnDeleteSaveSlotComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.DeleteSaveSlot
    // 0x3750E0
    // (Public)
    public unsafe class DeleteSaveSlot_Parameters : BaseObject {
        public DeleteSaveSlot_Parameters() { }
        public DeleteSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.DeleteSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.DeleteSaveSlot.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDeleteSaveSlot;
    public void DeleteSaveSlot(FString McpId, FString SaveSlotId) {
        _ptrDeleteSaveSlot ??= FindFunction("Function IpDrv.McpUserInventoryBase.DeleteSaveSlot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDeleteSaveSlot, @params);
    }

    // Function IpDrv.McpUserInventoryBase.OnCreateSaveSlotComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnCreateSaveSlotComplete_Parameters : BaseObject {
        public OnCreateSaveSlotComplete_Parameters() { }
        public OnCreateSaveSlotComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.OnCreateSaveSlotComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.OnCreateSaveSlotComplete.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserInventoryBase.OnCreateSaveSlotComplete.bWasSuccessful
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.OnCreateSaveSlotComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnCreateSaveSlotComplete;
    public void OnCreateSaveSlotComplete(FString McpId, FString SaveSlotId, bool bWasSuccessful, FString Error) {
        _ptrOnCreateSaveSlotComplete ??= FindFunction("Function IpDrv.McpUserInventoryBase.OnCreateSaveSlotComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnCreateSaveSlotComplete, @params);
    }

    // Function IpDrv.McpUserInventoryBase.CreateSaveSlot
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class CreateSaveSlot_Parameters : BaseObject {
        public CreateSaveSlot_Parameters() { }
        public CreateSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.CreateSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.CreateSaveSlot.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.CreateSaveSlot.ParentSaveSlotId
        // 0x20 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString ParentSaveSlotId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrCreateSaveSlot;
    public void CreateSaveSlot(FString McpId, FString SaveSlotId, FString ParentSaveSlotId = null) {
        _ptrCreateSaveSlot ??= FindFunction("Function IpDrv.McpUserInventoryBase.CreateSaveSlot");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        if (ParentSaveSlotId != null) System.Buffer.MemoryCopy((void*)ParentSaveSlotId.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrCreateSaveSlot, @params);
    }

    // Function IpDrv.McpUserInventoryBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpUserInventoryBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpUserInventoryBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpUserInventoryBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpUserInventoryBase.McpInventorySaveSlot
    // 0x30
    public unsafe class FMcpInventorySaveSlot : BaseObject {
        public FMcpInventorySaveSlot() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FMcpInventorySaveSlot(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.McpInventorySaveSlot.OwningMcpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString OwningMcpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.McpInventorySaveSlot.SaveSlotId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.McpInventorySaveSlot.Items
        // 0x20 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpInventoryItem> Items {
            get => new(Pointer + 32, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpUserInventoryBase.McpInventoryItemContainer
    // 0x14
    public unsafe class FMcpInventoryItemContainer : BaseObject {
        public FMcpInventoryItemContainer() {
            Pointer = Marshal.AllocHGlobal(20);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 20);
            Allocated = true;
        }
        public FMcpInventoryItemContainer(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.McpInventoryItemContainer.GlobalItemId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.McpInventoryItemContainer.Quantity
        // 0x10 (0x4)
        public int Quantity {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct IpDrv.McpUserInventoryBase.McpInventoryItem
    // 0x50
    public unsafe class FMcpInventoryItem : BaseObject {
        public FMcpInventoryItem() {
            Pointer = Marshal.AllocHGlobal(80);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 80);
            Allocated = true;
        }
        public FMcpInventoryItem(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.McpInventoryItem.InstanceItemId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryBase.McpInventoryItem.GlobalItemId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.McpInventoryItem.Quantity
        // 0x20 (0x4)
        public int Quantity {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // IntProperty IpDrv.McpUserInventoryBase.McpInventoryItem.QuantityIAP
        // 0x24 (0x4)
        public int QuantityIAP {
            get => *(int*)(Pointer + 36);
            set => *(int*)(Pointer + 36) = value;
        }

        // FloatProperty IpDrv.McpUserInventoryBase.McpInventoryItem.Scalar
        // 0x28 (0x4)
        public float Scalar {
            get => *(float*)(Pointer + 40);
            set => *(float*)(Pointer + 40) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserInventoryBase.McpInventoryItem.LastUpdateTime
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString LastUpdateTime {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryBase.McpInventoryItem.Attributes
        // 0x40 (0x10)
        // (NeedCtorLink)
        public StructTArray<FMcpInventoryItemAttribute> Attributes {
            get => new(Pointer + 64, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpUserInventoryBase.McpInventoryItemAttribute
    // 0x14
    public unsafe class FMcpInventoryItemAttribute : BaseObject {
        public FMcpInventoryItemAttribute() {
            Pointer = Marshal.AllocHGlobal(20);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 20);
            Allocated = true;
        }
        public FMcpInventoryItemAttribute(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryBase.McpInventoryItemAttribute.AttributeId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString AttributeId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryBase.McpInventoryItemAttribute.Value
        // 0x10 (0x4)
        public int Value {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpUserInventoryBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpUserInventoryManager
// 0xF0 (0x178 - 0x268)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpUserInventoryManager : UMcpUserInventoryBase {
    public UMcpUserInventoryManager() { }
    public UMcpUserInventoryManager(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpUserInventoryManager.CreateSaveSlotUrl
    // 0x178 (0x10)
    // (Config | NeedCtorLink)
    public FString CreateSaveSlotUrl {
        get => new(Pointer + 376);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 376), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.DeleteSaveSlotUrl
    // 0x188 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteSaveSlotUrl {
        get => new(Pointer + 392);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 392), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.ListSaveSlotUrl
    // 0x198 (0x10)
    // (Config | NeedCtorLink)
    public FString ListSaveSlotUrl {
        get => new(Pointer + 408);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 408), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.ListItemsUrl
    // 0x1A8 (0x10)
    // (Config | NeedCtorLink)
    public FString ListItemsUrl {
        get => new(Pointer + 424);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 424), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.PurchaseItemUrl
    // 0x1B8 (0x10)
    // (Config | NeedCtorLink)
    public FString PurchaseItemUrl {
        get => new(Pointer + 440);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 440), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.SellItemUrl
    // 0x1C8 (0x10)
    // (Config | NeedCtorLink)
    public FString SellItemUrl {
        get => new(Pointer + 456);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 456), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.EarnItemUrl
    // 0x1D8 (0x10)
    // (Config | NeedCtorLink)
    public FString EarnItemUrl {
        get => new(Pointer + 472);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 472), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.ConsumeItemUrl
    // 0x1E8 (0x10)
    // (Config | NeedCtorLink)
    public FString ConsumeItemUrl {
        get => new(Pointer + 488);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 488), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.DeleteItemUrl
    // 0x1F8 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteItemUrl {
        get => new(Pointer + 504);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 504), 16, 16);
    }

    // StrProperty IpDrv.McpUserInventoryManager.IapRecordUrl
    // 0x208 (0x10)
    // (Config | NeedCtorLink)
    public FString IapRecordUrl {
        get => new(Pointer + 520);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 520), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserInventoryManager.SaveSlots
    // 0x218 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpUserInventoryBase.FMcpInventorySaveSlot> SaveSlots {
        get => new(Pointer + 536, 48);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 536), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserInventoryManager.SaveSlotRequests
    // 0x228 (0x10)
    // (NeedCtorLink)
    public StructTArray<FSaveSlotRequestState> SaveSlotRequests {
        get => new(Pointer + 552, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 552), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserInventoryManager.ListSaveSlotRequests
    // 0x238 (0x10)
    // (NeedCtorLink)
    public StructTArray<FSaveSlotRequestState> ListSaveSlotRequests {
        get => new(Pointer + 568, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 568), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserInventoryManager.ListItemsRequests
    // 0x248 (0x10)
    // (NeedCtorLink)
    public StructTArray<FSaveSlotRequestState> ListItemsRequests {
        get => new(Pointer + 584, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 584), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserInventoryManager.ItemRequests
    // 0x258 (0x10)
    // (NeedCtorLink)
    public StructTArray<FInventoryItemRequestState> ItemRequests {
        get => new(Pointer + 600, 56);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 600), 16, 16);
    }


    // Function IpDrv.McpUserInventoryManager.OnRecordIapRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnRecordIapRequestComplete_Parameters : BaseObject {
        public OnRecordIapRequestComplete_Parameters() { }
        public OnRecordIapRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnRecordIapRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnRecordIapRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnRecordIapRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnRecordIapRequestComplete;
    public void OnRecordIapRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnRecordIapRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnRecordIapRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnRecordIapRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.RecordIap
    // 0x3750E0
    // (Defined | Public)
    public unsafe class RecordIap_Parameters : BaseObject {
        public RecordIap_Parameters() { }
        public RecordIap_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.RecordIap.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.RecordIap.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.RecordIap.Receipt
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString Receipt {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrRecordIap;
    public void RecordIap(FString McpId, FString SaveSlotId, FString Receipt) {
        _ptrRecordIap ??= FindFunction("Function IpDrv.McpUserInventoryManager.RecordIap");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)Receipt.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrRecordIap, @params);
    }

    // Function IpDrv.McpUserInventoryManager.OnDeleteItemRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteItemRequestComplete_Parameters : BaseObject {
        public OnDeleteItemRequestComplete_Parameters() { }
        public OnDeleteItemRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnDeleteItemRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnDeleteItemRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnDeleteItemRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteItemRequestComplete;
    public void OnDeleteItemRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnDeleteItemRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnDeleteItemRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteItemRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.DeleteItem
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteItem_Parameters : BaseObject {
        public DeleteItem_Parameters() { }
        public DeleteItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.DeleteItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.DeleteItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.DeleteItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.DeleteItem.StoreVersion
        // 0x30 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrDeleteItem;
    public void DeleteItem(FString McpId, FString SaveSlotId, FString InstanceItemId, int StoreVersion) {
        _ptrDeleteItem ??= FindFunction("Function IpDrv.McpUserInventoryManager.DeleteItem");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 48, 4, 4);

        ProcessEvent(_ptrDeleteItem, @params);
    }

    // Function IpDrv.McpUserInventoryManager.OnConsumeItemRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnConsumeItemRequestComplete_Parameters : BaseObject {
        public OnConsumeItemRequestComplete_Parameters() { }
        public OnConsumeItemRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnConsumeItemRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnConsumeItemRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnConsumeItemRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnConsumeItemRequestComplete;
    public void OnConsumeItemRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnConsumeItemRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnConsumeItemRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnConsumeItemRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.ConsumeItem
    // 0x3750E0
    // (Defined | Public)
    public unsafe class ConsumeItem_Parameters : BaseObject {
        public ConsumeItem_Parameters() { }
        public ConsumeItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.ConsumeItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.ConsumeItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.ConsumeItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.ConsumeItem.Quantity
        // 0x30 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.McpUserInventoryManager.ConsumeItem.StoreVersion
        // 0x34 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }
    }
    private static UFunction _ptrConsumeItem;
    public void ConsumeItem(FString McpId, FString SaveSlotId, FString InstanceItemId, int Quantity, int StoreVersion) {
        _ptrConsumeItem ??= FindFunction("Function IpDrv.McpUserInventoryManager.ConsumeItem");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 52, 4, 4);

        ProcessEvent(_ptrConsumeItem, @params);
    }

    // Function IpDrv.McpUserInventoryManager.OnEarnItemRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnEarnItemRequestComplete_Parameters : BaseObject {
        public OnEarnItemRequestComplete_Parameters() { }
        public OnEarnItemRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnEarnItemRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnEarnItemRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnEarnItemRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnEarnItemRequestComplete;
    public void OnEarnItemRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnEarnItemRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnEarnItemRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnEarnItemRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.EarnItem
    // 0x3750E0
    // (Defined | Public)
    public unsafe class EarnItem_Parameters : BaseObject {
        public EarnItem_Parameters() { }
        public EarnItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.EarnItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.EarnItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.EarnItem.GlobalItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.EarnItem.Quantity
        // 0x30 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.McpUserInventoryManager.EarnItem.StoreVersion
        // 0x34 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }
    }
    private static UFunction _ptrEarnItem;
    public void EarnItem(FString McpId, FString SaveSlotId, FString GlobalItemId, int Quantity, int StoreVersion) {
        _ptrEarnItem ??= FindFunction("Function IpDrv.McpUserInventoryManager.EarnItem");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)GlobalItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 52, 4, 4);

        ProcessEvent(_ptrEarnItem, @params);
    }

    // Function IpDrv.McpUserInventoryManager.OnSellItemRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnSellItemRequestComplete_Parameters : BaseObject {
        public OnSellItemRequestComplete_Parameters() { }
        public OnSellItemRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnSellItemRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnSellItemRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnSellItemRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnSellItemRequestComplete;
    public void OnSellItemRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnSellItemRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnSellItemRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnSellItemRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.SellItem
    // 0x3750E0
    // (Defined | HasOptionalParams | Public | HasOutParams)
    public unsafe class SellItem_Parameters : BaseObject {
        public SellItem_Parameters() { }
        public SellItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.SellItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.SellItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.SellItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.SellItem.Quantity
        // 0x30 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty IpDrv.McpUserInventoryManager.SellItem.StoreVersion
        // 0x34 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.SellItem.ExpectedResultItems
        // 0x38 (0x10)
        // (Const | OptionalParam | Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpUserInventoryBase.FMcpInventoryItemContainer> ExpectedResultItems {
            get => new(Pointer + 56, 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrSellItem;
    public void SellItem(FString McpId, FString SaveSlotId, FString InstanceItemId, int Quantity, int StoreVersion, ref StructTArray<UMcpUserInventoryBase.FMcpInventoryItemContainer> ExpectedResultItems) {
        _ptrSellItem ??= FindFunction("Function IpDrv.McpUserInventoryManager.SellItem");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 48, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 52, 4, 4);
        if (ExpectedResultItems != null) System.Buffer.MemoryCopy((void*)ExpectedResultItems.Pointer, @params + 56, 16, 16);

        ProcessEvent(_ptrSellItem, @params);

        var _ExpectedResultItemsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_ExpectedResultItemsPtr, 16, 16);
        ExpectedResultItems = new(_ExpectedResultItemsPtr, 24) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryManager.OnPurchaseItemRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnPurchaseItemRequestComplete_Parameters : BaseObject {
        public OnPurchaseItemRequestComplete_Parameters() { }
        public OnPurchaseItemRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnPurchaseItemRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnPurchaseItemRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnPurchaseItemRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnPurchaseItemRequestComplete;
    public void OnPurchaseItemRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnPurchaseItemRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnPurchaseItemRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnPurchaseItemRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.PurchaseItem
    // 0x3750E0
    // (Defined | Public)
    public unsafe class PurchaseItem_Parameters : BaseObject {
        public PurchaseItem_Parameters() { }
        public PurchaseItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.PurchaseItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.PurchaseItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.PurchaseItem.GlobalItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString GlobalItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.PurchaseItem.PurchaseItemIds
        // 0x30 (0x10)
        // (Param | NeedCtorLink)
        public StructTArray<FString> PurchaseItemIds {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.PurchaseItem.Quantity
        // 0x40 (0x4)
        // (Param)
        public int Quantity {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }

        // IntProperty IpDrv.McpUserInventoryManager.PurchaseItem.StoreVersion
        // 0x44 (0x4)
        // (Param)
        public int StoreVersion {
            get => *(int*)(Pointer + 68);
            set => *(int*)(Pointer + 68) = value;
        }

        // FloatProperty IpDrv.McpUserInventoryManager.PurchaseItem.Scalar
        // 0x48 (0x4)
        // (Param)
        public float Scalar {
            get => *(float*)(Pointer + 72);
            set => *(float*)(Pointer + 72) = value;
        }
    }
    private static UFunction _ptrPurchaseItem;
    public void PurchaseItem(FString McpId, FString SaveSlotId, FString GlobalItemId, StructTArray<FString> PurchaseItemIds, int Quantity, int StoreVersion, float Scalar) {
        _ptrPurchaseItem ??= FindFunction("Function IpDrv.McpUserInventoryManager.PurchaseItem");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)GlobalItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)PurchaseItemIds.Pointer, @params + 48, 16, 16);
        System.Buffer.MemoryCopy(&Quantity, @params + 64, 4, 4);
        System.Buffer.MemoryCopy(&StoreVersion, @params + 68, 4, 4);
        System.Buffer.MemoryCopy(&Scalar, @params + 72, 4, 4);

        ProcessEvent(_ptrPurchaseItem, @params);
    }

    // Function IpDrv.McpUserInventoryManager.FindItemRequest
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class FindItemRequest_Parameters : BaseObject {
        public FindItemRequest_Parameters() { }
        public FindItemRequest_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.FindItemRequest.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.FindItemRequest.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.FindItemRequest.ItemID
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString ItemID {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.FindItemRequest.InItemRequests
        // 0x30 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FInventoryItemRequestState> InItemRequests {
            get => new(Pointer + 48, 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.FindItemRequest.ReturnValue
        // 0x40 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }
    }
    private static UFunction _ptrFindItemRequest;
    public int FindItemRequest(FString McpId, FString SaveSlotId, FString ItemID, ref StructTArray<FInventoryItemRequestState> InItemRequests) {
        _ptrFindItemRequest ??= FindFunction("Function IpDrv.McpUserInventoryManager.FindItemRequest");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)ItemID.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)InItemRequests.Pointer, @params + 48, 16, 16);

        ProcessEvent(_ptrFindItemRequest, @params);

        var _InItemRequestsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 48, (void*)_InItemRequestsPtr, 16, 16);
        InItemRequests = new(_InItemRequestsPtr, 56) { Allocated = true };

        return *(int*)(@params + 64);
    }

    // Function IpDrv.McpUserInventoryManager.FindSaveSlotRequest
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class FindSaveSlotRequest_Parameters : BaseObject {
        public FindSaveSlotRequest_Parameters() { }
        public FindSaveSlotRequest_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.FindSaveSlotRequest.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.FindSaveSlotRequest.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.FindSaveSlotRequest.InSaveSlotRequests
        // 0x20 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FSaveSlotRequestState> InSaveSlotRequests {
            get => new(Pointer + 32, 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.FindSaveSlotRequest.ReturnValue
        // 0x30 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrFindSaveSlotRequest;
    public int FindSaveSlotRequest(FString McpId, FString SaveSlotId, ref StructTArray<FSaveSlotRequestState> InSaveSlotRequests) {
        _ptrFindSaveSlotRequest ??= FindFunction("Function IpDrv.McpUserInventoryManager.FindSaveSlotRequest");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InSaveSlotRequests.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrFindSaveSlotRequest, @params);

        var _InSaveSlotRequestsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_InSaveSlotRequestsPtr, 16, 16);
        InSaveSlotRequests = new(_InSaveSlotRequestsPtr, 40) { Allocated = true };

        return *(int*)(@params + 48);
    }

    // Function IpDrv.McpUserInventoryManager.FindSaveSlotIndex
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class FindSaveSlotIndex_Parameters : BaseObject {
        public FindSaveSlotIndex_Parameters() { }
        public FindSaveSlotIndex_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.FindSaveSlotIndex.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.FindSaveSlotIndex.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty IpDrv.McpUserInventoryManager.FindSaveSlotIndex.ReturnValue
        // 0x20 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrFindSaveSlotIndex;
    public int FindSaveSlotIndex(FString McpId, FString SaveSlotId) {
        _ptrFindSaveSlotIndex ??= FindFunction("Function IpDrv.McpUserInventoryManager.FindSaveSlotIndex");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrFindSaveSlotIndex, @params);

        return *(int*)(@params + 32);
    }

    // Function IpDrv.McpUserInventoryManager.ParseSaveSlotList
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ParseSaveSlotList_Parameters : BaseObject {
        public ParseSaveSlotList_Parameters() { }
        public ParseSaveSlotList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.ParseSaveSlotList.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.ParseSaveSlotList.JsonPayload
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString JsonPayload {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrParseSaveSlotList;
    public void ParseSaveSlotList(FString McpId, FString JsonPayload) {
        _ptrParseSaveSlotList ??= FindFunction("Function IpDrv.McpUserInventoryManager.ParseSaveSlotList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)JsonPayload.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrParseSaveSlotList, @params);
    }

    // Function IpDrv.McpUserInventoryManager.ParseInventoryForSaveSlot
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ParseInventoryForSaveSlot_Parameters : BaseObject {
        public ParseInventoryForSaveSlot_Parameters() { }
        public ParseInventoryForSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.ParseInventoryForSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.ParseInventoryForSaveSlot.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.ParseInventoryForSaveSlot.JsonPayload
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString JsonPayload {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.ParseInventoryForSaveSlot.ReturnValue
        // 0x30 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FString> ReturnValue {
            get => new(Pointer + 48, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }
    private static UFunction _ptrParseInventoryForSaveSlot;
    public StructTArray<FString> ParseInventoryForSaveSlot(FString McpId, FString SaveSlotId, FString JsonPayload) {
        _ptrParseInventoryForSaveSlot ??= FindFunction("Function IpDrv.McpUserInventoryManager.ParseInventoryForSaveSlot");

        var @params = stackalloc byte[64];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)JsonPayload.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrParseInventoryForSaveSlot, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 48, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryManager.GetInventoryItem
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetInventoryItem_Parameters : BaseObject {
        public GetInventoryItem_Parameters() { }
        public GetInventoryItem_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.GetInventoryItem.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.GetInventoryItem.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.GetInventoryItem.InstanceItemId
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString InstanceItemId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StructProperty IpDrv.McpUserInventoryManager.GetInventoryItem.OutInventoryItem
        // 0x30 (0x50)
        // (Param | OutParam | NeedCtorLink)
        public UMcpUserInventoryBase.FMcpInventoryItem OutInventoryItem {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 80, 80);
        }

        // BoolProperty IpDrv.McpUserInventoryManager.GetInventoryItem.ReturnValue
        // 0x80 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 128) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 128) |= 0x1;
                else *(uint*)(Pointer + 128) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetInventoryItem;
    public bool GetInventoryItem(FString McpId, FString SaveSlotId, FString InstanceItemId, ref UMcpUserInventoryBase.FMcpInventoryItem OutInventoryItem) {
        _ptrGetInventoryItem ??= FindFunction("Function IpDrv.McpUserInventoryManager.GetInventoryItem");

        var @params = stackalloc byte[132];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)InstanceItemId.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy((void*)OutInventoryItem.Pointer, @params + 48, 80, 80);

        ProcessEvent(_ptrGetInventoryItem, @params);

        var _OutInventoryItemPtr = Marshal.AllocHGlobal(80);
        System.Buffer.MemoryCopy(@params + 48, (void*)_OutInventoryItemPtr, 80, 80);
        OutInventoryItem = new(_OutInventoryItemPtr) { Allocated = true };

        return *(bool*)(@params + 128);
    }

    // Function IpDrv.McpUserInventoryManager.GetInventoryItems
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetInventoryItems_Parameters : BaseObject {
        public GetInventoryItems_Parameters() { }
        public GetInventoryItems_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.GetInventoryItems.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.GetInventoryItems.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.GetInventoryItems.OutInventoryItems
        // 0x20 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpUserInventoryBase.FMcpInventoryItem> OutInventoryItems {
            get => new(Pointer + 32, 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrGetInventoryItems;
    public void GetInventoryItems(FString McpId, FString SaveSlotId, ref StructTArray<UMcpUserInventoryBase.FMcpInventoryItem> OutInventoryItems) {
        _ptrGetInventoryItems ??= FindFunction("Function IpDrv.McpUserInventoryManager.GetInventoryItems");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)OutInventoryItems.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrGetInventoryItems, @params);

        var _OutInventoryItemsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_OutInventoryItemsPtr, 16, 16);
        OutInventoryItems = new(_OutInventoryItemsPtr, 80) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryManager.OnQueryInventoryItemsRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnQueryInventoryItemsRequestComplete_Parameters : BaseObject {
        public OnQueryInventoryItemsRequestComplete_Parameters() { }
        public OnQueryInventoryItemsRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnQueryInventoryItemsRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnQueryInventoryItemsRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnQueryInventoryItemsRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryInventoryItemsRequestComplete;
    public void OnQueryInventoryItemsRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryInventoryItemsRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnQueryInventoryItemsRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryInventoryItemsRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.QueryInventoryItems
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QueryInventoryItems_Parameters : BaseObject {
        public QueryInventoryItems_Parameters() { }
        public QueryInventoryItems_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.QueryInventoryItems.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.QueryInventoryItems.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQueryInventoryItems;
    public void QueryInventoryItems(FString McpId, FString SaveSlotId) {
        _ptrQueryInventoryItems ??= FindFunction("Function IpDrv.McpUserInventoryManager.QueryInventoryItems");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrQueryInventoryItems, @params);
    }

    // Function IpDrv.McpUserInventoryManager.GetSaveSlotList
    // 0x3750E0
    // (Defined | Public)
    public unsafe class GetSaveSlotList_Parameters : BaseObject {
        public GetSaveSlotList_Parameters() { }
        public GetSaveSlotList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.GetSaveSlotList.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty IpDrv.McpUserInventoryManager.GetSaveSlotList.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FString> ReturnValue {
            get => new(Pointer + 16, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetSaveSlotList;
    public StructTArray<FString> GetSaveSlotList(FString McpId) {
        _ptrGetSaveSlotList ??= FindFunction("Function IpDrv.McpUserInventoryManager.GetSaveSlotList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetSaveSlotList, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpUserInventoryManager.OnQuerySaveSlotListRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnQuerySaveSlotListRequestComplete_Parameters : BaseObject {
        public OnQuerySaveSlotListRequestComplete_Parameters() { }
        public OnQuerySaveSlotListRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnQuerySaveSlotListRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnQuerySaveSlotListRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnQuerySaveSlotListRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQuerySaveSlotListRequestComplete;
    public void OnQuerySaveSlotListRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQuerySaveSlotListRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnQuerySaveSlotListRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQuerySaveSlotListRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.QuerySaveSlotList
    // 0x3750E0
    // (Defined | Public)
    public unsafe class QuerySaveSlotList_Parameters : BaseObject {
        public QuerySaveSlotList_Parameters() { }
        public QuerySaveSlotList_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.QuerySaveSlotList.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQuerySaveSlotList;
    public void QuerySaveSlotList(FString McpId) {
        _ptrQuerySaveSlotList ??= FindFunction("Function IpDrv.McpUserInventoryManager.QuerySaveSlotList");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQuerySaveSlotList, @params);
    }

    // Function IpDrv.McpUserInventoryManager.OnDeleteSaveSlotRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteSaveSlotRequestComplete_Parameters : BaseObject {
        public OnDeleteSaveSlotRequestComplete_Parameters() { }
        public OnDeleteSaveSlotRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnDeleteSaveSlotRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnDeleteSaveSlotRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnDeleteSaveSlotRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteSaveSlotRequestComplete;
    public void OnDeleteSaveSlotRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnDeleteSaveSlotRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnDeleteSaveSlotRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteSaveSlotRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.DeleteSaveSlot
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteSaveSlot_Parameters : BaseObject {
        public DeleteSaveSlot_Parameters() { }
        public DeleteSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.DeleteSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.DeleteSaveSlot.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDeleteSaveSlot;
    public void DeleteSaveSlot(FString McpId, FString SaveSlotId) {
        _ptrDeleteSaveSlot ??= FindFunction("Function IpDrv.McpUserInventoryManager.DeleteSaveSlot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrDeleteSaveSlot, @params);
    }

    // Function IpDrv.McpUserInventoryManager.OnCreateSaveSlotRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnCreateSaveSlotRequestComplete_Parameters : BaseObject {
        public OnCreateSaveSlotRequestComplete_Parameters() { }
        public OnCreateSaveSlotRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnCreateSaveSlotRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.OnCreateSaveSlotRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserInventoryManager.OnCreateSaveSlotRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnCreateSaveSlotRequestComplete;
    public void OnCreateSaveSlotRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnCreateSaveSlotRequestComplete ??= FindFunction("Function IpDrv.McpUserInventoryManager.OnCreateSaveSlotRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnCreateSaveSlotRequestComplete, @params);
    }

    // Function IpDrv.McpUserInventoryManager.CreateSaveSlot
    // 0x3750E0
    // (Defined | HasOptionalParams | Public)
    public unsafe class CreateSaveSlot_Parameters : BaseObject {
        public CreateSaveSlot_Parameters() { }
        public CreateSaveSlot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.CreateSaveSlot.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.CreateSaveSlot.SaveSlotId
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.CreateSaveSlot.ParentSaveSlotId
        // 0x20 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString ParentSaveSlotId {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrCreateSaveSlot;
    public void CreateSaveSlot(FString McpId, FString SaveSlotId, FString ParentSaveSlotId = null) {
        _ptrCreateSaveSlot ??= FindFunction("Function IpDrv.McpUserInventoryManager.CreateSaveSlot");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SaveSlotId.Pointer, @params + 16, 16, 16);
        if (ParentSaveSlotId != null) System.Buffer.MemoryCopy((void*)ParentSaveSlotId.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrCreateSaveSlot, @params);
    }


    // ScriptStruct IpDrv.McpUserInventoryManager.InventoryItemRequestState
    // 0x10 (0x28 - 0x38)
    public unsafe class FInventoryItemRequestState : FSaveSlotRequestState {
        public FInventoryItemRequestState() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FInventoryItemRequestState(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.InventoryItemRequestState.ItemID
        // 0x28 (0x10)
        // (NeedCtorLink)
        public FString ItemID {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }

    // ScriptStruct IpDrv.McpUserInventoryManager.SaveSlotRequestState
    // 0x28
    public unsafe class FSaveSlotRequestState : BaseObject {
        public FSaveSlotRequestState() {
            Pointer = Marshal.AllocHGlobal(40);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 40);
            Allocated = true;
        }
        public FSaveSlotRequestState(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserInventoryManager.SaveSlotRequestState.McpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserInventoryManager.SaveSlotRequestState.SaveSlotId
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString SaveSlotId {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // ObjectProperty IpDrv.McpUserInventoryManager.SaveSlotRequestState.Request
        // 0x20 (0x8)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpUserInventoryManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpUserManagerBase
// 0x70 (0x78 - 0xE8)
// (Abstract | Compiled | Config | Parsed)
public unsafe partial class UMcpUserManagerBase : UMcpServiceBase {
    public UMcpUserManagerBase() { }
    public UMcpUserManagerBase(nint pointer) : base(pointer) { }


    // StrProperty IpDrv.McpUserManagerBase.McpUserManagerClassName
    // 0x78 (0x10)
    // (Config | NeedCtorLink)
    public FString McpUserManagerClassName {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // DelegateProperty IpDrv.McpUserManagerBase.__OnRegisterUserComplete__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnRegisterUserComplete__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserManagerBase.__OnAuthenticateUserComplete__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnAuthenticateUserComplete__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserManagerBase.__OnQueryUsersComplete__Delegate
    // 0xB8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnQueryUsersComplete__Delegate {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 24, 24);
    }

    // DelegateProperty IpDrv.McpUserManagerBase.__OnDeleteUserComplete__Delegate
    // 0xD0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __OnDeleteUserComplete__Delegate {
        get => new(Pointer + 208);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 24, 24);
    }


    // Function IpDrv.McpUserManagerBase.OnDeleteUserComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnDeleteUserComplete_Parameters : BaseObject {
        public OnDeleteUserComplete_Parameters() { }
        public OnDeleteUserComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserManagerBase.OnDeleteUserComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserManagerBase.OnDeleteUserComplete.Error
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnDeleteUserComplete;
    public void OnDeleteUserComplete(bool bWasSuccessful, FString Error) {
        _ptrOnDeleteUserComplete ??= FindFunction("Function IpDrv.McpUserManagerBase.OnDeleteUserComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnDeleteUserComplete, @params);
    }

    // Function IpDrv.McpUserManagerBase.DeleteUser
    // 0x3750E0
    // (Public)
    public unsafe class DeleteUser_Parameters : BaseObject {
        public DeleteUser_Parameters() { }
        public DeleteUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.DeleteUser.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDeleteUser;
    public void DeleteUser(FString McpId) {
        _ptrDeleteUser ??= FindFunction("Function IpDrv.McpUserManagerBase.DeleteUser");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDeleteUser, @params);
    }

    // Function IpDrv.McpUserManagerBase.GetUser
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetUser_Parameters : BaseObject {
        public GetUser_Parameters() { }
        public GetUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.GetUser.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpUserManagerBase.GetUser.User
        // 0x10 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public FMcpUserStatus User {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 104, 104);
        }

        // BoolProperty IpDrv.McpUserManagerBase.GetUser.ReturnValue
        // 0x78 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 120) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 120) |= 0x1;
                else *(uint*)(Pointer + 120) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetUser;
    public bool GetUser(FString McpId, ref FMcpUserStatus User) {
        _ptrGetUser ??= FindFunction("Function IpDrv.McpUserManagerBase.GetUser");

        var @params = stackalloc byte[124];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)User.Pointer, @params + 16, 104, 104);

        ProcessEvent(_ptrGetUser, @params);

        var _UserPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 16, (void*)_UserPtr, 104, 104);
        User = new(_UserPtr) { Allocated = true };

        return *(bool*)(@params + 120);
    }

    // Function IpDrv.McpUserManagerBase.GetUsers
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class GetUsers_Parameters : BaseObject {
        public GetUsers_Parameters() { }
        public GetUsers_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpUserManagerBase.GetUsers.Users
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FMcpUserStatus> Users {
            get => new(Pointer, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetUsers;
    public void GetUsers(ref StructTArray<FMcpUserStatus> Users) {
        _ptrGetUsers ??= FindFunction("Function IpDrv.McpUserManagerBase.GetUsers");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Users.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetUsers, @params);

        var _UsersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_UsersPtr, 16, 16);
        Users = new(_UsersPtr, 104) { Allocated = true };
    }

    // Function IpDrv.McpUserManagerBase.OnQueryUsersComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnQueryUsersComplete_Parameters : BaseObject {
        public OnQueryUsersComplete_Parameters() { }
        public OnQueryUsersComplete_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.McpUserManagerBase.OnQueryUsersComplete.bWasSuccessful
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserManagerBase.OnQueryUsersComplete.Error
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrOnQueryUsersComplete;
    public void OnQueryUsersComplete(bool bWasSuccessful, FString Error) {
        _ptrOnQueryUsersComplete ??= FindFunction("Function IpDrv.McpUserManagerBase.OnQueryUsersComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&bWasSuccessful, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 8, 16, 16);

        ProcessEvent(_ptrOnQueryUsersComplete, @params);
    }

    // Function IpDrv.McpUserManagerBase.QueryUsers
    // 0x3750E0
    // (Public | HasOutParams)
    public unsafe class QueryUsers_Parameters : BaseObject {
        public QueryUsers_Parameters() { }
        public QueryUsers_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpUserManagerBase.QueryUsers.McpIds
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> McpIds {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryUsers;
    public void QueryUsers(ref StructTArray<FString> McpIds) {
        _ptrQueryUsers ??= FindFunction("Function IpDrv.McpUserManagerBase.QueryUsers");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)McpIds.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryUsers, @params);

        var _McpIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_McpIdsPtr, 16, 16);
        McpIds = new(_McpIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpUserManagerBase.QueryUser
    // 0x3750E0
    // (HasOptionalParams | Public)
    public unsafe class QueryUser_Parameters : BaseObject {
        public QueryUser_Parameters() { }
        public QueryUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.QueryUser.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpUserManagerBase.QueryUser.bShouldUpdateLastActive
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bShouldUpdateLastActive {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrQueryUser;
    public void QueryUser(FString McpId, bool bShouldUpdateLastActive = false) {
        _ptrQueryUser ??= FindFunction("Function IpDrv.McpUserManagerBase.QueryUser");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bShouldUpdateLastActive, @params + 16, 4, 4);

        ProcessEvent(_ptrQueryUser, @params);
    }

    // Function IpDrv.McpUserManagerBase.OnAuthenticateUserComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnAuthenticateUserComplete_Parameters : BaseObject {
        public OnAuthenticateUserComplete_Parameters() { }
        public OnAuthenticateUserComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.OnAuthenticateUserComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.OnAuthenticateUserComplete.Token
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Token {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty IpDrv.McpUserManagerBase.OnAuthenticateUserComplete.bWasSuccessful
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserManagerBase.OnAuthenticateUserComplete.Error
        // 0x28 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrOnAuthenticateUserComplete;
    public void OnAuthenticateUserComplete(FString McpId, FString Token, bool bWasSuccessful, FString Error) {
        _ptrOnAuthenticateUserComplete ??= FindFunction("Function IpDrv.McpUserManagerBase.OnAuthenticateUserComplete");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Token.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 32, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 40, 16, 16);

        ProcessEvent(_ptrOnAuthenticateUserComplete, @params);
    }

    // Function IpDrv.McpUserManagerBase.AuthenticateUserMcp
    // 0x3750E0
    // (Public)
    public unsafe class AuthenticateUserMcp_Parameters : BaseObject {
        public AuthenticateUserMcp_Parameters() { }
        public AuthenticateUserMcp_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.AuthenticateUserMcp.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.AuthenticateUserMcp.ClientSecret
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ClientSecret {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.AuthenticateUserMcp.UDID
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString UDID {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAuthenticateUserMcp;
    public void AuthenticateUserMcp(FString McpId, FString ClientSecret, FString UDID) {
        _ptrAuthenticateUserMcp ??= FindFunction("Function IpDrv.McpUserManagerBase.AuthenticateUserMcp");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ClientSecret.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UDID.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrAuthenticateUserMcp, @params);
    }

    // Function IpDrv.McpUserManagerBase.AuthenticateUserFacebook
    // 0x3750E0
    // (Public)
    public unsafe class AuthenticateUserFacebook_Parameters : BaseObject {
        public AuthenticateUserFacebook_Parameters() { }
        public AuthenticateUserFacebook_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.AuthenticateUserFacebook.FacebookId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.AuthenticateUserFacebook.FacebookToken
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookToken {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.AuthenticateUserFacebook.UDID
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString UDID {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAuthenticateUserFacebook;
    public void AuthenticateUserFacebook(FString FacebookId, FString FacebookToken, FString UDID) {
        _ptrAuthenticateUserFacebook ??= FindFunction("Function IpDrv.McpUserManagerBase.AuthenticateUserFacebook");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)FacebookId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FacebookToken.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UDID.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrAuthenticateUserFacebook, @params);
    }

    // Function IpDrv.McpUserManagerBase.OnRegisterUserComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class OnRegisterUserComplete_Parameters : BaseObject {
        public OnRegisterUserComplete_Parameters() { }
        public OnRegisterUserComplete_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.OnRegisterUserComplete.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpUserManagerBase.OnRegisterUserComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty IpDrv.McpUserManagerBase.OnRegisterUserComplete.Error
        // 0x18 (0x10)
        // (Param | NeedCtorLink)
        public FString Error {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrOnRegisterUserComplete;
    public void OnRegisterUserComplete(FString McpId, bool bWasSuccessful, FString Error) {
        _ptrOnRegisterUserComplete ??= FindFunction("Function IpDrv.McpUserManagerBase.OnRegisterUserComplete");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrOnRegisterUserComplete, @params);
    }

    // Function IpDrv.McpUserManagerBase.RegisterUserFacebook
    // 0x3750E0
    // (Public)
    public unsafe class RegisterUserFacebook_Parameters : BaseObject {
        public RegisterUserFacebook_Parameters() { }
        public RegisterUserFacebook_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.RegisterUserFacebook.FacebookId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.RegisterUserFacebook.FacebookAuthToken
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookAuthToken {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrRegisterUserFacebook;
    public void RegisterUserFacebook(FString FacebookId, FString FacebookAuthToken) {
        _ptrRegisterUserFacebook ??= FindFunction("Function IpDrv.McpUserManagerBase.RegisterUserFacebook");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)FacebookId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FacebookAuthToken.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrRegisterUserFacebook, @params);
    }

    // Function IpDrv.McpUserManagerBase.RegisterUserGenerated
    // 0x3750E0
    // (Public)
    public unsafe class RegisterUserGenerated_Parameters : BaseObject {
        public RegisterUserGenerated_Parameters() { }
        public RegisterUserGenerated_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrRegisterUserGenerated;
    public void RegisterUserGenerated() {
        _ptrRegisterUserGenerated ??= FindFunction("Function IpDrv.McpUserManagerBase.RegisterUserGenerated");

        ProcessEvent(_ptrRegisterUserGenerated, null);
    }

    // Function IpDrv.McpUserManagerBase.CreateInstance
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateInstance_Parameters : BaseObject {
        public CreateInstance_Parameters() { }
        public CreateInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserManagerBase.CreateInstance.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UMcpUserManagerBase ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateInstance;
    public static UMcpUserManagerBase CreateInstance() {
        _ptrCreateInstance ??= FindFunction("Function IpDrv.McpUserManagerBase.CreateInstance");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateInstance, @params);

        return new(*(nint*)@params);
    }


    // ScriptStruct IpDrv.McpUserManagerBase.McpUserStatus
    // 0x68
    public unsafe class FMcpUserStatus : BaseObject {
        public FMcpUserStatus() {
            Pointer = Marshal.AllocHGlobal(104);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 104);
            Allocated = true;
        }
        public FMcpUserStatus(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManagerBase.McpUserStatus.McpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.McpUserStatus.SecretKey
        // 0x10 (0x10)
        // (NeedCtorLink)
        public FString SecretKey {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.McpUserStatus.Ticket
        // 0x20 (0x10)
        // (NeedCtorLink)
        public FString Ticket {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.McpUserStatus.UDID
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString UDID {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.McpUserStatus.RegisteredDate
        // 0x40 (0x10)
        // (NeedCtorLink)
        public FString RegisteredDate {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }

        // StrProperty IpDrv.McpUserManagerBase.McpUserStatus.LastActiveDate
        // 0x50 (0x10)
        // (NeedCtorLink)
        public FString LastActiveDate {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }

        // IntProperty IpDrv.McpUserManagerBase.McpUserStatus.DaysInactive
        // 0x60 (0x4)
        public int DaysInactive {
            get => *(int*)(Pointer + 96);
            set => *(int*)(Pointer + 96) = value;
        }

        // BoolProperty IpDrv.McpUserManagerBase.McpUserStatus.bIsBanned
        // 0x64 (0x4)
        // Bitmask: 0x00000001
        public bool bIsBanned {
            get => (*(uint*)(Pointer + 100) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 100) |= 0x1;
                else *(uint*)(Pointer + 100) &= ~(uint)0x1;
            }
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpUserManagerBase");
            return _staticClass;
        }
    }
}

// Class IpDrv.McpUserManager
// 0xC0 (0xE8 - 0x1A8)
// (Compiled | Config | Parsed)
public unsafe partial class UMcpUserManager : UMcpUserManagerBase {
    public UMcpUserManager() { }
    public UMcpUserManager(nint pointer) : base(pointer) { }


    // ArrayProperty IpDrv.McpUserManager.UserStatuses
    // 0xE8 (0x10)
    // (NeedCtorLink)
    public StructTArray<UMcpUserManagerBase.FMcpUserStatus> UserStatuses {
        get => new(Pointer + 232, 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.RegisterUserMcpUrl
    // 0xF8 (0x10)
    // (Config | NeedCtorLink)
    public FString RegisterUserMcpUrl {
        get => new(Pointer + 248);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.RegisterUserFacebookUrl
    // 0x108 (0x10)
    // (Config | NeedCtorLink)
    public FString RegisterUserFacebookUrl {
        get => new(Pointer + 264);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 264), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.QueryUserUrl
    // 0x118 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryUserUrl {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.QueryUsersUrl
    // 0x128 (0x10)
    // (Config | NeedCtorLink)
    public FString QueryUsersUrl {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.DeleteUserUrl
    // 0x138 (0x10)
    // (Config | NeedCtorLink)
    public FString DeleteUserUrl {
        get => new(Pointer + 312);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.FacebookAuthUrl
    // 0x148 (0x10)
    // (Config | NeedCtorLink)
    public FString FacebookAuthUrl {
        get => new(Pointer + 328);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 16, 16);
    }

    // StrProperty IpDrv.McpUserManager.McpAuthUrl
    // 0x158 (0x10)
    // (Config | NeedCtorLink)
    public FString McpAuthUrl {
        get => new(Pointer + 344);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 344), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserManager.RegisterUserRequests
    // 0x168 (0x10)
    // (NeedCtorLink)
    public PointerTArray<UHttpRequestInterface> RegisterUserRequests {
        get => new(Pointer + 360);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 360), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserManager.QueryUsersRequests
    // 0x178 (0x10)
    // (NeedCtorLink)
    public PointerTArray<UHttpRequestInterface> QueryUsersRequests {
        get => new(Pointer + 376);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 376), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserManager.DeleteUserRequests
    // 0x188 (0x10)
    // (NeedCtorLink)
    public StructTArray<FUserRequest> DeleteUserRequests {
        get => new(Pointer + 392, 24);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 392), 16, 16);
    }

    // ArrayProperty IpDrv.McpUserManager.AuthUserRequests
    // 0x198 (0x10)
    // (NeedCtorLink)
    public PointerTArray<UHttpRequestInterface> AuthUserRequests {
        get => new(Pointer + 408);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 408), 16, 16);
    }


    // Function IpDrv.McpUserManager.OnDeleteUserRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnDeleteUserRequestComplete_Parameters : BaseObject {
        public OnDeleteUserRequestComplete_Parameters() { }
        public OnDeleteUserRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserManager.OnDeleteUserRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserManager.OnDeleteUserRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserManager.OnDeleteUserRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnDeleteUserRequestComplete;
    public void OnDeleteUserRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnDeleteUserRequestComplete ??= FindFunction("Function IpDrv.McpUserManager.OnDeleteUserRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnDeleteUserRequestComplete, @params);
    }

    // Function IpDrv.McpUserManager.DeleteUser
    // 0x3750E0
    // (Defined | Public)
    public unsafe class DeleteUser_Parameters : BaseObject {
        public DeleteUser_Parameters() { }
        public DeleteUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.DeleteUser.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrDeleteUser;
    public void DeleteUser(FString McpId) {
        _ptrDeleteUser ??= FindFunction("Function IpDrv.McpUserManager.DeleteUser");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);

        ProcessEvent(_ptrDeleteUser, @params);
    }

    // Function IpDrv.McpUserManager.GetUser
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetUser_Parameters : BaseObject {
        public GetUser_Parameters() { }
        public GetUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.GetUser.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty IpDrv.McpUserManager.GetUser.User
        // 0x10 (0x68)
        // (Param | OutParam | NeedCtorLink)
        public UMcpUserManagerBase.FMcpUserStatus User {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 104, 104);
        }

        // BoolProperty IpDrv.McpUserManager.GetUser.ReturnValue
        // 0x78 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 120) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 120) |= 0x1;
                else *(uint*)(Pointer + 120) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetUser;
    public bool GetUser(FString McpId, ref UMcpUserManagerBase.FMcpUserStatus User) {
        _ptrGetUser ??= FindFunction("Function IpDrv.McpUserManager.GetUser");

        var @params = stackalloc byte[124];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)User.Pointer, @params + 16, 104, 104);

        ProcessEvent(_ptrGetUser, @params);

        var _UserPtr = Marshal.AllocHGlobal(104);
        System.Buffer.MemoryCopy(@params + 16, (void*)_UserPtr, 104, 104);
        User = new(_UserPtr) { Allocated = true };

        return *(bool*)(@params + 120);
    }

    // Function IpDrv.McpUserManager.GetUsers
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class GetUsers_Parameters : BaseObject {
        public GetUsers_Parameters() { }
        public GetUsers_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpUserManager.GetUsers.Users
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<UMcpUserManagerBase.FMcpUserStatus> Users {
            get => new(Pointer, 104);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetUsers;
    public void GetUsers(ref StructTArray<UMcpUserManagerBase.FMcpUserStatus> Users) {
        _ptrGetUsers ??= FindFunction("Function IpDrv.McpUserManager.GetUsers");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Users.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetUsers, @params);

        var _UsersPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_UsersPtr, 16, 16);
        Users = new(_UsersPtr, 104) { Allocated = true };
    }

    // Function IpDrv.McpUserManager.OnQueryUsersRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnQueryUsersRequestComplete_Parameters : BaseObject {
        public OnQueryUsersRequestComplete_Parameters() { }
        public OnQueryUsersRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserManager.OnQueryUsersRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserManager.OnQueryUsersRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserManager.OnQueryUsersRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryUsersRequestComplete;
    public void OnQueryUsersRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryUsersRequestComplete ??= FindFunction("Function IpDrv.McpUserManager.OnQueryUsersRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryUsersRequestComplete, @params);
    }

    // Function IpDrv.McpUserManager.ParseUsers
    // 0x3750E0
    // (Final | Defined | Protected)
    public unsafe class ParseUsers_Parameters : BaseObject {
        public ParseUsers_Parameters() { }
        public ParseUsers_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.ParseUsers.JsonPayload
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString JsonPayload {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrParseUsers;
    public void ParseUsers(FString JsonPayload) {
        _ptrParseUsers ??= FindFunction("Function IpDrv.McpUserManager.ParseUsers");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)JsonPayload.Pointer, @params, 16, 16);

        ProcessEvent(_ptrParseUsers, @params);
    }

    // Function IpDrv.McpUserManager.QueryUsers
    // 0x3750E0
    // (Defined | Public | HasOutParams)
    public unsafe class QueryUsers_Parameters : BaseObject {
        public QueryUsers_Parameters() { }
        public QueryUsers_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty IpDrv.McpUserManager.QueryUsers.McpIds
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> McpIds {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrQueryUsers;
    public void QueryUsers(ref StructTArray<FString> McpIds) {
        _ptrQueryUsers ??= FindFunction("Function IpDrv.McpUserManager.QueryUsers");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)McpIds.Pointer, @params, 16, 16);

        ProcessEvent(_ptrQueryUsers, @params);

        var _McpIdsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_McpIdsPtr, 16, 16);
        McpIds = new(_McpIdsPtr, 16) { Allocated = true };
    }

    // Function IpDrv.McpUserManager.OnQueryUserRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnQueryUserRequestComplete_Parameters : BaseObject {
        public OnQueryUserRequestComplete_Parameters() { }
        public OnQueryUserRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserManager.OnQueryUserRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserManager.OnQueryUserRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserManager.OnQueryUserRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnQueryUserRequestComplete;
    public void OnQueryUserRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnQueryUserRequestComplete ??= FindFunction("Function IpDrv.McpUserManager.OnQueryUserRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnQueryUserRequestComplete, @params);
    }

    // Function IpDrv.McpUserManager.QueryUser
    // 0x3750E0
    // (Defined | HasOptionalParams | Public)
    public unsafe class QueryUser_Parameters : BaseObject {
        public QueryUser_Parameters() { }
        public QueryUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.QueryUser.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty IpDrv.McpUserManager.QueryUser.bShouldUpdateLastActive
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bShouldUpdateLastActive {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrQueryUser;
    public void QueryUser(FString McpId, bool bShouldUpdateLastActive = false) {
        _ptrQueryUser ??= FindFunction("Function IpDrv.McpUserManager.QueryUser");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&bShouldUpdateLastActive, @params + 16, 4, 4);

        ProcessEvent(_ptrQueryUser, @params);
    }

    // Function IpDrv.McpUserManager.OnAuthenticateUserRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnAuthenticateUserRequestComplete_Parameters : BaseObject {
        public OnAuthenticateUserRequestComplete_Parameters() { }
        public OnAuthenticateUserRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserManager.OnAuthenticateUserRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserManager.OnAuthenticateUserRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserManager.OnAuthenticateUserRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnAuthenticateUserRequestComplete;
    public void OnAuthenticateUserRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnAuthenticateUserRequestComplete ??= FindFunction("Function IpDrv.McpUserManager.OnAuthenticateUserRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnAuthenticateUserRequestComplete, @params);
    }

    // Function IpDrv.McpUserManager.AuthenticateUserMcp
    // 0x3750E0
    // (Defined | Public)
    public unsafe class AuthenticateUserMcp_Parameters : BaseObject {
        public AuthenticateUserMcp_Parameters() { }
        public AuthenticateUserMcp_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.AuthenticateUserMcp.McpId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManager.AuthenticateUserMcp.ClientSecret
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString ClientSecret {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserManager.AuthenticateUserMcp.UDID
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString UDID {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAuthenticateUserMcp;
    public void AuthenticateUserMcp(FString McpId, FString ClientSecret, FString UDID) {
        _ptrAuthenticateUserMcp ??= FindFunction("Function IpDrv.McpUserManager.AuthenticateUserMcp");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)McpId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ClientSecret.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UDID.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrAuthenticateUserMcp, @params);
    }

    // Function IpDrv.McpUserManager.AuthenticateUserFacebook
    // 0x3750E0
    // (Defined | Public)
    public unsafe class AuthenticateUserFacebook_Parameters : BaseObject {
        public AuthenticateUserFacebook_Parameters() { }
        public AuthenticateUserFacebook_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.AuthenticateUserFacebook.FacebookId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManager.AuthenticateUserFacebook.FacebookToken
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookToken {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty IpDrv.McpUserManager.AuthenticateUserFacebook.UDID
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString UDID {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAuthenticateUserFacebook;
    public void AuthenticateUserFacebook(FString FacebookId, FString FacebookToken, FString UDID) {
        _ptrAuthenticateUserFacebook ??= FindFunction("Function IpDrv.McpUserManager.AuthenticateUserFacebook");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)FacebookId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FacebookToken.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)UDID.Pointer, @params + 32, 16, 16);

        ProcessEvent(_ptrAuthenticateUserFacebook, @params);
    }

    // Function IpDrv.McpUserManager.OnRegisterUserRequestComplete
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class OnRegisterUserRequestComplete_Parameters : BaseObject {
        public OnRegisterUserRequestComplete_Parameters() { }
        public OnRegisterUserRequestComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty IpDrv.McpUserManager.OnRegisterUserRequestComplete.Request
        // 0x0 (0x8)
        // (Param)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty IpDrv.McpUserManager.OnRegisterUserRequestComplete.Response
        // 0x8 (0x8)
        // (Param)
        public UHttpResponseInterface Response {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty IpDrv.McpUserManager.OnRegisterUserRequestComplete.bWasSuccessful
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bWasSuccessful {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOnRegisterUserRequestComplete;
    public void OnRegisterUserRequestComplete(UHttpRequestInterface Request, UHttpResponseInterface Response, bool bWasSuccessful) {
        _ptrOnRegisterUserRequestComplete ??= FindFunction("Function IpDrv.McpUserManager.OnRegisterUserRequestComplete");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Request.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Response.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bWasSuccessful, @params + 16, 4, 4);

        ProcessEvent(_ptrOnRegisterUserRequestComplete, @params);
    }

    // Function IpDrv.McpUserManager.ParseUser
    // 0x3750E0
    // (Final | Defined | Protected)
    public unsafe class ParseUser_Parameters : BaseObject {
        public ParseUser_Parameters() { }
        public ParseUser_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.ParseUser.JsonPayload
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString JsonPayload {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty IpDrv.McpUserManager.ParseUser.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrParseUser;
    public int ParseUser(FString JsonPayload) {
        _ptrParseUser ??= FindFunction("Function IpDrv.McpUserManager.ParseUser");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)JsonPayload.Pointer, @params, 16, 16);

        ProcessEvent(_ptrParseUser, @params);

        return *(int*)(@params + 16);
    }

    // Function IpDrv.McpUserManager.RegisterUserFacebook
    // 0x3750E0
    // (Defined | Public)
    public unsafe class RegisterUserFacebook_Parameters : BaseObject {
        public RegisterUserFacebook_Parameters() { }
        public RegisterUserFacebook_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.RegisterUserFacebook.FacebookId
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty IpDrv.McpUserManager.RegisterUserFacebook.FacebookAuthToken
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString FacebookAuthToken {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrRegisterUserFacebook;
    public void RegisterUserFacebook(FString FacebookId, FString FacebookAuthToken) {
        _ptrRegisterUserFacebook ??= FindFunction("Function IpDrv.McpUserManager.RegisterUserFacebook");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)FacebookId.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)FacebookAuthToken.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrRegisterUserFacebook, @params);
    }

    // Function IpDrv.McpUserManager.RegisterUserGenerated
    // 0x3750E0
    // (Defined | Public)
    public unsafe class RegisterUserGenerated_Parameters : BaseObject {
        public RegisterUserGenerated_Parameters() { }
        public RegisterUserGenerated_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrRegisterUserGenerated;
    public void RegisterUserGenerated() {
        _ptrRegisterUserGenerated ??= FindFunction("Function IpDrv.McpUserManager.RegisterUserGenerated");

        ProcessEvent(_ptrRegisterUserGenerated, null);
    }


    // ScriptStruct IpDrv.McpUserManager.UserRequest
    // 0x18
    public unsafe class FUserRequest : BaseObject {
        public FUserRequest() {
            Pointer = Marshal.AllocHGlobal(24);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 24);
            Allocated = true;
        }
        public FUserRequest(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.McpUserManager.UserRequest.McpId
        // 0x0 (0x10)
        // (NeedCtorLink)
        public FString McpId {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty IpDrv.McpUserManager.UserRequest.Request
        // 0x10 (0x8)
        public UHttpRequestInterface Request {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.McpUserManager");
            return _staticClass;
        }
    }
}

// Class IpDrv.WebConnection
// 0x44 (0x2D8 - 0x31C)
// (Compiled | Config | Transient | Parsed | Hidden)
public unsafe partial class AWebConnection : ATcpLink {
    public AWebConnection() { }
    public AWebConnection(nint pointer) : base(pointer) { }


    // ObjectProperty IpDrv.WebConnection.WebServer
    // 0x2D8 (0x8)
    public AWebServer WebServer {
        get {
            var pointer = *(nint*)(Pointer + 728);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 728) = value.Pointer;
    }

    // StrProperty IpDrv.WebConnection.ReceivedData
    // 0x2E0 (0x10)
    // (NeedCtorLink)
    public FString ReceivedData {
        get => new(Pointer + 736);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 736), 16, 16);
    }

    // ObjectProperty IpDrv.WebConnection.Request
    // 0x2F0 (0x8)
    public UWebRequest Request {
        get {
            var pointer = *(nint*)(Pointer + 752);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 752) = value.Pointer;
    }

    // ObjectProperty IpDrv.WebConnection.Response
    // 0x2F8 (0x8)
    public UWebResponse Response {
        get {
            var pointer = *(nint*)(Pointer + 760);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 760) = value.Pointer;
    }

    // ObjectProperty IpDrv.WebConnection.Application
    // 0x300 (0x8)
    public UWebApplication Application {
        get {
            var pointer = *(nint*)(Pointer + 768);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 768) = value.Pointer;
    }

    // BoolProperty IpDrv.WebConnection.bDelayCleanup
    // 0x308 (0x4)
    // Bitmask: 0x00000001
    public bool bDelayCleanup {
        get => (*(uint*)(Pointer + 776) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 776) |= 0x1;
            else *(uint*)(Pointer + 776) &= ~(uint)0x1;
        }
    }

    // IntProperty IpDrv.WebConnection.RawBytesExpecting
    // 0x30C (0x4)
    public int RawBytesExpecting {
        get => *(int*)(Pointer + 780);
        set => *(int*)(Pointer + 780) = value;
    }

    // IntProperty IpDrv.WebConnection.MaxValueLength
    // 0x310 (0x4)
    // (Config)
    public int MaxValueLength {
        get => *(int*)(Pointer + 784);
        set => *(int*)(Pointer + 784) = value;
    }

    // IntProperty IpDrv.WebConnection.MaxLineLength
    // 0x314 (0x4)
    // (Config)
    public int MaxLineLength {
        get => *(int*)(Pointer + 788);
        set => *(int*)(Pointer + 788) = value;
    }

    // IntProperty IpDrv.WebConnection.ConnID
    // 0x318 (0x4)
    public int ConnID {
        get => *(int*)(Pointer + 792);
        set => *(int*)(Pointer + 792) = value;
    }


    // Function IpDrv.WebConnection.IsHanging
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class IsHanging_Parameters : BaseObject {
        public IsHanging_Parameters() { }
        public IsHanging_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty IpDrv.WebConnection.IsHanging.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsHanging;
    public bool IsHanging() {
        _ptrIsHanging ??= FindFunction("Function IpDrv.WebConnection.IsHanging");

        var @params = stackalloc byte[4];

        ProcessEvent(_ptrIsHanging, @params);

        return *(bool*)@params;
    }

    // Function IpDrv.WebConnection.Cleanup
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class Cleanup_Parameters : BaseObject {
        public Cleanup_Parameters() { }
        public Cleanup_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCleanup;
    public void Cleanup() {
        _ptrCleanup ??= FindFunction("Function IpDrv.WebConnection.Cleanup");

        ProcessEvent(_ptrCleanup, null);
    }

    // Function IpDrv.WebConnection.CheckRawBytes
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class CheckRawBytes_Parameters : BaseObject {
        public CheckRawBytes_Parameters() { }
        public CheckRawBytes_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCheckRawBytes;
    public void CheckRawBytes() {
        _ptrCheckRawBytes ??= FindFunction("Function IpDrv.WebConnection.CheckRawBytes");

        ProcessEvent(_ptrCheckRawBytes, null);
    }

    // Function IpDrv.WebConnection.EndOfHeaders
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class EndOfHeaders_Parameters : BaseObject {
        public EndOfHeaders_Parameters() { }
        public EndOfHeaders_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEndOfHeaders;
    public void EndOfHeaders() {
        _ptrEndOfHeaders ??= FindFunction("Function IpDrv.WebConnection.EndOfHeaders");

        ProcessEvent(_ptrEndOfHeaders, null);
    }

    // Function IpDrv.WebConnection.CreateResponseObject
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class CreateResponseObject_Parameters : BaseObject {
        public CreateResponseObject_Parameters() { }
        public CreateResponseObject_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCreateResponseObject;
    public void CreateResponseObject() {
        _ptrCreateResponseObject ??= FindFunction("Function IpDrv.WebConnection.CreateResponseObject");

        ProcessEvent(_ptrCreateResponseObject, null);
    }

    // Function IpDrv.WebConnection.ProcessPost
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ProcessPost_Parameters : BaseObject {
        public ProcessPost_Parameters() { }
        public ProcessPost_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebConnection.ProcessPost.S
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrProcessPost;
    public void ProcessPost(FString S) {
        _ptrProcessPost ??= FindFunction("Function IpDrv.WebConnection.ProcessPost");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        ProcessEvent(_ptrProcessPost, @params);
    }

    // Function IpDrv.WebConnection.ProcessGet
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ProcessGet_Parameters : BaseObject {
        public ProcessGet_Parameters() { }
        public ProcessGet_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebConnection.ProcessGet.S
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrProcessGet;
    public void ProcessGet(FString S) {
        _ptrProcessGet ??= FindFunction("Function IpDrv.WebConnection.ProcessGet");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        ProcessEvent(_ptrProcessGet, @params);
    }

    // Function IpDrv.WebConnection.ProcessHead
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class ProcessHead_Parameters : BaseObject {
        public ProcessHead_Parameters() { }
        public ProcessHead_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebConnection.ProcessHead.S
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrProcessHead;
    public void ProcessHead(FString S) {
        _ptrProcessHead ??= FindFunction("Function IpDrv.WebConnection.ProcessHead");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        ProcessEvent(_ptrProcessHead, @params);
    }

    // Function IpDrv.WebConnection.ReceivedLine
    // 0x3750E0
    // (Defined | Public)
    public unsafe class ReceivedLine_Parameters : BaseObject {
        public ReceivedLine_Parameters() { }
        public ReceivedLine_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebConnection.ReceivedLine.S
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrReceivedLine;
    public void ReceivedLine(FString S) {
        _ptrReceivedLine ??= FindFunction("Function IpDrv.WebConnection.ReceivedLine");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        ProcessEvent(_ptrReceivedLine, @params);
    }

    // Function IpDrv.WebConnection.ReceivedText
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class ReceivedText_Parameters : BaseObject {
        public ReceivedText_Parameters() { }
        public ReceivedText_Parameters(nint pointer) : base(pointer) { }

        // StrProperty IpDrv.WebConnection.ReceivedText.Text
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrReceivedText;
    public void ReceivedText(FString Text) {
        _ptrReceivedText ??= FindFunction("Function IpDrv.WebConnection.ReceivedText");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);

        ProcessEvent(_ptrReceivedText, @params);
    }

    // Function IpDrv.WebConnection.Timer
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Timer_Parameters : BaseObject {
        public Timer_Parameters() { }
        public Timer_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTimer;
    public void Timer() {
        _ptrTimer ??= FindFunction("Function IpDrv.WebConnection.Timer");

        ProcessEvent(_ptrTimer, null);
    }

    // Function IpDrv.WebConnection.Closed
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Closed_Parameters : BaseObject {
        public Closed_Parameters() { }
        public Closed_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClosed;
    public void Closed() {
        _ptrClosed ??= FindFunction("Function IpDrv.WebConnection.Closed");

        ProcessEvent(_ptrClosed, null);
    }

    // Function IpDrv.WebConnection.Accepted
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class Accepted_Parameters : BaseObject {
        public Accepted_Parameters() { }
        public Accepted_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrAccepted;
    public void Accepted() {
        _ptrAccepted ??= FindFunction("Function IpDrv.WebConnection.Accepted");

        ProcessEvent(_ptrAccepted, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class IpDrv.WebConnection");
            return _staticClass;
        }
    }
}

#pragma warning restore CS0108, CS0114
