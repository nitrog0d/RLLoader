using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace RLLoader.SDK;

#pragma warning disable CS0108, CS0114

// Class Core.Config_ORS
// 0x60 (0x60 - 0xC0)
// (Config | Transient | Native | Intrinsic)
public unsafe partial class UConfig_ORS : UObject {
    public UConfig_ORS() { }
    public UConfig_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x60


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Config_ORS");
            return _staticClass;
        }
    }
}

// Class Core.Object
// 0x60
// (Abstract | Compiled | Parsed | Native | NoExport)
public unsafe partial class UObject : BaseObject {
    public UObject() { }
    public UObject(nint pointer) : base(pointer) { }


    public const string ZeroRotator = "Rot(0,0,0)";
    public const string ZeroVector = "Vect(0,0,0)";
    public const string UpVector = "Vect(0,0,1)";
    public const string RightVector = "Vect(0,1,0)";
    public const string ForwardVector = "Vect(1,0,0)";
    public const string InvAspectRatio16x9 = "0.56249";
    public const string InvAspectRatio5x4 = "0.8";
    public const string InvAspectRatio4x3 = "0.75";
    public const string AspectRatio16x9 = "1.77778";
    public const string AspectRatio5x4 = "1.25";
    public const string AspectRatio4x3 = "1.33333";
    public const string INDEX_NONE = "-1";
    public const string UnrRotToDeg = "0.00549316540360483";
    public const string DegToUnrRot = "182.0444";
    public const string RadToUnrRot = "10430.3783504704527";
    public const string UnrRotToRad = "0.00009587379924285";
    public const string DegToRad = "0.017453292519943296";
    public const string RadToDeg = "57.295779513082321600";
    public const string Pi = "3.1415926535897932";
    public const string MaxQWORD = "0xFFFFFFFFFFFFFFFF";
    public const string MinInt = "0x80000000";
    public const string MaxInt = "0x7fffffff";


    // StructProperty Core.Object.VfTableObject
    // 0x0 (0x8)
    // (Const | Native | EditConst | NoExport)
    public nint VfTableObject {
        get => *(nint*)Pointer;
        set => *(nint*)Pointer = value;
    }

    // StructProperty Core.Object.HashNext
    // 0x8 (0x8)
    // (Const | Native | EditConst)
    public nint HashNext {
        get => *(nint*)(Pointer + 8);
        set => *(nint*)(Pointer + 8) = value;
    }

    // QWordProperty Core.Object.ObjectFlags
    // 0x10 (0x8)
    // (Const | Native | EditConst)
    public ulong ObjectFlags {
        get => *(ulong*)(Pointer + 16);
        set => *(ulong*)(Pointer + 16) = value;
    }

    // StructProperty Core.Object.HashOuterNext
    // 0x18 (0x8)
    // (Const | Native | EditConst)
    public nint HashOuterNext {
        get => *(nint*)(Pointer + 24);
        set => *(nint*)(Pointer + 24) = value;
    }

    // StructProperty Core.Object.StateFrame
    // 0x20 (0x8)
    // (Const | Native | EditConst)
    public nint StateFrame {
        get => *(nint*)(Pointer + 32);
        set => *(nint*)(Pointer + 32) = value;
    }

    // ObjectProperty Core.Object.Linker
    // 0x28 (0x8)
    // (Const | Native | EditConst | NoExport)
    public UObject Linker {
        get {
            var pointer = *(nint*)(Pointer + 40);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 40) = value.Pointer;
    }

    // StructProperty Core.Object.LinkerIndex
    // 0x30 (0x8)
    // (Const | Native | EditConst | NoExport)
    public nint LinkerIndex {
        get => *(nint*)(Pointer + 48);
        set => *(nint*)(Pointer + 48) = value;
    }

    // IntProperty Core.Object.ObjectInternalInteger
    // 0x38 (0x4)
    // (Const | Native | EditConst | NoExport)
    public int ObjectInternalInteger {
        get => *(int*)(Pointer + 56);
        set => *(int*)(Pointer + 56) = value;
    }

    // IntProperty Core.Object.NetIndex
    // 0x3C (0x4)
    // (Const | Native | EditConst | NoExport)
    public int NetIndex {
        get => *(int*)(Pointer + 60);
        set => *(int*)(Pointer + 60) = value;
    }

    // ObjectProperty Core.Object.Outer
    // 0x40 (0x8)
    // (Const | Native | EditConst)
    public UObject Outer {
        get {
            var pointer = *(nint*)(Pointer + 64);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 64) = value.Pointer;
    }

    // NameProperty Core.Object.Name
    // 0x48 (0x8)
    // (Edit | Const | Native | EditConst)
    public FName Name {
        get => new(Pointer + 72);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 72), 8, 8);
    }

    // ClassProperty Core.Object.Class
    // 0x50 (0x8)
    // (Const | Native | EditConst)
    public UClass Class {
        get {
            var pointer = *(nint*)(Pointer + 80);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 80) = value.Pointer;
    }

    // ObjectProperty Core.Object.ObjectArchetype
    // 0x58 (0x8)
    // (Edit | Const | Native | EditConst)
    public UObject ObjectArchetype {
        get {
            var pointer = *(nint*)(Pointer + 88);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 88) = value.Pointer;
    }


    // Function Core.Object.RSmoothInterpTo
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class RSmoothInterpTo_Parameters : BaseObject {
        public RSmoothInterpTo_Parameters() { }
        public RSmoothInterpTo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RSmoothInterpTo.From
        // 0x0 (0xC)
        // (Param)
        public FRotator From {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.RSmoothInterpTo.To
        // 0xC (0xC)
        // (Param)
        public FRotator To {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.RSmoothInterpTo.Lambda
        // 0x18 (0x4)
        // (Param)
        public float Lambda {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.RSmoothInterpTo.DeltaTime
        // 0x1C (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }

        // StructProperty Core.Object.RSmoothInterpTo.ReturnValue
        // 0x20 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }
    }
    private static UFunction _ptrRSmoothInterpTo;
    public static FRotator RSmoothInterpTo(FRotator From, FRotator To, float Lambda, float DeltaTime) {
        _ptrRSmoothInterpTo ??= FindFunction("Function Core.Object.RSmoothInterpTo");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)From.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)To.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&Lambda, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 28, 4, 4);

        StaticClass.ProcessEvent(_ptrRSmoothInterpTo, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VSmoothInterpTo
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class VSmoothInterpTo_Parameters : BaseObject {
        public VSmoothInterpTo_Parameters() { }
        public VSmoothInterpTo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VSmoothInterpTo.From
        // 0x0 (0xC)
        // (Param)
        public FVector From {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.VSmoothInterpTo.To
        // 0xC (0xC)
        // (Param)
        public FVector To {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.VSmoothInterpTo.Lambda
        // 0x18 (0x4)
        // (Param)
        public float Lambda {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.VSmoothInterpTo.DeltaTime
        // 0x1C (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }

        // StructProperty Core.Object.VSmoothInterpTo.ReturnValue
        // 0x20 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }
    }
    private static UFunction _ptrVSmoothInterpTo;
    public static FVector VSmoothInterpTo(FVector From, FVector To, float Lambda, float DeltaTime) {
        _ptrVSmoothInterpTo ??= FindFunction("Function Core.Object.VSmoothInterpTo");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)From.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)To.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&Lambda, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 28, 4, 4);

        StaticClass.ProcessEvent(_ptrVSmoothInterpTo, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.FSmoothInterpTo
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class FSmoothInterpTo_Parameters : BaseObject {
        public FSmoothInterpTo_Parameters() { }
        public FSmoothInterpTo_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FSmoothInterpTo.From
        // 0x0 (0x4)
        // (Param)
        public float From {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FSmoothInterpTo.To
        // 0x4 (0x4)
        // (Param)
        public float To {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FSmoothInterpTo.Lambda
        // 0x8 (0x4)
        // (Param)
        public float Lambda {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FSmoothInterpTo.DeltaTime
        // 0xC (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FSmoothInterpTo.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFSmoothInterpTo;
    public static float FSmoothInterpTo(float From, float To, float Lambda, float DeltaTime) {
        _ptrFSmoothInterpTo ??= FindFunction("Function Core.Object.FSmoothInterpTo");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&From, @params, 4, 4);
        System.Buffer.MemoryCopy(&To, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Lambda, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 12, 4, 4);

        StaticClass.ProcessEvent(_ptrFSmoothInterpTo, @params);

        return *(float*)(@params + 16);
    }

    // Function Core.Object.GetSmoothInterpLerpValue
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class GetSmoothInterpLerpValue_Parameters : BaseObject {
        public GetSmoothInterpLerpValue_Parameters() { }
        public GetSmoothInterpLerpValue_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.GetSmoothInterpLerpValue.Lambda
        // 0x0 (0x4)
        // (Param)
        public float Lambda {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.GetSmoothInterpLerpValue.DeltaTime
        // 0x4 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.GetSmoothInterpLerpValue.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGetSmoothInterpLerpValue;
    public static float GetSmoothInterpLerpValue(float Lambda, float DeltaTime) {
        _ptrGetSmoothInterpLerpValue ??= FindFunction("Function Core.Object.GetSmoothInterpLerpValue");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&Lambda, @params, 4, 4);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrGetSmoothInterpLerpValue, @params);

        return *(float*)(@params + 8);
    }

    // Function Core.Object.GetTypedOuter
    // 0x36C740
    // (Final | Native | Static | Public)
    public unsafe class GetTypedOuter_Parameters : BaseObject {
        public GetTypedOuter_Parameters() { }
        public GetTypedOuter_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.GetTypedOuter.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.Object.GetTypedOuter.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetTypedOuter;
    public static UObject GetTypedOuter(UClass ObjClass) {
        _ptrGetTypedOuter ??= FindFunction("Function Core.Object.GetTypedOuter");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetTypedOuter.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetTypedOuter, @params);
        _ptrGetTypedOuter.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.Object.MarkPendingKill
    // 0x36C700
    // (Final | Native | Public)
    public unsafe class MarkPendingKill_Parameters : BaseObject {
        public MarkPendingKill_Parameters() { }
        public MarkPendingKill_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrMarkPendingKill;
    public void MarkPendingKill() {
        _ptrMarkPendingKill ??= FindFunction("Function Core.Object.MarkPendingKill");

        _ptrMarkPendingKill.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrMarkPendingKill, null);
        _ptrMarkPendingKill.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.NotNone
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class NotNone_Parameters : BaseObject {
        public NotNone_Parameters() { }
        public NotNone_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.NotNone.O
        // 0x0 (0x8)
        // (Param)
        public UObject O {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // BoolProperty Core.Object.NotNone.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotNone;
    public static bool NotNone(UObject O) {
        _ptrNotNone ??= FindFunction("Function Core.Object.NotNone");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)O.Pointer, @params, 8, 8);

        StaticClass.ProcessEvent(_ptrNotNone, @params);

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.SwapArrayItems
    // 0x3750E0
    // (Final | Static | Public | NetValidate)
    public unsafe class SwapArrayItems_Parameters : BaseObject {
        public SwapArrayItems_Parameters() { }
        public SwapArrayItems_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrSwapArrayItems;
    public static void SwapArrayItems() {
        _ptrSwapArrayItems ??= FindFunction("Function Core.Object.SwapArrayItems");

        StaticClass.ProcessEvent(_ptrSwapArrayItems, null);
    }

    // Function Core.Object.Swap
    // 0x3750E0
    // (Final | Static | Public | NetValidate)
    public unsafe class Swap_Parameters : BaseObject {
        public Swap_Parameters() { }
        public Swap_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrSwap;
    public static void Swap() {
        _ptrSwap ??= FindFunction("Function Core.Object.Swap");

        StaticClass.ProcessEvent(_ptrSwap, null);
    }

    // Function Core.Object.SumFloat
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SumFloat_Parameters : BaseObject {
        public SumFloat_Parameters() { }
        public SumFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SumFloat.Total
        // 0x0 (0x4)
        // (Param)
        public float Total {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.SumFloat.Value
        // 0x4 (0x4)
        // (Param)
        public float Value {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.SumFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSumFloat;
    public static float SumFloat(float Total, float Value) {
        _ptrSumFloat ??= FindFunction("Function Core.Object.SumFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&Total, @params, 4, 4);
        System.Buffer.MemoryCopy(&Value, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSumFloat, @params);

        return *(float*)(@params + 8);
    }

    // Function Core.Object.SumInt
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SumInt_Parameters : BaseObject {
        public SumInt_Parameters() { }
        public SumInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.SumInt.Total
        // 0x0 (0x4)
        // (Param)
        public int Total {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.SumInt.Value
        // 0x4 (0x4)
        // (Param)
        public int Value {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SumInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSumInt;
    public static int SumInt(int Total, int Value) {
        _ptrSumInt ??= FindFunction("Function Core.Object.SumInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&Total, @params, 4, 4);
        System.Buffer.MemoryCopy(&Value, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSumInt, @params);

        return *(int*)(@params + 8);
    }

    // Function Core.Object.SortDescendingFloat
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortDescendingFloat_Parameters : BaseObject {
        public SortDescendingFloat_Parameters() { }
        public SortDescendingFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SortDescendingFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.SortDescendingFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SortDescendingFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSortDescendingFloat;
    public static int SortDescendingFloat(float A, float B) {
        _ptrSortDescendingFloat ??= FindFunction("Function Core.Object.SortDescendingFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSortDescendingFloat, @params);

        return *(int*)(@params + 8);
    }

    // Function Core.Object.SortAscendingFloat
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortAscendingFloat_Parameters : BaseObject {
        public SortAscendingFloat_Parameters() { }
        public SortAscendingFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SortAscendingFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.SortAscendingFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SortAscendingFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSortAscendingFloat;
    public static int SortAscendingFloat(float A, float B) {
        _ptrSortAscendingFloat ??= FindFunction("Function Core.Object.SortAscendingFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSortAscendingFloat, @params);

        return *(int*)(@params + 8);
    }

    // Function Core.Object.SortDescendingString
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortDescendingString_Parameters : BaseObject {
        public SortDescendingString_Parameters() { }
        public SortDescendingString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.SortDescendingString.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.SortDescendingString.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty Core.Object.SortDescendingString.ReturnValue
        // 0x20 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrSortDescendingString;
    public static int SortDescendingString(FString A, FString B) {
        _ptrSortDescendingString ??= FindFunction("Function Core.Object.SortDescendingString");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        StaticClass.ProcessEvent(_ptrSortDescendingString, @params);

        return *(int*)(@params + 32);
    }

    // Function Core.Object.SortAscendingString
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortAscendingString_Parameters : BaseObject {
        public SortAscendingString_Parameters() { }
        public SortAscendingString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.SortAscendingString.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.SortAscendingString.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty Core.Object.SortAscendingString.ReturnValue
        // 0x20 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrSortAscendingString;
    public static int SortAscendingString(FString A, FString B) {
        _ptrSortAscendingString ??= FindFunction("Function Core.Object.SortAscendingString");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        StaticClass.ProcessEvent(_ptrSortAscendingString, @params);

        return *(int*)(@params + 32);
    }

    // Function Core.Object.SortDescendingQWORD
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortDescendingQWORD_Parameters : BaseObject {
        public SortDescendingQWORD_Parameters() { }
        public SortDescendingQWORD_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.SortDescendingQWORD.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.SortDescendingQWORD.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.SortDescendingQWORD.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrSortDescendingQWORD;
    public static int SortDescendingQWORD(ulong A, ulong B) {
        _ptrSortDescendingQWORD ??= FindFunction("Function Core.Object.SortDescendingQWORD");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        StaticClass.ProcessEvent(_ptrSortDescendingQWORD, @params);

        return *(int*)(@params + 16);
    }

    // Function Core.Object.SortAscendingQWORD
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortAscendingQWORD_Parameters : BaseObject {
        public SortAscendingQWORD_Parameters() { }
        public SortAscendingQWORD_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.SortAscendingQWORD.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.SortAscendingQWORD.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.SortAscendingQWORD.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrSortAscendingQWORD;
    public static int SortAscendingQWORD(ulong A, ulong B) {
        _ptrSortAscendingQWORD ??= FindFunction("Function Core.Object.SortAscendingQWORD");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        StaticClass.ProcessEvent(_ptrSortAscendingQWORD, @params);

        return *(int*)(@params + 16);
    }

    // Function Core.Object.SortDescendingInt
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortDescendingInt_Parameters : BaseObject {
        public SortDescendingInt_Parameters() { }
        public SortDescendingInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.SortDescendingInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.SortDescendingInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SortDescendingInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSortDescendingInt;
    public static int SortDescendingInt(int A, int B) {
        _ptrSortDescendingInt ??= FindFunction("Function Core.Object.SortDescendingInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSortDescendingInt, @params);

        return *(int*)(@params + 8);
    }

    // Function Core.Object.SortAscendingInt
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class SortAscendingInt_Parameters : BaseObject {
        public SortAscendingInt_Parameters() { }
        public SortAscendingInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.SortAscendingInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.SortAscendingInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SortAscendingInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSortAscendingInt;
    public static int SortAscendingInt(int A, int B) {
        _ptrSortAscendingInt ??= FindFunction("Function Core.Object.SortAscendingInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSortAscendingInt, @params);

        return *(int*)(@params + 8);
    }

    // Function Core.Object.PadString
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class PadString_Parameters : BaseObject {
        public PadString_Parameters() { }
        public PadString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.PadString.Str
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Str {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.PadString.Characters
        // 0x10 (0x4)
        // (Param)
        public int Characters {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.PadString.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrPadString;
    public static FString PadString(FString Str, int Characters) {
        _ptrPadString ??= FindFunction("Function Core.Object.PadString");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Str.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Characters, @params + 16, 4, 4);

        StaticClass.ProcessEvent(_ptrPadString, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetFrameCounter
    // 0x36C6B0
    // (Final | Native | Static | Public)
    public unsafe class GetFrameCounter_Parameters : BaseObject {
        public GetFrameCounter_Parameters() { }
        public GetFrameCounter_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.GetFrameCounter.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public ulong ReturnValue {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }
    }
    private static UFunction _ptrGetFrameCounter;
    public static ulong GetFrameCounter() {
        _ptrGetFrameCounter ??= FindFunction("Function Core.Object.GetFrameCounter");

        var @params = stackalloc byte[8];

        _ptrGetFrameCounter.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFrameCounter, @params);
        _ptrGetFrameCounter.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(ulong*)@params;
    }

    // Function Core.Object.GetScaledAxisValue
    // 0x36C5E0
    // (Final | Native | Static | Public)
    public unsafe class GetScaledAxisValue_Parameters : BaseObject {
        public GetScaledAxisValue_Parameters() { }
        public GetScaledAxisValue_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.GetScaledAxisValue.Value
        // 0x0 (0x4)
        // (Param)
        public float Value {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.GetScaledAxisValue.Sensitivity
        // 0x4 (0x4)
        // (Param)
        public float Sensitivity {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.GetScaledAxisValue.MaxSensitivity
        // 0x8 (0x4)
        // (Param)
        public float MaxSensitivity {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.GetScaledAxisValue.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrGetScaledAxisValue;
    public static float GetScaledAxisValue(float Value, float Sensitivity, float MaxSensitivity) {
        _ptrGetScaledAxisValue ??= FindFunction("Function Core.Object.GetScaledAxisValue");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&Value, @params, 4, 4);
        System.Buffer.MemoryCopy(&Sensitivity, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&MaxSensitivity, @params + 8, 4, 4);

        _ptrGetScaledAxisValue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetScaledAxisValue, @params);
        _ptrGetScaledAxisValue.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.GetSingleton
    // 0x36C860
    // (Final | Native | Static | Public)
    public unsafe class GetSingleton_Parameters : BaseObject {
        public GetSingleton_Parameters() { }
        public GetSingleton_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.GetSingleton.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.Object.GetSingleton.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetSingleton;
    public static UObject GetSingleton(UClass ObjClass) {
        _ptrGetSingleton ??= FindFunction("Function Core.Object.GetSingleton");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetSingleton.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetSingleton, @params);
        _ptrGetSingleton.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.Object.GetObjectProvider
    // 0x36C810
    // (Final | Native | Static | Public)
    public unsafe class GetObjectProvider_Parameters : BaseObject {
        public GetObjectProvider_Parameters() { }
        public GetObjectProvider_Parameters(nint pointer) : base(pointer) { }

        // ComponentProperty Core.Object.GetObjectProvider.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam | EditInline)
        public UObjectProvider ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrGetObjectProvider;
    public static UObjectProvider GetObjectProvider() {
        _ptrGetObjectProvider ??= FindFunction("Function Core.Object.GetObjectProvider");

        var @params = stackalloc byte[8];

        _ptrGetObjectProvider.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetObjectProvider, @params);
        _ptrGetObjectProvider.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)@params);
    }

    // Function Core.Object.IsAutomationTest
    // 0x36C590
    // (Final | Native | Static | Public)
    public unsafe class IsAutomationTest_Parameters : BaseObject {
        public IsAutomationTest_Parameters() { }
        public IsAutomationTest_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.IsAutomationTest.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsAutomationTest;
    public static bool IsAutomationTest() {
        _ptrIsAutomationTest ??= FindFunction("Function Core.Object.IsAutomationTest");

        var @params = stackalloc byte[4];

        _ptrIsAutomationTest.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIsAutomationTest, @params);
        _ptrIsAutomationTest.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function Core.Object.ToJson
    // 0x36C4E0
    // (Final | Native | Public)
    public unsafe class ToJson_Parameters : BaseObject {
        public ToJson_Parameters() { }
        public ToJson_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ToJson.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrToJson;
    public FString ToJson() {
        _ptrToJson ??= FindFunction("Function Core.Object.ToJson");

        var @params = stackalloc byte[16];

        _ptrToJson.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrToJson, @params);
        _ptrToJson.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.SetRooted
    // 0x36C430
    // (Final | Native | Public)
    public unsafe class SetRooted_Parameters : BaseObject {
        public SetRooted_Parameters() { }
        public SetRooted_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.SetRooted.bRooted
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bRooted {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetRooted;
    public void SetRooted(bool bRooted) {
        _ptrSetRooted ??= FindFunction("Function Core.Object.SetRooted");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bRooted, @params, 4, 4);

        _ptrSetRooted.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetRooted, @params);
        _ptrSetRooted.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.ProfNodeEvent
    // 0x36C340
    // (Final | Native | Static | Public)
    public unsafe class ProfNodeEvent_Parameters : BaseObject {
        public ProfNodeEvent_Parameters() { }
        public ProfNodeEvent_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ProfNodeEvent.EventName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString EventName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrProfNodeEvent;
    public static void ProfNodeEvent(FString EventName) {
        _ptrProfNodeEvent ??= FindFunction("Function Core.Object.ProfNodeEvent");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)EventName.Pointer, @params, 16, 16);

        _ptrProfNodeEvent.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProfNodeEvent, @params);
        _ptrProfNodeEvent.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.ProfNodeSetDepthThreshold
    // 0x36C260
    // (Final | Native | Static | Public)
    public unsafe class ProfNodeSetDepthThreshold_Parameters : BaseObject {
        public ProfNodeSetDepthThreshold_Parameters() { }
        public ProfNodeSetDepthThreshold_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ProfNodeSetDepthThreshold.Depth
        // 0x0 (0x4)
        // (Param)
        public int Depth {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrProfNodeSetDepthThreshold;
    public static void ProfNodeSetDepthThreshold(int Depth) {
        _ptrProfNodeSetDepthThreshold ??= FindFunction("Function Core.Object.ProfNodeSetDepthThreshold");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&Depth, @params, 4, 4);

        _ptrProfNodeSetDepthThreshold.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProfNodeSetDepthThreshold, @params);
        _ptrProfNodeSetDepthThreshold.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.ProfNodeSetTimeThresholdSeconds
    // 0x36C2D0
    // (Final | Native | Static | Public)
    public unsafe class ProfNodeSetTimeThresholdSeconds_Parameters : BaseObject {
        public ProfNodeSetTimeThresholdSeconds_Parameters() { }
        public ProfNodeSetTimeThresholdSeconds_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.ProfNodeSetTimeThresholdSeconds.Threshold
        // 0x0 (0x4)
        // (Param)
        public float Threshold {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }
    }
    private static UFunction _ptrProfNodeSetTimeThresholdSeconds;
    public static void ProfNodeSetTimeThresholdSeconds(float Threshold) {
        _ptrProfNodeSetTimeThresholdSeconds ??= FindFunction("Function Core.Object.ProfNodeSetTimeThresholdSeconds");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&Threshold, @params, 4, 4);

        _ptrProfNodeSetTimeThresholdSeconds.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProfNodeSetTimeThresholdSeconds, @params);
        _ptrProfNodeSetTimeThresholdSeconds.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.ProfNodeStop
    // 0x36C1F0
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class ProfNodeStop_Parameters : BaseObject {
        public ProfNodeStop_Parameters() { }
        public ProfNodeStop_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ProfNodeStop.AssumedTimerIndex
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public int AssumedTimerIndex {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrProfNodeStop;
    public static void ProfNodeStop(int AssumedTimerIndex = 0) {
        _ptrProfNodeStop ??= FindFunction("Function Core.Object.ProfNodeStop");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&AssumedTimerIndex, @params, 4, 4);

        _ptrProfNodeStop.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProfNodeStop, @params);
        _ptrProfNodeStop.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.ProfNodeStart
    // 0x36C0F0
    // (Final | Native | Static | Public)
    public unsafe class ProfNodeStart_Parameters : BaseObject {
        public ProfNodeStart_Parameters() { }
        public ProfNodeStart_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ProfNodeStart.TimerName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString TimerName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.ProfNodeStart.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrProfNodeStart;
    public static int ProfNodeStart(FString TimerName) {
        _ptrProfNodeStart ??= FindFunction("Function Core.Object.ProfNodeStart");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)TimerName.Pointer, @params, 16, 16);

        _ptrProfNodeStart.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProfNodeStart, @params);
        _ptrProfNodeStart.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function Core.Object.CreateGuidString
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class CreateGuidString_Parameters : BaseObject {
        public CreateGuidString_Parameters() { }
        public CreateGuidString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.CreateGuidString.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrCreateGuidString;
    public static FString CreateGuidString() {
        _ptrCreateGuidString ??= FindFunction("Function Core.Object.CreateGuidString");

        var @params = stackalloc byte[16];

        StaticClass.ProcessEvent(_ptrCreateGuidString, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetStringFromGuid
    // 0x36BFB0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetStringFromGuid_Parameters : BaseObject {
        public GetStringFromGuid_Parameters() { }
        public GetStringFromGuid_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetStringFromGuid.InGuid
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public FGuid InGuid {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.GetStringFromGuid.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetStringFromGuid;
    public static FString GetStringFromGuid(ref FGuid InGuid) {
        _ptrGetStringFromGuid ??= FindFunction("Function Core.Object.GetStringFromGuid");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)InGuid.Pointer, @params, 16, 16);

        _ptrGetStringFromGuid.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetStringFromGuid, @params);
        _ptrGetStringFromGuid.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InGuidPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InGuidPtr, 16, 16);
        InGuid = new(_InGuidPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetGuidFromString
    // 0x36BE50
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetGuidFromString_Parameters : BaseObject {
        public GetGuidFromString_Parameters() { }
        public GetGuidFromString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.GetGuidFromString.InGuidString
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public FString InGuidString {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.GetGuidFromString.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FGuid ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetGuidFromString;
    public static FGuid GetGuidFromString(ref FString InGuidString) {
        _ptrGetGuidFromString ??= FindFunction("Function Core.Object.GetGuidFromString");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)InGuidString.Pointer, @params, 16, 16);

        _ptrGetGuidFromString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetGuidFromString, @params);
        _ptrGetGuidFromString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InGuidStringPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InGuidStringPtr, 16, 16);
        InGuidString = new(_InGuidStringPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.CreateGuid
    // 0x36BE00
    // (Final | Native | Static | Public)
    public unsafe class CreateGuid_Parameters : BaseObject {
        public CreateGuid_Parameters() { }
        public CreateGuid_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.CreateGuid.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam)
        public FGuid ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrCreateGuid;
    public static FGuid CreateGuid() {
        _ptrCreateGuid ??= FindFunction("Function Core.Object.CreateGuid");

        var @params = stackalloc byte[16];

        _ptrCreateGuid.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrCreateGuid, @params);
        _ptrCreateGuid.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.IsGuidValid
    // 0x36BD30
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class IsGuidValid_Parameters : BaseObject {
        public IsGuidValid_Parameters() { }
        public IsGuidValid_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.IsGuidValid.InGuid
        // 0x0 (0x10)
        // (Const | Param | OutParam)
        public FGuid InGuid {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty Core.Object.IsGuidValid.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsGuidValid;
    public static bool IsGuidValid(ref FGuid InGuid) {
        _ptrIsGuidValid ??= FindFunction("Function Core.Object.IsGuidValid");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)InGuid.Pointer, @params, 16, 16);

        _ptrIsGuidValid.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIsGuidValid, @params);
        _ptrIsGuidValid.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InGuidPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InGuidPtr, 16, 16);
        InGuid = new(_InGuidPtr) { Allocated = true };

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.InvalidateGuid
    // 0x36BC80
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class InvalidateGuid_Parameters : BaseObject {
        public InvalidateGuid_Parameters() { }
        public InvalidateGuid_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.InvalidateGuid.InGuid
        // 0x0 (0x10)
        // (Param | OutParam)
        public FGuid InGuid {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrInvalidateGuid;
    public static void InvalidateGuid(ref FGuid InGuid) {
        _ptrInvalidateGuid ??= FindFunction("Function Core.Object.InvalidateGuid");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)InGuid.Pointer, @params, 16, 16);

        _ptrInvalidateGuid.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrInvalidateGuid, @params);
        _ptrInvalidateGuid.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InGuidPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InGuidPtr, 16, 16);
        InGuid = new(_InGuidPtr) { Allocated = true };
    }

    // Function Core.Object.FindStructProperty
    // 0x369B50
    // (Final | Native | Public)
    public unsafe class FindStructProperty_Parameters : BaseObject {
        public FindStructProperty_Parameters() { }
        public FindStructProperty_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.FindStructProperty.PropertyClass
        // 0x0 (0x8)
        // (Param)
        public UClass PropertyClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // NameProperty Core.Object.FindStructProperty.PropertyName
        // 0x8 (0x8)
        // (Param)
        public FName PropertyName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // NameProperty Core.Object.FindStructProperty.StructName
        // 0x10 (0x8)
        // (Param)
        public FName StructName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }

        // ObjectProperty Core.Object.FindStructProperty.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrFindStructProperty;
    public UObject FindStructProperty(UClass PropertyClass, FName PropertyName, FName StructName) {
        _ptrFindStructProperty ??= FindFunction("Function Core.Object.FindStructProperty");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)PropertyClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PropertyName.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy((void*)StructName.Pointer, @params + 16, 8, 8);

        _ptrFindStructProperty.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindStructProperty, @params);
        _ptrFindStructProperty.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 24));
    }

    // Function Core.Object.FindProperty
    // 0x369A70
    // (Final | Native | Public)
    public unsafe class FindProperty_Parameters : BaseObject {
        public FindProperty_Parameters() { }
        public FindProperty_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.FindProperty.PropertyClass
        // 0x0 (0x8)
        // (Param)
        public UClass PropertyClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // NameProperty Core.Object.FindProperty.PropertyName
        // 0x8 (0x8)
        // (Param)
        public FName PropertyName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // ObjectProperty Core.Object.FindProperty.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrFindProperty;
    public UObject FindProperty(UClass PropertyClass, FName PropertyName) {
        _ptrFindProperty ??= FindFunction("Function Core.Object.FindProperty");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)PropertyClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)PropertyName.Pointer, @params + 8, 8, 8);

        _ptrFindProperty.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFindProperty, @params);
        _ptrFindProperty.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function Core.Object.DuplicateObject
    // 0x3698B0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class DuplicateObject_Parameters : BaseObject {
        public DuplicateObject_Parameters() { }
        public DuplicateObject_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.DuplicateObject.Template
        // 0x0 (0x8)
        // (Param)
        public UObject Template {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.Object.DuplicateObject.ObjOuter
        // 0x8 (0x8)
        // (OptionalParam | Param)
        public UObject ObjOuter {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ClassProperty Core.Object.DuplicateObject.DestClass
        // 0x10 (0x8)
        // (OptionalParam | Param)
        public UClass DestClass {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // ObjectProperty Core.Object.DuplicateObject.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrDuplicateObject;
    public UObject DuplicateObject(UObject Template, UObject ObjOuter = null, UClass DestClass = null) {
        _ptrDuplicateObject ??= FindFunction("Function Core.Object.DuplicateObject");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Template.Pointer, @params, 8, 8);
        if (ObjOuter != null) System.Buffer.MemoryCopy((void*)ObjOuter.Pointer, @params + 8, 8, 8);
        if (DestClass != null) System.Buffer.MemoryCopy((void*)DestClass.Pointer, @params + 16, 8, 8);

        _ptrDuplicateObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDuplicateObject, @params);
        _ptrDuplicateObject.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 24));
    }

    // Function Core.Object.RunningAverage
    // 0x3697E0
    // (Final | Native | Public)
    public unsafe class RunningAverage_Parameters : BaseObject {
        public RunningAverage_Parameters() { }
        public RunningAverage_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.RunningAverage.OldAverage
        // 0x0 (0x4)
        // (Param)
        public float OldAverage {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.RunningAverage.NewValue
        // 0x4 (0x4)
        // (Param)
        public float NewValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.RunningAverage.NewCount
        // 0x8 (0x4)
        // (Param)
        public int NewCount {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.RunningAverage.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrRunningAverage;
    public float RunningAverage(float OldAverage, float NewValue, int NewCount) {
        _ptrRunningAverage ??= FindFunction("Function Core.Object.RunningAverage");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&OldAverage, @params, 4, 4);
        System.Buffer.MemoryCopy(&NewValue, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&NewCount, @params + 8, 4, 4);

        _ptrRunningAverage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRunningAverage, @params);
        _ptrRunningAverage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.GetCurrentTime
    // 0x3697A0
    // (Final | Native | Static | Public)
    public unsafe class GetCurrentTime_Parameters : BaseObject {
        public GetCurrentTime_Parameters() { }
        public GetCurrentTime_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.GetCurrentTime.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }
    }
    private static UFunction _ptrGetCurrentTime;
    public static float GetCurrentTime() {
        _ptrGetCurrentTime ??= FindFunction("Function Core.Object.GetCurrentTime");

        var @params = stackalloc byte[4];

        _ptrGetCurrentTime.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetCurrentTime, @params);
        _ptrGetCurrentTime.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)@params;
    }

    // Function Core.Object.GetMaxLinearColorBrightness
    // 0x369CF0
    // (Final | Simulated | Native | Public)
    public unsafe class GetMaxLinearColorBrightness_Parameters : BaseObject {
        public GetMaxLinearColorBrightness_Parameters() { }
        public GetMaxLinearColorBrightness_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetMaxLinearColorBrightness.C
        // 0x0 (0x10)
        // (Param)
        public FLinearColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.GetMaxLinearColorBrightness.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetMaxLinearColorBrightness;
    public FLinearColor GetMaxLinearColorBrightness(FLinearColor C) {
        _ptrGetMaxLinearColorBrightness ??= FindFunction("Function Core.Object.GetMaxLinearColorBrightness");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 16, 16);

        _ptrGetMaxLinearColorBrightness.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetMaxLinearColorBrightness, @params);
        _ptrGetMaxLinearColorBrightness.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetMaxColorBrightness
    // 0x3750E0
    // (Final | Defined | Simulated | Public)
    public unsafe class GetMaxColorBrightness_Parameters : BaseObject {
        public GetMaxColorBrightness_Parameters() { }
        public GetMaxColorBrightness_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetMaxColorBrightness.C
        // 0x0 (0x4)
        // (Param)
        public FColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // StructProperty Core.Object.GetMaxColorBrightness.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }
    }
    private static UFunction _ptrGetMaxColorBrightness;
    public FColor GetMaxColorBrightness(FColor C) {
        _ptrGetMaxColorBrightness ??= FindFunction("Function Core.Object.GetMaxColorBrightness");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 4, 4);

        ProcessEvent(_ptrGetMaxColorBrightness, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.LABtoRGB
    // 0x36D9A0
    // (Final | Native | Static | Public)
    public unsafe class LABtoRGB_Parameters : BaseObject {
        public LABtoRGB_Parameters() { }
        public LABtoRGB_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LABtoRGB.C
        // 0x0 (0x10)
        // (Param)
        public FLinearColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.LABtoRGB.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrLABtoRGB;
    public static FLinearColor LABtoRGB(FLinearColor C) {
        _ptrLABtoRGB ??= FindFunction("Function Core.Object.LABtoRGB");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 16, 16);

        _ptrLABtoRGB.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLABtoRGB, @params);
        _ptrLABtoRGB.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RGBtoLAB
    // 0x36D920
    // (Final | Native | Static | Public)
    public unsafe class RGBtoLAB_Parameters : BaseObject {
        public RGBtoLAB_Parameters() { }
        public RGBtoLAB_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RGBtoLAB.C
        // 0x0 (0x10)
        // (Param)
        public FLinearColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.RGBtoLAB.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrRGBtoLAB;
    public static FLinearColor RGBtoLAB(FLinearColor C) {
        _ptrRGBtoLAB ??= FindFunction("Function Core.Object.RGBtoLAB");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 16, 16);

        _ptrRGBtoLAB.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRGBtoLAB, @params);
        _ptrRGBtoLAB.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.HSVtoRGB
    // 0x36D8A0
    // (Final | Native | Static | Public)
    public unsafe class HSVtoRGB_Parameters : BaseObject {
        public HSVtoRGB_Parameters() { }
        public HSVtoRGB_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.HSVtoRGB.C
        // 0x0 (0x10)
        // (Param)
        public FLinearColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.HSVtoRGB.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrHSVtoRGB;
    public static FLinearColor HSVtoRGB(FLinearColor C) {
        _ptrHSVtoRGB ??= FindFunction("Function Core.Object.HSVtoRGB");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 16, 16);

        _ptrHSVtoRGB.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrHSVtoRGB, @params);
        _ptrHSVtoRGB.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RGBtoHSV
    // 0x36D820
    // (Final | Native | Static | Public)
    public unsafe class RGBtoHSV_Parameters : BaseObject {
        public RGBtoHSV_Parameters() { }
        public RGBtoHSV_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RGBtoHSV.C
        // 0x0 (0x10)
        // (Param)
        public FLinearColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.RGBtoHSV.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrRGBtoHSV;
    public static FLinearColor RGBtoHSV(FLinearColor C) {
        _ptrRGBtoHSV ??= FindFunction("Function Core.Object.RGBtoHSV");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 16, 16);

        _ptrRGBtoHSV.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRGBtoHSV, @params);
        _ptrRGBtoHSV.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.IntToLinearColor
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class IntToLinearColor_Parameters : BaseObject {
        public IntToLinearColor_Parameters() { }
        public IntToLinearColor_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.IntToLinearColor.I
        // 0x0 (0x4)
        // (Param)
        public int I {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // StructProperty Core.Object.IntToLinearColor.ReturnValue
        // 0x4 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 16, 16);
        }
    }
    private static UFunction _ptrIntToLinearColor;
    public static FLinearColor IntToLinearColor(int I) {
        _ptrIntToLinearColor ??= FindFunction("Function Core.Object.IntToLinearColor");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&I, @params, 4, 4);

        StaticClass.ProcessEvent(_ptrIntToLinearColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.IntToColor
    // 0x36DD40
    // (Final | Native | Static | Public)
    public unsafe class IntToColor_Parameters : BaseObject {
        public IntToColor_Parameters() { }
        public IntToColor_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.IntToColor.I
        // 0x0 (0x4)
        // (Param)
        public int I {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // StructProperty Core.Object.IntToColor.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }
    }
    private static UFunction _ptrIntToColor;
    public static FColor IntToColor(int I) {
        _ptrIntToColor ??= FindFunction("Function Core.Object.IntToColor");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&I, @params, 4, 4);

        _ptrIntToColor.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIntToColor, @params);
        _ptrIntToColor.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.LinearColorToInt
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class LinearColorToInt_Parameters : BaseObject {
        public LinearColorToInt_Parameters() { }
        public LinearColorToInt_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LinearColorToInt.C
        // 0x0 (0x10)
        // (Param)
        public FLinearColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.LinearColorToInt.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrLinearColorToInt;
    public static int LinearColorToInt(FLinearColor C) {
        _ptrLinearColorToInt ??= FindFunction("Function Core.Object.LinearColorToInt");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrLinearColorToInt, @params);

        return *(int*)(@params + 16);
    }

    // Function Core.Object.ColorToInt
    // 0x36DCB0
    // (Final | Native | Static | Public)
    public unsafe class ColorToInt_Parameters : BaseObject {
        public ColorToInt_Parameters() { }
        public ColorToInt_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.ColorToInt.C
        // 0x0 (0x4)
        // (Param)
        public FColor C {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // IntProperty Core.Object.ColorToInt.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrColorToInt;
    public static int ColorToInt(FColor C) {
        _ptrColorToInt ??= FindFunction("Function Core.Object.ColorToInt");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)C.Pointer, @params, 4, 4);

        _ptrColorToInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrColorToInt, @params);
        _ptrColorToInt.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.SolveVelocityQuadratic
    // 0x36D6E0
    // (Final | Native | Public | HasOutParams)
    public unsafe class SolveVelocityQuadratic_Parameters : BaseObject {
        public SolveVelocityQuadratic_Parameters() { }
        public SolveVelocityQuadratic_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SolveVelocityQuadratic.Distance
        // 0x0 (0x4)
        // (Param)
        public float Distance {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.SolveVelocityQuadratic.Speed
        // 0x4 (0x4)
        // (Param)
        public float Speed {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.SolveVelocityQuadratic.Accel
        // 0x8 (0x4)
        // (Param)
        public float Accel {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.SolveVelocityQuadratic.Time
        // 0xC (0x4)
        // (Param | OutParam)
        public float Time {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // BoolProperty Core.Object.SolveVelocityQuadratic.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSolveVelocityQuadratic;
    public bool SolveVelocityQuadratic(float Distance, float Speed, float Accel, ref float Time) {
        _ptrSolveVelocityQuadratic ??= FindFunction("Function Core.Object.SolveVelocityQuadratic");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&Distance, @params, 4, 4);
        System.Buffer.MemoryCopy(&Speed, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Accel, @params + 8, 4, 4);
        var _Time = Time;
        System.Buffer.MemoryCopy(&_Time, @params + 12, 4, 4);

        _ptrSolveVelocityQuadratic.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSolveVelocityQuadratic, @params);
        _ptrSolveVelocityQuadratic.FunctionFlags |= (ulong)EFunctionFlags.Native;

        Time = *(float*)(@params + 12);

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.Sign
    // 0x36CDF0
    // (Final | Native | Public)
    public unsafe class Sign_Parameters : BaseObject {
        public Sign_Parameters() { }
        public Sign_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Sign.X
        // 0x0 (0x4)
        // (Param)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Sign.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSign;
    public float Sign(float X) {
        _ptrSign ??= FindFunction("Function Core.Object.Sign");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&X, @params, 4, 4);

        _ptrSign.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSign, @params);
        _ptrSign.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.MakeVector2D
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class MakeVector2D_Parameters : BaseObject {
        public MakeVector2D_Parameters() { }
        public MakeVector2D_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.MakeVector2D.X
        // 0x0 (0x4)
        // (Param)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.MakeVector2D.Y
        // 0x4 (0x4)
        // (Param)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // StructProperty Core.Object.MakeVector2D.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }
    }
    private static UFunction _ptrMakeVector2D;
    public static FVector2D MakeVector2D(float X, float Y) {
        _ptrMakeVector2D ??= FindFunction("Function Core.Object.MakeVector2D");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&X, @params, 4, 4);
        System.Buffer.MemoryCopy(&Y, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrMakeVector2D, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VAbs
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class VAbs_Parameters : BaseObject {
        public VAbs_Parameters() { }
        public VAbs_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VAbs.V
        // 0x0 (0xC)
        // (Param)
        public FVector V {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.VAbs.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrVAbs;
    public static FVector VAbs(FVector V) {
        _ptrVAbs ??= FindFunction("Function Core.Object.VAbs");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)V.Pointer, @params, 12, 12);

        StaticClass.ProcessEvent(_ptrVAbs, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeVector
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class MakeVector_Parameters : BaseObject {
        public MakeVector_Parameters() { }
        public MakeVector_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.MakeVector.X
        // 0x0 (0x4)
        // (Param)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.MakeVector.Y
        // 0x4 (0x4)
        // (Param)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.MakeVector.Z
        // 0x8 (0x4)
        // (Param)
        public float Z {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.MakeVector.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrMakeVector;
    public static FVector MakeVector(float X, float Y, float Z) {
        _ptrMakeVector ??= FindFunction("Function Core.Object.MakeVector");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&X, @params, 4, 4);
        System.Buffer.MemoryCopy(&Y, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Z, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrMakeVector, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.FlattenVector
    // 0x3750E0
    // (Final | Defined | Simulated | Public)
    public unsafe class FlattenVector_Parameters : BaseObject {
        public FlattenVector_Parameters() { }
        public FlattenVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.FlattenVector.NormalToFlatten
        // 0x0 (0xC)
        // (Param)
        public FVector NormalToFlatten {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.FlattenVector.PlaneNormal
        // 0xC (0xC)
        // (Param)
        public FVector PlaneNormal {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.FlattenVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrFlattenVector;
    public FVector FlattenVector(FVector NormalToFlatten, FVector PlaneNormal) {
        _ptrFlattenVector ??= FindFunction("Function Core.Object.FlattenVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)NormalToFlatten.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)PlaneNormal.Pointer, @params + 12, 12, 12);

        ProcessEvent(_ptrFlattenVector, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetRealArchetypeName
    // 0x36CD50
    // (Final | Native | Public)
    public unsafe class GetRealArchetypeName_Parameters : BaseObject {
        public GetRealArchetypeName_Parameters() { }
        public GetRealArchetypeName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.GetRealArchetypeName.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public FName ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrGetRealArchetypeName;
    public FName GetRealArchetypeName() {
        _ptrGetRealArchetypeName ??= FindFunction("Function Core.Object.GetRealArchetypeName");

        var @params = stackalloc byte[8];

        _ptrGetRealArchetypeName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetRealArchetypeName, @params);
        _ptrGetRealArchetypeName.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.FormatTime
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class FormatTime_Parameters : BaseObject {
        public FormatTime_Parameters() { }
        public FormatTime_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.FormatTime.Seconds
        // 0x0 (0x4)
        // (Param)
        public int Seconds {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.FormatTime.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrFormatTime;
    public static FString FormatTime(int Seconds) {
        _ptrFormatTime ??= FindFunction("Function Core.Object.FormatTime");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&Seconds, @params, 4, 4);

        StaticClass.ProcessEvent(_ptrFormatTime, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetTextArchetype
    // 0x36CB10
    // (Final | Native | Static | Public)
    public unsafe class GetTextArchetype_Parameters : BaseObject {
        public GetTextArchetype_Parameters() { }
        public GetTextArchetype_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.GetTextArchetype.ArchetypeClass
        // 0x0 (0x8)
        // (Param)
        public UClass ArchetypeClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StrProperty Core.Object.GetTextArchetype.Path
        // 0x8 (0x10)
        // (Const | Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // ObjectProperty Core.Object.GetTextArchetype.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrGetTextArchetype;
    public static UObject GetTextArchetype(UClass ArchetypeClass, FString Path) {
        _ptrGetTextArchetype ??= FindFunction("Function Core.Object.GetTextArchetype");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ArchetypeClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params + 8, 16, 16);

        _ptrGetTextArchetype.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetTextArchetype, @params);
        _ptrGetTextArchetype.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 24));
    }

    // Function Core.Object.IsArchetype
    // 0x36CA90
    // (Final | Native | Public)
    public unsafe class IsArchetype_Parameters : BaseObject {
        public IsArchetype_Parameters() { }
        public IsArchetype_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.IsArchetype.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsArchetype;
    public bool IsArchetype() {
        _ptrIsArchetype ??= FindFunction("Function Core.Object.IsArchetype");

        var @params = stackalloc byte[4];

        _ptrIsArchetype.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsArchetype, @params);
        _ptrIsArchetype.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function Core.Object.UnsubscribeFromAllEvents
    // 0x36C9F0
    // (Final | Native | Public)
    public unsafe class UnsubscribeFromAllEvents_Parameters : BaseObject {
        public UnsubscribeFromAllEvents_Parameters() { }
        public UnsubscribeFromAllEvents_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrUnsubscribeFromAllEvents;
    public void UnsubscribeFromAllEvents() {
        _ptrUnsubscribeFromAllEvents ??= FindFunction("Function Core.Object.UnsubscribeFromAllEvents");

        _ptrUnsubscribeFromAllEvents.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUnsubscribeFromAllEvents, null);
        _ptrUnsubscribeFromAllEvents.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.NewInstance
    // 0x36C8E0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class NewInstance_Parameters : BaseObject {
        public NewInstance_Parameters() { }
        public NewInstance_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.NewInstance.ObjOuter
        // 0x0 (0x8)
        // (OptionalParam | Param)
        public UObject ObjOuter {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // NameProperty Core.Object.NewInstance.ObjName
        // 0x8 (0x8)
        // (OptionalParam | Param)
        public FName ObjName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // ObjectProperty Core.Object.NewInstance.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrNewInstance;
    public UObject NewInstance(UObject ObjOuter = null, FName ObjName = null) {
        _ptrNewInstance ??= FindFunction("Function Core.Object.NewInstance");

        var @params = stackalloc byte[24];
        if (ObjOuter != null) System.Buffer.MemoryCopy((void*)ObjOuter.Pointer, @params, 8, 8);
        if (ObjName != null) System.Buffer.MemoryCopy((void*)ObjName.Pointer, @params + 8, 8, 8);

        _ptrNewInstance.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrNewInstance, @params);
        _ptrNewInstance.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function Core.Object.PrintDebugInfo
    // 0x3750E0
    // (Simulated | Public)
    public unsafe class PrintDebugInfo_Parameters : BaseObject {
        public PrintDebugInfo_Parameters() { }
        public PrintDebugInfo_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.PrintDebugInfo.Drawer
        // 0x0 (0x8)
        // (Param)
        public UDebugDrawer Drawer {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrPrintDebugInfo;
    public void PrintDebugInfo(UDebugDrawer Drawer) {
        _ptrPrintDebugInfo ??= FindFunction("Function Core.Object.PrintDebugInfo");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Drawer.Pointer, @params, 8, 8);

        ProcessEvent(_ptrPrintDebugInfo, @params);
    }

    // Function Core.Object.RotatorFromInt
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class RotatorFromInt_Parameters : BaseObject {
        public RotatorFromInt_Parameters() { }
        public RotatorFromInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.RotatorFromInt.RotationPitchAndYaw
        // 0x0 (0x4)
        // (Param)
        public int RotationPitchAndYaw {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // StructProperty Core.Object.RotatorFromInt.ReturnValue
        // 0x4 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 12, 12);
        }
    }
    private static UFunction _ptrRotatorFromInt;
    public static FRotator RotatorFromInt(int RotationPitchAndYaw) {
        _ptrRotatorFromInt ??= FindFunction("Function Core.Object.RotatorFromInt");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&RotationPitchAndYaw, @params, 4, 4);

        StaticClass.ProcessEvent(_ptrRotatorFromInt, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RotatorToInt
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class RotatorToInt_Parameters : BaseObject {
        public RotatorToInt_Parameters() { }
        public RotatorToInt_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RotatorToInt.Rotation
        // 0x0 (0xC)
        // (Param)
        public FRotator Rotation {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // IntProperty Core.Object.RotatorToInt.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrRotatorToInt;
    public static int RotatorToInt(FRotator Rotation) {
        _ptrRotatorToInt ??= FindFunction("Function Core.Object.RotatorToInt");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Rotation.Pointer, @params, 12, 12);

        StaticClass.ProcessEvent(_ptrRotatorToInt, @params);

        return *(int*)(@params + 12);
    }

    // Function Core.Object.GetLanguage
    // 0x377A70
    // (Final | Native | Static | Public)
    public unsafe class GetLanguage_Parameters : BaseObject {
        public GetLanguage_Parameters() { }
        public GetLanguage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.GetLanguage.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetLanguage;
    public static FString GetLanguage() {
        _ptrGetLanguage ??= FindFunction("Function Core.Object.GetLanguage");

        var @params = stackalloc byte[16];

        _ptrGetLanguage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetLanguage, @params);
        _ptrGetLanguage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetRandomOptionSumFrequency
    // 0x3750E0
    // (Final | Defined | Public | HasOutParams)
    public unsafe class GetRandomOptionSumFrequency_Parameters : BaseObject {
        public GetRandomOptionSumFrequency_Parameters() { }
        public GetRandomOptionSumFrequency_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.GetRandomOptionSumFrequency.FreqList
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<float> FreqList {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.GetRandomOptionSumFrequency.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetRandomOptionSumFrequency;
    public int GetRandomOptionSumFrequency(ref UnmanagedTArray<float> FreqList) {
        _ptrGetRandomOptionSumFrequency ??= FindFunction("Function Core.Object.GetRandomOptionSumFrequency");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)FreqList.Pointer, @params, 16, 16);

        ProcessEvent(_ptrGetRandomOptionSumFrequency, @params);

        var _FreqListPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_FreqListPtr, 16, 16);
        FreqList = new(_FreqListPtr) { Allocated = true };

        return *(int*)(@params + 16);
    }

    // Function Core.Object.GetBuildChangelistNumber
    // 0x36BBB0
    // (Final | Native | Public)
    public unsafe class GetBuildChangelistNumber_Parameters : BaseObject {
        public GetBuildChangelistNumber_Parameters() { }
        public GetBuildChangelistNumber_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.GetBuildChangelistNumber.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetBuildChangelistNumber;
    public int GetBuildChangelistNumber() {
        _ptrGetBuildChangelistNumber ??= FindFunction("Function Core.Object.GetBuildChangelistNumber");

        var @params = stackalloc byte[4];

        _ptrGetBuildChangelistNumber.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetBuildChangelistNumber, @params);
        _ptrGetBuildChangelistNumber.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function Core.Object.GetEngineVersion
    // 0x36BB60
    // (Final | Native | Public)
    public unsafe class GetEngineVersion_Parameters : BaseObject {
        public GetEngineVersion_Parameters() { }
        public GetEngineVersion_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.GetEngineVersion.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }
    private static UFunction _ptrGetEngineVersion;
    public int GetEngineVersion() {
        _ptrGetEngineVersion ??= FindFunction("Function Core.Object.GetEngineVersion");

        var @params = stackalloc byte[4];

        _ptrGetEngineVersion.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetEngineVersion, @params);
        _ptrGetEngineVersion.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)@params;
    }

    // Function Core.Object.GetAppSeconds
    // 0x36B7D0
    // (Final | Native | Public)
    public unsafe class GetAppSeconds_Parameters : BaseObject {
        public GetAppSeconds_Parameters() { }
        public GetAppSeconds_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.GetAppSeconds.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }
    }
    private static UFunction _ptrGetAppSeconds;
    public float GetAppSeconds() {
        _ptrGetAppSeconds ??= FindFunction("Function Core.Object.GetAppSeconds");

        var @params = stackalloc byte[4];

        _ptrGetAppSeconds.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetAppSeconds, @params);
        _ptrGetAppSeconds.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)@params;
    }

    // Function Core.Object.GetSystemTime
    // 0x36B470
    // (Final | Native | Public | HasOutParams)
    public unsafe class GetSystemTime_Parameters : BaseObject {
        public GetSystemTime_Parameters() { }
        public GetSystemTime_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.GetSystemTime.Year
        // 0x0 (0x4)
        // (Param | OutParam)
        public int Year {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.GetSystemTime.Month
        // 0x4 (0x4)
        // (Param | OutParam)
        public int Month {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.GetSystemTime.DayOfWeek
        // 0x8 (0x4)
        // (Param | OutParam)
        public int DayOfWeek {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.GetSystemTime.Day
        // 0xC (0x4)
        // (Param | OutParam)
        public int Day {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // IntProperty Core.Object.GetSystemTime.Hour
        // 0x10 (0x4)
        // (Param | OutParam)
        public int Hour {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // IntProperty Core.Object.GetSystemTime.Min
        // 0x14 (0x4)
        // (Param | OutParam)
        public int Min {
            get => *(int*)(Pointer + 20);
            set => *(int*)(Pointer + 20) = value;
        }

        // IntProperty Core.Object.GetSystemTime.Sec
        // 0x18 (0x4)
        // (Param | OutParam)
        public int Sec {
            get => *(int*)(Pointer + 24);
            set => *(int*)(Pointer + 24) = value;
        }

        // IntProperty Core.Object.GetSystemTime.MSec
        // 0x1C (0x4)
        // (Param | OutParam)
        public int MSec {
            get => *(int*)(Pointer + 28);
            set => *(int*)(Pointer + 28) = value;
        }
    }
    private static UFunction _ptrGetSystemTime;
    public void GetSystemTime(ref int Year, ref int Month, ref int DayOfWeek, ref int Day, ref int Hour, ref int Min, ref int Sec, ref int MSec) {
        _ptrGetSystemTime ??= FindFunction("Function Core.Object.GetSystemTime");

        var @params = stackalloc byte[32];
        var _Year = Year;
        System.Buffer.MemoryCopy(&_Year, @params, 4, 4);
        var _Month = Month;
        System.Buffer.MemoryCopy(&_Month, @params + 4, 4, 4);
        var _DayOfWeek = DayOfWeek;
        System.Buffer.MemoryCopy(&_DayOfWeek, @params + 8, 4, 4);
        var _Day = Day;
        System.Buffer.MemoryCopy(&_Day, @params + 12, 4, 4);
        var _Hour = Hour;
        System.Buffer.MemoryCopy(&_Hour, @params + 16, 4, 4);
        var _Min = Min;
        System.Buffer.MemoryCopy(&_Min, @params + 20, 4, 4);
        var _Sec = Sec;
        System.Buffer.MemoryCopy(&_Sec, @params + 24, 4, 4);
        var _MSec = MSec;
        System.Buffer.MemoryCopy(&_MSec, @params + 28, 4, 4);

        _ptrGetSystemTime.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetSystemTime, @params);
        _ptrGetSystemTime.FunctionFlags |= (ulong)EFunctionFlags.Native;

        Year = *(int*)@params;
        Month = *(int*)(@params + 4);
        DayOfWeek = *(int*)(@params + 8);
        Day = *(int*)(@params + 12);
        Hour = *(int*)(@params + 16);
        Min = *(int*)(@params + 20);
        Sec = *(int*)(@params + 24);
        MSec = *(int*)(@params + 28);
    }

    // Function Core.Object.TimeStamp
    // 0x36B350
    // (Final | Native | Public)
    public unsafe class TimeStamp_Parameters : BaseObject {
        public TimeStamp_Parameters() { }
        public TimeStamp_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.TimeStamp.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrTimeStamp;
    public FString TimeStamp() {
        _ptrTimeStamp ??= FindFunction("Function Core.Object.TimeStamp");

        var @params = stackalloc byte[16];

        _ptrTimeStamp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTimeStamp, @params);
        _ptrTimeStamp.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.TransformVectorByRotation
    // 0x36B890
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class TransformVectorByRotation_Parameters : BaseObject {
        public TransformVectorByRotation_Parameters() { }
        public TransformVectorByRotation_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.TransformVectorByRotation.SourceRotation
        // 0x0 (0xC)
        // (Param)
        public FRotator SourceRotation {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.TransformVectorByRotation.SourceVector
        // 0xC (0xC)
        // (Param)
        public FVector SourceVector {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // BoolProperty Core.Object.TransformVectorByRotation.bInverse
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bInverse {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }

        // StructProperty Core.Object.TransformVectorByRotation.ReturnValue
        // 0x1C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }
    }
    private static UFunction _ptrTransformVectorByRotation;
    public FVector TransformVectorByRotation(FRotator SourceRotation, FVector SourceVector, bool bInverse = false) {
        _ptrTransformVectorByRotation ??= FindFunction("Function Core.Object.TransformVectorByRotation");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)SourceRotation.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)SourceVector.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&bInverse, @params + 24, 4, 4);

        _ptrTransformVectorByRotation.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTransformVectorByRotation, @params);
        _ptrTransformVectorByRotation.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 28, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetPackageName
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetPackageName_Parameters : BaseObject {
        public GetPackageName_Parameters() { }
        public GetPackageName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.GetPackageName.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public FName ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrGetPackageName;
    public FName GetPackageName() {
        _ptrGetPackageName ??= FindFunction("Function Core.Object.GetPackageName");

        var @params = stackalloc byte[8];

        ProcessEvent(_ptrGetPackageName, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.IsPendingKill
    // 0x36B840
    // (Final | Native | Public)
    public unsafe class IsPendingKill_Parameters : BaseObject {
        public IsPendingKill_Parameters() { }
        public IsPendingKill_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.IsPendingKill.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsPendingKill;
    public bool IsPendingKill() {
        _ptrIsPendingKill ??= FindFunction("Function Core.Object.IsPendingKill");

        var @params = stackalloc byte[4];

        _ptrIsPendingKill.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsPendingKill, @params);
        _ptrIsPendingKill.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function Core.Object.RangeByteToFloatUnsigned
    // 0x36DC30
    // (Final | Simulated | Native | Public)
    public unsafe class RangeByteToFloatUnsigned_Parameters : BaseObject {
        public RangeByteToFloatUnsigned_Parameters() { }
        public RangeByteToFloatUnsigned_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.RangeByteToFloatUnsigned.inputByte
        // 0x0 (0x1)
        // (Param)
        public byte inputByte {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // FloatProperty Core.Object.RangeByteToFloatUnsigned.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrRangeByteToFloatUnsigned;
    public float RangeByteToFloatUnsigned(byte inputByte) {
        _ptrRangeByteToFloatUnsigned ??= FindFunction("Function Core.Object.RangeByteToFloatUnsigned");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&inputByte, @params, 1, 1);

        _ptrRangeByteToFloatUnsigned.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRangeByteToFloatUnsigned, @params);
        _ptrRangeByteToFloatUnsigned.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.RangeByteToFloatSigned
    // 0x36DB80
    // (Final | Simulated | Native | Public)
    public unsafe class RangeByteToFloatSigned_Parameters : BaseObject {
        public RangeByteToFloatSigned_Parameters() { }
        public RangeByteToFloatSigned_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.RangeByteToFloatSigned.inputByte
        // 0x0 (0x1)
        // (Param)
        public byte inputByte {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // FloatProperty Core.Object.RangeByteToFloatSigned.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrRangeByteToFloatSigned;
    public float RangeByteToFloatSigned(byte inputByte) {
        _ptrRangeByteToFloatSigned ??= FindFunction("Function Core.Object.RangeByteToFloatSigned");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&inputByte, @params, 1, 1);

        _ptrRangeByteToFloatSigned.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRangeByteToFloatSigned, @params);
        _ptrRangeByteToFloatSigned.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.FloatToRangeByteUnsigned
    // 0x36DAF0
    // (Final | Simulated | Native | Public)
    public unsafe class FloatToRangeByteUnsigned_Parameters : BaseObject {
        public FloatToRangeByteUnsigned_Parameters() { }
        public FloatToRangeByteUnsigned_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FloatToRangeByteUnsigned.inputFloat
        // 0x0 (0x4)
        // (Param)
        public float inputFloat {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // ByteProperty Core.Object.FloatToRangeByteUnsigned.ReturnValue
        // 0x4 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 4);
            set => *(byte*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrFloatToRangeByteUnsigned;
    public byte FloatToRangeByteUnsigned(float inputFloat) {
        _ptrFloatToRangeByteUnsigned ??= FindFunction("Function Core.Object.FloatToRangeByteUnsigned");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&inputFloat, @params, 4, 4);

        _ptrFloatToRangeByteUnsigned.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFloatToRangeByteUnsigned, @params);
        _ptrFloatToRangeByteUnsigned.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(byte*)(@params + 4);
    }

    // Function Core.Object.FloatToRangeByteSigned
    // 0x36DA20
    // (Final | Simulated | Native | Public)
    public unsafe class FloatToRangeByteSigned_Parameters : BaseObject {
        public FloatToRangeByteSigned_Parameters() { }
        public FloatToRangeByteSigned_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FloatToRangeByteSigned.inputFloat
        // 0x0 (0x4)
        // (Param)
        public float inputFloat {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // ByteProperty Core.Object.FloatToRangeByteSigned.ReturnValue
        // 0x4 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 4);
            set => *(byte*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrFloatToRangeByteSigned;
    public byte FloatToRangeByteSigned(float inputFloat) {
        _ptrFloatToRangeByteSigned ??= FindFunction("Function Core.Object.FloatToRangeByteSigned");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&inputFloat, @params, 4, 4);

        _ptrFloatToRangeByteSigned.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrFloatToRangeByteSigned, @params);
        _ptrFloatToRangeByteSigned.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(byte*)(@params + 4);
    }

    // Function Core.Object.UnwindHeading
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class UnwindHeading_Parameters : BaseObject {
        public UnwindHeading_Parameters() { }
        public UnwindHeading_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.UnwindHeading.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.UnwindHeading.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrUnwindHeading;
    public static float UnwindHeading(float A) {
        _ptrUnwindHeading ??= FindFunction("Function Core.Object.UnwindHeading");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        StaticClass.ProcessEvent(_ptrUnwindHeading, @params);

        return *(float*)(@params + 4);
    }

    // Function Core.Object.FindDeltaAngle
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class FindDeltaAngle_Parameters : BaseObject {
        public FindDeltaAngle_Parameters() { }
        public FindDeltaAngle_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FindDeltaAngle.A1
        // 0x0 (0x4)
        // (Param)
        public float A1 {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FindDeltaAngle.A2
        // 0x4 (0x4)
        // (Param)
        public float A2 {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FindDeltaAngle.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrFindDeltaAngle;
    public static float FindDeltaAngle(float A1, float A2) {
        _ptrFindDeltaAngle ??= FindFunction("Function Core.Object.FindDeltaAngle");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A1, @params, 4, 4);
        System.Buffer.MemoryCopy(&A2, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrFindDeltaAngle, @params);

        return *(float*)(@params + 8);
    }

    // Function Core.Object.GetHeadingAngle
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class GetHeadingAngle_Parameters : BaseObject {
        public GetHeadingAngle_Parameters() { }
        public GetHeadingAngle_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetHeadingAngle.Dir
        // 0x0 (0xC)
        // (Param)
        public FVector Dir {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.GetHeadingAngle.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrGetHeadingAngle;
    public static float GetHeadingAngle(FVector Dir) {
        _ptrGetHeadingAngle ??= FindFunction("Function Core.Object.GetHeadingAngle");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Dir.Pointer, @params, 12, 12);

        StaticClass.ProcessEvent(_ptrGetHeadingAngle, @params);

        return *(float*)(@params + 12);
    }

    // Function Core.Object.GetAngularDegreesFromRadians
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public | HasOutParams)
    public unsafe class GetAngularDegreesFromRadians_Parameters : BaseObject {
        public GetAngularDegreesFromRadians_Parameters() { }
        public GetAngularDegreesFromRadians_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetAngularDegreesFromRadians.OutFOV
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D OutFOV {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrGetAngularDegreesFromRadians;
    public static void GetAngularDegreesFromRadians(ref FVector2D OutFOV) {
        _ptrGetAngularDegreesFromRadians ??= FindFunction("Function Core.Object.GetAngularDegreesFromRadians");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)OutFOV.Pointer, @params, 8, 8);

        StaticClass.ProcessEvent(_ptrGetAngularDegreesFromRadians, @params);

        var _OutFOVPtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_OutFOVPtr, 8, 8);
        OutFOV = new(_OutFOVPtr) { Allocated = true };
    }

    // Function Core.Object.GetAngularFromDotDist
    // 0x358D20
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetAngularFromDotDist_Parameters : BaseObject {
        public GetAngularFromDotDist_Parameters() { }
        public GetAngularFromDotDist_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetAngularFromDotDist.OutAngDist
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D OutAngDist {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.GetAngularFromDotDist.DotDist
        // 0x8 (0x8)
        // (Param)
        public FVector2D DotDist {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }
    }
    private static UFunction _ptrGetAngularFromDotDist;
    public static void GetAngularFromDotDist(ref FVector2D OutAngDist, FVector2D DotDist) {
        _ptrGetAngularFromDotDist ??= FindFunction("Function Core.Object.GetAngularFromDotDist");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)OutAngDist.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)DotDist.Pointer, @params + 8, 8, 8);

        _ptrGetAngularFromDotDist.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetAngularFromDotDist, @params);
        _ptrGetAngularFromDotDist.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutAngDistPtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_OutAngDistPtr, 8, 8);
        OutAngDist = new(_OutAngDistPtr) { Allocated = true };
    }

    // Function Core.Object.GetAngularDistance
    // 0x358BC0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetAngularDistance_Parameters : BaseObject {
        public GetAngularDistance_Parameters() { }
        public GetAngularDistance_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetAngularDistance.OutAngularDist
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D OutAngularDist {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.GetAngularDistance.Direction
        // 0x8 (0xC)
        // (Param)
        public FVector Direction {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 12, 12);
        }

        // StructProperty Core.Object.GetAngularDistance.AxisX
        // 0x14 (0xC)
        // (Param)
        public FVector AxisX {
            get => new(Pointer + 20);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 20), 12, 12);
        }

        // StructProperty Core.Object.GetAngularDistance.AxisY
        // 0x20 (0xC)
        // (Param)
        public FVector AxisY {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }

        // StructProperty Core.Object.GetAngularDistance.AxisZ
        // 0x2C (0xC)
        // (Param)
        public FVector AxisZ {
            get => new(Pointer + 44);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 44), 12, 12);
        }

        // BoolProperty Core.Object.GetAngularDistance.ReturnValue
        // 0x38 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 56) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 56) |= 0x1;
                else *(uint*)(Pointer + 56) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetAngularDistance;
    public static bool GetAngularDistance(ref FVector2D OutAngularDist, FVector Direction, FVector AxisX, FVector AxisY, FVector AxisZ) {
        _ptrGetAngularDistance ??= FindFunction("Function Core.Object.GetAngularDistance");

        var @params = stackalloc byte[60];
        System.Buffer.MemoryCopy((void*)OutAngularDist.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Direction.Pointer, @params + 8, 12, 12);
        System.Buffer.MemoryCopy((void*)AxisX.Pointer, @params + 20, 12, 12);
        System.Buffer.MemoryCopy((void*)AxisY.Pointer, @params + 32, 12, 12);
        System.Buffer.MemoryCopy((void*)AxisZ.Pointer, @params + 44, 12, 12);

        _ptrGetAngularDistance.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetAngularDistance, @params);
        _ptrGetAngularDistance.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutAngularDistPtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_OutAngularDistPtr, 8, 8);
        OutAngularDist = new(_OutAngularDistPtr) { Allocated = true };

        return *(bool*)(@params + 56);
    }

    // Function Core.Object.GetDotDistance
    // 0x358A60
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetDotDistance_Parameters : BaseObject {
        public GetDotDistance_Parameters() { }
        public GetDotDistance_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetDotDistance.OutDotDist
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D OutDotDist {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.GetDotDistance.Direction
        // 0x8 (0xC)
        // (Param)
        public FVector Direction {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 12, 12);
        }

        // StructProperty Core.Object.GetDotDistance.AxisX
        // 0x14 (0xC)
        // (Param)
        public FVector AxisX {
            get => new(Pointer + 20);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 20), 12, 12);
        }

        // StructProperty Core.Object.GetDotDistance.AxisY
        // 0x20 (0xC)
        // (Param)
        public FVector AxisY {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }

        // StructProperty Core.Object.GetDotDistance.AxisZ
        // 0x2C (0xC)
        // (Param)
        public FVector AxisZ {
            get => new(Pointer + 44);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 44), 12, 12);
        }

        // BoolProperty Core.Object.GetDotDistance.ReturnValue
        // 0x38 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 56) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 56) |= 0x1;
                else *(uint*)(Pointer + 56) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetDotDistance;
    public static bool GetDotDistance(ref FVector2D OutDotDist, FVector Direction, FVector AxisX, FVector AxisY, FVector AxisZ) {
        _ptrGetDotDistance ??= FindFunction("Function Core.Object.GetDotDistance");

        var @params = stackalloc byte[60];
        System.Buffer.MemoryCopy((void*)OutDotDist.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Direction.Pointer, @params + 8, 12, 12);
        System.Buffer.MemoryCopy((void*)AxisX.Pointer, @params + 20, 12, 12);
        System.Buffer.MemoryCopy((void*)AxisY.Pointer, @params + 32, 12, 12);
        System.Buffer.MemoryCopy((void*)AxisZ.Pointer, @params + 44, 12, 12);

        _ptrGetDotDistance.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetDotDistance, @params);
        _ptrGetDotDistance.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutDotDistPtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_OutDotDistPtr, 8, 8);
        OutDotDist = new(_OutDotDistPtr) { Allocated = true };

        return *(bool*)(@params + 56);
    }

    // Function Core.Object.LinePlaneIntersection
    // 0x3750E0
    // (Final | Defined | HasOptionalParams | Public | HasOutParams | HasDefaults)
    public unsafe class LinePlaneIntersection_Parameters : BaseObject {
        public LinePlaneIntersection_Parameters() { }
        public LinePlaneIntersection_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LinePlaneIntersection.LineStart
        // 0x0 (0xC)
        // (Param)
        public FVector LineStart {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.LinePlaneIntersection.LineEnd
        // 0xC (0xC)
        // (Param)
        public FVector LineEnd {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.LinePlaneIntersection.PlaneOrigin
        // 0x18 (0xC)
        // (Param)
        public FVector PlaneOrigin {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.LinePlaneIntersection.PlaneNormal
        // 0x24 (0xC)
        // (Param)
        public FVector PlaneNormal {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }

        // StructProperty Core.Object.LinePlaneIntersection.Out_Intersection
        // 0x30 (0xC)
        // (Param | OutParam)
        public FVector Out_Intersection {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 12, 12);
        }

        // FloatProperty Core.Object.LinePlaneIntersection.Out_T
        // 0x3C (0x4)
        // (OptionalParam | Param | OutParam)
        public float Out_T {
            get => *(float*)(Pointer + 60);
            set => *(float*)(Pointer + 60) = value;
        }

        // BoolProperty Core.Object.LinePlaneIntersection.bCheckLineSegment
        // 0x40 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bCheckLineSegment {
            get => (*(uint*)(Pointer + 64) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 64) |= 0x1;
                else *(uint*)(Pointer + 64) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.LinePlaneIntersection.ReturnValue
        // 0x44 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 68) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 68) |= 0x1;
                else *(uint*)(Pointer + 68) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLinePlaneIntersection;
    public bool LinePlaneIntersection(FVector LineStart, FVector LineEnd, FVector PlaneOrigin, FVector PlaneNormal, ref FVector Out_Intersection, ref float Out_T, bool bCheckLineSegment = false) {
        _ptrLinePlaneIntersection ??= FindFunction("Function Core.Object.LinePlaneIntersection");

        var @params = stackalloc byte[72];
        System.Buffer.MemoryCopy((void*)LineStart.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)LineEnd.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)PlaneOrigin.Pointer, @params + 24, 12, 12);
        System.Buffer.MemoryCopy((void*)PlaneNormal.Pointer, @params + 36, 12, 12);
        System.Buffer.MemoryCopy((void*)Out_Intersection.Pointer, @params + 48, 12, 12);
        var _Out_T = Out_T;
        System.Buffer.MemoryCopy(&_Out_T, @params + 60, 4, 4);
        System.Buffer.MemoryCopy(&bCheckLineSegment, @params + 64, 4, 4);

        ProcessEvent(_ptrLinePlaneIntersection, @params);

        var _Out_IntersectionPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 48, (void*)_Out_IntersectionPtr, 12, 12);
        Out_Intersection = new(_Out_IntersectionPtr) { Allocated = true };
        Out_T = *(float*)(@params + 60);

        return *(bool*)(@params + 68);
    }

    // Function Core.Object.PointProjectToPlane
    // 0x3588B0
    // (Final | Native | Static | Public)
    public unsafe class PointProjectToPlane_Parameters : BaseObject {
        public PointProjectToPlane_Parameters() { }
        public PointProjectToPlane_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.PointProjectToPlane.Point
        // 0x0 (0xC)
        // (Param)
        public FVector Point {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.PointProjectToPlane.A
        // 0xC (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.PointProjectToPlane.B
        // 0x18 (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.PointProjectToPlane.C
        // 0x24 (0xC)
        // (Param)
        public FVector C {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }

        // StructProperty Core.Object.PointProjectToPlane.ReturnValue
        // 0x30 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 12, 12);
        }
    }
    private static UFunction _ptrPointProjectToPlane;
    public static FVector PointProjectToPlane(FVector Point, FVector A, FVector B, FVector C) {
        _ptrPointProjectToPlane ??= FindFunction("Function Core.Object.PointProjectToPlane");

        var @params = stackalloc byte[60];
        System.Buffer.MemoryCopy((void*)Point.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)A.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 24, 12, 12);
        System.Buffer.MemoryCopy((void*)C.Pointer, @params + 36, 12, 12);

        _ptrPointProjectToPlane.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrPointProjectToPlane, @params);
        _ptrPointProjectToPlane.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 48, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.PointDistToPlane
    // 0x3750E0
    // (Final | Defined | Simulated | HasOptionalParams | Public | HasOutParams | HasDefaults)
    public unsafe class PointDistToPlane_Parameters : BaseObject {
        public PointDistToPlane_Parameters() { }
        public PointDistToPlane_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.PointDistToPlane.Point
        // 0x0 (0xC)
        // (Param)
        public FVector Point {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.PointDistToPlane.Orientation
        // 0xC (0xC)
        // (Param)
        public FRotator Orientation {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.PointDistToPlane.Origin
        // 0x18 (0xC)
        // (Param)
        public FVector Origin {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.PointDistToPlane.out_ClosestPoint
        // 0x24 (0xC)
        // (OptionalParam | Param | OutParam)
        public FVector out_ClosestPoint {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }

        // FloatProperty Core.Object.PointDistToPlane.ReturnValue
        // 0x30 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 48);
            set => *(float*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrPointDistToPlane;
    public float PointDistToPlane(FVector Point, FRotator Orientation, FVector Origin, ref FVector out_ClosestPoint) {
        _ptrPointDistToPlane ??= FindFunction("Function Core.Object.PointDistToPlane");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Point.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Orientation.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Origin.Pointer, @params + 24, 12, 12);
        if (out_ClosestPoint != null) System.Buffer.MemoryCopy((void*)out_ClosestPoint.Pointer, @params + 36, 12, 12);

        ProcessEvent(_ptrPointDistToPlane, @params);

        var _out_ClosestPointPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_out_ClosestPointPtr, 12, 12);
        out_ClosestPoint = new(_out_ClosestPointPtr) { Allocated = true };

        return *(float*)(@params + 48);
    }

    // Function Core.Object.PointDistToSegment
    // 0x358750
    // (Final | Native | HasOptionalParams | Public | HasOutParams)
    public unsafe class PointDistToSegment_Parameters : BaseObject {
        public PointDistToSegment_Parameters() { }
        public PointDistToSegment_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.PointDistToSegment.Point
        // 0x0 (0xC)
        // (Param)
        public FVector Point {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.PointDistToSegment.StartPoint
        // 0xC (0xC)
        // (Param)
        public FVector StartPoint {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.PointDistToSegment.EndPoint
        // 0x18 (0xC)
        // (Param)
        public FVector EndPoint {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.PointDistToSegment.OutClosestPoint
        // 0x24 (0xC)
        // (OptionalParam | Param | OutParam)
        public FVector OutClosestPoint {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }

        // FloatProperty Core.Object.PointDistToSegment.ReturnValue
        // 0x30 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 48);
            set => *(float*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrPointDistToSegment;
    public float PointDistToSegment(FVector Point, FVector StartPoint, FVector EndPoint, ref FVector OutClosestPoint) {
        _ptrPointDistToSegment ??= FindFunction("Function Core.Object.PointDistToSegment");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Point.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)StartPoint.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)EndPoint.Pointer, @params + 24, 12, 12);
        if (OutClosestPoint != null) System.Buffer.MemoryCopy((void*)OutClosestPoint.Pointer, @params + 36, 12, 12);

        _ptrPointDistToSegment.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrPointDistToSegment, @params);
        _ptrPointDistToSegment.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutClosestPointPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_OutClosestPointPtr, 12, 12);
        OutClosestPoint = new(_OutClosestPointPtr) { Allocated = true };

        return *(float*)(@params + 48);
    }

    // Function Core.Object.PointDistToLine
    // 0x3585F0
    // (Final | Native | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class PointDistToLine_Parameters : BaseObject {
        public PointDistToLine_Parameters() { }
        public PointDistToLine_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.PointDistToLine.Point
        // 0x0 (0xC)
        // (Param)
        public FVector Point {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.PointDistToLine.Line
        // 0xC (0xC)
        // (Param)
        public FVector Line {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.PointDistToLine.Origin
        // 0x18 (0xC)
        // (Param)
        public FVector Origin {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.PointDistToLine.OutClosestPoint
        // 0x24 (0xC)
        // (OptionalParam | Param | OutParam)
        public FVector OutClosestPoint {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }

        // FloatProperty Core.Object.PointDistToLine.ReturnValue
        // 0x30 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 48);
            set => *(float*)(Pointer + 48) = value;
        }
    }
    private static UFunction _ptrPointDistToLine;
    public static float PointDistToLine(FVector Point, FVector Line, FVector Origin, ref FVector OutClosestPoint) {
        _ptrPointDistToLine ??= FindFunction("Function Core.Object.PointDistToLine");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Point.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Line.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Origin.Pointer, @params + 24, 12, 12);
        if (OutClosestPoint != null) System.Buffer.MemoryCopy((void*)OutClosestPoint.Pointer, @params + 36, 12, 12);

        _ptrPointDistToLine.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrPointDistToLine, @params);
        _ptrPointDistToLine.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutClosestPointPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_OutClosestPointPtr, 12, 12);
        OutClosestPoint = new(_OutClosestPointPtr) { Allocated = true };

        return *(float*)(@params + 48);
    }

    // Function Core.Object.GetPerObjectConfigObjects
    // 0x368810
    // (Final | Iterator | Native | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class GetPerObjectConfigObjects_Parameters : BaseObject {
        public GetPerObjectConfigObjects_Parameters() { }
        public GetPerObjectConfigObjects_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.GetPerObjectConfigObjects.SearchClass
        // 0x0 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.Object.GetPerObjectConfigObjects.OutObject
        // 0x8 (0x8)
        // (Param | OutParam)
        public UObject OutObject {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ObjectProperty Core.Object.GetPerObjectConfigObjects.ObjectOuter
        // 0x10 (0x8)
        // (OptionalParam | Param)
        public UObject ObjectOuter {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // IntProperty Core.Object.GetPerObjectConfigObjects.MaxResults
        // 0x18 (0x4)
        // (OptionalParam | Param)
        public int MaxResults {
            get => *(int*)(Pointer + 24);
            set => *(int*)(Pointer + 24) = value;
        }
    }
    private static UFunction _ptrGetPerObjectConfigObjects;
    public static void GetPerObjectConfigObjects(UClass SearchClass, ref UObject OutObject, UObject ObjectOuter = null, int MaxResults = 0) {
        _ptrGetPerObjectConfigObjects ??= FindFunction("Function Core.Object.GetPerObjectConfigObjects");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutObject.Pointer, @params + 8, 8, 8);
        if (ObjectOuter != null) System.Buffer.MemoryCopy((void*)ObjectOuter.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy(&MaxResults, @params + 24, 4, 4);

        _ptrGetPerObjectConfigObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetPerObjectConfigObjects, @params);
        _ptrGetPerObjectConfigObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;

        OutObject = new(*(nint*)(@params + 8));
    }

    // Function Core.Object.GetPerObjectConfigSections
    // 0x368130
    // (Final | Native | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class GetPerObjectConfigSections_Parameters : BaseObject {
        public GetPerObjectConfigSections_Parameters() { }
        public GetPerObjectConfigSections_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.GetPerObjectConfigSections.SearchClass
        // 0x0 (0x8)
        // (Param)
        public UClass SearchClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ArrayProperty Core.Object.GetPerObjectConfigSections.out_SectionNames
        // 0x8 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FString> out_SectionNames {
            get => new(Pointer + 8, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // ObjectProperty Core.Object.GetPerObjectConfigSections.ObjectOuter
        // 0x18 (0x8)
        // (OptionalParam | Param)
        public UObject ObjectOuter {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }

        // IntProperty Core.Object.GetPerObjectConfigSections.MaxResults
        // 0x20 (0x4)
        // (OptionalParam | Param)
        public int MaxResults {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // BoolProperty Core.Object.GetPerObjectConfigSections.ReturnValue
        // 0x24 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 36) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 36) |= 0x1;
                else *(uint*)(Pointer + 36) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGetPerObjectConfigSections;
    public static bool GetPerObjectConfigSections(UClass SearchClass, ref StructTArray<FString> out_SectionNames, UObject ObjectOuter = null, int MaxResults = 0) {
        _ptrGetPerObjectConfigSections ??= FindFunction("Function Core.Object.GetPerObjectConfigSections");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)SearchClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)out_SectionNames.Pointer, @params + 8, 16, 16);
        if (ObjectOuter != null) System.Buffer.MemoryCopy((void*)ObjectOuter.Pointer, @params + 24, 8, 8);
        System.Buffer.MemoryCopy(&MaxResults, @params + 32, 4, 4);

        _ptrGetPerObjectConfigSections.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetPerObjectConfigSections, @params);
        _ptrGetPerObjectConfigSections.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _out_SectionNamesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_out_SectionNamesPtr, 16, 16);
        out_SectionNames = new(_out_SectionNamesPtr, 16) { Allocated = true };

        return *(bool*)(@params + 36);
    }

    // Function Core.Object.ImportJSON
    // 0x367EA0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class ImportJSON_Parameters : BaseObject {
        public ImportJSON_Parameters() { }
        public ImportJSON_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ImportJSON.PropertyName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString PropertyName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.ImportJSON.JSON
        // 0x10 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public FString JSON {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrImportJSON;
    public static void ImportJSON(FString PropertyName, ref FString JSON) {
        _ptrImportJSON ??= FindFunction("Function Core.Object.ImportJSON");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)PropertyName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)JSON.Pointer, @params + 16, 16, 16);

        _ptrImportJSON.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrImportJSON, @params);
        _ptrImportJSON.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _JSONPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_JSONPtr, 16, 16);
        JSON = new(_JSONPtr) { Allocated = true };
    }

    // Function Core.Object.StaticSaveConfig
    // 0x367E50
    // (Final | Native | Static | Public)
    public unsafe class StaticSaveConfig_Parameters : BaseObject {
        public StaticSaveConfig_Parameters() { }
        public StaticSaveConfig_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrStaticSaveConfig;
    public static void StaticSaveConfig() {
        _ptrStaticSaveConfig ??= FindFunction("Function Core.Object.StaticSaveConfig");

        _ptrStaticSaveConfig.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrStaticSaveConfig, null);
        _ptrStaticSaveConfig.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.SaveConfig
    // 0x367E10 (iNative: 536)
    // (Final | Native | Public)
    public unsafe class SaveConfig_Parameters : BaseObject {
        public SaveConfig_Parameters() { }
        public SaveConfig_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrSaveConfig;
    public void SaveConfig() {
        _ptrSaveConfig ??= FindFunction("Function Core.Object.SaveConfig");

        _ptrSaveConfig.iNative = 0;
        _ptrSaveConfig.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSaveConfig, null);
        _ptrSaveConfig.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSaveConfig.iNative = 536;
    }

    // Function Core.Object.LoadSeekFreeObject
    // 0x369D70
    // (Final | Native | Static | Public)
    public unsafe class LoadSeekFreeObject_Parameters : BaseObject {
        public LoadSeekFreeObject_Parameters() { }
        public LoadSeekFreeObject_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.LoadSeekFreeObject.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StrProperty Core.Object.LoadSeekFreeObject.Path
        // 0x8 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // ObjectProperty Core.Object.LoadSeekFreeObject.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrLoadSeekFreeObject;
    public static UObject LoadSeekFreeObject(UClass ObjClass, FString Path) {
        _ptrLoadSeekFreeObject ??= FindFunction("Function Core.Object.LoadSeekFreeObject");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params + 8, 16, 16);

        _ptrLoadSeekFreeObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLoadSeekFreeObject, @params);
        _ptrLoadSeekFreeObject.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 24));
    }

    // Function Core.Object.FindObject
    // 0x369FC0
    // (Final | Native | Static | Public)
    public unsafe class FindObject_Parameters : BaseObject {
        public FindObject_Parameters() { }
        public FindObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.FindObject.ObjectName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ObjectName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ClassProperty Core.Object.FindObject.ObjectClass
        // 0x10 (0x8)
        // (Param)
        public UClass ObjectClass {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // ObjectProperty Core.Object.FindObject.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrFindObject;
    public static UObject FindObject(FString ObjectName, UClass ObjectClass) {
        _ptrFindObject ??= FindFunction("Function Core.Object.FindObject");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)ObjectName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ObjectClass.Pointer, @params + 16, 8, 8);

        _ptrFindObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFindObject, @params);
        _ptrFindObject.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 24));
    }

    // Function Core.Object.DynamicLoadObject
    // 0x369E60
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class DynamicLoadObject_Parameters : BaseObject {
        public DynamicLoadObject_Parameters() { }
        public DynamicLoadObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.DynamicLoadObject.ObjectName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString ObjectName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ClassProperty Core.Object.DynamicLoadObject.ObjectClass
        // 0x10 (0x8)
        // (Param)
        public UClass ObjectClass {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // BoolProperty Core.Object.DynamicLoadObject.MayFail
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool MayFail {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // ObjectProperty Core.Object.DynamicLoadObject.ReturnValue
        // 0x20 (0x8)
        // (Param | OutParam | ReturnParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }
    private static UFunction _ptrDynamicLoadObject;
    public static UObject DynamicLoadObject(FString ObjectName, UClass ObjectClass, bool MayFail = false) {
        _ptrDynamicLoadObject ??= FindFunction("Function Core.Object.DynamicLoadObject");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)ObjectName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ObjectClass.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy(&MayFail, @params + 24, 4, 4);

        _ptrDynamicLoadObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDynamicLoadObject, @params);
        _ptrDynamicLoadObject.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 32));
    }

    // Function Core.Object.EnumFromString
    // 0x369210
    // (Final | Native | Static | Public)
    public unsafe class EnumFromString_Parameters : BaseObject {
        public EnumFromString_Parameters() { }
        public EnumFromString_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.EnumFromString.E
        // 0x0 (0x8)
        // (Param)
        public UObject E {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // NameProperty Core.Object.EnumFromString.ValueName
        // 0x8 (0x8)
        // (Param | CoerceParam)
        public FName ValueName {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // IntProperty Core.Object.EnumFromString.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrEnumFromString;
    public static int EnumFromString(UObject E, FName ValueName) {
        _ptrEnumFromString ??= FindFunction("Function Core.Object.EnumFromString");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)E.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)ValueName.Pointer, @params + 8, 8, 8);

        _ptrEnumFromString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEnumFromString, @params);
        _ptrEnumFromString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function Core.Object.GetEnum
    // 0x369140
    // (Final | Native | Static | Public)
    public unsafe class GetEnum_Parameters : BaseObject {
        public GetEnum_Parameters() { }
        public GetEnum_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.GetEnum.E
        // 0x0 (0x8)
        // (Param)
        public UObject E {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // IntProperty Core.Object.GetEnum.I
        // 0x8 (0x4)
        // (Param | CoerceParam)
        public int I {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // NameProperty Core.Object.GetEnum.ReturnValue
        // 0xC (0x8)
        // (Param | OutParam | ReturnParam)
        public FName ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }
    }
    private static UFunction _ptrGetEnum;
    public static FName GetEnum(UObject E, int I) {
        _ptrGetEnum ??= FindFunction("Function Core.Object.GetEnum");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)E.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&I, @params + 8, 4, 4);

        _ptrGetEnum.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetEnum, @params);
        _ptrGetEnum.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Disable
    // 0x367A30 (iNative: 333)
    // (Final | Native | Public)
    public unsafe class Disable_Parameters : BaseObject {
        public Disable_Parameters() { }
        public Disable_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.Disable.ProbeFunc
        // 0x0 (0x8)
        // (Param)
        public FName ProbeFunc {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrDisable;
    public void Disable(FName ProbeFunc) {
        _ptrDisable ??= FindFunction("Function Core.Object.Disable");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ProbeFunc.Pointer, @params, 8, 8);

        _ptrDisable.iNative = 0;
        _ptrDisable.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDisable, @params);
        _ptrDisable.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDisable.iNative = 333;
    }

    // Function Core.Object.Enable
    // 0x367920 (iNative: 332)
    // (Final | Native | Public)
    public unsafe class Enable_Parameters : BaseObject {
        public Enable_Parameters() { }
        public Enable_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.Enable.ProbeFunc
        // 0x0 (0x8)
        // (Param)
        public FName ProbeFunc {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrEnable;
    public void Enable(FName ProbeFunc) {
        _ptrEnable ??= FindFunction("Function Core.Object.Enable");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ProbeFunc.Pointer, @params, 8, 8);

        _ptrEnable.iNative = 0;
        _ptrEnable.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrEnable, @params);
        _ptrEnable.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEnable.iNative = 332;
    }

    // Function Core.Object.ContinuedState
    // 0x3750E0
    // (Final | Event | Public)
    public unsafe class ContinuedState_Parameters : BaseObject {
        public ContinuedState_Parameters() { }
        public ContinuedState_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrContinuedState;
    public void ContinuedState() {
        _ptrContinuedState ??= FindFunction("Function Core.Object.ContinuedState");

        ProcessEvent(_ptrContinuedState, null);
    }

    // Function Core.Object.PausedState
    // 0x3750E0
    // (Final | Event | Public)
    public unsafe class PausedState_Parameters : BaseObject {
        public PausedState_Parameters() { }
        public PausedState_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrPausedState;
    public void PausedState() {
        _ptrPausedState ??= FindFunction("Function Core.Object.PausedState");

        ProcessEvent(_ptrPausedState, null);
    }

    // Function Core.Object.PoppedState
    // 0x3750E0
    // (Event | Public)
    public unsafe class PoppedState_Parameters : BaseObject {
        public PoppedState_Parameters() { }
        public PoppedState_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrPoppedState;
    public void PoppedState() {
        _ptrPoppedState ??= FindFunction("Function Core.Object.PoppedState");

        ProcessEvent(_ptrPoppedState, null);
    }

    // Function Core.Object.PushedState
    // 0x3750E0
    // (Event | Public)
    public unsafe class PushedState_Parameters : BaseObject {
        public PushedState_Parameters() { }
        public PushedState_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrPushedState;
    public void PushedState() {
        _ptrPushedState ??= FindFunction("Function Core.Object.PushedState");

        ProcessEvent(_ptrPushedState, null);
    }

    // Function Core.Object.EndState
    // 0x3750E0
    // (Event | Public)
    public unsafe class EndState_Parameters : BaseObject {
        public EndState_Parameters() { }
        public EndState_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.EndState.NextStateName
        // 0x0 (0x8)
        // (Param)
        public FName NextStateName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrEndState;
    public void EndState(FName NextStateName) {
        _ptrEndState ??= FindFunction("Function Core.Object.EndState");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)NextStateName.Pointer, @params, 8, 8);

        ProcessEvent(_ptrEndState, @params);
    }

    // Function Core.Object.BeginState
    // 0x3750E0
    // (Event | Public)
    public unsafe class BeginState_Parameters : BaseObject {
        public BeginState_Parameters() { }
        public BeginState_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.BeginState.PreviousStateName
        // 0x0 (0x8)
        // (Param)
        public FName PreviousStateName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrBeginState;
    public void BeginState(FName PreviousStateName) {
        _ptrBeginState ??= FindFunction("Function Core.Object.BeginState");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)PreviousStateName.Pointer, @params, 8, 8);

        ProcessEvent(_ptrBeginState, @params);
    }

    // Function Core.Object.DumpStateStack
    // 0x367560
    // (Final | Native | Public)
    public unsafe class DumpStateStack_Parameters : BaseObject {
        public DumpStateStack_Parameters() { }
        public DumpStateStack_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDumpStateStack;
    public void DumpStateStack() {
        _ptrDumpStateStack ??= FindFunction("Function Core.Object.DumpStateStack");

        _ptrDumpStateStack.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrDumpStateStack, null);
        _ptrDumpStateStack.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.PopState
    // 0x3674C0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class PopState_Parameters : BaseObject {
        public PopState_Parameters() { }
        public PopState_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.PopState.bPopAll
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bPopAll {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrPopState;
    public void PopState(bool bPopAll = false) {
        _ptrPopState ??= FindFunction("Function Core.Object.PopState");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bPopAll, @params, 4, 4);

        _ptrPopState.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrPopState, @params);
        _ptrPopState.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.PushState
    // 0x367400
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class PushState_Parameters : BaseObject {
        public PushState_Parameters() { }
        public PushState_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.PushState.NewState
        // 0x0 (0x8)
        // (Param)
        public FName NewState {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // NameProperty Core.Object.PushState.NewLabel
        // 0x8 (0x8)
        // (OptionalParam | Param)
        public FName NewLabel {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }
    }
    private static UFunction _ptrPushState;
    public void PushState(FName NewState, FName NewLabel = null) {
        _ptrPushState ??= FindFunction("Function Core.Object.PushState");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)NewState.Pointer, @params, 8, 8);
        if (NewLabel != null) System.Buffer.MemoryCopy((void*)NewLabel.Pointer, @params + 8, 8, 8);

        _ptrPushState.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrPushState, @params);
        _ptrPushState.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.GetStateName
    // 0x36A350 (iNative: 284)
    // (Final | Native | Public)
    public unsafe class GetStateName_Parameters : BaseObject {
        public GetStateName_Parameters() { }
        public GetStateName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.GetStateName.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public FName ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrGetStateName;
    public FName GetStateName() {
        _ptrGetStateName ??= FindFunction("Function Core.Object.GetStateName");

        var @params = stackalloc byte[8];

        _ptrGetStateName.iNative = 0;
        _ptrGetStateName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetStateName, @params);
        _ptrGetStateName.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGetStateName.iNative = 284;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.IsChildState
    // 0x36A250
    // (Final | Native | Public)
    public unsafe class IsChildState_Parameters : BaseObject {
        public IsChildState_Parameters() { }
        public IsChildState_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.IsChildState.TestState
        // 0x0 (0x8)
        // (Param)
        public FName TestState {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // NameProperty Core.Object.IsChildState.TestParentState
        // 0x8 (0x8)
        // (Param)
        public FName TestParentState {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // BoolProperty Core.Object.IsChildState.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsChildState;
    public bool IsChildState(FName TestState, FName TestParentState) {
        _ptrIsChildState ??= FindFunction("Function Core.Object.IsChildState");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)TestState.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)TestParentState.Pointer, @params + 8, 8, 8);

        _ptrIsChildState.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsChildState, @params);
        _ptrIsChildState.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.IsInState
    // 0x36A0B0 (iNative: 281)
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class IsInState_Parameters : BaseObject {
        public IsInState_Parameters() { }
        public IsInState_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.IsInState.TestState
        // 0x0 (0x8)
        // (Param)
        public FName TestState {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty Core.Object.IsInState.bTestStateStack
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bTestStateStack {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.IsInState.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsInState;
    public bool IsInState(FName TestState, bool bTestStateStack = false) {
        _ptrIsInState ??= FindFunction("Function Core.Object.IsInState");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)TestState.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&bTestStateStack, @params + 8, 4, 4);

        _ptrIsInState.iNative = 0;
        _ptrIsInState.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsInState, @params);
        _ptrIsInState.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrIsInState.iNative = 281;

        return *(bool*)(@params + 12);
    }

    // Function Core.Object.GotoState
    // 0x3670F0 (iNative: 205)
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GotoState_Parameters : BaseObject {
        public GotoState_Parameters() { }
        public GotoState_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.GotoState.NewState
        // 0x0 (0x8)
        // (OptionalParam | Param)
        public FName NewState {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // NameProperty Core.Object.GotoState.Label
        // 0x8 (0x8)
        // (OptionalParam | Param)
        public FName Label {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // BoolProperty Core.Object.GotoState.bForceEvents
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bForceEvents {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.GotoState.bKeepStack
        // 0x14 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bKeepStack {
            get => (*(uint*)(Pointer + 20) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 20) |= 0x1;
                else *(uint*)(Pointer + 20) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGotoState;
    public void GotoState(FName NewState = null, FName Label = null, bool bForceEvents = false, bool bKeepStack = false) {
        _ptrGotoState ??= FindFunction("Function Core.Object.GotoState");

        var @params = stackalloc byte[24];
        if (NewState != null) System.Buffer.MemoryCopy((void*)NewState.Pointer, @params, 8, 8);
        if (Label != null) System.Buffer.MemoryCopy((void*)Label.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bForceEvents, @params + 16, 4, 4);
        System.Buffer.MemoryCopy(&bKeepStack, @params + 20, 4, 4);

        _ptrGotoState.iNative = 0;
        _ptrGotoState.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGotoState, @params);
        _ptrGotoState.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGotoState.iNative = 205;
    }

    // Function Core.Object.IsUTracing
    // 0x377DE0
    // (Final | Native | Static | Public)
    public unsafe class IsUTracing_Parameters : BaseObject {
        public IsUTracing_Parameters() { }
        public IsUTracing_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.IsUTracing.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsUTracing;
    public static bool IsUTracing() {
        _ptrIsUTracing ??= FindFunction("Function Core.Object.IsUTracing");

        var @params = stackalloc byte[4];

        _ptrIsUTracing.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIsUTracing, @params);
        _ptrIsUTracing.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function Core.Object.SetUTracing
    // 0x36AC40
    // (Final | Native | Static | Public)
    public unsafe class SetUTracing_Parameters : BaseObject {
        public SetUTracing_Parameters() { }
        public SetUTracing_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.SetUTracing.bShouldUTrace
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bShouldUTrace {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSetUTracing;
    public static void SetUTracing(bool bShouldUTrace) {
        _ptrSetUTracing ??= FindFunction("Function Core.Object.SetUTracing");

        var @params = stackalloc byte[4];
        System.Buffer.MemoryCopy(&bShouldUTrace, @params, 4, 4);

        _ptrSetUTracing.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSetUTracing, @params);
        _ptrSetUTracing.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.GetFuncName
    // 0x36A3F0
    // (Final | Native | Static | Public)
    public unsafe class GetFuncName_Parameters : BaseObject {
        public GetFuncName_Parameters() { }
        public GetFuncName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.GetFuncName.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public FName ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }
    }
    private static UFunction _ptrGetFuncName;
    public static FName GetFuncName() {
        _ptrGetFuncName ??= FindFunction("Function Core.Object.GetFuncName");

        var @params = stackalloc byte[8];

        _ptrGetFuncName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFuncName, @params);
        _ptrGetFuncName.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.DebugBreak
    // 0x36A490
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class DebugBreak_Parameters : BaseObject {
        public DebugBreak_Parameters() { }
        public DebugBreak_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.DebugBreak.UserFlags
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public int UserFlags {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // ByteProperty Core.Object.DebugBreak.DebuggerType
        // 0x4 (0x1)
        // (OptionalParam | Param)
        public EDebugBreakType DebuggerType {
            get => *(EDebugBreakType*)(Pointer + 4);
            set => *(EDebugBreakType*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrDebugBreak;
    public static void DebugBreak(int UserFlags = 0, EDebugBreakType DebuggerType = 0) {
        _ptrDebugBreak ??= FindFunction("Function Core.Object.DebugBreak");

        var @params = stackalloc byte[5];
        System.Buffer.MemoryCopy(&UserFlags, @params, 4, 4);
        System.Buffer.MemoryCopy(&DebuggerType, @params + 4, 1, 1);

        _ptrDebugBreak.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDebugBreak, @params);
        _ptrDebugBreak.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.GetScriptTrace
    // 0x36ABB0
    // (Final | Native | Static | Public)
    public unsafe class GetScriptTrace_Parameters : BaseObject {
        public GetScriptTrace_Parameters() { }
        public GetScriptTrace_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.GetScriptTrace.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetScriptTrace;
    public static FString GetScriptTrace() {
        _ptrGetScriptTrace ??= FindFunction("Function Core.Object.GetScriptTrace");

        var @params = stackalloc byte[16];

        _ptrGetScriptTrace.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetScriptTrace, @params);
        _ptrGetScriptTrace.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.ScriptTrace
    // 0x36A530
    // (Final | Native | Static | Public)
    public unsafe class ScriptTrace_Parameters : BaseObject {
        public ScriptTrace_Parameters() { }
        public ScriptTrace_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrScriptTrace;
    public static void ScriptTrace() {
        _ptrScriptTrace ??= FindFunction("Function Core.Object.ScriptTrace");

        _ptrScriptTrace.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrScriptTrace, null);
        _ptrScriptTrace.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Object.ParseLocalizedPropertyPath
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class ParseLocalizedPropertyPath_Parameters : BaseObject {
        public ParseLocalizedPropertyPath_Parameters() { }
        public ParseLocalizedPropertyPath_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ParseLocalizedPropertyPath.PathName
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString PathName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.ParseLocalizedPropertyPath.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrParseLocalizedPropertyPath;
    public static FString ParseLocalizedPropertyPath(FString PathName) {
        _ptrParseLocalizedPropertyPath ??= FindFunction("Function Core.Object.ParseLocalizedPropertyPath");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)PathName.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrParseLocalizedPropertyPath, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Localize
    // 0x367B40
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class Localize_Parameters : BaseObject {
        public Localize_Parameters() { }
        public Localize_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Localize.SectionName
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString SectionName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Localize.KeyName
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString KeyName {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.Localize.PackageName
        // 0x20 (0x10)
        // (OptionalParam | Param | CoerceParam | NeedCtorLink)
        public FString PackageName {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty Core.Object.Localize.bOptional
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bOptional {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.Localize.ReturnValue
        // 0x38 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrLocalize;
    public static FString Localize(FString SectionName, FString KeyName, FString PackageName = null, bool bOptional = false) {
        _ptrLocalize ??= FindFunction("Function Core.Object.Localize");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)SectionName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)KeyName.Pointer, @params + 16, 16, 16);
        if (PackageName != null) System.Buffer.MemoryCopy((void*)PackageName.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bOptional, @params + 48, 4, 4);

        _ptrLocalize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLocalize, @params);
        _ptrLocalize.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.WarnInternal
    // 0x366800 (iNative: 232)
    // (Final | Native | Static | Public)
    public unsafe class WarnInternal_Parameters : BaseObject {
        public WarnInternal_Parameters() { }
        public WarnInternal_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.WarnInternal.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrWarnInternal;
    public static void WarnInternal(FString S) {
        _ptrWarnInternal ??= FindFunction("Function Core.Object.WarnInternal");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        _ptrWarnInternal.iNative = 0;
        _ptrWarnInternal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrWarnInternal, @params);
        _ptrWarnInternal.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrWarnInternal.iNative = 232;
    }

    // Function Core.Object.LogInternal
    // 0x3666D0 (iNative: 231)
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class LogInternal_Parameters : BaseObject {
        public LogInternal_Parameters() { }
        public LogInternal_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.LogInternal.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // NameProperty Core.Object.LogInternal.Tag
        // 0x10 (0x8)
        // (OptionalParam | Param)
        public FName Tag {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }

        // BoolProperty Core.Object.LogInternal.bFileOnly
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bFileOnly {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLogInternal;
    public static void LogInternal(FString S, FName Tag = null, bool bFileOnly = false) {
        _ptrLogInternal ??= FindFunction("Function Core.Object.LogInternal");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);
        if (Tag != null) System.Buffer.MemoryCopy((void*)Tag.Pointer, @params + 16, 8, 8);
        System.Buffer.MemoryCopy(&bFileOnly, @params + 24, 4, 4);

        _ptrLogInternal.iNative = 0;
        _ptrLogInternal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLogInternal, @params);
        _ptrLogInternal.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLogInternal.iNative = 231;
    }

    // Function Core.Object.LinearColorLerp
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class LinearColorLerp_Parameters : BaseObject {
        public LinearColorLerp_Parameters() { }
        public LinearColorLerp_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LinearColorLerp.ColorA
        // 0x0 (0x10)
        // (Param)
        public FLinearColor ColorA {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.LinearColorLerp.ColorB
        // 0x10 (0x10)
        // (Param)
        public FLinearColor ColorB {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // FloatProperty Core.Object.LinearColorLerp.Alpha
        // 0x20 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 32);
            set => *(float*)(Pointer + 32) = value;
        }

        // StructProperty Core.Object.LinearColorLerp.ReturnValue
        // 0x24 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 16, 16);
        }
    }
    private static UFunction _ptrLinearColorLerp;
    public static FLinearColor LinearColorLerp(FLinearColor ColorA, FLinearColor ColorB, float Alpha) {
        _ptrLinearColorLerp ??= FindFunction("Function Core.Object.LinearColorLerp");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)ColorA.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ColorB.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&Alpha, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrLinearColorLerp, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_LinearColorLinearColor
    // 0x3750E0
    // (Final | Defined | Operator | Static | Public)
    public unsafe class Subtract_LinearColorLinearColor_Parameters : BaseObject {
        public Subtract_LinearColorLinearColor_Parameters() { }
        public Subtract_LinearColorLinearColor_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_LinearColorLinearColor.A
        // 0x0 (0x10)
        // (Param)
        public FLinearColor A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.Subtract_LinearColorLinearColor.B
        // 0x10 (0x10)
        // (Param)
        public FLinearColor B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty Core.Object.Subtract_LinearColorLinearColor.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrSubtract_LinearColorLinearColor;
    public static FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B) {
        _ptrSubtract_LinearColorLinearColor ??= FindFunction("Function Core.Object.Subtract_LinearColorLinearColor");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        StaticClass.ProcessEvent(_ptrSubtract_LinearColorLinearColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_LinearColorFloat
    // 0x3750E0
    // (Final | Defined | Operator | Static | Public)
    public unsafe class Multiply_LinearColorFloat_Parameters : BaseObject {
        public Multiply_LinearColorFloat_Parameters() { }
        public Multiply_LinearColorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_LinearColorFloat.LC
        // 0x0 (0x10)
        // (Param)
        public FLinearColor LC {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // FloatProperty Core.Object.Multiply_LinearColorFloat.Mult
        // 0x10 (0x4)
        // (Param)
        public float Mult {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }

        // StructProperty Core.Object.Multiply_LinearColorFloat.ReturnValue
        // 0x14 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 20);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 20), 16, 16);
        }
    }
    private static UFunction _ptrMultiply_LinearColorFloat;
    public static FLinearColor Multiply_LinearColorFloat(FLinearColor LC, float Mult) {
        _ptrMultiply_LinearColorFloat ??= FindFunction("Function Core.Object.Multiply_LinearColorFloat");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)LC.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Mult, @params + 16, 4, 4);

        StaticClass.ProcessEvent(_ptrMultiply_LinearColorFloat, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 20, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.ConvertFromSRGB
    // 0x3696B0
    // (Final | Native | Static | Public)
    public unsafe class ConvertFromSRGB_Parameters : BaseObject {
        public ConvertFromSRGB_Parameters() { }
        public ConvertFromSRGB_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.ConvertFromSRGB.OldColor
        // 0x0 (0x10)
        // (Param)
        public FLinearColor OldColor {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.ConvertFromSRGB.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrConvertFromSRGB;
    public static FLinearColor ConvertFromSRGB(FLinearColor OldColor) {
        _ptrConvertFromSRGB ??= FindFunction("Function Core.Object.ConvertFromSRGB");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)OldColor.Pointer, @params, 16, 16);

        _ptrConvertFromSRGB.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrConvertFromSRGB, @params);
        _ptrConvertFromSRGB.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.LinearColorToColor
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class LinearColorToColor_Parameters : BaseObject {
        public LinearColorToColor_Parameters() { }
        public LinearColorToColor_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LinearColorToColor.OldColor
        // 0x0 (0x10)
        // (Param)
        public FLinearColor OldColor {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.LinearColorToColor.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 4, 4);
        }
    }
    private static UFunction _ptrLinearColorToColor;
    public static FColor LinearColorToColor(FLinearColor OldColor) {
        _ptrLinearColorToColor ??= FindFunction("Function Core.Object.LinearColorToColor");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OldColor.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrLinearColorToColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.ColorToLinearColor
    // 0x369460
    // (Final | Native | Static | Public)
    public unsafe class ColorToLinearColor_Parameters : BaseObject {
        public ColorToLinearColor_Parameters() { }
        public ColorToLinearColor_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.ColorToLinearColor.OldColor
        // 0x0 (0x4)
        // (Param)
        public FColor OldColor {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // StructProperty Core.Object.ColorToLinearColor.ReturnValue
        // 0x4 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 16, 16);
        }
    }
    private static UFunction _ptrColorToLinearColor;
    public static FLinearColor ColorToLinearColor(FColor OldColor) {
        _ptrColorToLinearColor ??= FindFunction("Function Core.Object.ColorToLinearColor");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)OldColor.Pointer, @params, 4, 4);

        _ptrColorToLinearColor.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrColorToLinearColor, @params);
        _ptrColorToLinearColor.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeLinearColor
    // 0x369330
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class MakeLinearColor_Parameters : BaseObject {
        public MakeLinearColor_Parameters() { }
        public MakeLinearColor_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.MakeLinearColor.R
        // 0x0 (0x4)
        // (Param)
        public float R {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.MakeLinearColor.G
        // 0x4 (0x4)
        // (Param)
        public float G {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.MakeLinearColor.B
        // 0x8 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.MakeLinearColor.A
        // 0xC (0x4)
        // (OptionalParam | Param)
        public float A {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.MakeLinearColor.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FLinearColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrMakeLinearColor;
    public static FLinearColor MakeLinearColor(float R, float G, float B, float A = 0) {
        _ptrMakeLinearColor ??= FindFunction("Function Core.Object.MakeLinearColor");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy(&R, @params, 4, 4);
        System.Buffer.MemoryCopy(&G, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&A, @params + 12, 4, 4);

        _ptrMakeLinearColor.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMakeLinearColor, @params);
        _ptrMakeLinearColor.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.LerpColor
    // 0x369530
    // (Final | Native | Static | Public)
    public unsafe class LerpColor_Parameters : BaseObject {
        public LerpColor_Parameters() { }
        public LerpColor_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LerpColor.A
        // 0x0 (0x4)
        // (Param)
        public FColor A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // StructProperty Core.Object.LerpColor.B
        // 0x4 (0x4)
        // (Param)
        public FColor B {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }

        // FloatProperty Core.Object.LerpColor.Alpha
        // 0x8 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.LerpColor.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 4, 4);
        }
    }
    private static UFunction _ptrLerpColor;
    public static FColor LerpColor(FColor A, FColor B, float Alpha) {
        _ptrLerpColor ??= FindFunction("Function Core.Object.LerpColor");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Alpha, @params + 8, 4, 4);

        _ptrLerpColor.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLerpColor, @params);
        _ptrLerpColor.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeColor
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasDefaults)
    public unsafe class MakeColor_Parameters : BaseObject {
        public MakeColor_Parameters() { }
        public MakeColor_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.MakeColor.R
        // 0x0 (0x1)
        // (Param)
        public byte R {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.MakeColor.G
        // 0x1 (0x1)
        // (Param)
        public byte G {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.MakeColor.B
        // 0x2 (0x1)
        // (Param)
        public byte B {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }

        // ByteProperty Core.Object.MakeColor.A
        // 0x3 (0x1)
        // (OptionalParam | Param)
        public byte A {
            get => *(byte*)(Pointer + 3);
            set => *(byte*)(Pointer + 3) = value;
        }

        // StructProperty Core.Object.MakeColor.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }
    }
    private static UFunction _ptrMakeColor;
    public static FColor MakeColor(byte R, byte G, byte B, byte A = 0) {
        _ptrMakeColor ??= FindFunction("Function Core.Object.MakeColor");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&R, @params, 1, 1);
        System.Buffer.MemoryCopy(&G, @params + 1, 1, 1);
        System.Buffer.MemoryCopy(&B, @params + 2, 1, 1);
        System.Buffer.MemoryCopy(&A, @params + 3, 1, 1);

        StaticClass.ProcessEvent(_ptrMakeColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Add_ColorColor
    // 0x3750E0
    // (Final | Defined | Operator | Static | Public)
    public unsafe class Add_ColorColor_Parameters : BaseObject {
        public Add_ColorColor_Parameters() { }
        public Add_ColorColor_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Add_ColorColor.A
        // 0x0 (0x4)
        // (Param)
        public FColor A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // StructProperty Core.Object.Add_ColorColor.B
        // 0x4 (0x4)
        // (Param)
        public FColor B {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }

        // StructProperty Core.Object.Add_ColorColor.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 4, 4);
        }
    }
    private static UFunction _ptrAdd_ColorColor;
    public static FColor Add_ColorColor(FColor A, FColor B) {
        _ptrAdd_ColorColor ??= FindFunction("Function Core.Object.Add_ColorColor");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrAdd_ColorColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_ColorFloat
    // 0x3750E0
    // (Final | Defined | Operator | Static | Public)
    public unsafe class Multiply_ColorFloat_Parameters : BaseObject {
        public Multiply_ColorFloat_Parameters() { }
        public Multiply_ColorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_ColorFloat.A
        // 0x0 (0x4)
        // (Param)
        public FColor A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // FloatProperty Core.Object.Multiply_ColorFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // StructProperty Core.Object.Multiply_ColorFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 4, 4);
        }
    }
    private static UFunction _ptrMultiply_ColorFloat;
    public static FColor Multiply_ColorFloat(FColor A, float B) {
        _ptrMultiply_ColorFloat ??= FindFunction("Function Core.Object.Multiply_ColorFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrMultiply_ColorFloat, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_FloatColor
    // 0x3750E0
    // (Final | Defined | Operator | Static | Public)
    public unsafe class Multiply_FloatColor_Parameters : BaseObject {
        public Multiply_FloatColor_Parameters() { }
        public Multiply_FloatColor_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Multiply_FloatColor.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.Multiply_FloatColor.B
        // 0x4 (0x4)
        // (Param)
        public FColor B {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }

        // StructProperty Core.Object.Multiply_FloatColor.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 4, 4);
        }
    }
    private static UFunction _ptrMultiply_FloatColor;
    public static FColor Multiply_FloatColor(float A, FColor B) {
        _ptrMultiply_FloatColor ??= FindFunction("Function Core.Object.Multiply_FloatColor");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrMultiply_FloatColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_ColorColor
    // 0x3750E0
    // (Final | Defined | Operator | Static | Public)
    public unsafe class Subtract_ColorColor_Parameters : BaseObject {
        public Subtract_ColorColor_Parameters() { }
        public Subtract_ColorColor_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_ColorColor.A
        // 0x0 (0x4)
        // (Param)
        public FColor A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 4, 4);
        }

        // StructProperty Core.Object.Subtract_ColorColor.B
        // 0x4 (0x4)
        // (Param)
        public FColor B {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 4, 4);
        }

        // StructProperty Core.Object.Subtract_ColorColor.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 4, 4);
        }
    }
    private static UFunction _ptrSubtract_ColorColor;
    public static FColor Subtract_ColorColor(FColor A, FColor B) {
        _ptrSubtract_ColorColor ??= FindFunction("Function Core.Object.Subtract_ColorColor");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrSubtract_ColorColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.EvalInterpCurveVector2D
    // 0x365F70
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EvalInterpCurveVector2D_Parameters : BaseObject {
        public EvalInterpCurveVector2D_Parameters() { }
        public EvalInterpCurveVector2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.EvalInterpCurveVector2D.Vector2DCurve
        // 0x0 (0x18)
        // (Const | Param | OutParam | NeedCtorLink)
        public FInterpCurveVector2D Vector2DCurve {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // FloatProperty Core.Object.EvalInterpCurveVector2D.InVal
        // 0x18 (0x4)
        // (Param)
        public float InVal {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // StructProperty Core.Object.EvalInterpCurveVector2D.ReturnValue
        // 0x1C (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 8, 8);
        }
    }
    private static UFunction _ptrEvalInterpCurveVector2D;
    public static FVector2D EvalInterpCurveVector2D(ref FInterpCurveVector2D Vector2DCurve, float InVal) {
        _ptrEvalInterpCurveVector2D ??= FindFunction("Function Core.Object.EvalInterpCurveVector2D");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Vector2DCurve.Pointer, @params, 24, 24);
        System.Buffer.MemoryCopy(&InVal, @params + 24, 4, 4);

        _ptrEvalInterpCurveVector2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEvalInterpCurveVector2D, @params);
        _ptrEvalInterpCurveVector2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _Vector2DCurvePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params, (void*)_Vector2DCurvePtr, 24, 24);
        Vector2DCurve = new(_Vector2DCurvePtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 28, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.AutoSetTangentsVector
    // 0x366200
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class AutoSetTangentsVector_Parameters : BaseObject {
        public AutoSetTangentsVector_Parameters() { }
        public AutoSetTangentsVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.AutoSetTangentsVector.Curve
        // 0x0 (0x18)
        // (Param | OutParam | NeedCtorLink)
        public FInterpCurveVector Curve {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAutoSetTangentsVector;
    public static void AutoSetTangentsVector(ref FInterpCurveVector Curve) {
        _ptrAutoSetTangentsVector ??= FindFunction("Function Core.Object.AutoSetTangentsVector");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Curve.Pointer, @params, 24, 24);

        _ptrAutoSetTangentsVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAutoSetTangentsVector, @params);
        _ptrAutoSetTangentsVector.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _CurvePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params, (void*)_CurvePtr, 24, 24);
        Curve = new(_CurvePtr) { Allocated = true };
    }

    // Function Core.Object.EvalInterpCurveVector
    // 0x3660B0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EvalInterpCurveVector_Parameters : BaseObject {
        public EvalInterpCurveVector_Parameters() { }
        public EvalInterpCurveVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.EvalInterpCurveVector.VectorCurve
        // 0x0 (0x18)
        // (Const | Param | OutParam | NeedCtorLink)
        public FInterpCurveVector VectorCurve {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // FloatProperty Core.Object.EvalInterpCurveVector.InVal
        // 0x18 (0x4)
        // (Param)
        public float InVal {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // StructProperty Core.Object.EvalInterpCurveVector.ReturnValue
        // 0x1C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }
    }
    private static UFunction _ptrEvalInterpCurveVector;
    public static FVector EvalInterpCurveVector(ref FInterpCurveVector VectorCurve, float InVal) {
        _ptrEvalInterpCurveVector ??= FindFunction("Function Core.Object.EvalInterpCurveVector");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)VectorCurve.Pointer, @params, 24, 24);
        System.Buffer.MemoryCopy(&InVal, @params + 24, 4, 4);

        _ptrEvalInterpCurveVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEvalInterpCurveVector, @params);
        _ptrEvalInterpCurveVector.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _VectorCurvePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params, (void*)_VectorCurvePtr, 24, 24);
        VectorCurve = new(_VectorCurvePtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 28, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.AutoSetTangentsFloat
    // 0x366410
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class AutoSetTangentsFloat_Parameters : BaseObject {
        public AutoSetTangentsFloat_Parameters() { }
        public AutoSetTangentsFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.AutoSetTangentsFloat.Curve
        // 0x0 (0x18)
        // (Param | OutParam | NeedCtorLink)
        public FInterpCurveFloat Curve {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrAutoSetTangentsFloat;
    public static void AutoSetTangentsFloat(ref FInterpCurveFloat Curve) {
        _ptrAutoSetTangentsFloat ??= FindFunction("Function Core.Object.AutoSetTangentsFloat");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Curve.Pointer, @params, 24, 24);

        _ptrAutoSetTangentsFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAutoSetTangentsFloat, @params);
        _ptrAutoSetTangentsFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _CurvePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params, (void*)_CurvePtr, 24, 24);
        Curve = new(_CurvePtr) { Allocated = true };
    }

    // Function Core.Object.EvalInterpCurveFloat
    // 0x3662E0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EvalInterpCurveFloat_Parameters : BaseObject {
        public EvalInterpCurveFloat_Parameters() { }
        public EvalInterpCurveFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.EvalInterpCurveFloat.FloatCurve
        // 0x0 (0x18)
        // (Const | Param | OutParam | NeedCtorLink)
        public FInterpCurveFloat FloatCurve {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // FloatProperty Core.Object.EvalInterpCurveFloat.InVal
        // 0x18 (0x4)
        // (Param)
        public float InVal {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.EvalInterpCurveFloat.ReturnValue
        // 0x1C (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }
    }
    private static UFunction _ptrEvalInterpCurveFloat;
    public static float EvalInterpCurveFloat(ref FInterpCurveFloat FloatCurve, float InVal) {
        _ptrEvalInterpCurveFloat ??= FindFunction("Function Core.Object.EvalInterpCurveFloat");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)FloatCurve.Pointer, @params, 24, 24);
        System.Buffer.MemoryCopy(&InVal, @params + 24, 4, 4);

        _ptrEvalInterpCurveFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEvalInterpCurveFloat, @params);
        _ptrEvalInterpCurveFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _FloatCurvePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params, (void*)_FloatCurvePtr, 24, 24);
        FloatCurve = new(_FloatCurvePtr) { Allocated = true };

        return *(float*)(@params + 28);
    }

    // Function Core.Object.vect2d
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class vect2d_Parameters : BaseObject {
        public vect2d_Parameters() { }
        public vect2d_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.vect2d.InX
        // 0x0 (0x4)
        // (Param)
        public float InX {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.vect2d.InY
        // 0x4 (0x4)
        // (Param)
        public float InY {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // StructProperty Core.Object.vect2d.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }
    }
    private static UFunction _ptrvect2d;
    public static FVector2D vect2d(float InX, float InY) {
        _ptrvect2d ??= FindFunction("Function Core.Object.vect2d");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&InX, @params, 4, 4);
        System.Buffer.MemoryCopy(&InY, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrvect2d, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetMappedRangeValue
    // 0x365E60
    // (Final | Simulated | Native | Static | Public)
    public unsafe class GetMappedRangeValue_Parameters : BaseObject {
        public GetMappedRangeValue_Parameters() { }
        public GetMappedRangeValue_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetMappedRangeValue.InputRange
        // 0x0 (0x8)
        // (Param)
        public FVector2D InputRange {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.GetMappedRangeValue.OutputRange
        // 0x8 (0x8)
        // (Param)
        public FVector2D OutputRange {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // FloatProperty Core.Object.GetMappedRangeValue.Value
        // 0x10 (0x4)
        // (Param)
        public float Value {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }

        // FloatProperty Core.Object.GetMappedRangeValue.ReturnValue
        // 0x14 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 20);
            set => *(float*)(Pointer + 20) = value;
        }
    }
    private static UFunction _ptrGetMappedRangeValue;
    public static float GetMappedRangeValue(FVector2D InputRange, FVector2D OutputRange, float Value) {
        _ptrGetMappedRangeValue ??= FindFunction("Function Core.Object.GetMappedRangeValue");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)InputRange.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutputRange.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&Value, @params + 16, 4, 4);

        _ptrGetMappedRangeValue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetMappedRangeValue, @params);
        _ptrGetMappedRangeValue.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 20);
    }

    // Function Core.Object.GetRangePctByValue
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class GetRangePctByValue_Parameters : BaseObject {
        public GetRangePctByValue_Parameters() { }
        public GetRangePctByValue_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetRangePctByValue.Range
        // 0x0 (0x8)
        // (Param)
        public FVector2D Range {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.GetRangePctByValue.Value
        // 0x8 (0x4)
        // (Param)
        public float Value {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.GetRangePctByValue.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrGetRangePctByValue;
    public static float GetRangePctByValue(FVector2D Range, float Value) {
        _ptrGetRangePctByValue ??= FindFunction("Function Core.Object.GetRangePctByValue");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Range.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&Value, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrGetRangePctByValue, @params);

        return *(float*)(@params + 12);
    }

    // Function Core.Object.GetRangeValueByPct
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class GetRangeValueByPct_Parameters : BaseObject {
        public GetRangeValueByPct_Parameters() { }
        public GetRangeValueByPct_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetRangeValueByPct.Range
        // 0x0 (0x8)
        // (Param)
        public FVector2D Range {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.GetRangeValueByPct.Pct
        // 0x8 (0x4)
        // (Param)
        public float Pct {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.GetRangeValueByPct.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrGetRangeValueByPct;
    public static float GetRangeValueByPct(FVector2D Range, float Pct) {
        _ptrGetRangeValueByPct ??= FindFunction("Function Core.Object.GetRangeValueByPct");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Range.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&Pct, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrGetRangeValueByPct, @params);

        return *(float*)(@params + 12);
    }

    // Function Core.Object.V2DNormal
    // 0x357FB0
    // (Final | Native | Static | Public)
    public unsafe class V2DNormal_Parameters : BaseObject {
        public V2DNormal_Parameters() { }
        public V2DNormal_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.V2DNormal.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.V2DNormal.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }
    }
    private static UFunction _ptrV2DNormal;
    public static FVector2D V2DNormal(FVector2D A) {
        _ptrV2DNormal ??= FindFunction("Function Core.Object.V2DNormal");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);

        _ptrV2DNormal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrV2DNormal, @params);
        _ptrV2DNormal.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.V2DSizeSq
    // 0x357F30
    // (Final | Native | Static | Public)
    public unsafe class V2DSizeSq_Parameters : BaseObject {
        public V2DSizeSq_Parameters() { }
        public V2DSizeSq_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.V2DSizeSq.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.V2DSizeSq.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrV2DSizeSq;
    public static float V2DSizeSq(FVector2D A) {
        _ptrV2DSizeSq ??= FindFunction("Function Core.Object.V2DSizeSq");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);

        _ptrV2DSizeSq.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrV2DSizeSq, @params);
        _ptrV2DSizeSq.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.V2DSize
    // 0x357EA0
    // (Final | Native | Static | Public)
    public unsafe class V2DSize_Parameters : BaseObject {
        public V2DSize_Parameters() { }
        public V2DSize_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.V2DSize.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.V2DSize.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrV2DSize;
    public static float V2DSize(FVector2D A) {
        _ptrV2DSize ??= FindFunction("Function Core.Object.V2DSize");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);

        _ptrV2DSize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrV2DSize, @params);
        _ptrV2DSize.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Dot_Vector2DVector2D
    // 0x357DF0
    // (Final | Native | Operator | Static | Public)
    public unsafe class Dot_Vector2DVector2D_Parameters : BaseObject {
        public Dot_Vector2DVector2D_Parameters() { }
        public Dot_Vector2DVector2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Dot_Vector2DVector2D.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.Dot_Vector2DVector2D.B
        // 0x8 (0x8)
        // (Param)
        public FVector2D B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // FloatProperty Core.Object.Dot_Vector2DVector2D.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrDot_Vector2DVector2D;
    public static float Dot_Vector2DVector2D(FVector2D A, FVector2D B) {
        _ptrDot_Vector2DVector2D ??= FindFunction("Function Core.Object.Dot_Vector2DVector2D");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrDot_Vector2DVector2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDot_Vector2DVector2D, @params);
        _ptrDot_Vector2DVector2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 16);
    }

    // Function Core.Object.SubtractEqual_Vector2DVector2D
    // 0x365D70
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_Vector2DVector2D_Parameters : BaseObject {
        public SubtractEqual_Vector2DVector2D_Parameters() { }
        public SubtractEqual_Vector2DVector2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.SubtractEqual_Vector2DVector2D.A
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.SubtractEqual_Vector2DVector2D.B
        // 0x8 (0x8)
        // (Param)
        public FVector2D B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // StructProperty Core.Object.SubtractEqual_Vector2DVector2D.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }
    }
    private static UFunction _ptrSubtractEqual_Vector2DVector2D;
    public static FVector2D SubtractEqual_Vector2DVector2D(ref FVector2D A, FVector2D B) {
        _ptrSubtractEqual_Vector2DVector2D ??= FindFunction("Function Core.Object.SubtractEqual_Vector2DVector2D");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrSubtractEqual_Vector2DVector2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_Vector2DVector2D, @params);
        _ptrSubtractEqual_Vector2DVector2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _APtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 8, 8);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.AddEqual_Vector2DVector2D
    // 0x365C80
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddEqual_Vector2DVector2D_Parameters : BaseObject {
        public AddEqual_Vector2DVector2D_Parameters() { }
        public AddEqual_Vector2DVector2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.AddEqual_Vector2DVector2D.A
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.AddEqual_Vector2DVector2D.B
        // 0x8 (0x8)
        // (Param)
        public FVector2D B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // StructProperty Core.Object.AddEqual_Vector2DVector2D.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }
    }
    private static UFunction _ptrAddEqual_Vector2DVector2D;
    public static FVector2D AddEqual_Vector2DVector2D(ref FVector2D A, FVector2D B) {
        _ptrAddEqual_Vector2DVector2D ??= FindFunction("Function Core.Object.AddEqual_Vector2DVector2D");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrAddEqual_Vector2DVector2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddEqual_Vector2DVector2D, @params);
        _ptrAddEqual_Vector2DVector2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _APtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 8, 8);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.DivideEqual_Vector2DFloat
    // 0x365B80
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class DivideEqual_Vector2DFloat_Parameters : BaseObject {
        public DivideEqual_Vector2DFloat_Parameters() { }
        public DivideEqual_Vector2DFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.DivideEqual_Vector2DFloat.A
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.DivideEqual_Vector2DFloat.B
        // 0x8 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.DivideEqual_Vector2DFloat.ReturnValue
        // 0xC (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }
    }
    private static UFunction _ptrDivideEqual_Vector2DFloat;
    public static FVector2D DivideEqual_Vector2DFloat(ref FVector2D A, float B) {
        _ptrDivideEqual_Vector2DFloat ??= FindFunction("Function Core.Object.DivideEqual_Vector2DFloat");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrDivideEqual_Vector2DFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivideEqual_Vector2DFloat, @params);
        _ptrDivideEqual_Vector2DFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _APtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 8, 8);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MultiplyEqual_Vector2DFloat
    // 0x365A80
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_Vector2DFloat_Parameters : BaseObject {
        public MultiplyEqual_Vector2DFloat_Parameters() { }
        public MultiplyEqual_Vector2DFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MultiplyEqual_Vector2DFloat.A
        // 0x0 (0x8)
        // (Param | OutParam)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.MultiplyEqual_Vector2DFloat.B
        // 0x8 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.MultiplyEqual_Vector2DFloat.ReturnValue
        // 0xC (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }
    }
    private static UFunction _ptrMultiplyEqual_Vector2DFloat;
    public static FVector2D MultiplyEqual_Vector2DFloat(ref FVector2D A, float B) {
        _ptrMultiplyEqual_Vector2DFloat ??= FindFunction("Function Core.Object.MultiplyEqual_Vector2DFloat");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrMultiplyEqual_Vector2DFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_Vector2DFloat, @params);
        _ptrMultiplyEqual_Vector2DFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _APtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 8, 8);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Divide_Vector2DFloat
    // 0x3659C0
    // (Final | Native | Operator | Static | Public)
    public unsafe class Divide_Vector2DFloat_Parameters : BaseObject {
        public Divide_Vector2DFloat_Parameters() { }
        public Divide_Vector2DFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Divide_Vector2DFloat.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.Divide_Vector2DFloat.B
        // 0x8 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.Divide_Vector2DFloat.ReturnValue
        // 0xC (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }
    }
    private static UFunction _ptrDivide_Vector2DFloat;
    public static FVector2D Divide_Vector2DFloat(FVector2D A, float B) {
        _ptrDivide_Vector2DFloat ??= FindFunction("Function Core.Object.Divide_Vector2DFloat");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrDivide_Vector2DFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivide_Vector2DFloat, @params);
        _ptrDivide_Vector2DFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_Vector2DFloat
    // 0x365900
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_Vector2DFloat_Parameters : BaseObject {
        public Multiply_Vector2DFloat_Parameters() { }
        public Multiply_Vector2DFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_Vector2DFloat.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // FloatProperty Core.Object.Multiply_Vector2DFloat.B
        // 0x8 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.Multiply_Vector2DFloat.ReturnValue
        // 0xC (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }
    }
    private static UFunction _ptrMultiply_Vector2DFloat;
    public static FVector2D Multiply_Vector2DFloat(FVector2D A, float B) {
        _ptrMultiply_Vector2DFloat ??= FindFunction("Function Core.Object.Multiply_Vector2DFloat");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrMultiply_Vector2DFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_Vector2DFloat, @params);
        _ptrMultiply_Vector2DFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_Vector2DVector2D
    // 0x365850
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_Vector2DVector2D_Parameters : BaseObject {
        public Subtract_Vector2DVector2D_Parameters() { }
        public Subtract_Vector2DVector2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_Vector2DVector2D.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.Subtract_Vector2DVector2D.B
        // 0x8 (0x8)
        // (Param)
        public FVector2D B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // StructProperty Core.Object.Subtract_Vector2DVector2D.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }
    }
    private static UFunction _ptrSubtract_Vector2DVector2D;
    public static FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B) {
        _ptrSubtract_Vector2DVector2D ??= FindFunction("Function Core.Object.Subtract_Vector2DVector2D");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrSubtract_Vector2DVector2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_Vector2DVector2D, @params);
        _ptrSubtract_Vector2DVector2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Add_Vector2DVector2D
    // 0x3657A0
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_Vector2DVector2D_Parameters : BaseObject {
        public Add_Vector2DVector2D_Parameters() { }
        public Add_Vector2DVector2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Add_Vector2DVector2D.A
        // 0x0 (0x8)
        // (Param)
        public FVector2D A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // StructProperty Core.Object.Add_Vector2DVector2D.B
        // 0x8 (0x8)
        // (Param)
        public FVector2D B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // StructProperty Core.Object.Add_Vector2DVector2D.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public FVector2D ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 8, 8);
        }
    }
    private static UFunction _ptrAdd_Vector2DVector2D;
    public static FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B) {
        _ptrAdd_Vector2DVector2D ??= FindFunction("Function Core.Object.Add_Vector2DVector2D");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrAdd_Vector2DVector2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_Vector2DVector2D, @params);
        _ptrAdd_Vector2DVector2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(8);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 8, 8);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_QuatQuat
    // 0x3656C0 (iNative: 271)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_QuatQuat_Parameters : BaseObject {
        public Subtract_QuatQuat_Parameters() { }
        public Subtract_QuatQuat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_QuatQuat.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.Subtract_QuatQuat.B
        // 0x10 (0x10)
        // (Param)
        public FQuat B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty Core.Object.Subtract_QuatQuat.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrSubtract_QuatQuat;
    public static FQuat Subtract_QuatQuat(FQuat A, FQuat B) {
        _ptrSubtract_QuatQuat ??= FindFunction("Function Core.Object.Subtract_QuatQuat");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrSubtract_QuatQuat.iNative = 0;
        _ptrSubtract_QuatQuat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_QuatQuat, @params);
        _ptrSubtract_QuatQuat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_QuatQuat.iNative = 271;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Add_QuatQuat
    // 0x3655E0 (iNative: 270)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_QuatQuat_Parameters : BaseObject {
        public Add_QuatQuat_Parameters() { }
        public Add_QuatQuat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Add_QuatQuat.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.Add_QuatQuat.B
        // 0x10 (0x10)
        // (Param)
        public FQuat B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty Core.Object.Add_QuatQuat.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAdd_QuatQuat;
    public static FQuat Add_QuatQuat(FQuat A, FQuat B) {
        _ptrAdd_QuatQuat ??= FindFunction("Function Core.Object.Add_QuatQuat");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrAdd_QuatQuat.iNative = 0;
        _ptrAdd_QuatQuat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_QuatQuat, @params);
        _ptrAdd_QuatQuat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAdd_QuatQuat.iNative = 270;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatSlerp
    // 0x3654B0
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class QuatSlerp_Parameters : BaseObject {
        public QuatSlerp_Parameters() { }
        public QuatSlerp_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatSlerp.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.QuatSlerp.B
        // 0x10 (0x10)
        // (Param)
        public FQuat B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // FloatProperty Core.Object.QuatSlerp.Alpha
        // 0x20 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 32);
            set => *(float*)(Pointer + 32) = value;
        }

        // BoolProperty Core.Object.QuatSlerp.bShortestPath
        // 0x24 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bShortestPath {
            get => (*(uint*)(Pointer + 36) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 36) |= 0x1;
                else *(uint*)(Pointer + 36) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x8

        // StructProperty Core.Object.QuatSlerp.ReturnValue
        // 0x30 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }
    private static UFunction _ptrQuatSlerp;
    public static FQuat QuatSlerp(FQuat A, FQuat B, float Alpha, bool bShortestPath = false) {
        _ptrQuatSlerp ??= FindFunction("Function Core.Object.QuatSlerp");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&Alpha, @params + 32, 4, 4);
        System.Buffer.MemoryCopy(&bShortestPath, @params + 36, 4, 4);

        _ptrQuatSlerp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatSlerp, @params);
        _ptrQuatSlerp.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 48, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatToRotator
    // 0x365290
    // (Final | Native | Static | Public)
    public unsafe class QuatToRotator_Parameters : BaseObject {
        public QuatToRotator_Parameters() { }
        public QuatToRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatToRotator.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.QuatToRotator.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrQuatToRotator;
    public static FRotator QuatToRotator(FQuat A) {
        _ptrQuatToRotator ??= FindFunction("Function Core.Object.QuatToRotator");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);

        _ptrQuatToRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatToRotator, @params);
        _ptrQuatToRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatFromRotator
    // 0x364EF0
    // (Final | Native | Static | Public)
    public unsafe class QuatFromRotator_Parameters : BaseObject {
        public QuatFromRotator_Parameters() { }
        public QuatFromRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatFromRotator.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // MISSED OFFSET: 0x4

        // StructProperty Core.Object.QuatFromRotator.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQuatFromRotator;
    public static FQuat QuatFromRotator(FRotator A) {
        _ptrQuatFromRotator ??= FindFunction("Function Core.Object.QuatFromRotator");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrQuatFromRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatFromRotator, @params);
        _ptrQuatFromRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatFromAxisAndAngle
    // 0x364CF0
    // (Final | Native | Static | Public)
    public unsafe class QuatFromAxisAndAngle_Parameters : BaseObject {
        public QuatFromAxisAndAngle_Parameters() { }
        public QuatFromAxisAndAngle_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatFromAxisAndAngle.Axis
        // 0x0 (0xC)
        // (Param)
        public FVector Axis {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.QuatFromAxisAndAngle.Angle
        // 0xC (0x4)
        // (Param)
        public float Angle {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.QuatFromAxisAndAngle.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQuatFromAxisAndAngle;
    public static FQuat QuatFromAxisAndAngle(FVector Axis, float Angle) {
        _ptrQuatFromAxisAndAngle ??= FindFunction("Function Core.Object.QuatFromAxisAndAngle");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Axis.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&Angle, @params + 12, 4, 4);

        _ptrQuatFromAxisAndAngle.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatFromAxisAndAngle, @params);
        _ptrQuatFromAxisAndAngle.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatFindBetween
    // 0x364C40
    // (Final | Native | Static | Public)
    public unsafe class QuatFindBetween_Parameters : BaseObject {
        public QuatFindBetween_Parameters() { }
        public QuatFindBetween_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatFindBetween.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.QuatFindBetween.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // MISSED OFFSET: 0x8

        // StructProperty Core.Object.QuatFindBetween.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrQuatFindBetween;
    public static FQuat QuatFindBetween(FVector A, FVector B) {
        _ptrQuatFindBetween ??= FindFunction("Function Core.Object.QuatFindBetween");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrQuatFindBetween.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatFindBetween, @params);
        _ptrQuatFindBetween.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatRotateVector
    // 0x364A30
    // (Final | Native | Static | Public)
    public unsafe class QuatRotateVector_Parameters : BaseObject {
        public QuatRotateVector_Parameters() { }
        public QuatRotateVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatRotateVector.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.QuatRotateVector.B
        // 0x10 (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }

        // StructProperty Core.Object.QuatRotateVector.ReturnValue
        // 0x1C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }
    }
    private static UFunction _ptrQuatRotateVector;
    public static FVector QuatRotateVector(FQuat A, FVector B) {
        _ptrQuatRotateVector ??= FindFunction("Function Core.Object.QuatRotateVector");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 12, 12);

        _ptrQuatRotateVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatRotateVector, @params);
        _ptrQuatRotateVector.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 28, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatInvert
    // 0x364980
    // (Final | Native | Static | Public)
    public unsafe class QuatInvert_Parameters : BaseObject {
        public QuatInvert_Parameters() { }
        public QuatInvert_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatInvert.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.QuatInvert.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrQuatInvert;
    public static FQuat QuatInvert(FQuat A) {
        _ptrQuatInvert ??= FindFunction("Function Core.Object.QuatInvert");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);

        _ptrQuatInvert.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatInvert, @params);
        _ptrQuatInvert.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.QuatDot
    // 0x3648B0
    // (Final | Native | Static | Public)
    public unsafe class QuatDot_Parameters : BaseObject {
        public QuatDot_Parameters() { }
        public QuatDot_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatDot.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.QuatDot.B
        // 0x10 (0x10)
        // (Param)
        public FQuat B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // FloatProperty Core.Object.QuatDot.ReturnValue
        // 0x20 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 32);
            set => *(float*)(Pointer + 32) = value;
        }
    }
    private static UFunction _ptrQuatDot;
    public static float QuatDot(FQuat A, FQuat B) {
        _ptrQuatDot ??= FindFunction("Function Core.Object.QuatDot");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrQuatDot.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatDot, @params);
        _ptrQuatDot.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 32);
    }

    // Function Core.Object.QuatProduct
    // 0x3647C0
    // (Final | Native | Static | Public)
    public unsafe class QuatProduct_Parameters : BaseObject {
        public QuatProduct_Parameters() { }
        public QuatProduct_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.QuatProduct.A
        // 0x0 (0x10)
        // (Param)
        public FQuat A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.QuatProduct.B
        // 0x10 (0x10)
        // (Param)
        public FQuat B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty Core.Object.QuatProduct.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrQuatProduct;
    public static FQuat QuatProduct(FQuat A, FQuat B) {
        _ptrQuatProduct ??= FindFunction("Function Core.Object.QuatProduct");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrQuatProduct.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQuatProduct, @params);
        _ptrQuatProduct.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MatrixGetAxis
    // 0x377FC0
    // (Final | Native | Static | Public)
    public unsafe class MatrixGetAxis_Parameters : BaseObject {
        public MatrixGetAxis_Parameters() { }
        public MatrixGetAxis_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MatrixGetAxis.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // ByteProperty Core.Object.MatrixGetAxis.Axis
        // 0x40 (0x1)
        // (Param)
        public EAxis Axis {
            get => *(EAxis*)(Pointer + 64);
            set => *(EAxis*)(Pointer + 64) = value;
        }

        // MISSED OFFSET: 0x3

        // StructProperty Core.Object.MatrixGetAxis.ReturnValue
        // 0x44 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 68);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 68), 12, 12);
        }
    }
    private static UFunction _ptrMatrixGetAxis;
    public static FVector MatrixGetAxis(FMatrix TM, EAxis Axis) {
        _ptrMatrixGetAxis ??= FindFunction("Function Core.Object.MatrixGetAxis");

        var @params = stackalloc byte[77];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy(&Axis, @params + 64, 1, 1);

        _ptrMatrixGetAxis.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMatrixGetAxis, @params);
        _ptrMatrixGetAxis.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 68, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MatrixGetOrigin
    // 0x3780F0
    // (Final | Native | Static | Public)
    public unsafe class MatrixGetOrigin_Parameters : BaseObject {
        public MatrixGetOrigin_Parameters() { }
        public MatrixGetOrigin_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MatrixGetOrigin.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.MatrixGetOrigin.ReturnValue
        // 0x40 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 12, 12);
        }
    }
    private static UFunction _ptrMatrixGetOrigin;
    public static FVector MatrixGetOrigin(FMatrix TM) {
        _ptrMatrixGetOrigin ??= FindFunction("Function Core.Object.MatrixGetOrigin");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);

        _ptrMatrixGetOrigin.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMatrixGetOrigin, @params);
        _ptrMatrixGetOrigin.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 64, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MatrixGetRotator
    // 0x378180
    // (Final | Native | Static | Public)
    public unsafe class MatrixGetRotator_Parameters : BaseObject {
        public MatrixGetRotator_Parameters() { }
        public MatrixGetRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MatrixGetRotator.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.MatrixGetRotator.ReturnValue
        // 0x40 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 12, 12);
        }
    }
    private static UFunction _ptrMatrixGetRotator;
    public static FRotator MatrixGetRotator(FMatrix TM) {
        _ptrMatrixGetRotator ??= FindFunction("Function Core.Object.MatrixGetRotator");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);

        _ptrMatrixGetRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMatrixGetRotator, @params);
        _ptrMatrixGetRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 64, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeRotationMatrix
    // 0x377E40
    // (Final | Native | Static | Public)
    public unsafe class MakeRotationMatrix_Parameters : BaseObject {
        public MakeRotationMatrix_Parameters() { }
        public MakeRotationMatrix_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MakeRotationMatrix.Rotation
        // 0x0 (0xC)
        // (Param)
        public FRotator Rotation {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // MISSED OFFSET: 0x4

        // StructProperty Core.Object.MakeRotationMatrix.ReturnValue
        // 0x10 (0x40)
        // (Param | OutParam | ReturnParam)
        public FMatrix ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 64, 64);
        }
    }
    private static UFunction _ptrMakeRotationMatrix;
    public static FMatrix MakeRotationMatrix(FRotator Rotation) {
        _ptrMakeRotationMatrix ??= FindFunction("Function Core.Object.MakeRotationMatrix");

        var @params = stackalloc byte[76];
        System.Buffer.MemoryCopy((void*)Rotation.Pointer, @params, 12, 12);

        _ptrMakeRotationMatrix.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMakeRotationMatrix, @params);
        _ptrMakeRotationMatrix.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(64);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 64, 64);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeRotationTranslationMatrix
    // 0x377EF0
    // (Final | Native | Static | Public)
    public unsafe class MakeRotationTranslationMatrix_Parameters : BaseObject {
        public MakeRotationTranslationMatrix_Parameters() { }
        public MakeRotationTranslationMatrix_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MakeRotationTranslationMatrix.Translation
        // 0x0 (0xC)
        // (Param)
        public FVector Translation {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.MakeRotationTranslationMatrix.Rotation
        // 0xC (0xC)
        // (Param)
        public FRotator Rotation {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // MISSED OFFSET: 0x8

        // StructProperty Core.Object.MakeRotationTranslationMatrix.ReturnValue
        // 0x20 (0x40)
        // (Param | OutParam | ReturnParam)
        public FMatrix ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 64, 64);
        }
    }
    private static UFunction _ptrMakeRotationTranslationMatrix;
    public static FMatrix MakeRotationTranslationMatrix(FVector Translation, FRotator Rotation) {
        _ptrMakeRotationTranslationMatrix ??= FindFunction("Function Core.Object.MakeRotationTranslationMatrix");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)Translation.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Rotation.Pointer, @params + 12, 12, 12);

        _ptrMakeRotationTranslationMatrix.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMakeRotationTranslationMatrix, @params);
        _ptrMakeRotationTranslationMatrix.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(64);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 64, 64);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.InverseTransformNormal
    // 0x377AB0
    // (Final | Native | Static | Public)
    public unsafe class InverseTransformNormal_Parameters : BaseObject {
        public InverseTransformNormal_Parameters() { }
        public InverseTransformNormal_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.InverseTransformNormal.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.InverseTransformNormal.A
        // 0x40 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 12, 12);
        }

        // StructProperty Core.Object.InverseTransformNormal.ReturnValue
        // 0x4C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 76);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 76), 12, 12);
        }
    }
    private static UFunction _ptrInverseTransformNormal;
    public static FVector InverseTransformNormal(FMatrix TM, FVector A) {
        _ptrInverseTransformNormal ??= FindFunction("Function Core.Object.InverseTransformNormal");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy((void*)A.Pointer, @params + 64, 12, 12);

        _ptrInverseTransformNormal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrInverseTransformNormal, @params);
        _ptrInverseTransformNormal.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 76, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.TransformNormal
    // 0x3783E0
    // (Final | Native | Static | Public)
    public unsafe class TransformNormal_Parameters : BaseObject {
        public TransformNormal_Parameters() { }
        public TransformNormal_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.TransformNormal.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.TransformNormal.A
        // 0x40 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 12, 12);
        }

        // StructProperty Core.Object.TransformNormal.ReturnValue
        // 0x4C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 76);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 76), 12, 12);
        }
    }
    private static UFunction _ptrTransformNormal;
    public static FVector TransformNormal(FMatrix TM, FVector A) {
        _ptrTransformNormal ??= FindFunction("Function Core.Object.TransformNormal");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy((void*)A.Pointer, @params + 64, 12, 12);

        _ptrTransformNormal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrTransformNormal, @params);
        _ptrTransformNormal.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 76, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.InverseTransformVector
    // 0x377C30
    // (Final | Native | Static | Public)
    public unsafe class InverseTransformVector_Parameters : BaseObject {
        public InverseTransformVector_Parameters() { }
        public InverseTransformVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.InverseTransformVector.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.InverseTransformVector.A
        // 0x40 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 12, 12);
        }

        // StructProperty Core.Object.InverseTransformVector.ReturnValue
        // 0x4C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 76);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 76), 12, 12);
        }
    }
    private static UFunction _ptrInverseTransformVector;
    public static FVector InverseTransformVector(FMatrix TM, FVector A) {
        _ptrInverseTransformVector ??= FindFunction("Function Core.Object.InverseTransformVector");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy((void*)A.Pointer, @params + 64, 12, 12);

        _ptrInverseTransformVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrInverseTransformVector, @params);
        _ptrInverseTransformVector.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 76, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.TransformVector
    // 0x378530
    // (Final | Native | Static | Public)
    public unsafe class TransformVector_Parameters : BaseObject {
        public TransformVector_Parameters() { }
        public TransformVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.TransformVector.TM
        // 0x0 (0x40)
        // (Param)
        public FMatrix TM {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.TransformVector.A
        // 0x40 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 12, 12);
        }

        // StructProperty Core.Object.TransformVector.ReturnValue
        // 0x4C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 76);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 76), 12, 12);
        }
    }
    private static UFunction _ptrTransformVector;
    public static FVector TransformVector(FMatrix TM, FVector A) {
        _ptrTransformVector ??= FindFunction("Function Core.Object.TransformVector");

        var @params = stackalloc byte[88];
        System.Buffer.MemoryCopy((void*)TM.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy((void*)A.Pointer, @params + 64, 12, 12);

        _ptrTransformVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrTransformVector, @params);
        _ptrTransformVector.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 76, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_MatrixMatrix
    // 0x378210
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_MatrixMatrix_Parameters : BaseObject {
        public Multiply_MatrixMatrix_Parameters() { }
        public Multiply_MatrixMatrix_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_MatrixMatrix.A
        // 0x0 (0x40)
        // (Param)
        public FMatrix A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 64, 64);
        }

        // StructProperty Core.Object.Multiply_MatrixMatrix.B
        // 0x40 (0x40)
        // (Param)
        public FMatrix B {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 64, 64);
        }

        // StructProperty Core.Object.Multiply_MatrixMatrix.ReturnValue
        // 0x80 (0x40)
        // (Param | OutParam | ReturnParam)
        public FMatrix ReturnValue {
            get => new(Pointer + 128);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 64, 64);
        }
    }
    private static UFunction _ptrMultiply_MatrixMatrix;
    public static FMatrix Multiply_MatrixMatrix(FMatrix A, FMatrix B) {
        _ptrMultiply_MatrixMatrix ??= FindFunction("Function Core.Object.Multiply_MatrixMatrix");

        var @params = stackalloc byte[192];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 64, 64);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 64, 64, 64);

        _ptrMultiply_MatrixMatrix.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_MatrixMatrix, @params);
        _ptrMultiply_MatrixMatrix.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(64);
        System.Buffer.MemoryCopy(@params + 128, (void*)_ReturnValuePtr, 64, 64);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.NotEqual_NameName
    // 0x357BC0 (iNative: 255)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_NameName_Parameters : BaseObject {
        public NotEqual_NameName_Parameters() { }
        public NotEqual_NameName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.NotEqual_NameName.A
        // 0x0 (0x8)
        // (Param)
        public FName A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // NameProperty Core.Object.NotEqual_NameName.B
        // 0x8 (0x8)
        // (Param)
        public FName B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // BoolProperty Core.Object.NotEqual_NameName.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_NameName;
    public static bool NotEqual_NameName(FName A, FName B) {
        _ptrNotEqual_NameName ??= FindFunction("Function Core.Object.NotEqual_NameName");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrNotEqual_NameName.iNative = 0;
        _ptrNotEqual_NameName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_NameName, @params);
        _ptrNotEqual_NameName.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_NameName.iNative = 255;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.EqualEqual_NameName
    // 0x357B10 (iNative: 254)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_NameName_Parameters : BaseObject {
        public EqualEqual_NameName_Parameters() { }
        public EqualEqual_NameName_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.EqualEqual_NameName.A
        // 0x0 (0x8)
        // (Param)
        public FName A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // NameProperty Core.Object.EqualEqual_NameName.B
        // 0x8 (0x8)
        // (Param)
        public FName B {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 8, 8);
        }

        // BoolProperty Core.Object.EqualEqual_NameName.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_NameName;
    public static bool EqualEqual_NameName(FName A, FName B) {
        _ptrEqualEqual_NameName ??= FindFunction("Function Core.Object.EqualEqual_NameName");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrEqualEqual_NameName.iNative = 0;
        _ptrEqualEqual_NameName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_NameName, @params);
        _ptrEqualEqual_NameName.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_NameName.iNative = 254;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.IsA
    // 0x367850 (iNative: 197)
    // (Final | Native | Public)
    public unsafe class IsA_Parameters : BaseObject {
        public IsA_Parameters() { }
        public IsA_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.Object.IsA.ClassName
        // 0x0 (0x8)
        // (Param)
        public FName ClassName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty Core.Object.IsA.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsA;
    public bool IsA(FName ClassName) {
        _ptrIsA ??= FindFunction("Function Core.Object.IsA");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)ClassName.Pointer, @params, 8, 8);

        _ptrIsA.iNative = 0;
        _ptrIsA.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsA, @params);
        _ptrIsA.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrIsA.iNative = 197;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.ClassIsChildOf
    // 0x366E40 (iNative: 258)
    // (Final | Native | Static | Public)
    public unsafe class ClassIsChildOf_Parameters : BaseObject {
        public ClassIsChildOf_Parameters() { }
        public ClassIsChildOf_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.Object.ClassIsChildOf.TestClass
        // 0x0 (0x8)
        // (Param)
        public UClass TestClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ClassProperty Core.Object.ClassIsChildOf.ParentClass
        // 0x8 (0x8)
        // (Param)
        public UClass ParentClass {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty Core.Object.ClassIsChildOf.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClassIsChildOf;
    public static bool ClassIsChildOf(UClass TestClass, UClass ParentClass) {
        _ptrClassIsChildOf ??= FindFunction("Function Core.Object.ClassIsChildOf");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)TestClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)ParentClass.Pointer, @params + 8, 8, 8);

        _ptrClassIsChildOf.iNative = 0;
        _ptrClassIsChildOf.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrClassIsChildOf, @params);
        _ptrClassIsChildOf.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrClassIsChildOf.iNative = 258;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.NotEqual_InterfaceInterface
    // 0x3665E0
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_InterfaceInterface_Parameters : BaseObject {
        public NotEqual_InterfaceInterface_Parameters() { }
        public NotEqual_InterfaceInterface_Parameters(nint pointer) : base(pointer) { }

        // InterfaceProperty Core.Object.NotEqual_InterfaceInterface.A
        // 0x0 (0x10)
        // (Param)
        public TInterface<UInterface> A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // InterfaceProperty Core.Object.NotEqual_InterfaceInterface.B
        // 0x10 (0x10)
        // (Param)
        public TInterface<UInterface> B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.NotEqual_InterfaceInterface.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_InterfaceInterface;
    public static bool NotEqual_InterfaceInterface(TInterface<UInterface> A, TInterface<UInterface> B) {
        _ptrNotEqual_InterfaceInterface ??= FindFunction("Function Core.Object.NotEqual_InterfaceInterface");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrNotEqual_InterfaceInterface.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_InterfaceInterface, @params);
        _ptrNotEqual_InterfaceInterface.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.EqualEqual_InterfaceInterface
    // 0x3664F0
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_InterfaceInterface_Parameters : BaseObject {
        public EqualEqual_InterfaceInterface_Parameters() { }
        public EqualEqual_InterfaceInterface_Parameters(nint pointer) : base(pointer) { }

        // InterfaceProperty Core.Object.EqualEqual_InterfaceInterface.A
        // 0x0 (0x10)
        // (Param)
        public TInterface<UInterface> A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // InterfaceProperty Core.Object.EqualEqual_InterfaceInterface.B
        // 0x10 (0x10)
        // (Param)
        public TInterface<UInterface> B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.EqualEqual_InterfaceInterface.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_InterfaceInterface;
    public static bool EqualEqual_InterfaceInterface(TInterface<UInterface> A, TInterface<UInterface> B) {
        _ptrEqualEqual_InterfaceInterface ??= FindFunction("Function Core.Object.EqualEqual_InterfaceInterface");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrEqualEqual_InterfaceInterface.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_InterfaceInterface, @params);
        _ptrEqualEqual_InterfaceInterface.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.NotEqual_ObjectObject
    // 0x357BC0 (iNative: 206)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_ObjectObject_Parameters : BaseObject {
        public NotEqual_ObjectObject_Parameters() { }
        public NotEqual_ObjectObject_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.NotEqual_ObjectObject.A
        // 0x0 (0x8)
        // (Param)
        public UObject A {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.Object.NotEqual_ObjectObject.B
        // 0x8 (0x8)
        // (Param)
        public UObject B {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty Core.Object.NotEqual_ObjectObject.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_ObjectObject;
    public static bool NotEqual_ObjectObject(UObject A, UObject B) {
        _ptrNotEqual_ObjectObject ??= FindFunction("Function Core.Object.NotEqual_ObjectObject");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrNotEqual_ObjectObject.iNative = 0;
        _ptrNotEqual_ObjectObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_ObjectObject, @params);
        _ptrNotEqual_ObjectObject.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_ObjectObject.iNative = 206;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.EqualEqual_ObjectObject
    // 0x357B10 (iNative: 207)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_ObjectObject_Parameters : BaseObject {
        public EqualEqual_ObjectObject_Parameters() { }
        public EqualEqual_ObjectObject_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.EqualEqual_ObjectObject.A
        // 0x0 (0x8)
        // (Param)
        public UObject A {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.Object.EqualEqual_ObjectObject.B
        // 0x8 (0x8)
        // (Param)
        public UObject B {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty Core.Object.EqualEqual_ObjectObject.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_ObjectObject;
    public static bool EqualEqual_ObjectObject(UObject A, UObject B) {
        _ptrEqualEqual_ObjectObject ??= FindFunction("Function Core.Object.EqualEqual_ObjectObject");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 8, 8, 8);

        _ptrEqualEqual_ObjectObject.iNative = 0;
        _ptrEqualEqual_ObjectObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_ObjectObject, @params);
        _ptrEqualEqual_ObjectObject.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_ObjectObject.iNative = 207;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.GetPathName
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetPathName_Parameters : BaseObject {
        public GetPathName_Parameters() { }
        public GetPathName_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.GetPathName.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetPathName;
    public FString GetPathName() {
        _ptrGetPathName ??= FindFunction("Function Core.Object.GetPathName");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetPathName, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.PathName
    // 0x36B1F0
    // (Final | Native | Static | Public)
    public unsafe class PathName_Parameters : BaseObject {
        public PathName_Parameters() { }
        public PathName_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Object.PathName.CheckObject
        // 0x0 (0x8)
        // (Param)
        public UObject CheckObject {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // StrProperty Core.Object.PathName.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrPathName;
    public static FString PathName(UObject CheckObject) {
        _ptrPathName ??= FindFunction("Function Core.Object.PathName");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)CheckObject.Pointer, @params, 8, 8);

        _ptrPathName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrPathName, @params);
        _ptrPathName.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.SplitString
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public)
    public unsafe class SplitString_Parameters : BaseObject {
        public SplitString_Parameters() { }
        public SplitString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.SplitString.Source
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Source {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.SplitString.Delimiter
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString Delimiter {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.SplitString.bCullEmpty
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bCullEmpty {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty Core.Object.SplitString.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public StructTArray<FString> ReturnValue {
            get => new(Pointer + 40, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrSplitString;
    public static StructTArray<FString> SplitString(FString Source, FString Delimiter = null, bool bCullEmpty = false) {
        _ptrSplitString ??= FindFunction("Function Core.Object.SplitString");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Source.Pointer, @params, 16, 16);
        if (Delimiter != null) System.Buffer.MemoryCopy((void*)Delimiter.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bCullEmpty, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrSplitString, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr, 16) { Allocated = true };
    }

    // Function Core.Object.ParseStringIntoArray
    // 0x3645D0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class ParseStringIntoArray_Parameters : BaseObject {
        public ParseStringIntoArray_Parameters() { }
        public ParseStringIntoArray_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ParseStringIntoArray.BaseString
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString BaseString {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Object.ParseStringIntoArray.Pieces
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FString> Pieces {
            get => new(Pointer + 16, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.ParseStringIntoArray.delim
        // 0x20 (0x10)
        // (Param | NeedCtorLink)
        public FString delim {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty Core.Object.ParseStringIntoArray.bCullEmpty
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool bCullEmpty {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrParseStringIntoArray;
    public static void ParseStringIntoArray(FString BaseString, ref StructTArray<FString> Pieces, FString delim, bool bCullEmpty) {
        _ptrParseStringIntoArray ??= FindFunction("Function Core.Object.ParseStringIntoArray");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)BaseString.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Pieces.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)delim.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bCullEmpty, @params + 48, 4, 4);

        _ptrParseStringIntoArray.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrParseStringIntoArray, @params);
        _ptrParseStringIntoArray.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _PiecesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_PiecesPtr, 16, 16);
        Pieces = new(_PiecesPtr, 16) { Allocated = true };
    }

    // Function Core.Object.ContainsWhitespace
    // 0x36D480
    // (Final | Native | Static | Public)
    public unsafe class ContainsWhitespace_Parameters : BaseObject {
        public ContainsWhitespace_Parameters() { }
        public ContainsWhitespace_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ContainsWhitespace.Text
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty Core.Object.ContainsWhitespace.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrContainsWhitespace;
    public static bool ContainsWhitespace(FString Text) {
        _ptrContainsWhitespace ??= FindFunction("Function Core.Object.ContainsWhitespace");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);

        _ptrContainsWhitespace.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrContainsWhitespace, @params);
        _ptrContainsWhitespace.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.RepeatString
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class RepeatString_Parameters : BaseObject {
        public RepeatString_Parameters() { }
        public RepeatString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.RepeatString.InValue
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString InValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.RepeatString.Count
        // 0x10 (0x4)
        // (Param)
        public int Count {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.RepeatString.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrRepeatString;
    public static FString RepeatString(FString InValue, int Count) {
        _ptrRepeatString ??= FindFunction("Function Core.Object.RepeatString");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)InValue.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Count, @params + 16, 4, 4);

        StaticClass.ProcessEvent(_ptrRepeatString, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.JoinArrayQWord
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class JoinArrayQWord_Parameters : BaseObject {
        public JoinArrayQWord_Parameters() { }
        public JoinArrayQWord_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.JoinArrayQWord.QWordArray
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<ulong> QWordArray {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.JoinArrayQWord.delim
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString delim {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.JoinArrayQWord.bIgnoreBlanks
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreBlanks {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.JoinArrayQWord.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrJoinArrayQWord;
    public static FString JoinArrayQWord(ref UnmanagedTArray<ulong> QWordArray, FString delim = null, bool bIgnoreBlanks = false) {
        _ptrJoinArrayQWord ??= FindFunction("Function Core.Object.JoinArrayQWord");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)QWordArray.Pointer, @params, 16, 16);
        if (delim != null) System.Buffer.MemoryCopy((void*)delim.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bIgnoreBlanks, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrJoinArrayQWord, @params);

        var _QWordArrayPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_QWordArrayPtr, 16, 16);
        QWordArray = new(_QWordArrayPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.JoinArrayInt
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class JoinArrayInt_Parameters : BaseObject {
        public JoinArrayInt_Parameters() { }
        public JoinArrayInt_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.JoinArrayInt.IntArray
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<int> IntArray {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.JoinArrayInt.delim
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString delim {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.JoinArrayInt.bIgnoreBlanks
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreBlanks {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.JoinArrayInt.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrJoinArrayInt;
    public static FString JoinArrayInt(ref UnmanagedTArray<int> IntArray, FString delim = null, bool bIgnoreBlanks = false) {
        _ptrJoinArrayInt ??= FindFunction("Function Core.Object.JoinArrayInt");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)IntArray.Pointer, @params, 16, 16);
        if (delim != null) System.Buffer.MemoryCopy((void*)delim.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bIgnoreBlanks, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrJoinArrayInt, @params);

        var _IntArrayPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_IntArrayPtr, 16, 16);
        IntArray = new(_IntArrayPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.JoinArrayName
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class JoinArrayName_Parameters : BaseObject {
        public JoinArrayName_Parameters() { }
        public JoinArrayName_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.JoinArrayName.NameArray
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FName> NameArray {
            get => new(Pointer, 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.JoinArrayName.delim
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString delim {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.JoinArrayName.bIgnoreBlanks
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreBlanks {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.JoinArrayName.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrJoinArrayName;
    public static FString JoinArrayName(ref StructTArray<FName> NameArray, FString delim = null, bool bIgnoreBlanks = false) {
        _ptrJoinArrayName ??= FindFunction("Function Core.Object.JoinArrayName");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)NameArray.Pointer, @params, 16, 16);
        if (delim != null) System.Buffer.MemoryCopy((void*)delim.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bIgnoreBlanks, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrJoinArrayName, @params);

        var _NameArrayPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_NameArrayPtr, 16, 16);
        NameArray = new(_NameArrayPtr, 8) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.JoinArrayStr
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class JoinArrayStr_Parameters : BaseObject {
        public JoinArrayStr_Parameters() { }
        public JoinArrayStr_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.JoinArrayStr.StringArray
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> StringArray {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.JoinArrayStr.delim
        // 0x10 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString delim {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.JoinArrayStr.bIgnoreBlanks
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreBlanks {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.JoinArrayStr.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrJoinArrayStr;
    public static FString JoinArrayStr(ref StructTArray<FString> StringArray, FString delim = null, bool bIgnoreBlanks = false) {
        _ptrJoinArrayStr ??= FindFunction("Function Core.Object.JoinArrayStr");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)StringArray.Pointer, @params, 16, 16);
        if (delim != null) System.Buffer.MemoryCopy((void*)delim.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bIgnoreBlanks, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrJoinArrayStr, @params);

        var _StringArrayPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_StringArrayPtr, 16, 16);
        StringArray = new(_StringArrayPtr, 16) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.JoinArray
    // 0x36D210
    // (Final | Native | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class JoinArray_Parameters : BaseObject {
        public JoinArray_Parameters() { }
        public JoinArray_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.JoinArray.StringArray
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public StructTArray<FString> StringArray {
            get => new(Pointer, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.JoinArray.out_Result
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString out_Result {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.JoinArray.delim
        // 0x20 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString delim {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty Core.Object.JoinArray.bIgnoreBlanks
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreBlanks {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrJoinArray;
    public static void JoinArray(ref StructTArray<FString> StringArray, ref FString out_Result, FString delim = null, bool bIgnoreBlanks = false) {
        _ptrJoinArray ??= FindFunction("Function Core.Object.JoinArray");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)StringArray.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)out_Result.Pointer, @params + 16, 16, 16);
        if (delim != null) System.Buffer.MemoryCopy((void*)delim.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bIgnoreBlanks, @params + 48, 4, 4);

        _ptrJoinArray.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrJoinArray, @params);
        _ptrJoinArray.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _StringArrayPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_StringArrayPtr, 16, 16);
        StringArray = new(_StringArrayPtr, 16) { Allocated = true };
        var _out_ResultPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_out_ResultPtr, 16, 16);
        out_Result = new(_out_ResultPtr) { Allocated = true };
    }

    // Function Core.Object.GetRightMost
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class GetRightMost_Parameters : BaseObject {
        public GetRightMost_Parameters() { }
        public GetRightMost_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.GetRightMost.Text
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.GetRightMost.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetRightMost;
    public static FString GetRightMost(FString Text) {
        _ptrGetRightMost ??= FindFunction("Function Core.Object.GetRightMost");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrGetRightMost, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Split
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public)
    public unsafe class Split_Parameters : BaseObject {
        public Split_Parameters() { }
        public Split_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Split.Text
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Split.SplitStr
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString SplitStr {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.Split.bOmitSplitStr
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bOmitSplitStr {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.Split.ReturnValue
        // 0x28 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 16, 16);
        }
    }
    private static UFunction _ptrSplit;
    public static FString Split(FString Text, FString SplitStr, bool bOmitSplitStr = false) {
        _ptrSplit ??= FindFunction("Function Core.Object.Split");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)SplitStr.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bOmitSplitStr, @params + 32, 4, 4);

        StaticClass.ProcessEvent(_ptrSplit, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.StartsWith
    // 0x36D0E0
    // (Final | Native | Static | Public)
    public unsafe class StartsWith_Parameters : BaseObject {
        public StartsWith_Parameters() { }
        public StartsWith_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.StartsWith.Src
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Src {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.StartsWith.Prefix
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Prefix {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.StartsWith.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrStartsWith;
    public static bool StartsWith(FString Src, FString Prefix) {
        _ptrStartsWith ??= FindFunction("Function Core.Object.StartsWith");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Src.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Prefix.Pointer, @params + 16, 16, 16);

        _ptrStartsWith.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrStartsWith, @params);
        _ptrStartsWith.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.Trim
    // 0x36CE90 (iNative: 202)
    // (Final | Native | Static | Public)
    public unsafe class Trim_Parameters : BaseObject {
        public Trim_Parameters() { }
        public Trim_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Trim.Src
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Src {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Trim.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrTrim;
    public static FString Trim(FString Src) {
        _ptrTrim ??= FindFunction("Function Core.Object.Trim");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Src.Pointer, @params, 16, 16);

        _ptrTrim.iNative = 0;
        _ptrTrim.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrTrim, @params);
        _ptrTrim.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrTrim.iNative = 202;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Repl
    // 0x3643B0 (iNative: 201)
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class Repl_Parameters : BaseObject {
        public Repl_Parameters() { }
        public Repl_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Repl.Src
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Src {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Repl.Match
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Match {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.Repl.With
        // 0x20 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString With {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // BoolProperty Core.Object.Repl.bCaseSensitive
        // 0x30 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bCaseSensitive {
            get => (*(uint*)(Pointer + 48) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 48) |= 0x1;
                else *(uint*)(Pointer + 48) &= ~(uint)0x1;
            }
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.Repl.ReturnValue
        // 0x38 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 56);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 56), 16, 16);
        }
    }
    private static UFunction _ptrRepl;
    public static FString Repl(FString Src, FString Match, FString With, bool bCaseSensitive = false) {
        _ptrRepl ??= FindFunction("Function Core.Object.Repl");

        var @params = stackalloc byte[68];
        System.Buffer.MemoryCopy((void*)Src.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Match.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy((void*)With.Pointer, @params + 32, 16, 16);
        System.Buffer.MemoryCopy(&bCaseSensitive, @params + 48, 4, 4);

        _ptrRepl.iNative = 0;
        _ptrRepl.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRepl, @params);
        _ptrRepl.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrRepl.iNative = 201;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 56, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Asc
    // 0x3642F0 (iNative: 237)
    // (Final | Native | Static | Public)
    public unsafe class Asc_Parameters : BaseObject {
        public Asc_Parameters() { }
        public Asc_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Asc.S
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.Asc.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrAsc;
    public static int Asc(FString S) {
        _ptrAsc ??= FindFunction("Function Core.Object.Asc");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        _ptrAsc.iNative = 0;
        _ptrAsc.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAsc, @params);
        _ptrAsc.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAsc.iNative = 237;

        return *(int*)(@params + 16);
    }

    // Function Core.Object.Chr
    // 0x364200 (iNative: 236)
    // (Final | Native | Static | Public)
    public unsafe class Chr_Parameters : BaseObject {
        public Chr_Parameters() { }
        public Chr_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Chr.I
        // 0x0 (0x4)
        // (Param)
        public int I {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.Chr.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrChr;
    public static FString Chr(int I) {
        _ptrChr ??= FindFunction("Function Core.Object.Chr");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&I, @params, 4, 4);

        _ptrChr.iNative = 0;
        _ptrChr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrChr, @params);
        _ptrChr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrChr.iNative = 236;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Locs
    // 0x363F40 (iNative: 238)
    // (Final | Native | Static | Public)
    public unsafe class Locs_Parameters : BaseObject {
        public Locs_Parameters() { }
        public Locs_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Locs.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Locs.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrLocs;
    public static FString Locs(FString S) {
        _ptrLocs ??= FindFunction("Function Core.Object.Locs");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        _ptrLocs.iNative = 0;
        _ptrLocs.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLocs, @params);
        _ptrLocs.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLocs.iNative = 238;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Caps
    // 0x363E40 (iNative: 235)
    // (Final | Native | Static | Public)
    public unsafe class Caps_Parameters : BaseObject {
        public Caps_Parameters() { }
        public Caps_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Caps.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Caps.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrCaps;
    public static FString Caps(FString S) {
        _ptrCaps ??= FindFunction("Function Core.Object.Caps");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        _ptrCaps.iNative = 0;
        _ptrCaps.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrCaps, @params);
        _ptrCaps.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrCaps.iNative = 235;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Right
    // 0x363CA0 (iNative: 234)
    // (Final | Native | Static | Public)
    public unsafe class Right_Parameters : BaseObject {
        public Right_Parameters() { }
        public Right_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Right.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.Right.I
        // 0x10 (0x4)
        // (Param)
        public int I {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.Right.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrRight;
    public static FString Right(FString S, int I) {
        _ptrRight ??= FindFunction("Function Core.Object.Right");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&I, @params + 16, 4, 4);

        _ptrRight.iNative = 0;
        _ptrRight.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRight, @params);
        _ptrRight.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrRight.iNative = 234;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Left
    // 0x363B20 (iNative: 128)
    // (Final | Native | Static | Public)
    public unsafe class Left_Parameters : BaseObject {
        public Left_Parameters() { }
        public Left_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Left.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.Left.I
        // 0x10 (0x4)
        // (Param)
        public int I {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.Left.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrLeft;
    public static FString Left(FString S, int I) {
        _ptrLeft ??= FindFunction("Function Core.Object.Left");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&I, @params + 16, 4, 4);

        _ptrLeft.iNative = 0;
        _ptrLeft.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLeft, @params);
        _ptrLeft.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLeft.iNative = 128;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Mid
    // 0x363940 (iNative: 208)
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class Mid_Parameters : BaseObject {
        public Mid_Parameters() { }
        public Mid_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Mid.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.Mid.I
        // 0x10 (0x4)
        // (Param)
        public int I {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // IntProperty Core.Object.Mid.J
        // 0x14 (0x4)
        // (OptionalParam | Param)
        public int J {
            get => *(int*)(Pointer + 20);
            set => *(int*)(Pointer + 20) = value;
        }

        // StrProperty Core.Object.Mid.ReturnValue
        // 0x18 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrMid;
    public static FString Mid(FString S, int I, int J = 0) {
        _ptrMid ??= FindFunction("Function Core.Object.Mid");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&I, @params + 16, 4, 4);
        System.Buffer.MemoryCopy(&J, @params + 20, 4, 4);

        _ptrMid.iNative = 0;
        _ptrMid.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMid, @params);
        _ptrMid.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMid.iNative = 208;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.InStr
    // 0x3637A0 (iNative: 209)
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class InStr_Parameters : BaseObject {
        public InStr_Parameters() { }
        public InStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.InStr.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.InStr.T
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString T {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.InStr.bSearchFromRight
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bSearchFromRight {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.InStr.bIgnoreCase
        // 0x24 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreCase {
            get => (*(uint*)(Pointer + 36) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 36) |= 0x1;
                else *(uint*)(Pointer + 36) &= ~(uint)0x1;
            }
        }

        // IntProperty Core.Object.InStr.StartPos
        // 0x28 (0x4)
        // (OptionalParam | Param)
        public int StartPos {
            get => *(int*)(Pointer + 40);
            set => *(int*)(Pointer + 40) = value;
        }

        // IntProperty Core.Object.InStr.ReturnValue
        // 0x2C (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 44);
            set => *(int*)(Pointer + 44) = value;
        }
    }
    private static UFunction _ptrInStr;
    public static int InStr(FString S, FString T, bool bSearchFromRight = false, bool bIgnoreCase = false, int StartPos = 0) {
        _ptrInStr ??= FindFunction("Function Core.Object.InStr");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)T.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&bSearchFromRight, @params + 32, 4, 4);
        System.Buffer.MemoryCopy(&bIgnoreCase, @params + 36, 4, 4);
        System.Buffer.MemoryCopy(&StartPos, @params + 40, 4, 4);

        _ptrInStr.iNative = 0;
        _ptrInStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrInStr, @params);
        _ptrInStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrInStr.iNative = 209;

        return *(int*)(@params + 44);
    }

    // Function Core.Object.Len
    // 0x3636F0 (iNative: 239)
    // (Final | Native | Static | Public)
    public unsafe class Len_Parameters : BaseObject {
        public Len_Parameters() { }
        public Len_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Len.S
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString S {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.Len.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrLen;
    public static int Len(FString S) {
        _ptrLen ??= FindFunction("Function Core.Object.Len");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 16, 16);

        _ptrLen.iNative = 0;
        _ptrLen.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLen, @params);
        _ptrLen.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLen.iNative = 239;

        return *(int*)(@params + 16);
    }

    // Function Core.Object.SubtractEqual_StrStr
    // 0x3632D0 (iNative: 324)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_StrStr_Parameters : BaseObject {
        public SubtractEqual_StrStr_Parameters() { }
        public SubtractEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.SubtractEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.SubtractEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.SubtractEqual_StrStr.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrSubtractEqual_StrStr;
    public static FString SubtractEqual_StrStr(ref FString A, FString B) {
        _ptrSubtractEqual_StrStr ??= FindFunction("Function Core.Object.SubtractEqual_StrStr");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrSubtractEqual_StrStr.iNative = 0;
        _ptrSubtractEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_StrStr, @params);
        _ptrSubtractEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractEqual_StrStr.iNative = 324;

        var _APtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 16, 16);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.AtEqual_StrStr
    // 0x3630D0 (iNative: 323)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AtEqual_StrStr_Parameters : BaseObject {
        public AtEqual_StrStr_Parameters() { }
        public AtEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.AtEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.AtEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.AtEqual_StrStr.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAtEqual_StrStr;
    public static FString AtEqual_StrStr(ref FString A, FString B) {
        _ptrAtEqual_StrStr ??= FindFunction("Function Core.Object.AtEqual_StrStr");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrAtEqual_StrStr.iNative = 0;
        _ptrAtEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAtEqual_StrStr, @params);
        _ptrAtEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAtEqual_StrStr.iNative = 323;

        var _APtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 16, 16);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.ConcatEqual_StrStr
    // 0x362F20 (iNative: 322)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class ConcatEqual_StrStr_Parameters : BaseObject {
        public ConcatEqual_StrStr_Parameters() { }
        public ConcatEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ConcatEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.ConcatEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.ConcatEqual_StrStr.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrConcatEqual_StrStr;
    public static FString ConcatEqual_StrStr(ref FString A, FString B) {
        _ptrConcatEqual_StrStr ??= FindFunction("Function Core.Object.ConcatEqual_StrStr");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrConcatEqual_StrStr.iNative = 0;
        _ptrConcatEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrConcatEqual_StrStr, @params);
        _ptrConcatEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrConcatEqual_StrStr.iNative = 322;

        var _APtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 16, 16);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.ComplementEqual_StrStr
    // 0x362E00 (iNative: 191)
    // (Final | Native | Operator | Static | Public)
    public unsafe class ComplementEqual_StrStr_Parameters : BaseObject {
        public ComplementEqual_StrStr_Parameters() { }
        public ComplementEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.ComplementEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.ComplementEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.ComplementEqual_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrComplementEqual_StrStr;
    public static bool ComplementEqual_StrStr(FString A, FString B) {
        _ptrComplementEqual_StrStr ??= FindFunction("Function Core.Object.ComplementEqual_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrComplementEqual_StrStr.iNative = 0;
        _ptrComplementEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrComplementEqual_StrStr, @params);
        _ptrComplementEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrComplementEqual_StrStr.iNative = 191;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.NotEqual_StrStr
    // 0x362CC0 (iNative: 192)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_StrStr_Parameters : BaseObject {
        public NotEqual_StrStr_Parameters() { }
        public NotEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.NotEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.NotEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.NotEqual_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_StrStr;
    public static bool NotEqual_StrStr(FString A, FString B) {
        _ptrNotEqual_StrStr ??= FindFunction("Function Core.Object.NotEqual_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrNotEqual_StrStr.iNative = 0;
        _ptrNotEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_StrStr, @params);
        _ptrNotEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_StrStr.iNative = 192;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.EqualEqual_StrStr
    // 0x362B80 (iNative: 204)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_StrStr_Parameters : BaseObject {
        public EqualEqual_StrStr_Parameters() { }
        public EqualEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.EqualEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.EqualEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.EqualEqual_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_StrStr;
    public static bool EqualEqual_StrStr(FString A, FString B) {
        _ptrEqualEqual_StrStr ??= FindFunction("Function Core.Object.EqualEqual_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrEqualEqual_StrStr.iNative = 0;
        _ptrEqualEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_StrStr, @params);
        _ptrEqualEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_StrStr.iNative = 204;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.GreaterEqual_StrStr
    // 0x362A40 (iNative: 327)
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterEqual_StrStr_Parameters : BaseObject {
        public GreaterEqual_StrStr_Parameters() { }
        public GreaterEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.GreaterEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.GreaterEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.GreaterEqual_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreaterEqual_StrStr;
    public static bool GreaterEqual_StrStr(FString A, FString B) {
        _ptrGreaterEqual_StrStr ??= FindFunction("Function Core.Object.GreaterEqual_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrGreaterEqual_StrStr.iNative = 0;
        _ptrGreaterEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterEqual_StrStr, @params);
        _ptrGreaterEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreaterEqual_StrStr.iNative = 327;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.LessEqual_StrStr
    // 0x362900 (iNative: 326)
    // (Final | Native | Operator | Static | Public)
    public unsafe class LessEqual_StrStr_Parameters : BaseObject {
        public LessEqual_StrStr_Parameters() { }
        public LessEqual_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.LessEqual_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.LessEqual_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.LessEqual_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLessEqual_StrStr;
    public static bool LessEqual_StrStr(FString A, FString B) {
        _ptrLessEqual_StrStr ??= FindFunction("Function Core.Object.LessEqual_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrLessEqual_StrStr.iNative = 0;
        _ptrLessEqual_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLessEqual_StrStr, @params);
        _ptrLessEqual_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLessEqual_StrStr.iNative = 326;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.Greater_StrStr
    // 0x3627C0 (iNative: 240)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Greater_StrStr_Parameters : BaseObject {
        public Greater_StrStr_Parameters() { }
        public Greater_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Greater_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Greater_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.Greater_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreater_StrStr;
    public static bool Greater_StrStr(FString A, FString B) {
        _ptrGreater_StrStr ??= FindFunction("Function Core.Object.Greater_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrGreater_StrStr.iNative = 0;
        _ptrGreater_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreater_StrStr, @params);
        _ptrGreater_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreater_StrStr.iNative = 240;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.Less_StrStr
    // 0x362680 (iNative: 241)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Less_StrStr_Parameters : BaseObject {
        public Less_StrStr_Parameters() { }
        public Less_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Less_StrStr.A
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Less_StrStr.B
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Object.Less_StrStr.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLess_StrStr;
    public static bool Less_StrStr(FString A, FString B) {
        _ptrLess_StrStr ??= FindFunction("Function Core.Object.Less_StrStr");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrLess_StrStr.iNative = 0;
        _ptrLess_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLess_StrStr, @params);
        _ptrLess_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLess_StrStr.iNative = 241;

        return *(bool*)(@params + 32);
    }

    // Function Core.Object.At_StrStr
    // 0x3623F0 (iNative: 168)
    // (Final | Native | Operator | Static | Public)
    public unsafe class At_StrStr_Parameters : BaseObject {
        public At_StrStr_Parameters() { }
        public At_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.At_StrStr.A
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.At_StrStr.B
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.At_StrStr.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrAt_StrStr;
    public static FString At_StrStr(FString A, FString B) {
        _ptrAt_StrStr ??= FindFunction("Function Core.Object.At_StrStr");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrAt_StrStr.iNative = 0;
        _ptrAt_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAt_StrStr, @params);
        _ptrAt_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAt_StrStr.iNative = 168;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Concat_StrStr
    // 0x3621C0 (iNative: 248)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Concat_StrStr_Parameters : BaseObject {
        public Concat_StrStr_Parameters() { }
        public Concat_StrStr_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.Concat_StrStr.A
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Object.Concat_StrStr.B
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString B {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.Object.Concat_StrStr.ReturnValue
        // 0x20 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }
    }
    private static UFunction _ptrConcat_StrStr;
    public static FString Concat_StrStr(FString A, FString B) {
        _ptrConcat_StrStr ??= FindFunction("Function Core.Object.Concat_StrStr");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 16, 16, 16);

        _ptrConcat_StrStr.iNative = 0;
        _ptrConcat_StrStr.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrConcat_StrStr, @params);
        _ptrConcat_StrStr.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrConcat_StrStr.iNative = 248;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RotateRotator
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class RotateRotator_Parameters : BaseObject {
        public RotateRotator_Parameters() { }
        public RotateRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RotateRotator.Axis
        // 0x0 (0xC)
        // (Param)
        public FVector Axis {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.RotateRotator.Rot
        // 0xC (0xC)
        // (Param)
        public FRotator Rot {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.RotateRotator.Direction
        // 0x18 (0xC)
        // (Param)
        public FRotator Direction {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // FloatProperty Core.Object.RotateRotator.Amount
        // 0x24 (0x4)
        // (Param)
        public float Amount {
            get => *(float*)(Pointer + 36);
            set => *(float*)(Pointer + 36) = value;
        }

        // StructProperty Core.Object.RotateRotator.ReturnValue
        // 0x28 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 12, 12);
        }
    }
    private static UFunction _ptrRotateRotator;
    public static FRotator RotateRotator(FVector Axis, FRotator Rot, FRotator Direction, float Amount) {
        _ptrRotateRotator ??= FindFunction("Function Core.Object.RotateRotator");

        var @params = stackalloc byte[52];
        System.Buffer.MemoryCopy((void*)Axis.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Rot.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Direction.Pointer, @params + 24, 12, 12);
        System.Buffer.MemoryCopy(&Amount, @params + 36, 4, 4);

        StaticClass.ProcessEvent(_ptrRotateRotator, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 40, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeQuat
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class MakeQuat_Parameters : BaseObject {
        public MakeQuat_Parameters() { }
        public MakeQuat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.MakeQuat.X
        // 0x0 (0x4)
        // (Param)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.MakeQuat.Y
        // 0x4 (0x4)
        // (Param)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.MakeQuat.Z
        // 0x8 (0x4)
        // (Param)
        public float Z {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.MakeQuat.W
        // 0xC (0x4)
        // (Param)
        public float W {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.MakeQuat.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam)
        public FQuat ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrMakeQuat;
    public static FQuat MakeQuat(float X, float Y, float Z, float W) {
        _ptrMakeQuat ??= FindFunction("Function Core.Object.MakeQuat");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy(&X, @params, 4, 4);
        System.Buffer.MemoryCopy(&Y, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Z, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&W, @params + 12, 4, 4);

        StaticClass.ProcessEvent(_ptrMakeQuat, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MakeRotator
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class MakeRotator_Parameters : BaseObject {
        public MakeRotator_Parameters() { }
        public MakeRotator_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.MakeRotator.Pitch
        // 0x0 (0x4)
        // (Param)
        public int Pitch {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.MakeRotator.Yaw
        // 0x4 (0x4)
        // (Param)
        public int Yaw {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.MakeRotator.Roll
        // 0x8 (0x4)
        // (Param)
        public int Roll {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.MakeRotator.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrMakeRotator;
    public static FRotator MakeRotator(int Pitch, int Yaw, int Roll) {
        _ptrMakeRotator ??= FindFunction("Function Core.Object.MakeRotator");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&Pitch, @params, 4, 4);
        System.Buffer.MemoryCopy(&Yaw, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Roll, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrMakeRotator, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.SClampRotAxis
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public | HasOutParams)
    public unsafe class SClampRotAxis_Parameters : BaseObject {
        public SClampRotAxis_Parameters() { }
        public SClampRotAxis_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SClampRotAxis.DeltaTime
        // 0x0 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // IntProperty Core.Object.SClampRotAxis.ViewAxis
        // 0x4 (0x4)
        // (Param)
        public int ViewAxis {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SClampRotAxis.out_DeltaViewAxis
        // 0x8 (0x4)
        // (Param | OutParam)
        public int out_DeltaViewAxis {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.SClampRotAxis.MaxLimit
        // 0xC (0x4)
        // (Param)
        public int MaxLimit {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // IntProperty Core.Object.SClampRotAxis.MinLimit
        // 0x10 (0x4)
        // (Param)
        public int MinLimit {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // FloatProperty Core.Object.SClampRotAxis.InterpolationSpeed
        // 0x14 (0x4)
        // (Param)
        public float InterpolationSpeed {
            get => *(float*)(Pointer + 20);
            set => *(float*)(Pointer + 20) = value;
        }

        // BoolProperty Core.Object.SClampRotAxis.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSClampRotAxis;
    public static bool SClampRotAxis(float DeltaTime, int ViewAxis, ref int out_DeltaViewAxis, int MaxLimit, int MinLimit, float InterpolationSpeed) {
        _ptrSClampRotAxis ??= FindFunction("Function Core.Object.SClampRotAxis");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy(&DeltaTime, @params, 4, 4);
        System.Buffer.MemoryCopy(&ViewAxis, @params + 4, 4, 4);
        var _out_DeltaViewAxis = out_DeltaViewAxis;
        System.Buffer.MemoryCopy(&_out_DeltaViewAxis, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&MaxLimit, @params + 12, 4, 4);
        System.Buffer.MemoryCopy(&MinLimit, @params + 16, 4, 4);
        System.Buffer.MemoryCopy(&InterpolationSpeed, @params + 20, 4, 4);

        StaticClass.ProcessEvent(_ptrSClampRotAxis, @params);

        out_DeltaViewAxis = *(int*)(@params + 8);

        return *(bool*)(@params + 24);
    }

    // Function Core.Object.ClampRotAxisFromRange
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class ClampRotAxisFromRange_Parameters : BaseObject {
        public ClampRotAxisFromRange_Parameters() { }
        public ClampRotAxisFromRange_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ClampRotAxisFromRange.Current
        // 0x0 (0x4)
        // (Param)
        public int Current {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.ClampRotAxisFromRange.Min
        // 0x4 (0x4)
        // (Param)
        public int Min {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.ClampRotAxisFromRange.Max
        // 0x8 (0x4)
        // (Param)
        public int Max {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.ClampRotAxisFromRange.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrClampRotAxisFromRange;
    public static int ClampRotAxisFromRange(int Current, int Min, int Max) {
        _ptrClampRotAxisFromRange ??= FindFunction("Function Core.Object.ClampRotAxisFromRange");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&Current, @params, 4, 4);
        System.Buffer.MemoryCopy(&Min, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Max, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrClampRotAxisFromRange, @params);

        return *(int*)(@params + 12);
    }

    // Function Core.Object.ClampRotAxisFromBase
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class ClampRotAxisFromBase_Parameters : BaseObject {
        public ClampRotAxisFromBase_Parameters() { }
        public ClampRotAxisFromBase_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ClampRotAxisFromBase.Current
        // 0x0 (0x4)
        // (Param)
        public int Current {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.ClampRotAxisFromBase.Center
        // 0x4 (0x4)
        // (Param)
        public int Center {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.ClampRotAxisFromBase.MaxDelta
        // 0x8 (0x4)
        // (Param)
        public int MaxDelta {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.ClampRotAxisFromBase.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrClampRotAxisFromBase;
    public static int ClampRotAxisFromBase(int Current, int Center, int MaxDelta) {
        _ptrClampRotAxisFromBase ??= FindFunction("Function Core.Object.ClampRotAxisFromBase");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&Current, @params, 4, 4);
        System.Buffer.MemoryCopy(&Center, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&MaxDelta, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrClampRotAxisFromBase, @params);

        return *(int*)(@params + 12);
    }

    // Function Core.Object.ClampRotAxis
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public | HasOutParams)
    public unsafe class ClampRotAxis_Parameters : BaseObject {
        public ClampRotAxis_Parameters() { }
        public ClampRotAxis_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ClampRotAxis.ViewAxis
        // 0x0 (0x4)
        // (Param)
        public int ViewAxis {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.ClampRotAxis.out_DeltaViewAxis
        // 0x4 (0x4)
        // (Param | OutParam)
        public int out_DeltaViewAxis {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.ClampRotAxis.MaxLimit
        // 0x8 (0x4)
        // (Param)
        public int MaxLimit {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.ClampRotAxis.MinLimit
        // 0xC (0x4)
        // (Param)
        public int MinLimit {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrClampRotAxis;
    public static void ClampRotAxis(int ViewAxis, ref int out_DeltaViewAxis, int MaxLimit, int MinLimit) {
        _ptrClampRotAxis ??= FindFunction("Function Core.Object.ClampRotAxis");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&ViewAxis, @params, 4, 4);
        var _out_DeltaViewAxis = out_DeltaViewAxis;
        System.Buffer.MemoryCopy(&_out_DeltaViewAxis, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&MaxLimit, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&MinLimit, @params + 12, 4, 4);

        StaticClass.ProcessEvent(_ptrClampRotAxis, @params);

        out_DeltaViewAxis = *(int*)(@params + 4);
    }

    // Function Core.Object.FlattenRotatorOnAxis
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public | HasDefaults)
    public unsafe class FlattenRotatorOnAxis_Parameters : BaseObject {
        public FlattenRotatorOnAxis_Parameters() { }
        public FlattenRotatorOnAxis_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.FlattenRotatorOnAxis.AxisToRemove
        // 0x0 (0xC)
        // (Param)
        public FVector AxisToRemove {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.FlattenRotatorOnAxis.RotToFlatten
        // 0xC (0xC)
        // (Param)
        public FRotator RotToFlatten {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.FlattenRotatorOnAxis.RotToFlattenTo
        // 0x18 (0xC)
        // (OptionalParam | Param)
        public FRotator RotToFlattenTo {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.FlattenRotatorOnAxis.ReturnValue
        // 0x24 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }
    private static UFunction _ptrFlattenRotatorOnAxis;
    public static FRotator FlattenRotatorOnAxis(FVector AxisToRemove, FRotator RotToFlatten, FRotator RotToFlattenTo = null) {
        _ptrFlattenRotatorOnAxis ??= FindFunction("Function Core.Object.FlattenRotatorOnAxis");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)AxisToRemove.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)RotToFlatten.Pointer, @params + 12, 12, 12);
        if (RotToFlattenTo != null) System.Buffer.MemoryCopy((void*)RotToFlattenTo.Pointer, @params + 24, 12, 12);

        StaticClass.ProcessEvent(_ptrFlattenRotatorOnAxis, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RSize
    // 0x35A610
    // (Final | Native | Static | Public)
    public unsafe class RSize_Parameters : BaseObject {
        public RSize_Parameters() { }
        public RSize_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RSize.R
        // 0x0 (0xC)
        // (Param)
        public FRotator R {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.RSize.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrRSize;
    public static float RSize(FRotator R) {
        _ptrRSize ??= FindFunction("Function Core.Object.RSize");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)R.Pointer, @params, 12, 12);

        _ptrRSize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRSize, @params);
        _ptrRSize.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.RDiff
    // 0x35D100
    // (Final | Native | Static | Public)
    public unsafe class RDiff_Parameters : BaseObject {
        public RDiff_Parameters() { }
        public RDiff_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RDiff.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.RDiff.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.RDiff.ReturnValue
        // 0x18 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }
    }
    private static UFunction _ptrRDiff;
    public static float RDiff(FRotator A, FRotator B) {
        _ptrRDiff ??= FindFunction("Function Core.Object.RDiff");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrRDiff.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRDiff, @params);
        _ptrRDiff.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 24);
    }

    // Function Core.Object.NormalizeRotAxis
    // 0x35D070
    // (Final | Native | Static | Public)
    public unsafe class NormalizeRotAxis_Parameters : BaseObject {
        public NormalizeRotAxis_Parameters() { }
        public NormalizeRotAxis_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.NormalizeRotAxis.Angle
        // 0x0 (0x4)
        // (Param)
        public int Angle {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.NormalizeRotAxis.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrNormalizeRotAxis;
    public static int NormalizeRotAxis(int Angle) {
        _ptrNormalizeRotAxis ??= FindFunction("Function Core.Object.NormalizeRotAxis");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&Angle, @params, 4, 4);

        _ptrNormalizeRotAxis.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNormalizeRotAxis, @params);
        _ptrNormalizeRotAxis.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.RInterpTo
    // 0x35CEF0
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class RInterpTo_Parameters : BaseObject {
        public RInterpTo_Parameters() { }
        public RInterpTo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RInterpTo.Current
        // 0x0 (0xC)
        // (Param)
        public FRotator Current {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.RInterpTo.Target
        // 0xC (0xC)
        // (Param)
        public FRotator Target {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.RInterpTo.DeltaTime
        // 0x18 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.RInterpTo.InterpSpeed
        // 0x1C (0x4)
        // (Param)
        public float InterpSpeed {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }

        // BoolProperty Core.Object.RInterpTo.bConstantInterpSpeed
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bConstantInterpSpeed {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }

        // StructProperty Core.Object.RInterpTo.ReturnValue
        // 0x24 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }
    private static UFunction _ptrRInterpTo;
    public static FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed, bool bConstantInterpSpeed = false) {
        _ptrRInterpTo ??= FindFunction("Function Core.Object.RInterpTo");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)Current.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Target.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&InterpSpeed, @params + 28, 4, 4);
        System.Buffer.MemoryCopy(&bConstantInterpSpeed, @params + 32, 4, 4);

        _ptrRInterpTo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRInterpTo, @params);
        _ptrRInterpTo.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RTransform
    // 0x35CCE0
    // (Final | Native | Static | Public)
    public unsafe class RTransform_Parameters : BaseObject {
        public RTransform_Parameters() { }
        public RTransform_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RTransform.R
        // 0x0 (0xC)
        // (Param)
        public FRotator R {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.RTransform.RBasis
        // 0xC (0xC)
        // (Param)
        public FRotator RBasis {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.RTransform.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrRTransform;
    public static FRotator RTransform(FRotator R, FRotator RBasis) {
        _ptrRTransform ??= FindFunction("Function Core.Object.RTransform");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)R.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)RBasis.Pointer, @params + 12, 12, 12);

        _ptrRTransform.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRTransform, @params);
        _ptrRTransform.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RLerp
    // 0x35CB30 (iNative: 325)
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class RLerp_Parameters : BaseObject {
        public RLerp_Parameters() { }
        public RLerp_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.RLerp.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.RLerp.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.RLerp.Alpha
        // 0x18 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // BoolProperty Core.Object.RLerp.bShortestPath
        // 0x1C (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bShortestPath {
            get => (*(uint*)(Pointer + 28) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 28) |= 0x1;
                else *(uint*)(Pointer + 28) &= ~(uint)0x1;
            }
        }

        // StructProperty Core.Object.RLerp.ReturnValue
        // 0x20 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }
    }
    private static UFunction _ptrRLerp;
    public static FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath = false) {
        _ptrRLerp ??= FindFunction("Function Core.Object.RLerp");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&Alpha, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&bShortestPath, @params + 28, 4, 4);

        _ptrRLerp.iNative = 0;
        _ptrRLerp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRLerp, @params);
        _ptrRLerp.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrRLerp.iNative = 325;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Normalize
    // 0x35CA60 (iNative: 330)
    // (Final | Native | Static | Public)
    public unsafe class Normalize_Parameters : BaseObject {
        public Normalize_Parameters() { }
        public Normalize_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Normalize.Rot
        // 0x0 (0xC)
        // (Param)
        public FRotator Rot {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Normalize.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrNormalize;
    public static FRotator Normalize(FRotator Rot) {
        _ptrNormalize ??= FindFunction("Function Core.Object.Normalize");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Rot.Pointer, @params, 12, 12);

        _ptrNormalize.iNative = 0;
        _ptrNormalize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNormalize, @params);
        _ptrNormalize.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNormalize.iNative = 330;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.OrthoRotation
    // 0x35C8F0
    // (Final | Native | Static | Public)
    public unsafe class OrthoRotation_Parameters : BaseObject {
        public OrthoRotation_Parameters() { }
        public OrthoRotation_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.OrthoRotation.X
        // 0x0 (0xC)
        // (Param)
        public FVector X {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.OrthoRotation.Y
        // 0xC (0xC)
        // (Param)
        public FVector Y {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.OrthoRotation.Z
        // 0x18 (0xC)
        // (Param)
        public FVector Z {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.OrthoRotation.ReturnValue
        // 0x24 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }
    private static UFunction _ptrOrthoRotation;
    public static FRotator OrthoRotation(FVector X, FVector Y, FVector Z) {
        _ptrOrthoRotation ??= FindFunction("Function Core.Object.OrthoRotation");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)X.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Y.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Z.Pointer, @params + 24, 12, 12);

        _ptrOrthoRotation.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrOrthoRotation, @params);
        _ptrOrthoRotation.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RotRand
    // 0x359540 (iNative: 320)
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class RotRand_Parameters : BaseObject {
        public RotRand_Parameters() { }
        public RotRand_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.RotRand.bRoll
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bRoll {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // StructProperty Core.Object.RotRand.ReturnValue
        // 0x4 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 12, 12);
        }
    }
    private static UFunction _ptrRotRand;
    public static FRotator RotRand(bool bRoll = false) {
        _ptrRotRand ??= FindFunction("Function Core.Object.RotRand");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&bRoll, @params, 4, 4);

        _ptrRotRand.iNative = 0;
        _ptrRotRand.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRotRand, @params);
        _ptrRotRand.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrRotRand.iNative = 320;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 4, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetRotatorAxis
    // 0x359630
    // (Final | Native | Static | Public)
    public unsafe class GetRotatorAxis_Parameters : BaseObject {
        public GetRotatorAxis_Parameters() { }
        public GetRotatorAxis_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetRotatorAxis.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // IntProperty Core.Object.GetRotatorAxis.Axis
        // 0xC (0x4)
        // (Param)
        public int Axis {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.GetRotatorAxis.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrGetRotatorAxis;
    public static FVector GetRotatorAxis(FRotator A, int Axis) {
        _ptrGetRotatorAxis ??= FindFunction("Function Core.Object.GetRotatorAxis");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&Axis, @params + 12, 4, 4);

        _ptrGetRotatorAxis.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetRotatorAxis, @params);
        _ptrGetRotatorAxis.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.GetUnAxes
    // 0x359720 (iNative: 230)
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetUnAxes_Parameters : BaseObject {
        public GetUnAxes_Parameters() { }
        public GetUnAxes_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetUnAxes.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.GetUnAxes.X
        // 0xC (0xC)
        // (Param | OutParam)
        public FVector X {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.GetUnAxes.Y
        // 0x18 (0xC)
        // (Param | OutParam)
        public FVector Y {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.GetUnAxes.Z
        // 0x24 (0xC)
        // (Param | OutParam)
        public FVector Z {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }
    private static UFunction _ptrGetUnAxes;
    public static void GetUnAxes(FRotator A, ref FVector X, ref FVector Y, ref FVector Z) {
        _ptrGetUnAxes ??= FindFunction("Function Core.Object.GetUnAxes");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)X.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Y.Pointer, @params + 24, 12, 12);
        System.Buffer.MemoryCopy((void*)Z.Pointer, @params + 36, 12, 12);

        _ptrGetUnAxes.iNative = 0;
        _ptrGetUnAxes.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetUnAxes, @params);
        _ptrGetUnAxes.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGetUnAxes.iNative = 230;

        var _XPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_XPtr, 12, 12);
        X = new(_XPtr) { Allocated = true };
        var _YPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_YPtr, 12, 12);
        Y = new(_YPtr) { Allocated = true };
        var _ZPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ZPtr, 12, 12);
        Z = new(_ZPtr) { Allocated = true };
    }

    // Function Core.Object.GetAxes
    // 0x359940 (iNative: 229)
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class GetAxes_Parameters : BaseObject {
        public GetAxes_Parameters() { }
        public GetAxes_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetAxes.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.GetAxes.X
        // 0xC (0xC)
        // (Param | OutParam)
        public FVector X {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.GetAxes.Y
        // 0x18 (0xC)
        // (Param | OutParam)
        public FVector Y {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.GetAxes.Z
        // 0x24 (0xC)
        // (Param | OutParam)
        public FVector Z {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }
    private static UFunction _ptrGetAxes;
    public static void GetAxes(FRotator A, ref FVector X, ref FVector Y, ref FVector Z) {
        _ptrGetAxes ??= FindFunction("Function Core.Object.GetAxes");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)X.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Y.Pointer, @params + 24, 12, 12);
        System.Buffer.MemoryCopy((void*)Z.Pointer, @params + 36, 12, 12);

        _ptrGetAxes.iNative = 0;
        _ptrGetAxes.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetAxes, @params);
        _ptrGetAxes.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGetAxes.iNative = 229;

        var _XPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_XPtr, 12, 12);
        X = new(_XPtr) { Allocated = true };
        var _YPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_YPtr, 12, 12);
        Y = new(_YPtr) { Allocated = true };
        var _ZPtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ZPtr, 12, 12);
        Z = new(_ZPtr) { Allocated = true };
    }

    // Function Core.Object.ClockwiseFrom_IntInt
    // 0x35D2D0
    // (Final | Native | Operator | Static | Public)
    public unsafe class ClockwiseFrom_IntInt_Parameters : BaseObject {
        public ClockwiseFrom_IntInt_Parameters() { }
        public ClockwiseFrom_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ClockwiseFrom_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.ClockwiseFrom_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.ClockwiseFrom_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrClockwiseFrom_IntInt;
    public static bool ClockwiseFrom_IntInt(int A, int B) {
        _ptrClockwiseFrom_IntInt ??= FindFunction("Function Core.Object.ClockwiseFrom_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrClockwiseFrom_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrClockwiseFrom_IntInt, @params);
        _ptrClockwiseFrom_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.SubtractEqual_RotatorRotator
    // 0x359B60 (iNative: 319)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_RotatorRotator_Parameters : BaseObject {
        public SubtractEqual_RotatorRotator_Parameters() { }
        public SubtractEqual_RotatorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.SubtractEqual_RotatorRotator.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.SubtractEqual_RotatorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.SubtractEqual_RotatorRotator.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrSubtractEqual_RotatorRotator;
    public static FRotator SubtractEqual_RotatorRotator(ref FRotator A, FRotator B) {
        _ptrSubtractEqual_RotatorRotator ??= FindFunction("Function Core.Object.SubtractEqual_RotatorRotator");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrSubtractEqual_RotatorRotator.iNative = 0;
        _ptrSubtractEqual_RotatorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_RotatorRotator, @params);
        _ptrSubtractEqual_RotatorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractEqual_RotatorRotator.iNative = 319;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.AddEqual_RotatorRotator
    // 0x359C60 (iNative: 318)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddEqual_RotatorRotator_Parameters : BaseObject {
        public AddEqual_RotatorRotator_Parameters() { }
        public AddEqual_RotatorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.AddEqual_RotatorRotator.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.AddEqual_RotatorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.AddEqual_RotatorRotator.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrAddEqual_RotatorRotator;
    public static FRotator AddEqual_RotatorRotator(ref FRotator A, FRotator B) {
        _ptrAddEqual_RotatorRotator ??= FindFunction("Function Core.Object.AddEqual_RotatorRotator");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrAddEqual_RotatorRotator.iNative = 0;
        _ptrAddEqual_RotatorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddEqual_RotatorRotator, @params);
        _ptrAddEqual_RotatorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddEqual_RotatorRotator.iNative = 318;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_RotatorRotator
    // 0x359D60 (iNative: 317)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_RotatorRotator_Parameters : BaseObject {
        public Subtract_RotatorRotator_Parameters() { }
        public Subtract_RotatorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_RotatorRotator.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Subtract_RotatorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.Subtract_RotatorRotator.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrSubtract_RotatorRotator;
    public static FRotator Subtract_RotatorRotator(FRotator A, FRotator B) {
        _ptrSubtract_RotatorRotator ??= FindFunction("Function Core.Object.Subtract_RotatorRotator");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrSubtract_RotatorRotator.iNative = 0;
        _ptrSubtract_RotatorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_RotatorRotator, @params);
        _ptrSubtract_RotatorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_RotatorRotator.iNative = 317;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Add_RotatorRotator
    // 0x359E20 (iNative: 316)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_RotatorRotator_Parameters : BaseObject {
        public Add_RotatorRotator_Parameters() { }
        public Add_RotatorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Add_RotatorRotator.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Add_RotatorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.Add_RotatorRotator.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrAdd_RotatorRotator;
    public static FRotator Add_RotatorRotator(FRotator A, FRotator B) {
        _ptrAdd_RotatorRotator ??= FindFunction("Function Core.Object.Add_RotatorRotator");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrAdd_RotatorRotator.iNative = 0;
        _ptrAdd_RotatorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_RotatorRotator, @params);
        _ptrAdd_RotatorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAdd_RotatorRotator.iNative = 316;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.DivideEqual_RotatorFloat
    // 0x359EE0 (iNative: 291)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class DivideEqual_RotatorFloat_Parameters : BaseObject {
        public DivideEqual_RotatorFloat_Parameters() { }
        public DivideEqual_RotatorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.DivideEqual_RotatorFloat.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.DivideEqual_RotatorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.DivideEqual_RotatorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrDivideEqual_RotatorFloat;
    public static FRotator DivideEqual_RotatorFloat(ref FRotator A, float B) {
        _ptrDivideEqual_RotatorFloat ??= FindFunction("Function Core.Object.DivideEqual_RotatorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrDivideEqual_RotatorFloat.iNative = 0;
        _ptrDivideEqual_RotatorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivideEqual_RotatorFloat, @params);
        _ptrDivideEqual_RotatorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivideEqual_RotatorFloat.iNative = 291;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MultiplyEqual_RotatorFloat
    // 0x35A040 (iNative: 290)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_RotatorFloat_Parameters : BaseObject {
        public MultiplyEqual_RotatorFloat_Parameters() { }
        public MultiplyEqual_RotatorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MultiplyEqual_RotatorFloat.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.MultiplyEqual_RotatorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.MultiplyEqual_RotatorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrMultiplyEqual_RotatorFloat;
    public static FRotator MultiplyEqual_RotatorFloat(ref FRotator A, float B) {
        _ptrMultiplyEqual_RotatorFloat ??= FindFunction("Function Core.Object.MultiplyEqual_RotatorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrMultiplyEqual_RotatorFloat.iNative = 0;
        _ptrMultiplyEqual_RotatorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_RotatorFloat, @params);
        _ptrMultiplyEqual_RotatorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_RotatorFloat.iNative = 290;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Divide_RotatorFloat
    // 0x35A170 (iNative: 289)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Divide_RotatorFloat_Parameters : BaseObject {
        public Divide_RotatorFloat_Parameters() { }
        public Divide_RotatorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Divide_RotatorFloat.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.Divide_RotatorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.Divide_RotatorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrDivide_RotatorFloat;
    public static FRotator Divide_RotatorFloat(FRotator A, float B) {
        _ptrDivide_RotatorFloat ??= FindFunction("Function Core.Object.Divide_RotatorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrDivide_RotatorFloat.iNative = 0;
        _ptrDivide_RotatorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivide_RotatorFloat, @params);
        _ptrDivide_RotatorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivide_RotatorFloat.iNative = 289;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_FloatRotator
    // 0x35A290 (iNative: 288)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_FloatRotator_Parameters : BaseObject {
        public Multiply_FloatRotator_Parameters() { }
        public Multiply_FloatRotator_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Multiply_FloatRotator.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.Multiply_FloatRotator.B
        // 0x4 (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 12, 12);
        }

        // StructProperty Core.Object.Multiply_FloatRotator.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrMultiply_FloatRotator;
    public static FRotator Multiply_FloatRotator(float A, FRotator B) {
        _ptrMultiply_FloatRotator ??= FindFunction("Function Core.Object.Multiply_FloatRotator");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 12, 12);

        _ptrMultiply_FloatRotator.iNative = 0;
        _ptrMultiply_FloatRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_FloatRotator, @params);
        _ptrMultiply_FloatRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_FloatRotator.iNative = 288;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_RotatorFloat
    // 0x35A380 (iNative: 287)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_RotatorFloat_Parameters : BaseObject {
        public Multiply_RotatorFloat_Parameters() { }
        public Multiply_RotatorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_RotatorFloat.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.Multiply_RotatorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.Multiply_RotatorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotator ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrMultiply_RotatorFloat;
    public static FRotator Multiply_RotatorFloat(FRotator A, float B) {
        _ptrMultiply_RotatorFloat ??= FindFunction("Function Core.Object.Multiply_RotatorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrMultiply_RotatorFloat.iNative = 0;
        _ptrMultiply_RotatorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_RotatorFloat, @params);
        _ptrMultiply_RotatorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_RotatorFloat.iNative = 287;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.NotEqual_RotatorRotator
    // 0x35A470 (iNative: 203)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_RotatorRotator_Parameters : BaseObject {
        public NotEqual_RotatorRotator_Parameters() { }
        public NotEqual_RotatorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.NotEqual_RotatorRotator.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.NotEqual_RotatorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // BoolProperty Core.Object.NotEqual_RotatorRotator.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_RotatorRotator;
    public static bool NotEqual_RotatorRotator(FRotator A, FRotator B) {
        _ptrNotEqual_RotatorRotator ??= FindFunction("Function Core.Object.NotEqual_RotatorRotator");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrNotEqual_RotatorRotator.iNative = 0;
        _ptrNotEqual_RotatorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_RotatorRotator, @params);
        _ptrNotEqual_RotatorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_RotatorRotator.iNative = 203;

        return *(bool*)(@params + 24);
    }

    // Function Core.Object.EqualEqual_RotatorRotator
    // 0x35A540 (iNative: 142)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_RotatorRotator_Parameters : BaseObject {
        public EqualEqual_RotatorRotator_Parameters() { }
        public EqualEqual_RotatorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.EqualEqual_RotatorRotator.A
        // 0x0 (0xC)
        // (Param)
        public FRotator A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.EqualEqual_RotatorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // BoolProperty Core.Object.EqualEqual_RotatorRotator.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_RotatorRotator;
    public static bool EqualEqual_RotatorRotator(FRotator A, FRotator B) {
        _ptrEqualEqual_RotatorRotator ??= FindFunction("Function Core.Object.EqualEqual_RotatorRotator");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrEqualEqual_RotatorRotator.iNative = 0;
        _ptrEqualEqual_RotatorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_RotatorRotator, @params);
        _ptrEqualEqual_RotatorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_RotatorRotator.iNative = 142;

        return *(bool*)(@params + 24);
    }

    // Function Core.Object.GetRadiansBetweenVectors
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class GetRadiansBetweenVectors_Parameters : BaseObject {
        public GetRadiansBetweenVectors_Parameters() { }
        public GetRadiansBetweenVectors_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GetRadiansBetweenVectors.V0
        // 0x0 (0xC)
        // (Param)
        public FVector V0 {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.GetRadiansBetweenVectors.v1
        // 0xC (0xC)
        // (Param)
        public FVector v1 {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.GetRadiansBetweenVectors.ReturnValue
        // 0x18 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }
    }
    private static UFunction _ptrGetRadiansBetweenVectors;
    public static float GetRadiansBetweenVectors(FVector V0, FVector v1) {
        _ptrGetRadiansBetweenVectors ??= FindFunction("Function Core.Object.GetRadiansBetweenVectors");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)V0.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)v1.Pointer, @params + 12, 12, 12);

        StaticClass.ProcessEvent(_ptrGetRadiansBetweenVectors, @params);

        return *(float*)(@params + 24);
    }

    // Function Core.Object.VClamp
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class VClamp_Parameters : BaseObject {
        public VClamp_Parameters() { }
        public VClamp_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VClamp.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.VClamp.Min
        // 0xC (0xC)
        // (Param)
        public FVector Min {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.VClamp.Max
        // 0x18 (0xC)
        // (Param)
        public FVector Max {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }

        // StructProperty Core.Object.VClamp.ReturnValue
        // 0x24 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }
    private static UFunction _ptrVClamp;
    public static FVector VClamp(FVector A, FVector Min, FVector Max) {
        _ptrVClamp ??= FindFunction("Function Core.Object.VClamp");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Min.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy((void*)Max.Pointer, @params + 24, 12, 12);

        StaticClass.ProcessEvent(_ptrVClamp, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 36, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.vect3d
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class vect3d_Parameters : BaseObject {
        public vect3d_Parameters() { }
        public vect3d_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.vect3d.X
        // 0x0 (0x4)
        // (Param)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.vect3d.Y
        // 0x4 (0x4)
        // (Param)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.vect3d.Z
        // 0x8 (0x4)
        // (Param)
        public float Z {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // StructProperty Core.Object.vect3d.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrvect3d;
    public static FVector vect3d(float X, float Y, float Z) {
        _ptrvect3d ??= FindFunction("Function Core.Object.vect3d");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&X, @params, 4, 4);
        System.Buffer.MemoryCopy(&Y, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Z, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrvect3d, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.InCylinder
    // 0x3750E0
    // (Final | Defined | Simulated | HasOptionalParams | Public | HasDefaults)
    public unsafe class InCylinder_Parameters : BaseObject {
        public InCylinder_Parameters() { }
        public InCylinder_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.InCylinder.Origin
        // 0x0 (0xC)
        // (Param)
        public FVector Origin {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.InCylinder.Dir
        // 0xC (0xC)
        // (Param)
        public FRotator Dir {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.InCylinder.Width
        // 0x18 (0x4)
        // (Param)
        public float Width {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // StructProperty Core.Object.InCylinder.A
        // 0x1C (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }

        // BoolProperty Core.Object.InCylinder.bIgnoreZ
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIgnoreZ {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.InCylinder.ReturnValue
        // 0x2C (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 44) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 44) |= 0x1;
                else *(uint*)(Pointer + 44) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrInCylinder;
    public bool InCylinder(FVector Origin, FRotator Dir, float Width, FVector A, bool bIgnoreZ = false) {
        _ptrInCylinder ??= FindFunction("Function Core.Object.InCylinder");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)Origin.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Dir.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&Width, @params + 24, 4, 4);
        System.Buffer.MemoryCopy((void*)A.Pointer, @params + 28, 12, 12);
        System.Buffer.MemoryCopy(&bIgnoreZ, @params + 40, 4, 4);

        ProcessEvent(_ptrInCylinder, @params);

        return *(bool*)(@params + 44);
    }

    // Function Core.Object.NoZDot
    // 0x35B080
    // (Final | Native | Static | Public)
    public unsafe class NoZDot_Parameters : BaseObject {
        public NoZDot_Parameters() { }
        public NoZDot_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.NoZDot.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.NoZDot.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.NoZDot.ReturnValue
        // 0x18 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }
    }
    private static UFunction _ptrNoZDot;
    public static float NoZDot(FVector A, FVector B) {
        _ptrNoZDot ??= FindFunction("Function Core.Object.NoZDot");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrNoZDot.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNoZDot, @params);
        _ptrNoZDot.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 24);
    }

    // Function Core.Object.ClampLength
    // 0x35AFC0
    // (Final | Native | Static | Public)
    public unsafe class ClampLength_Parameters : BaseObject {
        public ClampLength_Parameters() { }
        public ClampLength_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.ClampLength.V
        // 0x0 (0xC)
        // (Param)
        public FVector V {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.ClampLength.MaxLength
        // 0xC (0x4)
        // (Param)
        public float MaxLength {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.ClampLength.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrClampLength;
    public static FVector ClampLength(FVector V, float MaxLength) {
        _ptrClampLength ??= FindFunction("Function Core.Object.ClampLength");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)V.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&MaxLength, @params + 12, 4, 4);

        _ptrClampLength.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrClampLength, @params);
        _ptrClampLength.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VInterpConstantTo
    // 0x35AE80
    // (Final | Native | Static | Public)
    public unsafe class VInterpConstantTo_Parameters : BaseObject {
        public VInterpConstantTo_Parameters() { }
        public VInterpConstantTo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VInterpConstantTo.Current
        // 0x0 (0xC)
        // (Param)
        public FVector Current {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.VInterpConstantTo.Target
        // 0xC (0xC)
        // (Param)
        public FVector Target {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.VInterpConstantTo.DeltaTime
        // 0x18 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.VInterpConstantTo.InterpSpeed
        // 0x1C (0x4)
        // (Param)
        public float InterpSpeed {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }

        // StructProperty Core.Object.VInterpConstantTo.ReturnValue
        // 0x20 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }
    }
    private static UFunction _ptrVInterpConstantTo;
    public static FVector VInterpConstantTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed) {
        _ptrVInterpConstantTo ??= FindFunction("Function Core.Object.VInterpConstantTo");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)Current.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Target.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&InterpSpeed, @params + 28, 4, 4);

        _ptrVInterpConstantTo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVInterpConstantTo, @params);
        _ptrVInterpConstantTo.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VInterpTo
    // 0x35AD60
    // (Final | Native | Static | Public)
    public unsafe class VInterpTo_Parameters : BaseObject {
        public VInterpTo_Parameters() { }
        public VInterpTo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VInterpTo.Current
        // 0x0 (0xC)
        // (Param)
        public FVector Current {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.VInterpTo.Target
        // 0xC (0xC)
        // (Param)
        public FVector Target {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.VInterpTo.DeltaTime
        // 0x18 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.VInterpTo.InterpSpeed
        // 0x1C (0x4)
        // (Param)
        public float InterpSpeed {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }

        // StructProperty Core.Object.VInterpTo.ReturnValue
        // 0x20 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }
    }
    private static UFunction _ptrVInterpTo;
    public static FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed) {
        _ptrVInterpTo ??= FindFunction("Function Core.Object.VInterpTo");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)Current.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Target.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&InterpSpeed, @params + 28, 4, 4);

        _ptrVInterpTo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVInterpTo, @params);
        _ptrVInterpTo.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 32, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Construct
    // 0x3750E0
    // (Event | Public)
    public unsafe class Construct_Parameters : BaseObject {
        public Construct_Parameters() { }
        public Construct_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrConstruct;
    public void Construct() {
        _ptrConstruct ??= FindFunction("Function Core.Object.Construct");

        ProcessEvent(_ptrConstruct, null);
    }

    // Function Core.Object.ProjectOnToPlane
    // 0x36AFF0
    // (Final | Native | Static | HasOptionalParams | Public)
    public unsafe class ProjectOnToPlane_Parameters : BaseObject {
        public ProjectOnToPlane_Parameters() { }
        public ProjectOnToPlane_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.ProjectOnToPlane.InVector
        // 0x0 (0xC)
        // (Param)
        public FVector InVector {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.ProjectOnToPlane.InNormal
        // 0xC (0xC)
        // (Param)
        public FVector InNormal {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.ProjectOnToPlane.OverBounce
        // 0x18 (0x4)
        // (OptionalParam | Param)
        public float OverBounce {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // StructProperty Core.Object.ProjectOnToPlane.ReturnValue
        // 0x1C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }
    }
    private static UFunction _ptrProjectOnToPlane;
    public static FVector ProjectOnToPlane(FVector InVector, FVector InNormal, float OverBounce = 0) {
        _ptrProjectOnToPlane ??= FindFunction("Function Core.Object.ProjectOnToPlane");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)InVector.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)InNormal.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&OverBounce, @params + 24, 4, 4);

        _ptrProjectOnToPlane.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProjectOnToPlane, @params);
        _ptrProjectOnToPlane.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 28, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.IsZero
    // 0x36B150 (iNative: 1501)
    // (Final | Native | Static | Public)
    public unsafe class IsZero_Parameters : BaseObject {
        public IsZero_Parameters() { }
        public IsZero_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.IsZero.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // BoolProperty Core.Object.IsZero.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsZero;
    public static bool IsZero(FVector A) {
        _ptrIsZero ??= FindFunction("Function Core.Object.IsZero");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrIsZero.iNative = 0;
        _ptrIsZero.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIsZero, @params);
        _ptrIsZero.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrIsZero.iNative = 1501;

        return *(bool*)(@params + 12);
    }

    // Function Core.Object.ProjectOnTo
    // 0x36AED0 (iNative: 1500)
    // (Final | Native | Static | Public)
    public unsafe class ProjectOnTo_Parameters : BaseObject {
        public ProjectOnTo_Parameters() { }
        public ProjectOnTo_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.ProjectOnTo.X
        // 0x0 (0xC)
        // (Param)
        public FVector X {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.ProjectOnTo.Y
        // 0xC (0xC)
        // (Param)
        public FVector Y {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.ProjectOnTo.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrProjectOnTo;
    public static FVector ProjectOnTo(FVector X, FVector Y) {
        _ptrProjectOnTo ??= FindFunction("Function Core.Object.ProjectOnTo");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)X.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Y.Pointer, @params + 12, 12, 12);

        _ptrProjectOnTo.iNative = 0;
        _ptrProjectOnTo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrProjectOnTo, @params);
        _ptrProjectOnTo.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrProjectOnTo.iNative = 1500;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MirrorVectorByNormal
    // 0x35A700 (iNative: 300)
    // (Final | Native | Static | Public)
    public unsafe class MirrorVectorByNormal_Parameters : BaseObject {
        public MirrorVectorByNormal_Parameters() { }
        public MirrorVectorByNormal_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MirrorVectorByNormal.InVect
        // 0x0 (0xC)
        // (Param)
        public FVector InVect {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.MirrorVectorByNormal.InNormal
        // 0xC (0xC)
        // (Param)
        public FVector InNormal {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.MirrorVectorByNormal.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrMirrorVectorByNormal;
    public static FVector MirrorVectorByNormal(FVector InVect, FVector InNormal) {
        _ptrMirrorVectorByNormal ??= FindFunction("Function Core.Object.MirrorVectorByNormal");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)InVect.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)InNormal.Pointer, @params + 12, 12, 12);

        _ptrMirrorVectorByNormal.iNative = 0;
        _ptrMirrorVectorByNormal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMirrorVectorByNormal, @params);
        _ptrMirrorVectorByNormal.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMirrorVectorByNormal.iNative = 300;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VRandCone2
    // 0x35AB50
    // (Final | Native | Static | Public)
    public unsafe class VRandCone2_Parameters : BaseObject {
        public VRandCone2_Parameters() { }
        public VRandCone2_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VRandCone2.Dir
        // 0x0 (0xC)
        // (Param)
        public FVector Dir {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.VRandCone2.HorizontalConeHalfAngleRadians
        // 0xC (0x4)
        // (Param)
        public float HorizontalConeHalfAngleRadians {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.VRandCone2.VerticalConeHalfAngleRadians
        // 0x10 (0x4)
        // (Param)
        public float VerticalConeHalfAngleRadians {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }

        // StructProperty Core.Object.VRandCone2.ReturnValue
        // 0x14 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 20);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 20), 12, 12);
        }
    }
    private static UFunction _ptrVRandCone2;
    public static FVector VRandCone2(FVector Dir, float HorizontalConeHalfAngleRadians, float VerticalConeHalfAngleRadians) {
        _ptrVRandCone2 ??= FindFunction("Function Core.Object.VRandCone2");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Dir.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&HorizontalConeHalfAngleRadians, @params + 12, 4, 4);
        System.Buffer.MemoryCopy(&VerticalConeHalfAngleRadians, @params + 16, 4, 4);

        _ptrVRandCone2.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVRandCone2, @params);
        _ptrVRandCone2.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 20, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VRandCone
    // 0x35AA90
    // (Final | Native | Static | Public)
    public unsafe class VRandCone_Parameters : BaseObject {
        public VRandCone_Parameters() { }
        public VRandCone_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VRandCone.Dir
        // 0x0 (0xC)
        // (Param)
        public FVector Dir {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.VRandCone.ConeHalfAngleRadians
        // 0xC (0x4)
        // (Param)
        public float ConeHalfAngleRadians {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.VRandCone.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrVRandCone;
    public static FVector VRandCone(FVector Dir, float ConeHalfAngleRadians) {
        _ptrVRandCone ??= FindFunction("Function Core.Object.VRandCone");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)Dir.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&ConeHalfAngleRadians, @params + 12, 4, 4);

        _ptrVRandCone.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVRandCone, @params);
        _ptrVRandCone.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VRand
    // 0x35A910 (iNative: 252)
    // (Final | Native | Static | Public)
    public unsafe class VRand_Parameters : BaseObject {
        public VRand_Parameters() { }
        public VRand_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VRand.ReturnValue
        // 0x0 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }
    }
    private static UFunction _ptrVRand;
    public static FVector VRand() {
        _ptrVRand ??= FindFunction("Function Core.Object.VRand");

        var @params = stackalloc byte[12];

        _ptrVRand.iNative = 0;
        _ptrVRand.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVRand, @params);
        _ptrVRand.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrVRand.iNative = 252;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VLerp
    // 0x35AC40
    // (Final | Native | Static | Public)
    public unsafe class VLerp_Parameters : BaseObject {
        public VLerp_Parameters() { }
        public VLerp_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VLerp.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.VLerp.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.VLerp.Alpha
        // 0x18 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // StructProperty Core.Object.VLerp.ReturnValue
        // 0x1C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }
    }
    private static UFunction _ptrVLerp;
    public static FVector VLerp(FVector A, FVector B, float Alpha) {
        _ptrVLerp ??= FindFunction("Function Core.Object.VLerp");

        var @params = stackalloc byte[40];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&Alpha, @params + 24, 4, 4);

        _ptrVLerp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVLerp, @params);
        _ptrVLerp.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 28, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Normal2D
    // 0x35B340 (iNative: 227)
    // (Final | Native | Static | Public)
    public unsafe class Normal2D_Parameters : BaseObject {
        public Normal2D_Parameters() { }
        public Normal2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Normal2D.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Normal2D.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrNormal2D;
    public static FVector Normal2D(FVector A) {
        _ptrNormal2D ??= FindFunction("Function Core.Object.Normal2D");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrNormal2D.iNative = 0;
        _ptrNormal2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNormal2D, @params);
        _ptrNormal2D.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNormal2D.iNative = 227;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Normal
    // 0x35B1A0 (iNative: 226)
    // (Final | Native | Static | Public)
    public unsafe class Normal_Parameters : BaseObject {
        public Normal_Parameters() { }
        public Normal_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Normal.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Normal.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrNormal;
    public static FVector Normal(FVector A) {
        _ptrNormal ??= FindFunction("Function Core.Object.Normal");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrNormal.iNative = 0;
        _ptrNormal.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNormal, @params);
        _ptrNormal.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNormal.iNative = 226;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.VSizeSq2D
    // 0x35B680
    // (Final | Native | Static | Public)
    public unsafe class VSizeSq2D_Parameters : BaseObject {
        public VSizeSq2D_Parameters() { }
        public VSizeSq2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VSizeSq2D.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.VSizeSq2D.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrVSizeSq2D;
    public static float VSizeSq2D(FVector A) {
        _ptrVSizeSq2D ??= FindFunction("Function Core.Object.VSizeSq2D");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrVSizeSq2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVSizeSq2D, @params);
        _ptrVSizeSq2D.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.VSizeSq
    // 0x35B5F0 (iNative: 228)
    // (Final | Native | Static | Public)
    public unsafe class VSizeSq_Parameters : BaseObject {
        public VSizeSq_Parameters() { }
        public VSizeSq_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VSizeSq.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.VSizeSq.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrVSizeSq;
    public static float VSizeSq(FVector A) {
        _ptrVSizeSq ??= FindFunction("Function Core.Object.VSizeSq");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrVSizeSq.iNative = 0;
        _ptrVSizeSq.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVSizeSq, @params);
        _ptrVSizeSq.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrVSizeSq.iNative = 228;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.VSize2D
    // 0x35B560 (iNative: 233)
    // (Final | Native | Static | Public)
    public unsafe class VSize2D_Parameters : BaseObject {
        public VSize2D_Parameters() { }
        public VSize2D_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VSize2D.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.VSize2D.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrVSize2D;
    public static float VSize2D(FVector A) {
        _ptrVSize2D ??= FindFunction("Function Core.Object.VSize2D");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrVSize2D.iNative = 0;
        _ptrVSize2D.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVSize2D, @params);
        _ptrVSize2D.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrVSize2D.iNative = 233;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.VSize
    // 0x35B4C0 (iNative: 225)
    // (Final | Native | Static | Public)
    public unsafe class VSize_Parameters : BaseObject {
        public VSize_Parameters() { }
        public VSize_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.VSize.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.VSize.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrVSize;
    public static float VSize(FVector A) {
        _ptrVSize ??= FindFunction("Function Core.Object.VSize");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrVSize.iNative = 0;
        _ptrVSize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrVSize, @params);
        _ptrVSize.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrVSize.iNative = 225;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.SubtractEqual_VectorVector
    // 0x35B700 (iNative: 224)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_VectorVector_Parameters : BaseObject {
        public SubtractEqual_VectorVector_Parameters() { }
        public SubtractEqual_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.SubtractEqual_VectorVector.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.SubtractEqual_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.SubtractEqual_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrSubtractEqual_VectorVector;
    public static FVector SubtractEqual_VectorVector(ref FVector A, FVector B) {
        _ptrSubtractEqual_VectorVector ??= FindFunction("Function Core.Object.SubtractEqual_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrSubtractEqual_VectorVector.iNative = 0;
        _ptrSubtractEqual_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_VectorVector, @params);
        _ptrSubtractEqual_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractEqual_VectorVector.iNative = 224;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.AddEqual_VectorVector
    // 0x35B820 (iNative: 223)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddEqual_VectorVector_Parameters : BaseObject {
        public AddEqual_VectorVector_Parameters() { }
        public AddEqual_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.AddEqual_VectorVector.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.AddEqual_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.AddEqual_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrAddEqual_VectorVector;
    public static FVector AddEqual_VectorVector(ref FVector A, FVector B) {
        _ptrAddEqual_VectorVector ??= FindFunction("Function Core.Object.AddEqual_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrAddEqual_VectorVector.iNative = 0;
        _ptrAddEqual_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddEqual_VectorVector, @params);
        _ptrAddEqual_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddEqual_VectorVector.iNative = 223;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.DivideEqual_VectorFloat
    // 0x35B940 (iNative: 222)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class DivideEqual_VectorFloat_Parameters : BaseObject {
        public DivideEqual_VectorFloat_Parameters() { }
        public DivideEqual_VectorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.DivideEqual_VectorFloat.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.DivideEqual_VectorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.DivideEqual_VectorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrDivideEqual_VectorFloat;
    public static FVector DivideEqual_VectorFloat(ref FVector A, float B) {
        _ptrDivideEqual_VectorFloat ??= FindFunction("Function Core.Object.DivideEqual_VectorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrDivideEqual_VectorFloat.iNative = 0;
        _ptrDivideEqual_VectorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivideEqual_VectorFloat, @params);
        _ptrDivideEqual_VectorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivideEqual_VectorFloat.iNative = 222;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MultiplyEqual_VectorVector
    // 0x35BAA0 (iNative: 297)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_VectorVector_Parameters : BaseObject {
        public MultiplyEqual_VectorVector_Parameters() { }
        public MultiplyEqual_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MultiplyEqual_VectorVector.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.MultiplyEqual_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.MultiplyEqual_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrMultiplyEqual_VectorVector;
    public static FVector MultiplyEqual_VectorVector(ref FVector A, FVector B) {
        _ptrMultiplyEqual_VectorVector ??= FindFunction("Function Core.Object.MultiplyEqual_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrMultiplyEqual_VectorVector.iNative = 0;
        _ptrMultiplyEqual_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_VectorVector, @params);
        _ptrMultiplyEqual_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_VectorVector.iNative = 297;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.MultiplyEqual_VectorFloat
    // 0x35BBC0 (iNative: 221)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_VectorFloat_Parameters : BaseObject {
        public MultiplyEqual_VectorFloat_Parameters() { }
        public MultiplyEqual_VectorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MultiplyEqual_VectorFloat.A
        // 0x0 (0xC)
        // (Param | OutParam)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.MultiplyEqual_VectorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.MultiplyEqual_VectorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrMultiplyEqual_VectorFloat;
    public static FVector MultiplyEqual_VectorFloat(ref FVector A, float B) {
        _ptrMultiplyEqual_VectorFloat ??= FindFunction("Function Core.Object.MultiplyEqual_VectorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrMultiplyEqual_VectorFloat.iNative = 0;
        _ptrMultiplyEqual_VectorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_VectorFloat, @params);
        _ptrMultiplyEqual_VectorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_VectorFloat.iNative = 221;

        var _APtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params, (void*)_APtr, 12, 12);
        A = new(_APtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Cross_VectorVector
    // 0x35BCF0 (iNative: 220)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Cross_VectorVector_Parameters : BaseObject {
        public Cross_VectorVector_Parameters() { }
        public Cross_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Cross_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Cross_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.Cross_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrCross_VectorVector;
    public static FVector Cross_VectorVector(FVector A, FVector B) {
        _ptrCross_VectorVector ??= FindFunction("Function Core.Object.Cross_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrCross_VectorVector.iNative = 0;
        _ptrCross_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrCross_VectorVector, @params);
        _ptrCross_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrCross_VectorVector.iNative = 220;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Dot_VectorVector
    // 0x35BDF0 (iNative: 219)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Dot_VectorVector_Parameters : BaseObject {
        public Dot_VectorVector_Parameters() { }
        public Dot_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Dot_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Dot_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.Dot_VectorVector.ReturnValue
        // 0x18 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }
    }
    private static UFunction _ptrDot_VectorVector;
    public static float Dot_VectorVector(FVector A, FVector B) {
        _ptrDot_VectorVector ??= FindFunction("Function Core.Object.Dot_VectorVector");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrDot_VectorVector.iNative = 0;
        _ptrDot_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDot_VectorVector, @params);
        _ptrDot_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDot_VectorVector.iNative = 219;

        return *(float*)(@params + 24);
    }

    // Function Core.Object.NotEqual_VectorVector
    // 0x35BEB0 (iNative: 218)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_VectorVector_Parameters : BaseObject {
        public NotEqual_VectorVector_Parameters() { }
        public NotEqual_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.NotEqual_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.NotEqual_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // BoolProperty Core.Object.NotEqual_VectorVector.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_VectorVector;
    public static bool NotEqual_VectorVector(FVector A, FVector B) {
        _ptrNotEqual_VectorVector ??= FindFunction("Function Core.Object.NotEqual_VectorVector");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrNotEqual_VectorVector.iNative = 0;
        _ptrNotEqual_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_VectorVector, @params);
        _ptrNotEqual_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_VectorVector.iNative = 218;

        return *(bool*)(@params + 24);
    }

    // Function Core.Object.EqualEqual_VectorVector
    // 0x35BF80 (iNative: 217)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_VectorVector_Parameters : BaseObject {
        public EqualEqual_VectorVector_Parameters() { }
        public EqualEqual_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.EqualEqual_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.EqualEqual_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // BoolProperty Core.Object.EqualEqual_VectorVector.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_VectorVector;
    public static bool EqualEqual_VectorVector(FVector A, FVector B) {
        _ptrEqualEqual_VectorVector ??= FindFunction("Function Core.Object.EqualEqual_VectorVector");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrEqualEqual_VectorVector.iNative = 0;
        _ptrEqualEqual_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_VectorVector, @params);
        _ptrEqualEqual_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_VectorVector.iNative = 217;

        return *(bool*)(@params + 24);
    }

    // Function Core.Object.GreaterGreater_VectorRotator
    // 0x35C050 (iNative: 276)
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterGreater_VectorRotator_Parameters : BaseObject {
        public GreaterGreater_VectorRotator_Parameters() { }
        public GreaterGreater_VectorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.GreaterGreater_VectorRotator.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.GreaterGreater_VectorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.GreaterGreater_VectorRotator.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrGreaterGreater_VectorRotator;
    public static FVector GreaterGreater_VectorRotator(FVector A, FRotator B) {
        _ptrGreaterGreater_VectorRotator ??= FindFunction("Function Core.Object.GreaterGreater_VectorRotator");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrGreaterGreater_VectorRotator.iNative = 0;
        _ptrGreaterGreater_VectorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterGreater_VectorRotator, @params);
        _ptrGreaterGreater_VectorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreaterGreater_VectorRotator.iNative = 276;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.LessLess_VectorRotator
    // 0x35C1B0 (iNative: 275)
    // (Final | Native | Operator | Static | Public)
    public unsafe class LessLess_VectorRotator_Parameters : BaseObject {
        public LessLess_VectorRotator_Parameters() { }
        public LessLess_VectorRotator_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.LessLess_VectorRotator.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.LessLess_VectorRotator.B
        // 0xC (0xC)
        // (Param)
        public FRotator B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.LessLess_VectorRotator.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrLessLess_VectorRotator;
    public static FVector LessLess_VectorRotator(FVector A, FRotator B) {
        _ptrLessLess_VectorRotator ??= FindFunction("Function Core.Object.LessLess_VectorRotator");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrLessLess_VectorRotator.iNative = 0;
        _ptrLessLess_VectorRotator.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLessLess_VectorRotator, @params);
        _ptrLessLess_VectorRotator.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLessLess_VectorRotator.iNative = 275;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_VectorVector
    // 0x35C310 (iNative: 216)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_VectorVector_Parameters : BaseObject {
        public Subtract_VectorVector_Parameters() { }
        public Subtract_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Subtract_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.Subtract_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrSubtract_VectorVector;
    public static FVector Subtract_VectorVector(FVector A, FVector B) {
        _ptrSubtract_VectorVector ??= FindFunction("Function Core.Object.Subtract_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrSubtract_VectorVector.iNative = 0;
        _ptrSubtract_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_VectorVector, @params);
        _ptrSubtract_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_VectorVector.iNative = 216;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Add_VectorVector
    // 0x35C3E0 (iNative: 215)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_VectorVector_Parameters : BaseObject {
        public Add_VectorVector_Parameters() { }
        public Add_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Add_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Add_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.Add_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrAdd_VectorVector;
    public static FVector Add_VectorVector(FVector A, FVector B) {
        _ptrAdd_VectorVector ??= FindFunction("Function Core.Object.Add_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrAdd_VectorVector.iNative = 0;
        _ptrAdd_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_VectorVector, @params);
        _ptrAdd_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAdd_VectorVector.iNative = 215;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Divide_VectorFloat
    // 0x35C4B0 (iNative: 214)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Divide_VectorFloat_Parameters : BaseObject {
        public Divide_VectorFloat_Parameters() { }
        public Divide_VectorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Divide_VectorFloat.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.Divide_VectorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.Divide_VectorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrDivide_VectorFloat;
    public static FVector Divide_VectorFloat(FVector A, float B) {
        _ptrDivide_VectorFloat ??= FindFunction("Function Core.Object.Divide_VectorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrDivide_VectorFloat.iNative = 0;
        _ptrDivide_VectorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivide_VectorFloat, @params);
        _ptrDivide_VectorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivide_VectorFloat.iNative = 214;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_VectorVector
    // 0x35C5C0 (iNative: 296)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_VectorVector_Parameters : BaseObject {
        public Multiply_VectorVector_Parameters() { }
        public Multiply_VectorVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_VectorVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Multiply_VectorVector.B
        // 0xC (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // StructProperty Core.Object.Multiply_VectorVector.ReturnValue
        // 0x18 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 12, 12);
        }
    }
    private static UFunction _ptrMultiply_VectorVector;
    public static FVector Multiply_VectorVector(FVector A, FVector B) {
        _ptrMultiply_VectorVector ??= FindFunction("Function Core.Object.Multiply_VectorVector");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 12, 12, 12);

        _ptrMultiply_VectorVector.iNative = 0;
        _ptrMultiply_VectorVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_VectorVector, @params);
        _ptrMultiply_VectorVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_VectorVector.iNative = 296;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 24, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_FloatVector
    // 0x35C690 (iNative: 213)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_FloatVector_Parameters : BaseObject {
        public Multiply_FloatVector_Parameters() { }
        public Multiply_FloatVector_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Multiply_FloatVector.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.Multiply_FloatVector.B
        // 0x4 (0xC)
        // (Param)
        public FVector B {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 12, 12);
        }

        // StructProperty Core.Object.Multiply_FloatVector.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrMultiply_FloatVector;
    public static FVector Multiply_FloatVector(float A, FVector B) {
        _ptrMultiply_FloatVector ??= FindFunction("Function Core.Object.Multiply_FloatVector");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy((void*)B.Pointer, @params + 4, 12, 12);

        _ptrMultiply_FloatVector.iNative = 0;
        _ptrMultiply_FloatVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_FloatVector, @params);
        _ptrMultiply_FloatVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_FloatVector.iNative = 213;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Multiply_VectorFloat
    // 0x35C770 (iNative: 212)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_VectorFloat_Parameters : BaseObject {
        public Multiply_VectorFloat_Parameters() { }
        public Multiply_VectorFloat_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Multiply_VectorFloat.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // FloatProperty Core.Object.Multiply_VectorFloat.B
        // 0xC (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // StructProperty Core.Object.Multiply_VectorFloat.ReturnValue
        // 0x10 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }
    }
    private static UFunction _ptrMultiply_VectorFloat;
    public static FVector Multiply_VectorFloat(FVector A, float B) {
        _ptrMultiply_VectorFloat ??= FindFunction("Function Core.Object.Multiply_VectorFloat");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy(&B, @params + 12, 4, 4);

        _ptrMultiply_VectorFloat.iNative = 0;
        _ptrMultiply_VectorFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_VectorFloat, @params);
        _ptrMultiply_VectorFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_VectorFloat.iNative = 212;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Subtract_PreVector
    // 0x35C850 (iNative: 211)
    // (Final | PreOperator | Native | Operator | Static | Public)
    public unsafe class Subtract_PreVector_Parameters : BaseObject {
        public Subtract_PreVector_Parameters() { }
        public Subtract_PreVector_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Subtract_PreVector.A
        // 0x0 (0xC)
        // (Param)
        public FVector A {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Subtract_PreVector.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrSubtract_PreVector;
    public static FVector Subtract_PreVector(FVector A) {
        _ptrSubtract_PreVector ??= FindFunction("Function Core.Object.Subtract_PreVector");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)A.Pointer, @params, 12, 12);

        _ptrSubtract_PreVector.iNative = 0;
        _ptrSubtract_PreVector.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_PreVector, @params);
        _ptrSubtract_PreVector.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_PreVector.iNative = 211;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.FInterpConstantTo
    // 0x3620C0
    // (Final | Native | Static | Public)
    public unsafe class FInterpConstantTo_Parameters : BaseObject {
        public FInterpConstantTo_Parameters() { }
        public FInterpConstantTo_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FInterpConstantTo.Current
        // 0x0 (0x4)
        // (Param)
        public float Current {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FInterpConstantTo.Target
        // 0x4 (0x4)
        // (Param)
        public float Target {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FInterpConstantTo.DeltaTime
        // 0x8 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FInterpConstantTo.InterpSpeed
        // 0xC (0x4)
        // (Param)
        public float InterpSpeed {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FInterpConstantTo.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFInterpConstantTo;
    public static float FInterpConstantTo(float Current, float Target, float DeltaTime, float InterpSpeed) {
        _ptrFInterpConstantTo ??= FindFunction("Function Core.Object.FInterpConstantTo");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&Current, @params, 4, 4);
        System.Buffer.MemoryCopy(&Target, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&InterpSpeed, @params + 12, 4, 4);

        _ptrFInterpConstantTo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFInterpConstantTo, @params);
        _ptrFInterpConstantTo.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 16);
    }

    // Function Core.Object.FInterpTo
    // 0x361FC0
    // (Final | Native | Static | Public)
    public unsafe class FInterpTo_Parameters : BaseObject {
        public FInterpTo_Parameters() { }
        public FInterpTo_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FInterpTo.Current
        // 0x0 (0x4)
        // (Param)
        public float Current {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FInterpTo.Target
        // 0x4 (0x4)
        // (Param)
        public float Target {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FInterpTo.DeltaTime
        // 0x8 (0x4)
        // (Param)
        public float DeltaTime {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FInterpTo.InterpSpeed
        // 0xC (0x4)
        // (Param)
        public float InterpSpeed {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FInterpTo.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFInterpTo;
    public static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed) {
        _ptrFInterpTo ??= FindFunction("Function Core.Object.FInterpTo");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&Current, @params, 4, 4);
        System.Buffer.MemoryCopy(&Target, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&DeltaTime, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&InterpSpeed, @params + 12, 4, 4);

        _ptrFInterpTo.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFInterpTo, @params);
        _ptrFInterpTo.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 16);
    }

    // Function Core.Object.FPctByRange
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class FPctByRange_Parameters : BaseObject {
        public FPctByRange_Parameters() { }
        public FPctByRange_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FPctByRange.Value
        // 0x0 (0x4)
        // (Param)
        public float Value {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FPctByRange.InMin
        // 0x4 (0x4)
        // (Param)
        public float InMin {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FPctByRange.InMax
        // 0x8 (0x4)
        // (Param)
        public float InMax {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FPctByRange.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrFPctByRange;
    public static float FPctByRange(float Value, float InMin, float InMax) {
        _ptrFPctByRange ??= FindFunction("Function Core.Object.FPctByRange");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&Value, @params, 4, 4);
        System.Buffer.MemoryCopy(&InMin, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&InMax, @params + 8, 4, 4);

        StaticClass.ProcessEvent(_ptrFPctByRange, @params);

        return *(float*)(@params + 12);
    }

    // Function Core.Object.RandSign
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public)
    public unsafe class RandSign_Parameters : BaseObject {
        public RandSign_Parameters() { }
        public RandSign_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.RandSign.Value
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public float Value {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.RandSign.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrRandSign;
    public static float RandSign(float Value = 0) {
        _ptrRandSign ??= FindFunction("Function Core.Object.RandSign");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&Value, @params, 4, 4);

        StaticClass.ProcessEvent(_ptrRandSign, @params);

        return *(float*)(@params + 4);
    }

    // Function Core.Object.CalculateGravityPosition
    // 0x3750E0
    // (Final | Defined | Static | HasOptionalParams | Public)
    public unsafe class CalculateGravityPosition_Parameters : BaseObject {
        public CalculateGravityPosition_Parameters() { }
        public CalculateGravityPosition_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.CalculateGravityPosition.Location
        // 0x0 (0xC)
        // (Param)
        public FVector Location {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.CalculateGravityPosition.Velocity
        // 0xC (0xC)
        // (Param)
        public FVector Velocity {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.CalculateGravityPosition.Gravity
        // 0x18 (0x4)
        // (Param)
        public float Gravity {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.CalculateGravityPosition.Time
        // 0x1C (0x4)
        // (Param)
        public float Time {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }

        // StructProperty Core.Object.CalculateGravityPosition.GravityDirection
        // 0x20 (0xC)
        // (OptionalParam | Param)
        public FVector GravityDirection {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 12, 12);
        }

        // StructProperty Core.Object.CalculateGravityPosition.ReturnValue
        // 0x2C (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 44);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 44), 12, 12);
        }
    }
    private static UFunction _ptrCalculateGravityPosition;
    public static FVector CalculateGravityPosition(FVector Location, FVector Velocity, float Gravity, float Time, FVector GravityDirection = null) {
        _ptrCalculateGravityPosition ??= FindFunction("Function Core.Object.CalculateGravityPosition");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)Location.Pointer, @params, 12, 12);
        System.Buffer.MemoryCopy((void*)Velocity.Pointer, @params + 12, 12, 12);
        System.Buffer.MemoryCopy(&Gravity, @params + 24, 4, 4);
        System.Buffer.MemoryCopy(&Time, @params + 28, 4, 4);
        if (GravityDirection != null) System.Buffer.MemoryCopy((void*)GravityDirection.Pointer, @params + 32, 12, 12);

        StaticClass.ProcessEvent(_ptrCalculateGravityPosition, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 44, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.RandRange
    // 0x3750E0
    // (Final | Defined | Simulated | Static | Public)
    public unsafe class RandRange_Parameters : BaseObject {
        public RandRange_Parameters() { }
        public RandRange_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.RandRange.InMin
        // 0x0 (0x4)
        // (Param)
        public float InMin {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.RandRange.InMax
        // 0x4 (0x4)
        // (Param)
        public float InMax {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.RandRange.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrRandRange;
    public static float RandRange(float InMin, float InMax) {
        _ptrRandRange ??= FindFunction("Function Core.Object.RandRange");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&InMin, @params, 4, 4);
        System.Buffer.MemoryCopy(&InMax, @params + 4, 4, 4);

        StaticClass.ProcessEvent(_ptrRandRange, @params);

        return *(float*)(@params + 8);
    }

    // Function Core.Object.FInterpEaseInOut
    // 0x361EC0
    // (Final | Native | Static | Public)
    public unsafe class FInterpEaseInOut_Parameters : BaseObject {
        public FInterpEaseInOut_Parameters() { }
        public FInterpEaseInOut_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FInterpEaseInOut.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FInterpEaseInOut.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FInterpEaseInOut.Alpha
        // 0x8 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FInterpEaseInOut.Exp
        // 0xC (0x4)
        // (Param)
        public float Exp {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FInterpEaseInOut.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFInterpEaseInOut;
    public static float FInterpEaseInOut(float A, float B, float Alpha, float Exp) {
        _ptrFInterpEaseInOut ??= FindFunction("Function Core.Object.FInterpEaseInOut");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Alpha, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&Exp, @params + 12, 4, 4);

        _ptrFInterpEaseInOut.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFInterpEaseInOut, @params);
        _ptrFInterpEaseInOut.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 16);
    }

    // Function Core.Object.FInterpEaseOut
    // 0x361DC0
    // (Final | Native | Static | Public)
    public unsafe class FInterpEaseOut_Parameters : BaseObject {
        public FInterpEaseOut_Parameters() { }
        public FInterpEaseOut_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FInterpEaseOut.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FInterpEaseOut.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FInterpEaseOut.Alpha
        // 0x8 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FInterpEaseOut.Exp
        // 0xC (0x4)
        // (Param)
        public float Exp {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FInterpEaseOut.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFInterpEaseOut;
    public static float FInterpEaseOut(float A, float B, float Alpha, float Exp) {
        _ptrFInterpEaseOut ??= FindFunction("Function Core.Object.FInterpEaseOut");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Alpha, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&Exp, @params + 12, 4, 4);

        _ptrFInterpEaseOut.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFInterpEaseOut, @params);
        _ptrFInterpEaseOut.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 16);
    }

    // Function Core.Object.FInterpEaseIn
    // 0x361CC0
    // (Final | Native | Static | Public)
    public unsafe class FInterpEaseIn_Parameters : BaseObject {
        public FInterpEaseIn_Parameters() { }
        public FInterpEaseIn_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FInterpEaseIn.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FInterpEaseIn.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FInterpEaseIn.Alpha
        // 0x8 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FInterpEaseIn.Exp
        // 0xC (0x4)
        // (Param)
        public float Exp {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FInterpEaseIn.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFInterpEaseIn;
    public static float FInterpEaseIn(float A, float B, float Alpha, float Exp) {
        _ptrFInterpEaseIn ??= FindFunction("Function Core.Object.FInterpEaseIn");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Alpha, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&Exp, @params + 12, 4, 4);

        _ptrFInterpEaseIn.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFInterpEaseIn, @params);
        _ptrFInterpEaseIn.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 16);
    }

    // Function Core.Object.FCubicInterp
    // 0x361B30
    // (Final | Native | Static | Public)
    public unsafe class FCubicInterp_Parameters : BaseObject {
        public FCubicInterp_Parameters() { }
        public FCubicInterp_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FCubicInterp.P0
        // 0x0 (0x4)
        // (Param)
        public float P0 {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FCubicInterp.T0
        // 0x4 (0x4)
        // (Param)
        public float T0 {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FCubicInterp.P1
        // 0x8 (0x4)
        // (Param)
        public float P1 {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FCubicInterp.T1
        // 0xC (0x4)
        // (Param)
        public float T1 {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.FCubicInterp.A
        // 0x10 (0x4)
        // (Param)
        public float A {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }

        // FloatProperty Core.Object.FCubicInterp.ReturnValue
        // 0x14 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 20);
            set => *(float*)(Pointer + 20) = value;
        }
    }
    private static UFunction _ptrFCubicInterp;
    public static float FCubicInterp(float P0, float T0, float P1, float T1, float A) {
        _ptrFCubicInterp ??= FindFunction("Function Core.Object.FCubicInterp");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&P0, @params, 4, 4);
        System.Buffer.MemoryCopy(&T0, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&P1, @params + 8, 4, 4);
        System.Buffer.MemoryCopy(&T1, @params + 12, 4, 4);
        System.Buffer.MemoryCopy(&A, @params + 16, 4, 4);

        _ptrFCubicInterp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFCubicInterp, @params);
        _ptrFCubicInterp.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 20);
    }

    // Function Core.Object.FloorLog2
    // 0x361450
    // (Final | Native | Static | Public)
    public unsafe class FloorLog2_Parameters : BaseObject {
        public FloorLog2_Parameters() { }
        public FloorLog2_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.FloorLog2.Value
        // 0x0 (0x4)
        // (Param)
        public int Value {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.FloorLog2.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrFloorLog2;
    public static int FloorLog2(int Value) {
        _ptrFloorLog2 ??= FindFunction("Function Core.Object.FloorLog2");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&Value, @params, 4, 4);

        _ptrFloorLog2.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFloorLog2, @params);
        _ptrFloorLog2.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.FCeil
    // 0x361740
    // (Final | Native | Static | Public)
    public unsafe class FCeil_Parameters : BaseObject {
        public FCeil_Parameters() { }
        public FCeil_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FCeil.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // IntProperty Core.Object.FCeil.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrFCeil;
    public static int FCeil(float A) {
        _ptrFCeil ??= FindFunction("Function Core.Object.FCeil");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrFCeil.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFCeil, @params);
        _ptrFCeil.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.FFloor
    // 0x3616B0
    // (Final | Native | Static | Public)
    public unsafe class FFloor_Parameters : BaseObject {
        public FFloor_Parameters() { }
        public FFloor_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FFloor.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // IntProperty Core.Object.FFloor.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrFFloor;
    public static int FFloor(float A) {
        _ptrFFloor ??= FindFunction("Function Core.Object.FFloor");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrFFloor.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFFloor, @params);
        _ptrFFloor.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.Round
    // 0x361620 (iNative: 199)
    // (Final | Native | Static | Public)
    public unsafe class Round_Parameters : BaseObject {
        public Round_Parameters() { }
        public Round_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Round.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // IntProperty Core.Object.Round.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrRound;
    public static int Round(float A) {
        _ptrRound ??= FindFunction("Function Core.Object.Round");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrRound.iNative = 0;
        _ptrRound.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRound, @params);
        _ptrRound.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrRound.iNative = 199;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.Lerp
    // 0x361A60 (iNative: 247)
    // (Final | Native | Static | Public)
    public unsafe class Lerp_Parameters : BaseObject {
        public Lerp_Parameters() { }
        public Lerp_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Lerp.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Lerp.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Lerp.Alpha
        // 0x8 (0x4)
        // (Param)
        public float Alpha {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.Lerp.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrLerp;
    public static float Lerp(float A, float B, float Alpha) {
        _ptrLerp ??= FindFunction("Function Core.Object.Lerp");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&Alpha, @params + 8, 4, 4);

        _ptrLerp.iNative = 0;
        _ptrLerp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLerp, @params);
        _ptrLerp.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLerp.iNative = 247;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.FClamp
    // 0x361980 (iNative: 246)
    // (Final | Native | Static | Public)
    public unsafe class FClamp_Parameters : BaseObject {
        public FClamp_Parameters() { }
        public FClamp_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FClamp.V
        // 0x0 (0x4)
        // (Param)
        public float V {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FClamp.A
        // 0x4 (0x4)
        // (Param)
        public float A {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FClamp.B
        // 0x8 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.FClamp.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrFClamp;
    public static float FClamp(float V, float A, float B) {
        _ptrFClamp ??= FindFunction("Function Core.Object.FClamp");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&V, @params, 4, 4);
        System.Buffer.MemoryCopy(&A, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrFClamp.iNative = 0;
        _ptrFClamp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFClamp, @params);
        _ptrFClamp.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrFClamp.iNative = 246;

        return *(float*)(@params + 12);
    }

    // Function Core.Object.FMax
    // 0x3618D0 (iNative: 245)
    // (Final | Native | Static | Public)
    public unsafe class FMax_Parameters : BaseObject {
        public FMax_Parameters() { }
        public FMax_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FMax.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FMax.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FMax.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrFMax;
    public static float FMax(float A, float B) {
        _ptrFMax ??= FindFunction("Function Core.Object.FMax");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrFMax.iNative = 0;
        _ptrFMax.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFMax, @params);
        _ptrFMax.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrFMax.iNative = 245;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.FMin
    // 0x361820 (iNative: 244)
    // (Final | Native | Static | Public)
    public unsafe class FMin_Parameters : BaseObject {
        public FMin_Parameters() { }
        public FMin_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FMin.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.FMin.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.FMin.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrFMin;
    public static float FMin(float A, float B) {
        _ptrFMin ??= FindFunction("Function Core.Object.FMin");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrFMin.iNative = 0;
        _ptrFMin.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFMin, @params);
        _ptrFMin.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrFMin.iNative = 244;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.FRand
    // 0x3617D0 (iNative: 195)
    // (Final | Native | Static | Public)
    public unsafe class FRand_Parameters : BaseObject {
        public FRand_Parameters() { }
        public FRand_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.FRand.ReturnValue
        // 0x0 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }
    }
    private static UFunction _ptrFRand;
    public static float FRand() {
        _ptrFRand ??= FindFunction("Function Core.Object.FRand");

        var @params = stackalloc byte[4];

        _ptrFRand.iNative = 0;
        _ptrFRand.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFRand, @params);
        _ptrFRand.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrFRand.iNative = 195;

        return *(float*)@params;
    }

    // Function Core.Object.Square
    // 0x3615A0 (iNative: 194)
    // (Final | Native | Static | Public)
    public unsafe class Square_Parameters : BaseObject {
        public Square_Parameters() { }
        public Square_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Square.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Square.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSquare;
    public static float Square(float A) {
        _ptrSquare ??= FindFunction("Function Core.Object.Square");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrSquare.iNative = 0;
        _ptrSquare.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSquare, @params);
        _ptrSquare.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSquare.iNative = 194;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Sqrt
    // 0x3614E0 (iNative: 193)
    // (Final | Native | Static | Public)
    public unsafe class Sqrt_Parameters : BaseObject {
        public Sqrt_Parameters() { }
        public Sqrt_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Sqrt.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Sqrt.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSqrt;
    public static float Sqrt(float A) {
        _ptrSqrt ??= FindFunction("Function Core.Object.Sqrt");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrSqrt.iNative = 0;
        _ptrSqrt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSqrt, @params);
        _ptrSqrt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSqrt.iNative = 193;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Loge
    // 0x3613D0 (iNative: 329)
    // (Final | Native | Static | Public)
    public unsafe class Loge_Parameters : BaseObject {
        public Loge_Parameters() { }
        public Loge_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Loge.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Loge.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrLoge;
    public static float Loge(float A) {
        _ptrLoge ??= FindFunction("Function Core.Object.Loge");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrLoge.iNative = 0;
        _ptrLoge.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLoge, @params);
        _ptrLoge.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLoge.iNative = 329;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Exp
    // 0x361350 (iNative: 328)
    // (Final | Native | Static | Public)
    public unsafe class Exp_Parameters : BaseObject {
        public Exp_Parameters() { }
        public Exp_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Exp.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Exp.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrExp;
    public static float Exp(float A) {
        _ptrExp ??= FindFunction("Function Core.Object.Exp");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrExp.iNative = 0;
        _ptrExp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrExp, @params);
        _ptrExp.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrExp.iNative = 328;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Atan2
    // 0x3612A0
    // (Final | Native | Static | Public)
    public unsafe class Atan2_Parameters : BaseObject {
        public Atan2_Parameters() { }
        public Atan2_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Atan2.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Atan2.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Atan2.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrAtan2;
    public static float Atan2(float A, float B) {
        _ptrAtan2 ??= FindFunction("Function Core.Object.Atan2");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAtan2.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAtan2, @params);
        _ptrAtan2.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Atan
    // 0x361220 (iNative: 190)
    // (Final | Native | Static | Public)
    public unsafe class Atan_Parameters : BaseObject {
        public Atan_Parameters() { }
        public Atan_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Atan.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Atan.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrAtan;
    public static float Atan(float A) {
        _ptrAtan ??= FindFunction("Function Core.Object.Atan");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrAtan.iNative = 0;
        _ptrAtan.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAtan, @params);
        _ptrAtan.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAtan.iNative = 190;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Tan
    // 0x3611A0 (iNative: 189)
    // (Final | Native | Static | Public)
    public unsafe class Tan_Parameters : BaseObject {
        public Tan_Parameters() { }
        public Tan_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Tan.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Tan.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrTan;
    public static float Tan(float A) {
        _ptrTan ??= FindFunction("Function Core.Object.Tan");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrTan.iNative = 0;
        _ptrTan.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrTan, @params);
        _ptrTan.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrTan.iNative = 189;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Acos
    // 0x361100
    // (Final | Native | Static | Public)
    public unsafe class Acos_Parameters : BaseObject {
        public Acos_Parameters() { }
        public Acos_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Acos.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Acos.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrAcos;
    public static float Acos(float A) {
        _ptrAcos ??= FindFunction("Function Core.Object.Acos");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrAcos.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAcos, @params);
        _ptrAcos.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Cos
    // 0x361080 (iNative: 188)
    // (Final | Native | Static | Public)
    public unsafe class Cos_Parameters : BaseObject {
        public Cos_Parameters() { }
        public Cos_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Cos.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Cos.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrCos;
    public static float Cos(float A) {
        _ptrCos ??= FindFunction("Function Core.Object.Cos");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrCos.iNative = 0;
        _ptrCos.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrCos, @params);
        _ptrCos.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrCos.iNative = 188;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Asin
    // 0x360FE0
    // (Final | Native | Static | Public)
    public unsafe class Asin_Parameters : BaseObject {
        public Asin_Parameters() { }
        public Asin_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Asin.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Asin.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrAsin;
    public static float Asin(float A) {
        _ptrAsin ??= FindFunction("Function Core.Object.Asin");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrAsin.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAsin, @params);
        _ptrAsin.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Sin
    // 0x360F60 (iNative: 187)
    // (Final | Native | Static | Public)
    public unsafe class Sin_Parameters : BaseObject {
        public Sin_Parameters() { }
        public Sin_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Sin.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Sin.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSin;
    public static float Sin(float A) {
        _ptrSin ??= FindFunction("Function Core.Object.Sin");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrSin.iNative = 0;
        _ptrSin.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSin, @params);
        _ptrSin.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSin.iNative = 187;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.Abs
    // 0x360E70 (iNative: 186)
    // (Final | Native | Static | Public)
    public unsafe class Abs_Parameters : BaseObject {
        public Abs_Parameters() { }
        public Abs_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Abs.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Abs.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrAbs;
    public static float Abs(float A) {
        _ptrAbs ??= FindFunction("Function Core.Object.Abs");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrAbs.iNative = 0;
        _ptrAbs.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAbs, @params);
        _ptrAbs.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAbs.iNative = 186;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.SubtractEqual_FloatFloat
    // 0x360D80 (iNative: 185)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_FloatFloat_Parameters : BaseObject {
        public SubtractEqual_FloatFloat_Parameters() { }
        public SubtractEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SubtractEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.SubtractEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.SubtractEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSubtractEqual_FloatFloat;
    public static float SubtractEqual_FloatFloat(ref float A, float B) {
        _ptrSubtractEqual_FloatFloat ??= FindFunction("Function Core.Object.SubtractEqual_FloatFloat");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrSubtractEqual_FloatFloat.iNative = 0;
        _ptrSubtractEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_FloatFloat, @params);
        _ptrSubtractEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractEqual_FloatFloat.iNative = 185;

        A = *(float*)@params;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.AddEqual_FloatFloat
    // 0x360C90 (iNative: 184)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddEqual_FloatFloat_Parameters : BaseObject {
        public AddEqual_FloatFloat_Parameters() { }
        public AddEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.AddEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.AddEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.AddEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrAddEqual_FloatFloat;
    public static float AddEqual_FloatFloat(ref float A, float B) {
        _ptrAddEqual_FloatFloat ??= FindFunction("Function Core.Object.AddEqual_FloatFloat");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAddEqual_FloatFloat.iNative = 0;
        _ptrAddEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddEqual_FloatFloat, @params);
        _ptrAddEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddEqual_FloatFloat.iNative = 184;

        A = *(float*)@params;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.DivideEqual_FloatFloat
    // 0x360B70 (iNative: 183)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class DivideEqual_FloatFloat_Parameters : BaseObject {
        public DivideEqual_FloatFloat_Parameters() { }
        public DivideEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.DivideEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.DivideEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.DivideEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrDivideEqual_FloatFloat;
    public static float DivideEqual_FloatFloat(ref float A, float B) {
        _ptrDivideEqual_FloatFloat ??= FindFunction("Function Core.Object.DivideEqual_FloatFloat");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrDivideEqual_FloatFloat.iNative = 0;
        _ptrDivideEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivideEqual_FloatFloat, @params);
        _ptrDivideEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivideEqual_FloatFloat.iNative = 183;

        A = *(float*)@params;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.MultiplyEqual_FloatFloat
    // 0x360A80 (iNative: 182)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_FloatFloat_Parameters : BaseObject {
        public MultiplyEqual_FloatFloat_Parameters() { }
        public MultiplyEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.MultiplyEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.MultiplyEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.MultiplyEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMultiplyEqual_FloatFloat;
    public static float MultiplyEqual_FloatFloat(ref float A, float B) {
        _ptrMultiplyEqual_FloatFloat ??= FindFunction("Function Core.Object.MultiplyEqual_FloatFloat");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMultiplyEqual_FloatFloat.iNative = 0;
        _ptrMultiplyEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_FloatFloat, @params);
        _ptrMultiplyEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_FloatFloat.iNative = 182;

        A = *(float*)@params;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.NotEqual_FloatFloat
    // 0x3608F0 (iNative: 181)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_FloatFloat_Parameters : BaseObject {
        public NotEqual_FloatFloat_Parameters() { }
        public NotEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.NotEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.NotEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.NotEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_FloatFloat;
    public static bool NotEqual_FloatFloat(float A, float B) {
        _ptrNotEqual_FloatFloat ??= FindFunction("Function Core.Object.NotEqual_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrNotEqual_FloatFloat.iNative = 0;
        _ptrNotEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_FloatFloat, @params);
        _ptrNotEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_FloatFloat.iNative = 181;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.ComplementEqual_FloatFloat
    // 0x3609C0 (iNative: 210)
    // (Final | Native | Operator | Static | Public)
    public unsafe class ComplementEqual_FloatFloat_Parameters : BaseObject {
        public ComplementEqual_FloatFloat_Parameters() { }
        public ComplementEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.ComplementEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.ComplementEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.ComplementEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrComplementEqual_FloatFloat;
    public static bool ComplementEqual_FloatFloat(float A, float B) {
        _ptrComplementEqual_FloatFloat ??= FindFunction("Function Core.Object.ComplementEqual_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrComplementEqual_FloatFloat.iNative = 0;
        _ptrComplementEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrComplementEqual_FloatFloat, @params);
        _ptrComplementEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrComplementEqual_FloatFloat.iNative = 210;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.EqualEqual_FloatFloat
    // 0x360820 (iNative: 180)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_FloatFloat_Parameters : BaseObject {
        public EqualEqual_FloatFloat_Parameters() { }
        public EqualEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.EqualEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.EqualEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.EqualEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_FloatFloat;
    public static bool EqualEqual_FloatFloat(float A, float B) {
        _ptrEqualEqual_FloatFloat ??= FindFunction("Function Core.Object.EqualEqual_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrEqualEqual_FloatFloat.iNative = 0;
        _ptrEqualEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_FloatFloat, @params);
        _ptrEqualEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_FloatFloat.iNative = 180;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.GreaterEqual_FloatFloat
    // 0x360770 (iNative: 179)
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterEqual_FloatFloat_Parameters : BaseObject {
        public GreaterEqual_FloatFloat_Parameters() { }
        public GreaterEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.GreaterEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.GreaterEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.GreaterEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreaterEqual_FloatFloat;
    public static bool GreaterEqual_FloatFloat(float A, float B) {
        _ptrGreaterEqual_FloatFloat ??= FindFunction("Function Core.Object.GreaterEqual_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrGreaterEqual_FloatFloat.iNative = 0;
        _ptrGreaterEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterEqual_FloatFloat, @params);
        _ptrGreaterEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreaterEqual_FloatFloat.iNative = 179;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.LessEqual_FloatFloat
    // 0x3606C0 (iNative: 178)
    // (Final | Native | Operator | Static | Public)
    public unsafe class LessEqual_FloatFloat_Parameters : BaseObject {
        public LessEqual_FloatFloat_Parameters() { }
        public LessEqual_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.LessEqual_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.LessEqual_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.LessEqual_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLessEqual_FloatFloat;
    public static bool LessEqual_FloatFloat(float A, float B) {
        _ptrLessEqual_FloatFloat ??= FindFunction("Function Core.Object.LessEqual_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrLessEqual_FloatFloat.iNative = 0;
        _ptrLessEqual_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLessEqual_FloatFloat, @params);
        _ptrLessEqual_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLessEqual_FloatFloat.iNative = 178;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.Greater_FloatFloat
    // 0x360610 (iNative: 177)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Greater_FloatFloat_Parameters : BaseObject {
        public Greater_FloatFloat_Parameters() { }
        public Greater_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Greater_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Greater_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.Greater_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreater_FloatFloat;
    public static bool Greater_FloatFloat(float A, float B) {
        _ptrGreater_FloatFloat ??= FindFunction("Function Core.Object.Greater_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrGreater_FloatFloat.iNative = 0;
        _ptrGreater_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreater_FloatFloat, @params);
        _ptrGreater_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreater_FloatFloat.iNative = 177;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.Less_FloatFloat
    // 0x360560 (iNative: 176)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Less_FloatFloat_Parameters : BaseObject {
        public Less_FloatFloat_Parameters() { }
        public Less_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Less_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Less_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.Less_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLess_FloatFloat;
    public static bool Less_FloatFloat(float A, float B) {
        _ptrLess_FloatFloat ??= FindFunction("Function Core.Object.Less_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrLess_FloatFloat.iNative = 0;
        _ptrLess_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLess_FloatFloat, @params);
        _ptrLess_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLess_FloatFloat.iNative = 176;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.Subtract_FloatFloat
    // 0x3604B0 (iNative: 175)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_FloatFloat_Parameters : BaseObject {
        public Subtract_FloatFloat_Parameters() { }
        public Subtract_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Subtract_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Subtract_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Subtract_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSubtract_FloatFloat;
    public static float Subtract_FloatFloat(float A, float B) {
        _ptrSubtract_FloatFloat ??= FindFunction("Function Core.Object.Subtract_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrSubtract_FloatFloat.iNative = 0;
        _ptrSubtract_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_FloatFloat, @params);
        _ptrSubtract_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_FloatFloat.iNative = 175;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Add_FloatFloat
    // 0x360400 (iNative: 174)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_FloatFloat_Parameters : BaseObject {
        public Add_FloatFloat_Parameters() { }
        public Add_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Add_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Add_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Add_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrAdd_FloatFloat;
    public static float Add_FloatFloat(float A, float B) {
        _ptrAdd_FloatFloat ??= FindFunction("Function Core.Object.Add_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAdd_FloatFloat.iNative = 0;
        _ptrAdd_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_FloatFloat, @params);
        _ptrAdd_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAdd_FloatFloat.iNative = 174;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Percent_FloatFloat
    // 0x360310 (iNative: 173)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Percent_FloatFloat_Parameters : BaseObject {
        public Percent_FloatFloat_Parameters() { }
        public Percent_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Percent_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Percent_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Percent_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrPercent_FloatFloat;
    public static float Percent_FloatFloat(float A, float B) {
        _ptrPercent_FloatFloat ??= FindFunction("Function Core.Object.Percent_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrPercent_FloatFloat.iNative = 0;
        _ptrPercent_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrPercent_FloatFloat, @params);
        _ptrPercent_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrPercent_FloatFloat.iNative = 173;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Divide_FloatFloat
    // 0x360230 (iNative: 172)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Divide_FloatFloat_Parameters : BaseObject {
        public Divide_FloatFloat_Parameters() { }
        public Divide_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Divide_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Divide_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Divide_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrDivide_FloatFloat;
    public static float Divide_FloatFloat(float A, float B) {
        _ptrDivide_FloatFloat ??= FindFunction("Function Core.Object.Divide_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrDivide_FloatFloat.iNative = 0;
        _ptrDivide_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivide_FloatFloat, @params);
        _ptrDivide_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivide_FloatFloat.iNative = 172;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Multiply_FloatFloat
    // 0x360180 (iNative: 171)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_FloatFloat_Parameters : BaseObject {
        public Multiply_FloatFloat_Parameters() { }
        public Multiply_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Multiply_FloatFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Multiply_FloatFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Multiply_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMultiply_FloatFloat;
    public static float Multiply_FloatFloat(float A, float B) {
        _ptrMultiply_FloatFloat ??= FindFunction("Function Core.Object.Multiply_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMultiply_FloatFloat.iNative = 0;
        _ptrMultiply_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_FloatFloat, @params);
        _ptrMultiply_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_FloatFloat.iNative = 171;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.MultiplyMultiply_FloatFloat
    // 0x3600D0 (iNative: 170)
    // (Final | Native | Operator | Static | Public)
    public unsafe class MultiplyMultiply_FloatFloat_Parameters : BaseObject {
        public MultiplyMultiply_FloatFloat_Parameters() { }
        public MultiplyMultiply_FloatFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.MultiplyMultiply_FloatFloat.Base
        // 0x0 (0x4)
        // (Param)
        public float Base {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.MultiplyMultiply_FloatFloat.Exp
        // 0x4 (0x4)
        // (Param)
        public float Exp {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.MultiplyMultiply_FloatFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMultiplyMultiply_FloatFloat;
    public static float MultiplyMultiply_FloatFloat(float Base, float Exp) {
        _ptrMultiplyMultiply_FloatFloat ??= FindFunction("Function Core.Object.MultiplyMultiply_FloatFloat");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&Base, @params, 4, 4);
        System.Buffer.MemoryCopy(&Exp, @params + 4, 4, 4);

        _ptrMultiplyMultiply_FloatFloat.iNative = 0;
        _ptrMultiplyMultiply_FloatFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyMultiply_FloatFloat, @params);
        _ptrMultiplyMultiply_FloatFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyMultiply_FloatFloat.iNative = 170;

        return *(float*)(@params + 8);
    }

    // Function Core.Object.Subtract_PreFloat
    // 0x360050 (iNative: 169)
    // (Final | PreOperator | Native | Operator | Static | Public)
    public unsafe class Subtract_PreFloat_Parameters : BaseObject {
        public Subtract_PreFloat_Parameters() { }
        public Subtract_PreFloat_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Subtract_PreFloat.A
        // 0x0 (0x4)
        // (Param)
        public float A {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Subtract_PreFloat.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSubtract_PreFloat;
    public static float Subtract_PreFloat(float A) {
        _ptrSubtract_PreFloat ??= FindFunction("Function Core.Object.Subtract_PreFloat");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrSubtract_PreFloat.iNative = 0;
        _ptrSubtract_PreFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_PreFloat, @params);
        _ptrSubtract_PreFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_PreFloat.iNative = 169;

        return *(float*)(@params + 4);
    }

    // Function Core.Object.ToHex
    // 0x35FF60
    // (Final | Native | Static | Public)
    public unsafe class ToHex_Parameters : BaseObject {
        public ToHex_Parameters() { }
        public ToHex_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ToHex.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.Object.ToHex.ReturnValue
        // 0x8 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }
    private static UFunction _ptrToHex;
    public static FString ToHex(int A) {
        _ptrToHex ??= FindFunction("Function Core.Object.ToHex");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrToHex.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrToHex, @params);
        _ptrToHex.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.Clamp
    // 0x35FE90 (iNative: 251)
    // (Final | Native | Static | Public)
    public unsafe class Clamp_Parameters : BaseObject {
        public Clamp_Parameters() { }
        public Clamp_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Clamp.V
        // 0x0 (0x4)
        // (Param)
        public int V {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Clamp.A
        // 0x4 (0x4)
        // (Param)
        public int A {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Clamp.B
        // 0x8 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.Clamp.ReturnValue
        // 0xC (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }
    private static UFunction _ptrClamp;
    public static int Clamp(int V, int A, int B) {
        _ptrClamp ??= FindFunction("Function Core.Object.Clamp");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&V, @params, 4, 4);
        System.Buffer.MemoryCopy(&A, @params + 4, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrClamp.iNative = 0;
        _ptrClamp.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrClamp, @params);
        _ptrClamp.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrClamp.iNative = 251;

        return *(int*)(@params + 12);
    }

    // Function Core.Object.Max
    // 0x35FDE0 (iNative: 250)
    // (Final | Native | Static | Public)
    public unsafe class Max_Parameters : BaseObject {
        public Max_Parameters() { }
        public Max_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Max.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Max.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Max.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMax;
    public static int Max(int A, int B) {
        _ptrMax ??= FindFunction("Function Core.Object.Max");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMax.iNative = 0;
        _ptrMax.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMax, @params);
        _ptrMax.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMax.iNative = 250;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Min
    // 0x35FD30 (iNative: 249)
    // (Final | Native | Static | Public)
    public unsafe class Min_Parameters : BaseObject {
        public Min_Parameters() { }
        public Min_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Min.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Min.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Min.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMin;
    public static int Min(int A, int B) {
        _ptrMin ??= FindFunction("Function Core.Object.Min");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMin.iNative = 0;
        _ptrMin.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMin, @params);
        _ptrMin.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMin.iNative = 249;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Rand
    // 0x35FC80 (iNative: 167)
    // (Final | Native | Static | Public)
    public unsafe class Rand_Parameters : BaseObject {
        public Rand_Parameters() { }
        public Rand_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Rand.Max
        // 0x0 (0x4)
        // (Param)
        public int Max {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Rand.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrRand;
    public static int Rand(int Max) {
        _ptrRand ??= FindFunction("Function Core.Object.Rand");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&Max, @params, 4, 4);

        _ptrRand.iNative = 0;
        _ptrRand.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrRand, @params);
        _ptrRand.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrRand.iNative = 167;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.FromHexColor
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class FromHexColor_Parameters : BaseObject {
        public FromHexColor_Parameters() { }
        public FromHexColor_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.FromHexColor.Hex
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Hex {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.FromHexColor.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public FColor ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 4, 4);
        }
    }
    private static UFunction _ptrFromHexColor;
    public static FColor FromHexColor(FString Hex) {
        _ptrFromHexColor ??= FindFunction("Function Core.Object.FromHexColor");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Hex.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrFromHexColor, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(4);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 4, 4);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Object.FromHex
    // 0x36D5F0
    // (Final | Native | Static | Public)
    public unsafe class FromHex_Parameters : BaseObject {
        public FromHex_Parameters() { }
        public FromHex_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Object.FromHex.Hex
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Hex {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Object.FromHex.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrFromHex;
    public static int FromHex(FString Hex) {
        _ptrFromHex ??= FindFunction("Function Core.Object.FromHex");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Hex.Pointer, @params, 16, 16);

        _ptrFromHex.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFromHex, @params);
        _ptrFromHex.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function Core.Object.QMin
    // 0x357480
    // (Final | Native | Static | Public)
    public unsafe class QMin_Parameters : BaseObject {
        public QMin_Parameters() { }
        public QMin_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.QMin.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.QMin.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // QWordProperty Core.Object.QMin.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public ulong ReturnValue {
            get => *(ulong*)(Pointer + 16);
            set => *(ulong*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrQMin;
    public static ulong QMin(ulong A, ulong B) {
        _ptrQMin ??= FindFunction("Function Core.Object.QMin");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrQMin.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQMin, @params);
        _ptrQMin.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(ulong*)(@params + 16);
    }

    // Function Core.Object.QMax
    // 0x357540
    // (Final | Native | Static | Public)
    public unsafe class QMax_Parameters : BaseObject {
        public QMax_Parameters() { }
        public QMax_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.QMax.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.QMax.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // QWordProperty Core.Object.QMax.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public ulong ReturnValue {
            get => *(ulong*)(Pointer + 16);
            set => *(ulong*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrQMax;
    public static ulong QMax(ulong A, ulong B) {
        _ptrQMax ??= FindFunction("Function Core.Object.QMax");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrQMax.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQMax, @params);
        _ptrQMax.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(ulong*)(@params + 16);
    }

    // Function Core.Object.QSubtract
    // 0x357600
    // (Final | Native | Static | Public)
    public unsafe class QSubtract_Parameters : BaseObject {
        public QSubtract_Parameters() { }
        public QSubtract_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.QSubtract.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.QSubtract.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // QWordProperty Core.Object.QSubtract.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public ulong ReturnValue {
            get => *(ulong*)(Pointer + 16);
            set => *(ulong*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrQSubtract;
    public static ulong QSubtract(ulong A, ulong B) {
        _ptrQSubtract ??= FindFunction("Function Core.Object.QSubtract");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrQSubtract.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrQSubtract, @params);
        _ptrQSubtract.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(ulong*)(@params + 16);
    }

    // Function Core.Object.NotEqual_QWordInt
    // 0x357D30
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_QWordInt_Parameters : BaseObject {
        public NotEqual_QWordInt_Parameters() { }
        public NotEqual_QWordInt_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.NotEqual_QWordInt.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // IntProperty Core.Object.NotEqual_QWordInt.B
        // 0x8 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.NotEqual_QWordInt.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_QWordInt;
    public static bool NotEqual_QWordInt(ulong A, int B) {
        _ptrNotEqual_QWordInt ??= FindFunction("Function Core.Object.NotEqual_QWordInt");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrNotEqual_QWordInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_QWordInt, @params);
        _ptrNotEqual_QWordInt.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 12);
    }

    // Function Core.Object.EqualEqual_QWordInt
    // 0x357C70
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_QWordInt_Parameters : BaseObject {
        public EqualEqual_QWordInt_Parameters() { }
        public EqualEqual_QWordInt_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.EqualEqual_QWordInt.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // IntProperty Core.Object.EqualEqual_QWordInt.B
        // 0x8 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.EqualEqual_QWordInt.ReturnValue
        // 0xC (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 12) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 12) |= 0x1;
                else *(uint*)(Pointer + 12) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_QWordInt;
    public static bool EqualEqual_QWordInt(ulong A, int B) {
        _ptrEqualEqual_QWordInt ??= FindFunction("Function Core.Object.EqualEqual_QWordInt");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 4, 4);

        _ptrEqualEqual_QWordInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_QWordInt, @params);
        _ptrEqualEqual_QWordInt.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 12);
    }

    // Function Core.Object.NotEqual_QWordQWord
    // 0x357BC0
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_QWordQWord_Parameters : BaseObject {
        public NotEqual_QWordQWord_Parameters() { }
        public NotEqual_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.NotEqual_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.NotEqual_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.NotEqual_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_QWordQWord;
    public static bool NotEqual_QWordQWord(ulong A, ulong B) {
        _ptrNotEqual_QWordQWord ??= FindFunction("Function Core.Object.NotEqual_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrNotEqual_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_QWordQWord, @params);
        _ptrNotEqual_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.EqualEqual_QWordQWord
    // 0x357B10
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_QWordQWord_Parameters : BaseObject {
        public EqualEqual_QWordQWord_Parameters() { }
        public EqualEqual_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.EqualEqual_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.EqualEqual_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.EqualEqual_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_QWordQWord;
    public static bool EqualEqual_QWordQWord(ulong A, ulong B) {
        _ptrEqualEqual_QWordQWord ??= FindFunction("Function Core.Object.EqualEqual_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrEqualEqual_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_QWordQWord, @params);
        _ptrEqualEqual_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.GreaterEqual_QWordQWord
    // 0x357A60
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterEqual_QWordQWord_Parameters : BaseObject {
        public GreaterEqual_QWordQWord_Parameters() { }
        public GreaterEqual_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.GreaterEqual_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.GreaterEqual_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.GreaterEqual_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreaterEqual_QWordQWord;
    public static bool GreaterEqual_QWordQWord(ulong A, ulong B) {
        _ptrGreaterEqual_QWordQWord ??= FindFunction("Function Core.Object.GreaterEqual_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrGreaterEqual_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterEqual_QWordQWord, @params);
        _ptrGreaterEqual_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.LessEqual_QWordQWord
    // 0x3579B0
    // (Final | Native | Operator | Static | Public)
    public unsafe class LessEqual_QWordQWord_Parameters : BaseObject {
        public LessEqual_QWordQWord_Parameters() { }
        public LessEqual_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.LessEqual_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.LessEqual_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.LessEqual_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLessEqual_QWordQWord;
    public static bool LessEqual_QWordQWord(ulong A, ulong B) {
        _ptrLessEqual_QWordQWord ??= FindFunction("Function Core.Object.LessEqual_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrLessEqual_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLessEqual_QWordQWord, @params);
        _ptrLessEqual_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.Greater_QWordQWord
    // 0x357900
    // (Final | Native | Operator | Static | Public)
    public unsafe class Greater_QWordQWord_Parameters : BaseObject {
        public Greater_QWordQWord_Parameters() { }
        public Greater_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.Greater_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.Greater_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.Greater_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreater_QWordQWord;
    public static bool Greater_QWordQWord(ulong A, ulong B) {
        _ptrGreater_QWordQWord ??= FindFunction("Function Core.Object.Greater_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrGreater_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreater_QWordQWord, @params);
        _ptrGreater_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.Less_QWordQWord
    // 0x357850
    // (Final | Native | Operator | Static | Public)
    public unsafe class Less_QWordQWord_Parameters : BaseObject {
        public Less_QWordQWord_Parameters() { }
        public Less_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.Less_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.Less_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // BoolProperty Core.Object.Less_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLess_QWordQWord;
    public static bool Less_QWordQWord(ulong A, ulong B) {
        _ptrLess_QWordQWord ??= FindFunction("Function Core.Object.Less_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrLess_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLess_QWordQWord, @params);
        _ptrLess_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.Object.Subtract_QWordQWord
    // 0x3577A0
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_QWordQWord_Parameters : BaseObject {
        public Subtract_QWordQWord_Parameters() { }
        public Subtract_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.Subtract_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.Subtract_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.Subtract_QWordQWord.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrSubtract_QWordQWord;
    public static int Subtract_QWordQWord(ulong A, ulong B) {
        _ptrSubtract_QWordQWord ??= FindFunction("Function Core.Object.Subtract_QWordQWord");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrSubtract_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_QWordQWord, @params);
        _ptrSubtract_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function Core.Object.Add_QWordQWord
    // 0x3576F0
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_QWordQWord_Parameters : BaseObject {
        public Add_QWordQWord_Parameters() { }
        public Add_QWordQWord_Parameters(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.Add_QWordQWord.A
        // 0x0 (0x8)
        // (Param)
        public ulong A {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core.Object.Add_QWordQWord.B
        // 0x8 (0x8)
        // (Param)
        public ulong B {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }

        // QWordProperty Core.Object.Add_QWordQWord.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public ulong ReturnValue {
            get => *(ulong*)(Pointer + 16);
            set => *(ulong*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrAdd_QWordQWord;
    public static ulong Add_QWordQWord(ulong A, ulong B) {
        _ptrAdd_QWordQWord ??= FindFunction("Function Core.Object.Add_QWordQWord");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy(&A, @params, 8, 8);
        System.Buffer.MemoryCopy(&B, @params + 8, 8, 8);

        _ptrAdd_QWordQWord.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_QWordQWord, @params);
        _ptrAdd_QWordQWord.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(ulong*)(@params + 16);
    }

    // Function Core.Object.SubtractSubtract_Int
    // 0x35FBC0 (iNative: 166)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractSubtract_Int_Parameters : BaseObject {
        public SubtractSubtract_Int_Parameters() { }
        public SubtractSubtract_Int_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.SubtractSubtract_Int.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.SubtractSubtract_Int.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSubtractSubtract_Int;
    public static int SubtractSubtract_Int(ref int A) {
        _ptrSubtractSubtract_Int ??= FindFunction("Function Core.Object.SubtractSubtract_Int");

        var @params = stackalloc byte[8];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);

        _ptrSubtractSubtract_Int.iNative = 0;
        _ptrSubtractSubtract_Int.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractSubtract_Int, @params);
        _ptrSubtractSubtract_Int.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractSubtract_Int.iNative = 166;

        A = *(int*)@params;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.AddAdd_Int
    // 0x35FB00 (iNative: 165)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddAdd_Int_Parameters : BaseObject {
        public AddAdd_Int_Parameters() { }
        public AddAdd_Int_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.AddAdd_Int.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.AddAdd_Int.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrAddAdd_Int;
    public static int AddAdd_Int(ref int A) {
        _ptrAddAdd_Int ??= FindFunction("Function Core.Object.AddAdd_Int");

        var @params = stackalloc byte[8];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);

        _ptrAddAdd_Int.iNative = 0;
        _ptrAddAdd_Int.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddAdd_Int, @params);
        _ptrAddAdd_Int.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddAdd_Int.iNative = 165;

        A = *(int*)@params;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.SubtractSubtract_PreInt
    // 0x35FA40 (iNative: 164)
    // (Final | PreOperator | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractSubtract_PreInt_Parameters : BaseObject {
        public SubtractSubtract_PreInt_Parameters() { }
        public SubtractSubtract_PreInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.SubtractSubtract_PreInt.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.SubtractSubtract_PreInt.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSubtractSubtract_PreInt;
    public static int SubtractSubtract_PreInt(ref int A) {
        _ptrSubtractSubtract_PreInt ??= FindFunction("Function Core.Object.SubtractSubtract_PreInt");

        var @params = stackalloc byte[8];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);

        _ptrSubtractSubtract_PreInt.iNative = 0;
        _ptrSubtractSubtract_PreInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractSubtract_PreInt, @params);
        _ptrSubtractSubtract_PreInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractSubtract_PreInt.iNative = 164;

        A = *(int*)@params;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.AddAdd_PreInt
    // 0x35F980 (iNative: 163)
    // (Final | PreOperator | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddAdd_PreInt_Parameters : BaseObject {
        public AddAdd_PreInt_Parameters() { }
        public AddAdd_PreInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.AddAdd_PreInt.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.AddAdd_PreInt.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrAddAdd_PreInt;
    public static int AddAdd_PreInt(ref int A) {
        _ptrAddAdd_PreInt ??= FindFunction("Function Core.Object.AddAdd_PreInt");

        var @params = stackalloc byte[8];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);

        _ptrAddAdd_PreInt.iNative = 0;
        _ptrAddAdd_PreInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddAdd_PreInt, @params);
        _ptrAddAdd_PreInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddAdd_PreInt.iNative = 163;

        A = *(int*)@params;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.SubtractEqual_IntInt
    // 0x35F8A0 (iNative: 162)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_IntInt_Parameters : BaseObject {
        public SubtractEqual_IntInt_Parameters() { }
        public SubtractEqual_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.SubtractEqual_IntInt.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.SubtractEqual_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.SubtractEqual_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSubtractEqual_IntInt;
    public static int SubtractEqual_IntInt(ref int A, int B) {
        _ptrSubtractEqual_IntInt ??= FindFunction("Function Core.Object.SubtractEqual_IntInt");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrSubtractEqual_IntInt.iNative = 0;
        _ptrSubtractEqual_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_IntInt, @params);
        _ptrSubtractEqual_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractEqual_IntInt.iNative = 162;

        A = *(int*)@params;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.AddEqual_IntInt
    // 0x35F7C0 (iNative: 161)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddEqual_IntInt_Parameters : BaseObject {
        public AddEqual_IntInt_Parameters() { }
        public AddEqual_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.AddEqual_IntInt.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.AddEqual_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.AddEqual_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrAddEqual_IntInt;
    public static int AddEqual_IntInt(ref int A, int B) {
        _ptrAddEqual_IntInt ??= FindFunction("Function Core.Object.AddEqual_IntInt");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAddEqual_IntInt.iNative = 0;
        _ptrAddEqual_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddEqual_IntInt, @params);
        _ptrAddEqual_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddEqual_IntInt.iNative = 161;

        A = *(int*)@params;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.DivideEqual_IntFloat
    // 0x35F6C0 (iNative: 160)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class DivideEqual_IntFloat_Parameters : BaseObject {
        public DivideEqual_IntFloat_Parameters() { }
        public DivideEqual_IntFloat_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.DivideEqual_IntFloat.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // FloatProperty Core.Object.DivideEqual_IntFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.DivideEqual_IntFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrDivideEqual_IntFloat;
    public static int DivideEqual_IntFloat(ref int A, float B) {
        _ptrDivideEqual_IntFloat ??= FindFunction("Function Core.Object.DivideEqual_IntFloat");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrDivideEqual_IntFloat.iNative = 0;
        _ptrDivideEqual_IntFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivideEqual_IntFloat, @params);
        _ptrDivideEqual_IntFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivideEqual_IntFloat.iNative = 160;

        A = *(int*)@params;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.MultiplyEqual_IntFloat
    // 0x35F5D0 (iNative: 159)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_IntFloat_Parameters : BaseObject {
        public MultiplyEqual_IntFloat_Parameters() { }
        public MultiplyEqual_IntFloat_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.MultiplyEqual_IntFloat.A
        // 0x0 (0x4)
        // (Param | OutParam)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // FloatProperty Core.Object.MultiplyEqual_IntFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.MultiplyEqual_IntFloat.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMultiplyEqual_IntFloat;
    public static int MultiplyEqual_IntFloat(ref int A, float B) {
        _ptrMultiplyEqual_IntFloat ??= FindFunction("Function Core.Object.MultiplyEqual_IntFloat");

        var @params = stackalloc byte[12];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMultiplyEqual_IntFloat.iNative = 0;
        _ptrMultiplyEqual_IntFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_IntFloat, @params);
        _ptrMultiplyEqual_IntFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_IntFloat.iNative = 159;

        A = *(int*)@params;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Or_IntInt
    // 0x35F520 (iNative: 158)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Or_IntInt_Parameters : BaseObject {
        public Or_IntInt_Parameters() { }
        public Or_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Or_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Or_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Or_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrOr_IntInt;
    public static int Or_IntInt(int A, int B) {
        _ptrOr_IntInt ??= FindFunction("Function Core.Object.Or_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrOr_IntInt.iNative = 0;
        _ptrOr_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrOr_IntInt, @params);
        _ptrOr_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrOr_IntInt.iNative = 158;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Xor_IntInt
    // 0x35F470 (iNative: 157)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Xor_IntInt_Parameters : BaseObject {
        public Xor_IntInt_Parameters() { }
        public Xor_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Xor_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Xor_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Xor_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrXor_IntInt;
    public static int Xor_IntInt(int A, int B) {
        _ptrXor_IntInt ??= FindFunction("Function Core.Object.Xor_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrXor_IntInt.iNative = 0;
        _ptrXor_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrXor_IntInt, @params);
        _ptrXor_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrXor_IntInt.iNative = 157;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.And_IntInt
    // 0x35F3C0 (iNative: 156)
    // (Final | Native | Operator | Static | Public)
    public unsafe class And_IntInt_Parameters : BaseObject {
        public And_IntInt_Parameters() { }
        public And_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.And_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.And_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.And_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrAnd_IntInt;
    public static int And_IntInt(int A, int B) {
        _ptrAnd_IntInt ??= FindFunction("Function Core.Object.And_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAnd_IntInt.iNative = 0;
        _ptrAnd_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAnd_IntInt, @params);
        _ptrAnd_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAnd_IntInt.iNative = 156;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.NotEqual_IntInt
    // 0x35F320 (iNative: 155)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_IntInt_Parameters : BaseObject {
        public NotEqual_IntInt_Parameters() { }
        public NotEqual_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.NotEqual_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.NotEqual_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.NotEqual_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_IntInt;
    public static bool NotEqual_IntInt(int A, int B) {
        _ptrNotEqual_IntInt ??= FindFunction("Function Core.Object.NotEqual_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrNotEqual_IntInt.iNative = 0;
        _ptrNotEqual_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_IntInt, @params);
        _ptrNotEqual_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_IntInt.iNative = 155;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.EqualEqual_IntInt
    // 0x35F280 (iNative: 154)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_IntInt_Parameters : BaseObject {
        public EqualEqual_IntInt_Parameters() { }
        public EqualEqual_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.EqualEqual_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.EqualEqual_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.EqualEqual_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_IntInt;
    public static bool EqualEqual_IntInt(int A, int B) {
        _ptrEqualEqual_IntInt ??= FindFunction("Function Core.Object.EqualEqual_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrEqualEqual_IntInt.iNative = 0;
        _ptrEqualEqual_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_IntInt, @params);
        _ptrEqualEqual_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_IntInt.iNative = 154;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.GreaterEqual_IntInt
    // 0x35F1E0 (iNative: 153)
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterEqual_IntInt_Parameters : BaseObject {
        public GreaterEqual_IntInt_Parameters() { }
        public GreaterEqual_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.GreaterEqual_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.GreaterEqual_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.GreaterEqual_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreaterEqual_IntInt;
    public static bool GreaterEqual_IntInt(int A, int B) {
        _ptrGreaterEqual_IntInt ??= FindFunction("Function Core.Object.GreaterEqual_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrGreaterEqual_IntInt.iNative = 0;
        _ptrGreaterEqual_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterEqual_IntInt, @params);
        _ptrGreaterEqual_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreaterEqual_IntInt.iNative = 153;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.LessEqual_IntInt
    // 0x35F140 (iNative: 152)
    // (Final | Native | Operator | Static | Public)
    public unsafe class LessEqual_IntInt_Parameters : BaseObject {
        public LessEqual_IntInt_Parameters() { }
        public LessEqual_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.LessEqual_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.LessEqual_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.LessEqual_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLessEqual_IntInt;
    public static bool LessEqual_IntInt(int A, int B) {
        _ptrLessEqual_IntInt ??= FindFunction("Function Core.Object.LessEqual_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrLessEqual_IntInt.iNative = 0;
        _ptrLessEqual_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLessEqual_IntInt, @params);
        _ptrLessEqual_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLessEqual_IntInt.iNative = 152;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.Greater_IntInt
    // 0x35F0A0 (iNative: 151)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Greater_IntInt_Parameters : BaseObject {
        public Greater_IntInt_Parameters() { }
        public Greater_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Greater_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Greater_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.Greater_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrGreater_IntInt;
    public static bool Greater_IntInt(int A, int B) {
        _ptrGreater_IntInt ??= FindFunction("Function Core.Object.Greater_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrGreater_IntInt.iNative = 0;
        _ptrGreater_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreater_IntInt, @params);
        _ptrGreater_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreater_IntInt.iNative = 151;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.Less_IntInt
    // 0x35F000 (iNative: 150)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Less_IntInt_Parameters : BaseObject {
        public Less_IntInt_Parameters() { }
        public Less_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Less_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Less_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // BoolProperty Core.Object.Less_IntInt.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLess_IntInt;
    public static bool Less_IntInt(int A, int B) {
        _ptrLess_IntInt ??= FindFunction("Function Core.Object.Less_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrLess_IntInt.iNative = 0;
        _ptrLess_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLess_IntInt, @params);
        _ptrLess_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLess_IntInt.iNative = 150;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.GreaterGreaterGreater_IntInt
    // 0x35EF50 (iNative: 196)
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterGreaterGreater_IntInt_Parameters : BaseObject {
        public GreaterGreaterGreater_IntInt_Parameters() { }
        public GreaterGreaterGreater_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.GreaterGreaterGreater_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.GreaterGreaterGreater_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.GreaterGreaterGreater_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGreaterGreaterGreater_IntInt;
    public static int GreaterGreaterGreater_IntInt(int A, int B) {
        _ptrGreaterGreaterGreater_IntInt ??= FindFunction("Function Core.Object.GreaterGreaterGreater_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrGreaterGreaterGreater_IntInt.iNative = 0;
        _ptrGreaterGreaterGreater_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterGreaterGreater_IntInt, @params);
        _ptrGreaterGreaterGreater_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreaterGreaterGreater_IntInt.iNative = 196;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.GreaterGreater_IntInt
    // 0x35EEA0 (iNative: 149)
    // (Final | Native | Operator | Static | Public)
    public unsafe class GreaterGreater_IntInt_Parameters : BaseObject {
        public GreaterGreater_IntInt_Parameters() { }
        public GreaterGreater_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.GreaterGreater_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.GreaterGreater_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.GreaterGreater_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGreaterGreater_IntInt;
    public static int GreaterGreater_IntInt(int A, int B) {
        _ptrGreaterGreater_IntInt ??= FindFunction("Function Core.Object.GreaterGreater_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrGreaterGreater_IntInt.iNative = 0;
        _ptrGreaterGreater_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGreaterGreater_IntInt, @params);
        _ptrGreaterGreater_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrGreaterGreater_IntInt.iNative = 149;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.LessLess_IntInt
    // 0x35EDF0 (iNative: 148)
    // (Final | Native | Operator | Static | Public)
    public unsafe class LessLess_IntInt_Parameters : BaseObject {
        public LessLess_IntInt_Parameters() { }
        public LessLess_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.LessLess_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.LessLess_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.LessLess_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrLessLess_IntInt;
    public static int LessLess_IntInt(int A, int B) {
        _ptrLessLess_IntInt ??= FindFunction("Function Core.Object.LessLess_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrLessLess_IntInt.iNative = 0;
        _ptrLessLess_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLessLess_IntInt, @params);
        _ptrLessLess_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrLessLess_IntInt.iNative = 148;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Subtract_IntInt
    // 0x35ED40 (iNative: 147)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Subtract_IntInt_Parameters : BaseObject {
        public Subtract_IntInt_Parameters() { }
        public Subtract_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Subtract_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Subtract_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Subtract_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrSubtract_IntInt;
    public static int Subtract_IntInt(int A, int B) {
        _ptrSubtract_IntInt ??= FindFunction("Function Core.Object.Subtract_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrSubtract_IntInt.iNative = 0;
        _ptrSubtract_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_IntInt, @params);
        _ptrSubtract_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_IntInt.iNative = 147;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Add_IntInt
    // 0x35EC90 (iNative: 146)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Add_IntInt_Parameters : BaseObject {
        public Add_IntInt_Parameters() { }
        public Add_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Add_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Add_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Add_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrAdd_IntInt;
    public static int Add_IntInt(int A, int B) {
        _ptrAdd_IntInt ??= FindFunction("Function Core.Object.Add_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAdd_IntInt.iNative = 0;
        _ptrAdd_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAdd_IntInt, @params);
        _ptrAdd_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAdd_IntInt.iNative = 146;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Percent_IntInt
    // 0x35EBB0 (iNative: 253)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Percent_IntInt_Parameters : BaseObject {
        public Percent_IntInt_Parameters() { }
        public Percent_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Percent_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Percent_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Percent_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrPercent_IntInt;
    public static int Percent_IntInt(int A, int B) {
        _ptrPercent_IntInt ??= FindFunction("Function Core.Object.Percent_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrPercent_IntInt.iNative = 0;
        _ptrPercent_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrPercent_IntInt, @params);
        _ptrPercent_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrPercent_IntInt.iNative = 253;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Divide_IntInt
    // 0x35EAD0 (iNative: 145)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Divide_IntInt_Parameters : BaseObject {
        public Divide_IntInt_Parameters() { }
        public Divide_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Divide_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Divide_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Divide_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrDivide_IntInt;
    public static int Divide_IntInt(int A, int B) {
        _ptrDivide_IntInt ??= FindFunction("Function Core.Object.Divide_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrDivide_IntInt.iNative = 0;
        _ptrDivide_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivide_IntInt, @params);
        _ptrDivide_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivide_IntInt.iNative = 145;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Multiply_IntInt
    // 0x35EA20 (iNative: 144)
    // (Final | Native | Operator | Static | Public)
    public unsafe class Multiply_IntInt_Parameters : BaseObject {
        public Multiply_IntInt_Parameters() { }
        public Multiply_IntInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Multiply_IntInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Multiply_IntInt.B
        // 0x4 (0x4)
        // (Param)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Multiply_IntInt.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMultiply_IntInt;
    public static int Multiply_IntInt(int A, int B) {
        _ptrMultiply_IntInt ??= FindFunction("Function Core.Object.Multiply_IntInt");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMultiply_IntInt.iNative = 0;
        _ptrMultiply_IntInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiply_IntInt, @params);
        _ptrMultiply_IntInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiply_IntInt.iNative = 144;

        return *(int*)(@params + 8);
    }

    // Function Core.Object.Subtract_PreInt
    // 0x35E9A0 (iNative: 143)
    // (Final | PreOperator | Native | Operator | Static | Public)
    public unsafe class Subtract_PreInt_Parameters : BaseObject {
        public Subtract_PreInt_Parameters() { }
        public Subtract_PreInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Subtract_PreInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Subtract_PreInt.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrSubtract_PreInt;
    public static int Subtract_PreInt(int A) {
        _ptrSubtract_PreInt ??= FindFunction("Function Core.Object.Subtract_PreInt");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrSubtract_PreInt.iNative = 0;
        _ptrSubtract_PreInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtract_PreInt, @params);
        _ptrSubtract_PreInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtract_PreInt.iNative = 143;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.Complement_PreInt
    // 0x35E920 (iNative: 141)
    // (Final | PreOperator | Native | Operator | Static | Public)
    public unsafe class Complement_PreInt_Parameters : BaseObject {
        public Complement_PreInt_Parameters() { }
        public Complement_PreInt_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Complement_PreInt.A
        // 0x0 (0x4)
        // (Param)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Complement_PreInt.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrComplement_PreInt;
    public static int Complement_PreInt(int A) {
        _ptrComplement_PreInt ??= FindFunction("Function Core.Object.Complement_PreInt");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrComplement_PreInt.iNative = 0;
        _ptrComplement_PreInt.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrComplement_PreInt, @params);
        _ptrComplement_PreInt.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrComplement_PreInt.iNative = 141;

        return *(int*)(@params + 4);
    }

    // Function Core.Object.SubtractSubtract_Byte
    // 0x35E860 (iNative: 140)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractSubtract_Byte_Parameters : BaseObject {
        public SubtractSubtract_Byte_Parameters() { }
        public SubtractSubtract_Byte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.SubtractSubtract_Byte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.SubtractSubtract_Byte.ReturnValue
        // 0x1 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }
    }
    private static UFunction _ptrSubtractSubtract_Byte;
    public static byte SubtractSubtract_Byte(ref byte A) {
        _ptrSubtractSubtract_Byte ??= FindFunction("Function Core.Object.SubtractSubtract_Byte");

        var @params = stackalloc byte[2];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);

        _ptrSubtractSubtract_Byte.iNative = 0;
        _ptrSubtractSubtract_Byte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractSubtract_Byte, @params);
        _ptrSubtractSubtract_Byte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractSubtract_Byte.iNative = 140;

        A = *(byte*)@params;

        return *(byte*)(@params + 1);
    }

    // Function Core.Object.AddAdd_Byte
    // 0x35E7A0 (iNative: 139)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddAdd_Byte_Parameters : BaseObject {
        public AddAdd_Byte_Parameters() { }
        public AddAdd_Byte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.AddAdd_Byte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.AddAdd_Byte.ReturnValue
        // 0x1 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }
    }
    private static UFunction _ptrAddAdd_Byte;
    public static byte AddAdd_Byte(ref byte A) {
        _ptrAddAdd_Byte ??= FindFunction("Function Core.Object.AddAdd_Byte");

        var @params = stackalloc byte[2];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);

        _ptrAddAdd_Byte.iNative = 0;
        _ptrAddAdd_Byte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddAdd_Byte, @params);
        _ptrAddAdd_Byte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddAdd_Byte.iNative = 139;

        A = *(byte*)@params;

        return *(byte*)(@params + 1);
    }

    // Function Core.Object.SubtractSubtract_PreByte
    // 0x35E6E0 (iNative: 138)
    // (Final | PreOperator | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractSubtract_PreByte_Parameters : BaseObject {
        public SubtractSubtract_PreByte_Parameters() { }
        public SubtractSubtract_PreByte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.SubtractSubtract_PreByte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.SubtractSubtract_PreByte.ReturnValue
        // 0x1 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }
    }
    private static UFunction _ptrSubtractSubtract_PreByte;
    public static byte SubtractSubtract_PreByte(ref byte A) {
        _ptrSubtractSubtract_PreByte ??= FindFunction("Function Core.Object.SubtractSubtract_PreByte");

        var @params = stackalloc byte[2];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);

        _ptrSubtractSubtract_PreByte.iNative = 0;
        _ptrSubtractSubtract_PreByte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractSubtract_PreByte, @params);
        _ptrSubtractSubtract_PreByte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractSubtract_PreByte.iNative = 138;

        A = *(byte*)@params;

        return *(byte*)(@params + 1);
    }

    // Function Core.Object.AddAdd_PreByte
    // 0x35E620 (iNative: 137)
    // (Final | PreOperator | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddAdd_PreByte_Parameters : BaseObject {
        public AddAdd_PreByte_Parameters() { }
        public AddAdd_PreByte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.AddAdd_PreByte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.AddAdd_PreByte.ReturnValue
        // 0x1 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }
    }
    private static UFunction _ptrAddAdd_PreByte;
    public static byte AddAdd_PreByte(ref byte A) {
        _ptrAddAdd_PreByte ??= FindFunction("Function Core.Object.AddAdd_PreByte");

        var @params = stackalloc byte[2];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);

        _ptrAddAdd_PreByte.iNative = 0;
        _ptrAddAdd_PreByte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddAdd_PreByte, @params);
        _ptrAddAdd_PreByte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddAdd_PreByte.iNative = 137;

        A = *(byte*)@params;

        return *(byte*)(@params + 1);
    }

    // Function Core.Object.SubtractEqual_ByteByte
    // 0x35E540 (iNative: 136)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class SubtractEqual_ByteByte_Parameters : BaseObject {
        public SubtractEqual_ByteByte_Parameters() { }
        public SubtractEqual_ByteByte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.SubtractEqual_ByteByte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.SubtractEqual_ByteByte.B
        // 0x1 (0x1)
        // (Param)
        public byte B {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.SubtractEqual_ByteByte.ReturnValue
        // 0x2 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }
    }
    private static UFunction _ptrSubtractEqual_ByteByte;
    public static byte SubtractEqual_ByteByte(ref byte A, byte B) {
        _ptrSubtractEqual_ByteByte ??= FindFunction("Function Core.Object.SubtractEqual_ByteByte");

        var @params = stackalloc byte[3];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);
        System.Buffer.MemoryCopy(&B, @params + 1, 1, 1);

        _ptrSubtractEqual_ByteByte.iNative = 0;
        _ptrSubtractEqual_ByteByte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSubtractEqual_ByteByte, @params);
        _ptrSubtractEqual_ByteByte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrSubtractEqual_ByteByte.iNative = 136;

        A = *(byte*)@params;

        return *(byte*)(@params + 2);
    }

    // Function Core.Object.AddEqual_ByteByte
    // 0x35E460 (iNative: 135)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class AddEqual_ByteByte_Parameters : BaseObject {
        public AddEqual_ByteByte_Parameters() { }
        public AddEqual_ByteByte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.AddEqual_ByteByte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.AddEqual_ByteByte.B
        // 0x1 (0x1)
        // (Param)
        public byte B {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.AddEqual_ByteByte.ReturnValue
        // 0x2 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }
    }
    private static UFunction _ptrAddEqual_ByteByte;
    public static byte AddEqual_ByteByte(ref byte A, byte B) {
        _ptrAddEqual_ByteByte ??= FindFunction("Function Core.Object.AddEqual_ByteByte");

        var @params = stackalloc byte[3];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);
        System.Buffer.MemoryCopy(&B, @params + 1, 1, 1);

        _ptrAddEqual_ByteByte.iNative = 0;
        _ptrAddEqual_ByteByte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAddEqual_ByteByte, @params);
        _ptrAddEqual_ByteByte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAddEqual_ByteByte.iNative = 135;

        A = *(byte*)@params;

        return *(byte*)(@params + 2);
    }

    // Function Core.Object.DivideEqual_ByteByte
    // 0x35E360 (iNative: 134)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class DivideEqual_ByteByte_Parameters : BaseObject {
        public DivideEqual_ByteByte_Parameters() { }
        public DivideEqual_ByteByte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.DivideEqual_ByteByte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.DivideEqual_ByteByte.B
        // 0x1 (0x1)
        // (Param)
        public byte B {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.DivideEqual_ByteByte.ReturnValue
        // 0x2 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }
    }
    private static UFunction _ptrDivideEqual_ByteByte;
    public static byte DivideEqual_ByteByte(ref byte A, byte B) {
        _ptrDivideEqual_ByteByte ??= FindFunction("Function Core.Object.DivideEqual_ByteByte");

        var @params = stackalloc byte[3];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);
        System.Buffer.MemoryCopy(&B, @params + 1, 1, 1);

        _ptrDivideEqual_ByteByte.iNative = 0;
        _ptrDivideEqual_ByteByte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDivideEqual_ByteByte, @params);
        _ptrDivideEqual_ByteByte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrDivideEqual_ByteByte.iNative = 134;

        A = *(byte*)@params;

        return *(byte*)(@params + 2);
    }

    // Function Core.Object.MultiplyEqual_ByteFloat
    // 0x35E270 (iNative: 198)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_ByteFloat_Parameters : BaseObject {
        public MultiplyEqual_ByteFloat_Parameters() { }
        public MultiplyEqual_ByteFloat_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.MultiplyEqual_ByteFloat.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // MISSED OFFSET: 0x3

        // FloatProperty Core.Object.MultiplyEqual_ByteFloat.B
        // 0x4 (0x4)
        // (Param)
        public float B {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // ByteProperty Core.Object.MultiplyEqual_ByteFloat.ReturnValue
        // 0x8 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 8);
            set => *(byte*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrMultiplyEqual_ByteFloat;
    public static byte MultiplyEqual_ByteFloat(ref byte A, float B) {
        _ptrMultiplyEqual_ByteFloat ??= FindFunction("Function Core.Object.MultiplyEqual_ByteFloat");

        var @params = stackalloc byte[6];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrMultiplyEqual_ByteFloat.iNative = 0;
        _ptrMultiplyEqual_ByteFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_ByteFloat, @params);
        _ptrMultiplyEqual_ByteFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_ByteFloat.iNative = 198;

        A = *(byte*)@params;

        return *(byte*)(@params + 8);
    }

    // Function Core.Object.MultiplyEqual_ByteByte
    // 0x35E190 (iNative: 133)
    // (Final | Native | Operator | Static | Public | HasOutParams)
    public unsafe class MultiplyEqual_ByteByte_Parameters : BaseObject {
        public MultiplyEqual_ByteByte_Parameters() { }
        public MultiplyEqual_ByteByte_Parameters(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.MultiplyEqual_ByteByte.A
        // 0x0 (0x1)
        // (Param | OutParam)
        public byte A {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.MultiplyEqual_ByteByte.B
        // 0x1 (0x1)
        // (Param)
        public byte B {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.MultiplyEqual_ByteByte.ReturnValue
        // 0x2 (0x1)
        // (Param | OutParam | ReturnParam)
        public byte ReturnValue {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }
    }
    private static UFunction _ptrMultiplyEqual_ByteByte;
    public static byte MultiplyEqual_ByteByte(ref byte A, byte B) {
        _ptrMultiplyEqual_ByteByte ??= FindFunction("Function Core.Object.MultiplyEqual_ByteByte");

        var @params = stackalloc byte[3];
        var _A = A;
        System.Buffer.MemoryCopy(&_A, @params, 1, 1);
        System.Buffer.MemoryCopy(&B, @params + 1, 1, 1);

        _ptrMultiplyEqual_ByteByte.iNative = 0;
        _ptrMultiplyEqual_ByteByte.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrMultiplyEqual_ByteByte, @params);
        _ptrMultiplyEqual_ByteByte.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrMultiplyEqual_ByteByte.iNative = 133;

        A = *(byte*)@params;

        return *(byte*)(@params + 2);
    }

    // Function Core.Object.OrOr_BoolBool
    // 0x35E0C0 (iNative: 132)
    // (Final | Native | Operator | Static | Public)
    public unsafe class OrOr_BoolBool_Parameters : BaseObject {
        public OrOr_BoolBool_Parameters() { }
        public OrOr_BoolBool_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.OrOr_BoolBool.A
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool A {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.OrOr_BoolBool.B
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | SkipParam)
        public bool B {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.OrOr_BoolBool.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrOrOr_BoolBool;
    public static bool OrOr_BoolBool(bool A, bool B) {
        _ptrOrOr_BoolBool ??= FindFunction("Function Core.Object.OrOr_BoolBool");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrOrOr_BoolBool.iNative = 0;
        _ptrOrOr_BoolBool.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrOrOr_BoolBool, @params);
        _ptrOrOr_BoolBool.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrOrOr_BoolBool.iNative = 132;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.XorXor_BoolBool
    // 0x35DF20 (iNative: 131)
    // (Final | Native | Operator | Static | Public)
    public unsafe class XorXor_BoolBool_Parameters : BaseObject {
        public XorXor_BoolBool_Parameters() { }
        public XorXor_BoolBool_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.XorXor_BoolBool.A
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool A {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.XorXor_BoolBool.B
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool B {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.XorXor_BoolBool.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrXorXor_BoolBool;
    public static bool XorXor_BoolBool(bool A, bool B) {
        _ptrXorXor_BoolBool ??= FindFunction("Function Core.Object.XorXor_BoolBool");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrXorXor_BoolBool.iNative = 0;
        _ptrXorXor_BoolBool.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrXorXor_BoolBool, @params);
        _ptrXorXor_BoolBool.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrXorXor_BoolBool.iNative = 131;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.AndAnd_BoolBool
    // 0x35DFF0 (iNative: 130)
    // (Final | Native | Operator | Static | Public)
    public unsafe class AndAnd_BoolBool_Parameters : BaseObject {
        public AndAnd_BoolBool_Parameters() { }
        public AndAnd_BoolBool_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.AndAnd_BoolBool.A
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool A {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.AndAnd_BoolBool.B
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | SkipParam)
        public bool B {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.AndAnd_BoolBool.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAndAnd_BoolBool;
    public static bool AndAnd_BoolBool(bool A, bool B) {
        _ptrAndAnd_BoolBool ??= FindFunction("Function Core.Object.AndAnd_BoolBool");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrAndAnd_BoolBool.iNative = 0;
        _ptrAndAnd_BoolBool.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAndAnd_BoolBool, @params);
        _ptrAndAnd_BoolBool.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrAndAnd_BoolBool.iNative = 130;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.NotEqual_BoolBool
    // 0x35DF20 (iNative: 243)
    // (Final | Native | Operator | Static | Public)
    public unsafe class NotEqual_BoolBool_Parameters : BaseObject {
        public NotEqual_BoolBool_Parameters() { }
        public NotEqual_BoolBool_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.NotEqual_BoolBool.A
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool A {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.NotEqual_BoolBool.B
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool B {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.NotEqual_BoolBool.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNotEqual_BoolBool;
    public static bool NotEqual_BoolBool(bool A, bool B) {
        _ptrNotEqual_BoolBool ??= FindFunction("Function Core.Object.NotEqual_BoolBool");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrNotEqual_BoolBool.iNative = 0;
        _ptrNotEqual_BoolBool.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNotEqual_BoolBool, @params);
        _ptrNotEqual_BoolBool.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNotEqual_BoolBool.iNative = 243;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.EqualEqual_BoolBool
    // 0x35DE50 (iNative: 242)
    // (Final | Native | Operator | Static | Public)
    public unsafe class EqualEqual_BoolBool_Parameters : BaseObject {
        public EqualEqual_BoolBool_Parameters() { }
        public EqualEqual_BoolBool_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.EqualEqual_BoolBool.A
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool A {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.EqualEqual_BoolBool.B
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool B {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.EqualEqual_BoolBool.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrEqualEqual_BoolBool;
    public static bool EqualEqual_BoolBool(bool A, bool B) {
        _ptrEqualEqual_BoolBool ??= FindFunction("Function Core.Object.EqualEqual_BoolBool");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);
        System.Buffer.MemoryCopy(&B, @params + 4, 4, 4);

        _ptrEqualEqual_BoolBool.iNative = 0;
        _ptrEqualEqual_BoolBool.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEqualEqual_BoolBool, @params);
        _ptrEqualEqual_BoolBool.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrEqualEqual_BoolBool.iNative = 242;

        return *(bool*)(@params + 8);
    }

    // Function Core.Object.Not_PreBool
    // 0x35DDC0 (iNative: 129)
    // (Final | PreOperator | Native | Operator | Static | Public)
    public unsafe class Not_PreBool_Parameters : BaseObject {
        public Not_PreBool_Parameters() { }
        public Not_PreBool_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.Object.Not_PreBool.A
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param)
        public bool A {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core.Object.Not_PreBool.ReturnValue
        // 0x4 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 4) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 4) |= 0x1;
                else *(uint*)(Pointer + 4) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrNot_PreBool;
    public static bool Not_PreBool(bool A) {
        _ptrNot_PreBool ??= FindFunction("Function Core.Object.Not_PreBool");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&A, @params, 4, 4);

        _ptrNot_PreBool.iNative = 0;
        _ptrNot_PreBool.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrNot_PreBool, @params);
        _ptrNot_PreBool.FunctionFlags |= (ulong)EFunctionFlags.Native;
        _ptrNot_PreBool.iNative = 129;

        return *(bool*)(@params + 4);
    }


    // ScriptStruct Core.Object.BoneAtom
    // 0x20
    public unsafe class FBoneAtom : BaseObject {
        public FBoneAtom() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FBoneAtom(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.BoneAtom.Rotation
        // 0x0 (0x10)
        public FQuat Rotation {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.BoneAtom.Translation
        // 0x10 (0xC)
        public FVector Translation {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }

        // FloatProperty Core.Object.BoneAtom.Scale
        // 0x1C (0x4)
        public float Scale {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }
    }

    // ScriptStruct Core.Object.OctreeElementId
    // 0xC
    public unsafe class FOctreeElementId : BaseObject {
        public FOctreeElementId() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FOctreeElementId(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.OctreeElementId.Node
        // 0x0 (0x8)
        // (Const | Native)
        public nint Node {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // IntProperty Core.Object.OctreeElementId.ElementIndex
        // 0x8 (0x4)
        // (Const | Native)
        public int ElementIndex {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }

    // ScriptStruct Core.Object.RenderCommandFence
    // 0x4
    public unsafe class FRenderCommandFence : BaseObject {
        public FRenderCommandFence() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FRenderCommandFence(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.RenderCommandFence.NumPendingFences
        // 0x0 (0x4)
        // (Const | Native)
        public int NumPendingFences {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }

    // ScriptStruct Core.Object.RawDistribution
    // 0x20
    public unsafe class FRawDistribution : BaseObject {
        public FRawDistribution() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FRawDistribution(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.RawDistribution.Type
        // 0x0 (0x1)
        public byte Type {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.RawDistribution.Op
        // 0x1 (0x1)
        public byte Op {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.RawDistribution.LookupTableNumElements
        // 0x2 (0x1)
        public byte LookupTableNumElements {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }

        // ByteProperty Core.Object.RawDistribution.LookupTableChunkSize
        // 0x3 (0x1)
        public byte LookupTableChunkSize {
            get => *(byte*)(Pointer + 3);
            set => *(byte*)(Pointer + 3) = value;
        }

        // MISSED OFFSET: 0x4

        // ArrayProperty Core.Object.RawDistribution.LookupTable
        // 0x8 (0x10)
        // (NeedCtorLink)
        public UnmanagedTArray<float> LookupTable {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // FloatProperty Core.Object.RawDistribution.LookupTableTimeScale
        // 0x18 (0x4)
        public float LookupTableTimeScale {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }

        // FloatProperty Core.Object.RawDistribution.LookupTableStartTime
        // 0x1C (0x4)
        public float LookupTableStartTime {
            get => *(float*)(Pointer + 28);
            set => *(float*)(Pointer + 28) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurveLinearColor
    // 0x11
    public unsafe class FInterpCurveLinearColor : BaseObject {
        public FInterpCurveLinearColor() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FInterpCurveLinearColor(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.InterpCurveLinearColor.Points
        // 0x0 (0x10)
        // (Edit | NeedCtorLink)
        public StructTArray<FInterpCurvePointLinearColor> Points {
            get => new(Pointer, 88);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core.Object.InterpCurveLinearColor.InterpMethod
        // 0x10 (0x1)
        public EInterpMethodType InterpMethod {
            get => *(EInterpMethodType*)(Pointer + 16);
            set => *(EInterpMethodType*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurvePointLinearColor
    // 0x55
    public unsafe class FInterpCurvePointLinearColor : BaseObject {
        public FInterpCurvePointLinearColor() {
            Pointer = Marshal.AllocHGlobal(85);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 85);
            Allocated = true;
        }
        public FInterpCurvePointLinearColor(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.InterpCurvePointLinearColor.InVal
        // 0x0 (0x4)
        // (Edit)
        public float InVal {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.InterpCurvePointLinearColor.OutVal
        // 0x4 (0x10)
        // (Edit)
        public FLinearColor OutVal {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointLinearColor.ArriveTangent
        // 0x14 (0x10)
        // (Edit)
        public FLinearColor ArriveTangent {
            get => new(Pointer + 20);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 20), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointLinearColor.LeaveTangent
        // 0x24 (0x10)
        // (Edit)
        public FLinearColor LeaveTangent {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointLinearColor.ArriveWeight
        // 0x34 (0x10)
        // (Edit)
        public FLinearColor ArriveWeight {
            get => new(Pointer + 52);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 52), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointLinearColor.LeaveWeight
        // 0x44 (0x10)
        // (Edit)
        public FLinearColor LeaveWeight {
            get => new(Pointer + 68);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 68), 16, 16);
        }

        // ByteProperty Core.Object.InterpCurvePointLinearColor.InterpMode
        // 0x54 (0x1)
        // (Edit)
        public EInterpCurveMode InterpMode {
            get => *(EInterpCurveMode*)(Pointer + 84);
            set => *(EInterpCurveMode*)(Pointer + 84) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurveQuat
    // 0x11
    public unsafe class FInterpCurveQuat : BaseObject {
        public FInterpCurveQuat() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FInterpCurveQuat(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.InterpCurveQuat.Points
        // 0x0 (0x10)
        // (Edit | NeedCtorLink)
        public StructTArray<FInterpCurvePointQuat> Points {
            get => new(Pointer, 112);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core.Object.InterpCurveQuat.InterpMethod
        // 0x10 (0x1)
        public EInterpMethodType InterpMethod {
            get => *(EInterpMethodType*)(Pointer + 16);
            set => *(EInterpMethodType*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurvePointQuat
    // 0x61
    public unsafe class FInterpCurvePointQuat : BaseObject {
        public FInterpCurvePointQuat() {
            Pointer = Marshal.AllocHGlobal(97);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 97);
            Allocated = true;
        }
        public FInterpCurvePointQuat(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.InterpCurvePointQuat.InVal
        // 0x0 (0x4)
        // (Edit)
        public float InVal {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // MISSED OFFSET: 0xC

        // StructProperty Core.Object.InterpCurvePointQuat.OutVal
        // 0x10 (0x10)
        // (Edit)
        public FQuat OutVal {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointQuat.ArriveTangent
        // 0x20 (0x10)
        // (Edit)
        public FQuat ArriveTangent {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointQuat.LeaveTangent
        // 0x30 (0x10)
        // (Edit)
        public FQuat LeaveTangent {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointQuat.ArriveWeight
        // 0x40 (0x10)
        // (Edit)
        public FQuat ArriveWeight {
            get => new(Pointer + 64);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 64), 16, 16);
        }

        // StructProperty Core.Object.InterpCurvePointQuat.LeaveWeight
        // 0x50 (0x10)
        // (Edit)
        public FQuat LeaveWeight {
            get => new(Pointer + 80);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 80), 16, 16);
        }

        // ByteProperty Core.Object.InterpCurvePointQuat.InterpMode
        // 0x60 (0x1)
        // (Edit)
        public EInterpCurveMode InterpMode {
            get => *(EInterpCurveMode*)(Pointer + 96);
            set => *(EInterpCurveMode*)(Pointer + 96) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurveTwoVectors
    // 0x11
    public unsafe class FInterpCurveTwoVectors : BaseObject {
        public FInterpCurveTwoVectors() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FInterpCurveTwoVectors(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.InterpCurveTwoVectors.Points
        // 0x0 (0x10)
        // (Edit | NeedCtorLink)
        public StructTArray<FInterpCurvePointTwoVectors> Points {
            get => new(Pointer, 128);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core.Object.InterpCurveTwoVectors.InterpMethod
        // 0x10 (0x1)
        public EInterpMethodType InterpMethod {
            get => *(EInterpMethodType*)(Pointer + 16);
            set => *(EInterpMethodType*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurvePointTwoVectors
    // 0x7D
    public unsafe class FInterpCurvePointTwoVectors : BaseObject {
        public FInterpCurvePointTwoVectors() {
            Pointer = Marshal.AllocHGlobal(125);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 125);
            Allocated = true;
        }
        public FInterpCurvePointTwoVectors(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.InterpCurvePointTwoVectors.InVal
        // 0x0 (0x4)
        // (Edit)
        public float InVal {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.InterpCurvePointTwoVectors.OutVal
        // 0x4 (0x18)
        // (Edit)
        public FTwoVectors OutVal {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 24, 24);
        }

        // StructProperty Core.Object.InterpCurvePointTwoVectors.ArriveTangent
        // 0x1C (0x18)
        // (Edit)
        public FTwoVectors ArriveTangent {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 24, 24);
        }

        // StructProperty Core.Object.InterpCurvePointTwoVectors.LeaveTangent
        // 0x34 (0x18)
        // (Edit)
        public FTwoVectors LeaveTangent {
            get => new(Pointer + 52);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 52), 24, 24);
        }

        // StructProperty Core.Object.InterpCurvePointTwoVectors.ArriveWeight
        // 0x4C (0x18)
        // (Edit)
        public FTwoVectors ArriveWeight {
            get => new(Pointer + 76);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 76), 24, 24);
        }

        // StructProperty Core.Object.InterpCurvePointTwoVectors.LeaveWeight
        // 0x64 (0x18)
        // (Edit)
        public FTwoVectors LeaveWeight {
            get => new(Pointer + 100);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 100), 24, 24);
        }

        // ByteProperty Core.Object.InterpCurvePointTwoVectors.InterpMode
        // 0x7C (0x1)
        // (Edit)
        public EInterpCurveMode InterpMode {
            get => *(EInterpCurveMode*)(Pointer + 124);
            set => *(EInterpCurveMode*)(Pointer + 124) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurveVector
    // 0x11
    public unsafe class FInterpCurveVector : BaseObject {
        public FInterpCurveVector() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FInterpCurveVector(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.InterpCurveVector.Points
        // 0x0 (0x10)
        // (Edit | NeedCtorLink)
        public StructTArray<FInterpCurvePointVector> Points {
            get => new(Pointer, 68);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core.Object.InterpCurveVector.InterpMethod
        // 0x10 (0x1)
        public EInterpMethodType InterpMethod {
            get => *(EInterpMethodType*)(Pointer + 16);
            set => *(EInterpMethodType*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurvePointVector
    // 0x41
    public unsafe class FInterpCurvePointVector : BaseObject {
        public FInterpCurvePointVector() {
            Pointer = Marshal.AllocHGlobal(65);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 65);
            Allocated = true;
        }
        public FInterpCurvePointVector(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.InterpCurvePointVector.InVal
        // 0x0 (0x4)
        // (Edit)
        public float InVal {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.InterpCurvePointVector.OutVal
        // 0x4 (0xC)
        // (Edit)
        public FVector OutVal {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 12, 12);
        }

        // StructProperty Core.Object.InterpCurvePointVector.ArriveTangent
        // 0x10 (0xC)
        // (Edit)
        public FVector ArriveTangent {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 12, 12);
        }

        // StructProperty Core.Object.InterpCurvePointVector.LeaveTangent
        // 0x1C (0xC)
        // (Edit)
        public FVector LeaveTangent {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 12, 12);
        }

        // StructProperty Core.Object.InterpCurvePointVector.ArriveWeight
        // 0x28 (0xC)
        // (Edit)
        public FVector ArriveWeight {
            get => new(Pointer + 40);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 40), 12, 12);
        }

        // StructProperty Core.Object.InterpCurvePointVector.LeaveWeight
        // 0x34 (0xC)
        // (Edit)
        public FVector LeaveWeight {
            get => new(Pointer + 52);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 52), 12, 12);
        }

        // ByteProperty Core.Object.InterpCurvePointVector.InterpMode
        // 0x40 (0x1)
        // (Edit)
        public EInterpCurveMode InterpMode {
            get => *(EInterpCurveMode*)(Pointer + 64);
            set => *(EInterpCurveMode*)(Pointer + 64) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurveVector2D
    // 0x11
    public unsafe class FInterpCurveVector2D : BaseObject {
        public FInterpCurveVector2D() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FInterpCurveVector2D(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.InterpCurveVector2D.Points
        // 0x0 (0x10)
        // (Edit | NeedCtorLink)
        public StructTArray<FInterpCurvePointVector2D> Points {
            get => new(Pointer, 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core.Object.InterpCurveVector2D.InterpMethod
        // 0x10 (0x1)
        public EInterpMethodType InterpMethod {
            get => *(EInterpMethodType*)(Pointer + 16);
            set => *(EInterpMethodType*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurvePointVector2D
    // 0x2D
    public unsafe class FInterpCurvePointVector2D : BaseObject {
        public FInterpCurvePointVector2D() {
            Pointer = Marshal.AllocHGlobal(45);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 45);
            Allocated = true;
        }
        public FInterpCurvePointVector2D(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.InterpCurvePointVector2D.InVal
        // 0x0 (0x4)
        // (Edit)
        public float InVal {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // StructProperty Core.Object.InterpCurvePointVector2D.OutVal
        // 0x4 (0x8)
        // (Edit)
        public FVector2D OutVal {
            get => new(Pointer + 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 4), 8, 8);
        }

        // StructProperty Core.Object.InterpCurvePointVector2D.ArriveTangent
        // 0xC (0x8)
        // (Edit)
        public FVector2D ArriveTangent {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 8, 8);
        }

        // StructProperty Core.Object.InterpCurvePointVector2D.LeaveTangent
        // 0x14 (0x8)
        // (Edit)
        public FVector2D LeaveTangent {
            get => new(Pointer + 20);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 20), 8, 8);
        }

        // StructProperty Core.Object.InterpCurvePointVector2D.ArriveWeight
        // 0x1C (0x8)
        // (Edit)
        public FVector2D ArriveWeight {
            get => new(Pointer + 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 28), 8, 8);
        }

        // StructProperty Core.Object.InterpCurvePointVector2D.LeaveWeight
        // 0x24 (0x8)
        // (Edit)
        public FVector2D LeaveWeight {
            get => new(Pointer + 36);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 8, 8);
        }

        // ByteProperty Core.Object.InterpCurvePointVector2D.InterpMode
        // 0x2C (0x1)
        // (Edit)
        public EInterpCurveMode InterpMode {
            get => *(EInterpCurveMode*)(Pointer + 44);
            set => *(EInterpCurveMode*)(Pointer + 44) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurveFloat
    // 0x11
    public unsafe class FInterpCurveFloat : BaseObject {
        public FInterpCurveFloat() {
            Pointer = Marshal.AllocHGlobal(17);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 17);
            Allocated = true;
        }
        public FInterpCurveFloat(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.InterpCurveFloat.Points
        // 0x0 (0x10)
        // (Edit | NeedCtorLink)
        public StructTArray<FInterpCurvePointFloat> Points {
            get => new(Pointer, 28);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core.Object.InterpCurveFloat.InterpMethod
        // 0x10 (0x1)
        public EInterpMethodType InterpMethod {
            get => *(EInterpMethodType*)(Pointer + 16);
            set => *(EInterpMethodType*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.InterpCurvePointFloat
    // 0x19
    public unsafe class FInterpCurvePointFloat : BaseObject {
        public FInterpCurvePointFloat() {
            Pointer = Marshal.AllocHGlobal(25);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 25);
            Allocated = true;
        }
        public FInterpCurvePointFloat(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.InterpCurvePointFloat.InVal
        // 0x0 (0x4)
        // (Edit)
        public float InVal {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.InterpCurvePointFloat.OutVal
        // 0x4 (0x4)
        // (Edit)
        public float OutVal {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.InterpCurvePointFloat.ArriveTangent
        // 0x8 (0x4)
        // (Edit)
        public float ArriveTangent {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.InterpCurvePointFloat.LeaveTangent
        // 0xC (0x4)
        // (Edit)
        public float LeaveTangent {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.InterpCurvePointFloat.ArriveWeight
        // 0x10 (0x4)
        // (Edit)
        public float ArriveWeight {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }

        // FloatProperty Core.Object.InterpCurvePointFloat.LeaveWeight
        // 0x14 (0x4)
        // (Edit)
        public float LeaveWeight {
            get => *(float*)(Pointer + 20);
            set => *(float*)(Pointer + 20) = value;
        }

        // ByteProperty Core.Object.InterpCurvePointFloat.InterpMode
        // 0x18 (0x1)
        // (Edit)
        public EInterpCurveMode InterpMode {
            get => *(EInterpCurveMode*)(Pointer + 24);
            set => *(EInterpCurveMode*)(Pointer + 24) = value;
        }
    }

    // ScriptStruct Core.Object.Cylinder
    // 0x8
    public unsafe class FCylinder : BaseObject {
        public FCylinder() {
            Pointer = Marshal.AllocHGlobal(8);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 8);
            Allocated = true;
        }
        public FCylinder(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Cylinder.Radius
        // 0x0 (0x4)
        public float Radius {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Cylinder.Height
        // 0x4 (0x4)
        public float Height {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }

    // ScriptStruct Core.Object.Matrix
    // 0x40
    public unsafe class FMatrix : BaseObject {
        public FMatrix() {
            Pointer = Marshal.AllocHGlobal(64);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 64);
            Allocated = true;
        }
        public FMatrix(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Matrix.XPlane
        // 0x0 (0x10)
        // (Edit)
        public FPlane XPlane {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.Matrix.YPlane
        // 0x10 (0x10)
        // (Edit)
        public FPlane YPlane {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StructProperty Core.Object.Matrix.ZPlane
        // 0x20 (0x10)
        // (Edit)
        public FPlane ZPlane {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // StructProperty Core.Object.Matrix.WPlane
        // 0x30 (0x10)
        // (Edit)
        public FPlane WPlane {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }
    }

    // ScriptStruct Core.Object.BoxSphereBounds
    // 0x1C
    public unsafe class FBoxSphereBounds : BaseObject {
        public FBoxSphereBounds() {
            Pointer = Marshal.AllocHGlobal(28);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 28);
            Allocated = true;
        }
        public FBoxSphereBounds(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.BoxSphereBounds.Origin
        // 0x0 (0xC)
        // (Edit)
        public FVector Origin {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.BoxSphereBounds.BoxExtent
        // 0xC (0xC)
        // (Edit)
        public FVector BoxExtent {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.BoxSphereBounds.SphereRadius
        // 0x18 (0x4)
        // (Edit)
        public float SphereRadius {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }
    }

    // ScriptStruct Core.Object.Box
    // 0x19
    public unsafe class FBox : BaseObject {
        public FBox() {
            Pointer = Marshal.AllocHGlobal(25);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 25);
            Allocated = true;
        }
        public FBox(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Box.Min
        // 0x0 (0xC)
        // (Edit)
        public FVector Min {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.Box.Max
        // 0xC (0xC)
        // (Edit)
        public FVector Max {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // ByteProperty Core.Object.Box.IsValid
        // 0x18 (0x1)
        public byte IsValid {
            get => *(byte*)(Pointer + 24);
            set => *(byte*)(Pointer + 24) = value;
        }
    }

    // ScriptStruct Core.Object.LinearColor
    // 0x10
    public unsafe class FLinearColor : BaseObject {
        public FLinearColor() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FLinearColor(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.LinearColor.R
        // 0x0 (0x4)
        // (Edit)
        public float R {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.LinearColor.G
        // 0x4 (0x4)
        // (Edit)
        public float G {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.LinearColor.B
        // 0x8 (0x4)
        // (Edit)
        public float B {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.LinearColor.A
        // 0xC (0x4)
        // (Edit)
        public float A {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.Color
    // 0x4
    public unsafe class FColor : BaseObject {
        public FColor() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FColor(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.Color.B
        // 0x0 (0x1)
        // (Edit)
        public byte B {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.Color.G
        // 0x1 (0x1)
        // (Edit)
        public byte G {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.Color.R
        // 0x2 (0x1)
        // (Edit)
        public byte R {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }

        // ByteProperty Core.Object.Color.A
        // 0x3 (0x1)
        // (Edit)
        public byte A {
            get => *(byte*)(Pointer + 3);
            set => *(byte*)(Pointer + 3) = value;
        }
    }

    // ScriptStruct Core.Object.TAlphaBlend
    // 0x15
    public unsafe class FTAlphaBlend : BaseObject {
        public FTAlphaBlend() {
            Pointer = Marshal.AllocHGlobal(21);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 21);
            Allocated = true;
        }
        public FTAlphaBlend(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.TAlphaBlend.AlphaIn
        // 0x0 (0x4)
        // (Const)
        public float AlphaIn {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.TAlphaBlend.AlphaOut
        // 0x4 (0x4)
        // (Const)
        public float AlphaOut {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.TAlphaBlend.AlphaTarget
        // 0x8 (0x4)
        // (Edit)
        public float AlphaTarget {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.TAlphaBlend.BlendTime
        // 0xC (0x4)
        // (Edit)
        public float BlendTime {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }

        // FloatProperty Core.Object.TAlphaBlend.BlendTimeToGo
        // 0x10 (0x4)
        // (Const)
        public float BlendTimeToGo {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }

        // ByteProperty Core.Object.TAlphaBlend.BlendType
        // 0x14 (0x1)
        // (Edit)
        public AlphaBlendType BlendType {
            get => *(AlphaBlendType*)(Pointer + 20);
            set => *(AlphaBlendType*)(Pointer + 20) = value;
        }
    }

    // ScriptStruct Core.Object.TPOV
    // 0x1C
    public unsafe class FTPOV : BaseObject {
        public FTPOV() {
            Pointer = Marshal.AllocHGlobal(28);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 28);
            Allocated = true;
        }
        public FTPOV(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.TPOV.Location
        // 0x0 (0xC)
        // (Edit)
        public FVector Location {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.TPOV.Rotation
        // 0xC (0xC)
        // (Edit)
        public FRotator Rotation {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }

        // FloatProperty Core.Object.TPOV.FOV
        // 0x18 (0x4)
        // (Edit)
        public float FOV {
            get => *(float*)(Pointer + 24);
            set => *(float*)(Pointer + 24) = value;
        }
    }

    // ScriptStruct Core.Object.SHVectorRGB
    // 0x90
    public unsafe class FSHVectorRGB : BaseObject {
        public FSHVectorRGB() {
            Pointer = Marshal.AllocHGlobal(144);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 144);
            Allocated = true;
        }
        public FSHVectorRGB(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.SHVectorRGB.R
        // 0x0 (0x30)
        // (Edit)
        public FSHVector R {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 48, 48);
        }

        // StructProperty Core.Object.SHVectorRGB.G
        // 0x30 (0x30)
        // (Edit)
        public FSHVector G {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 48, 48);
        }

        // StructProperty Core.Object.SHVectorRGB.B
        // 0x60 (0x30)
        // (Edit)
        public FSHVector B {
            get => new(Pointer + 96);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 48, 48);
        }
    }

    // ScriptStruct Core.Object.SHVector
    // 0x30
    public unsafe class FSHVector : BaseObject {
        public FSHVector() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FSHVector(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.SHVector.V
        // 0x0 (0x24)
        // (Edit)
        // Fixed array size: 9
        public UnmanagedFixedArray<float> V {
            get => new(Pointer, 9);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 36, 36);
        }

        // FloatProperty Core.Object.SHVector.Padding
        // 0x24 (0xC)
        // Fixed array size: 3
        public UnmanagedFixedArray<float> Padding {
            get => new(Pointer + 36, 3);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 36), 12, 12);
        }
    }

    // ScriptStruct Core.Object.IntPoint
    // 0x8
    public unsafe class FIntPoint : BaseObject {
        public FIntPoint() {
            Pointer = Marshal.AllocHGlobal(8);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 8);
            Allocated = true;
        }
        public FIntPoint(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.IntPoint.X
        // 0x0 (0x4)
        // (Edit)
        public int X {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.IntPoint.Y
        // 0x4 (0x4)
        // (Edit)
        public int Y {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }

    // ScriptStruct Core.Object.PackedNormal
    // 0x4
    public unsafe class FPackedNormal : BaseObject {
        public FPackedNormal() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FPackedNormal(nint pointer) : base(pointer) { }

        // ByteProperty Core.Object.PackedNormal.X
        // 0x0 (0x1)
        // (Edit)
        public byte X {
            get => *(byte*)Pointer;
            set => *(byte*)Pointer = value;
        }

        // ByteProperty Core.Object.PackedNormal.Y
        // 0x1 (0x1)
        // (Edit)
        public byte Y {
            get => *(byte*)(Pointer + 1);
            set => *(byte*)(Pointer + 1) = value;
        }

        // ByteProperty Core.Object.PackedNormal.Z
        // 0x2 (0x1)
        // (Edit)
        public byte Z {
            get => *(byte*)(Pointer + 2);
            set => *(byte*)(Pointer + 2) = value;
        }

        // ByteProperty Core.Object.PackedNormal.W
        // 0x3 (0x1)
        // (Edit)
        public byte W {
            get => *(byte*)(Pointer + 3);
            set => *(byte*)(Pointer + 3) = value;
        }
    }

    // ScriptStruct Core.Object.Quat
    // 0x10
    public unsafe class FQuat : BaseObject {
        public FQuat() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FQuat(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Quat.X
        // 0x0 (0x4)
        // (Edit)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Quat.Y
        // 0x4 (0x4)
        // (Edit)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Quat.Z
        // 0x8 (0x4)
        // (Edit)
        public float Z {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.Quat.W
        // 0xC (0x4)
        // (Edit)
        public float W {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.Rotator
    // 0xC
    public unsafe class FRotator : BaseObject {
        public FRotator() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FRotator(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Rotator.Pitch
        // 0x0 (0x4)
        // (Edit)
        public int Pitch {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Rotator.Yaw
        // 0x4 (0x4)
        // (Edit)
        public int Yaw {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Rotator.Roll
        // 0x8 (0x4)
        // (Edit)
        public int Roll {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }

    // ScriptStruct Core.Object.Plane
    // 0x4 (0xC - 0x10)
    public unsafe class FPlane : FVector {
        public FPlane() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FPlane(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Plane.W
        // 0xC (0x4)
        // (Edit)
        public float W {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.TwoVectors
    // 0x18
    public unsafe class FTwoVectors : BaseObject {
        public FTwoVectors() {
            Pointer = Marshal.AllocHGlobal(24);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 24);
            Allocated = true;
        }
        public FTwoVectors(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.TwoVectors.v1
        // 0x0 (0xC)
        // (Edit)
        public FVector v1 {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.Object.TwoVectors.v2
        // 0xC (0xC)
        // (Edit)
        public FVector v2 {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }

    // ScriptStruct Core.Object.Vector2D
    // 0x8
    public unsafe class FVector2D : BaseObject {
        public FVector2D() {
            Pointer = Marshal.AllocHGlobal(8);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 8);
            Allocated = true;
        }
        public FVector2D(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Vector2D.X
        // 0x0 (0x4)
        // (Edit)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Vector2D.Y
        // 0x4 (0x4)
        // (Edit)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }

    // ScriptStruct Core.Object.Vector4
    // 0x10
    public unsafe class FVector4 : BaseObject {
        public FVector4() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FVector4(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Vector4.X
        // 0x0 (0x4)
        // (Edit)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Vector4.Y
        // 0x4 (0x4)
        // (Edit)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Vector4.Z
        // 0x8 (0x4)
        // (Edit)
        public float Z {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }

        // FloatProperty Core.Object.Vector4.W
        // 0xC (0x4)
        // (Edit)
        public float W {
            get => *(float*)(Pointer + 12);
            set => *(float*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.Vector
    // 0xC
    public unsafe class FVector : BaseObject {
        public FVector() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FVector(nint pointer) : base(pointer) { }

        // FloatProperty Core.Object.Vector.X
        // 0x0 (0x4)
        // (Edit)
        public float X {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.Object.Vector.Y
        // 0x4 (0x4)
        // (Edit)
        public float Y {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.Object.Vector.Z
        // 0x8 (0x4)
        // (Edit)
        public float Z {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }

    // ScriptStruct Core.Object.Guid
    // 0x10
    public unsafe class FGuid : BaseObject {
        public FGuid() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FGuid(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Guid.A
        // 0x0 (0x4)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Guid.B
        // 0x4 (0x4)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.Guid.C
        // 0x8 (0x4)
        public int C {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.Guid.D
        // 0xC (0x4)
        public int D {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.InlinePointerArray_Mirror
    // 0x18
    public unsafe class FInlinePointerArray_Mirror : BaseObject {
        public FInlinePointerArray_Mirror() {
            Pointer = Marshal.AllocHGlobal(24);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 24);
            Allocated = true;
        }
        public FInlinePointerArray_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.InlinePointerArray_Mirror.InlineData
        // 0x0 (0x8)
        // (Const)
        public nint InlineData {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // StructProperty Core.Object.InlinePointerArray_Mirror.SecondaryData
        // 0x8 (0x10)
        // (Const)
        public FArray_Mirror SecondaryData {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }
    }

    // ScriptStruct Core.Object.Array_Mirror
    // 0x10
    public unsafe class FArray_Mirror : BaseObject {
        public FArray_Mirror() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FArray_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Array_Mirror.Data
        // 0x0 (0x8)
        // (Const | Native)
        public nint Data {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // IntProperty Core.Object.Array_Mirror.ArrayNum
        // 0x8 (0x4)
        // (Const | Native)
        public int ArrayNum {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.Array_Mirror.ArrayMax
        // 0xC (0x4)
        // (Const | Native)
        public int ArrayMax {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.IndirectArray_Mirror
    // 0x10
    public unsafe class FIndirectArray_Mirror : BaseObject {
        public FIndirectArray_Mirror() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FIndirectArray_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.IndirectArray_Mirror.Data
        // 0x0 (0x8)
        // (Const | Native)
        public nint Data {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // IntProperty Core.Object.IndirectArray_Mirror.ArrayNum
        // 0x8 (0x4)
        // (Const | Native)
        public int ArrayNum {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.IndirectArray_Mirror.ArrayMax
        // 0xC (0x4)
        // (Const | Native)
        public int ArrayMax {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }
    }

    // ScriptStruct Core.Object.FColorVertexBuffer_Mirror
    // 0x1C
    public unsafe class FFColorVertexBuffer_Mirror : BaseObject {
        public FFColorVertexBuffer_Mirror() {
            Pointer = Marshal.AllocHGlobal(28);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 28);
            Allocated = true;
        }
        public FFColorVertexBuffer_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.FColorVertexBuffer_Mirror.VfTable
        // 0x0 (0x8)
        // (Const | Native)
        public nint VfTable {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // StructProperty Core.Object.FColorVertexBuffer_Mirror.VertexData
        // 0x8 (0x8)
        // (Const | Native)
        public nint VertexData {
            get => *(nint*)(Pointer + 8);
            set => *(nint*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.FColorVertexBuffer_Mirror.Data
        // 0x10 (0x4)
        // (Const)
        public int Data {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // IntProperty Core.Object.FColorVertexBuffer_Mirror.Stride
        // 0x14 (0x4)
        // (Const)
        public int Stride {
            get => *(int*)(Pointer + 20);
            set => *(int*)(Pointer + 20) = value;
        }

        // IntProperty Core.Object.FColorVertexBuffer_Mirror.NumVertices
        // 0x18 (0x4)
        // (Const)
        public int NumVertices {
            get => *(int*)(Pointer + 24);
            set => *(int*)(Pointer + 24) = value;
        }
    }

    // ScriptStruct Core.Object.RenderCommandFence_Mirror
    // 0x4
    public unsafe class FRenderCommandFence_Mirror : BaseObject {
        public FRenderCommandFence_Mirror() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FRenderCommandFence_Mirror(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.RenderCommandFence_Mirror.NumPendingFences
        // 0x0 (0x4)
        // (Const | Native | Transient)
        public int NumPendingFences {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }

    // ScriptStruct Core.Object.UntypedBulkData_Mirror
    // 0x54
    public unsafe class FUntypedBulkData_Mirror : BaseObject {
        public FUntypedBulkData_Mirror() {
            Pointer = Marshal.AllocHGlobal(84);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 84);
            Allocated = true;
        }
        public FUntypedBulkData_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.UntypedBulkData_Mirror.VfTable
        // 0x0 (0x8)
        // (Const | Native)
        public nint VfTable {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.BulkDataFlags
        // 0x8 (0x4)
        // (Const | Native)
        public int BulkDataFlags {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.ElementCount
        // 0xC (0x4)
        // (Const | Native)
        public int ElementCount {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // QWordProperty Core.Object.UntypedBulkData_Mirror.BulkDataOffsetInFile
        // 0x10 (0x8)
        // (Const | Native)
        public ulong BulkDataOffsetInFile {
            get => *(ulong*)(Pointer + 16);
            set => *(ulong*)(Pointer + 16) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.BulkDataSizeOnDisk
        // 0x18 (0x4)
        // (Const | Native)
        public int BulkDataSizeOnDisk {
            get => *(int*)(Pointer + 24);
            set => *(int*)(Pointer + 24) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.SavedBulkDataFlags
        // 0x1C (0x4)
        // (Const | Native)
        public int SavedBulkDataFlags {
            get => *(int*)(Pointer + 28);
            set => *(int*)(Pointer + 28) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.SavedElementCount
        // 0x20 (0x4)
        // (Const | Native)
        public int SavedElementCount {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // MISSED OFFSET: 0x4

        // QWordProperty Core.Object.UntypedBulkData_Mirror.SavedBulkDataOffsetInFile
        // 0x28 (0x8)
        // (Const | Native)
        public ulong SavedBulkDataOffsetInFile {
            get => *(ulong*)(Pointer + 40);
            set => *(ulong*)(Pointer + 40) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.SavedBulkDataSizeOnDisk
        // 0x30 (0x4)
        // (Const | Native)
        public int SavedBulkDataSizeOnDisk {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty Core.Object.UntypedBulkData_Mirror.BulkData
        // 0x38 (0x8)
        // (Const | Native)
        public nint BulkData {
            get => *(nint*)(Pointer + 56);
            set => *(nint*)(Pointer + 56) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.LockStatus
        // 0x40 (0x4)
        // (Const | Native)
        public int LockStatus {
            get => *(int*)(Pointer + 64);
            set => *(int*)(Pointer + 64) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty Core.Object.UntypedBulkData_Mirror.AttachedAr
        // 0x48 (0x8)
        // (Const | Native)
        public nint AttachedAr {
            get => *(nint*)(Pointer + 72);
            set => *(nint*)(Pointer + 72) = value;
        }

        // IntProperty Core.Object.UntypedBulkData_Mirror.bShouldFreeOnEmpty
        // 0x50 (0x4)
        // (Const | Native)
        public int bShouldFreeOnEmpty {
            get => *(int*)(Pointer + 80);
            set => *(int*)(Pointer + 80) = value;
        }
    }

    // ScriptStruct Core.Object.MultiMap_Mirror
    // 0x50
    public unsafe class FMultiMap_Mirror : BaseObject {
        public FMultiMap_Mirror() {
            Pointer = Marshal.AllocHGlobal(80);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 80);
            Allocated = true;
        }
        public FMultiMap_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.MultiMap_Mirror.Pairs
        // 0x0 (0x50)
        // (Const | Native)
        public FSet_Mirror Pairs {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 80, 80);
        }
    }

    // ScriptStruct Core.Object.Map_Mirror
    // 0x50
    public unsafe class FMap_Mirror : BaseObject {
        public FMap_Mirror() {
            Pointer = Marshal.AllocHGlobal(80);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 80);
            Allocated = true;
        }
        public FMap_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Map_Mirror.Pairs
        // 0x0 (0x50)
        // (Const | Native)
        public FSet_Mirror Pairs {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 80, 80);
        }
    }

    // ScriptStruct Core.Object.Set_Mirror
    // 0x4C
    public unsafe class FSet_Mirror : BaseObject {
        public FSet_Mirror() {
            Pointer = Marshal.AllocHGlobal(76);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 76);
            Allocated = true;
        }
        public FSet_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.Set_Mirror.Elements
        // 0x0 (0x38)
        // (Const | Native)
        public FSparseArray_Mirror Elements {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 56, 56);
        }

        // IntProperty Core.Object.Set_Mirror.InlineHash
        // 0x38 (0x4)
        // (Const | Native)
        public int InlineHash {
            get => *(int*)(Pointer + 56);
            set => *(int*)(Pointer + 56) = value;
        }

        // MISSED OFFSET: 0x4

        // StructProperty Core.Object.Set_Mirror.Hash
        // 0x40 (0x8)
        // (Const | Native)
        public nint Hash {
            get => *(nint*)(Pointer + 64);
            set => *(nint*)(Pointer + 64) = value;
        }

        // IntProperty Core.Object.Set_Mirror.HashSize
        // 0x48 (0x4)
        // (Const | Native)
        public int HashSize {
            get => *(int*)(Pointer + 72);
            set => *(int*)(Pointer + 72) = value;
        }
    }

    // ScriptStruct Core.Object.SparseArray_Mirror
    // 0x38
    public unsafe class FSparseArray_Mirror : BaseObject {
        public FSparseArray_Mirror() {
            Pointer = Marshal.AllocHGlobal(56);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 56);
            Allocated = true;
        }
        public FSparseArray_Mirror(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Object.SparseArray_Mirror.Elements
        // 0x0 (0x10)
        // (Const | Native)
        public UnmanagedTArray<int> Elements {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.Object.SparseArray_Mirror.AllocationFlags
        // 0x10 (0x20)
        // (Const | Native)
        public FBitArray_Mirror AllocationFlags {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 32, 32);
        }

        // IntProperty Core.Object.SparseArray_Mirror.FirstFreeIndex
        // 0x30 (0x4)
        // (Const | Native)
        public int FirstFreeIndex {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }

        // IntProperty Core.Object.SparseArray_Mirror.NumFreeIndices
        // 0x34 (0x4)
        // (Const | Native)
        public int NumFreeIndices {
            get => *(int*)(Pointer + 52);
            set => *(int*)(Pointer + 52) = value;
        }
    }

    // ScriptStruct Core.Object.BitArray_Mirror
    // 0x20
    public unsafe class FBitArray_Mirror : BaseObject {
        public FBitArray_Mirror() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FBitArray_Mirror(nint pointer) : base(pointer) { }

        // StructProperty Core.Object.BitArray_Mirror.IndirectData
        // 0x0 (0x8)
        // (Const | Native)
        public nint IndirectData {
            get => *(nint*)Pointer;
            set => *(nint*)Pointer = value;
        }

        // IntProperty Core.Object.BitArray_Mirror.InlineData
        // 0x8 (0x10)
        // (Const | Native)
        // Fixed array size: 4
        public UnmanagedFixedArray<int> InlineData {
            get => new(Pointer + 8, 4);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 16, 16);
        }

        // IntProperty Core.Object.BitArray_Mirror.NumBits
        // 0x18 (0x4)
        // (Const | Native)
        public int NumBits {
            get => *(int*)(Pointer + 24);
            set => *(int*)(Pointer + 24) = value;
        }

        // IntProperty Core.Object.BitArray_Mirror.MaxBits
        // 0x1C (0x4)
        // (Const | Native)
        public int MaxBits {
            get => *(int*)(Pointer + 28);
            set => *(int*)(Pointer + 28) = value;
        }
    }

    // ScriptStruct Core.Object.ThreadSafeCounter
    // 0x4
    public unsafe class FThreadSafeCounter : BaseObject {
        public FThreadSafeCounter() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FThreadSafeCounter(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.ThreadSafeCounter.Value
        // 0x0 (0x4)
        // (Const | Native)
        public int Value {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }

    // ScriptStruct Core.Object.Double
    // 0x8
    public unsafe class FDouble : BaseObject {
        public FDouble() {
            Pointer = Marshal.AllocHGlobal(8);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 8);
            Allocated = true;
        }
        public FDouble(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Double.A
        // 0x0 (0x4)
        // (Const | Native)
        public int A {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.Double.B
        // 0x4 (0x4)
        // (Const | Native)
        public int B {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }
    }

    // ScriptStruct Core.Object.IpAddr
    // 0x14
    public unsafe class FIpAddr : BaseObject {
        public FIpAddr() {
            Pointer = Marshal.AllocHGlobal(20);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 20);
            Allocated = true;
        }
        public FIpAddr(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.IpAddr.AddrA
        // 0x0 (0x4)
        public int AddrA {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // IntProperty Core.Object.IpAddr.AddrB
        // 0x4 (0x4)
        public int AddrB {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // IntProperty Core.Object.IpAddr.AddrC
        // 0x8 (0x4)
        public int AddrC {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }

        // IntProperty Core.Object.IpAddr.AddrD
        // 0xC (0x4)
        public int AddrD {
            get => *(int*)(Pointer + 12);
            set => *(int*)(Pointer + 12) = value;
        }

        // IntProperty Core.Object.IpAddr.Port
        // 0x10 (0x4)
        public int Port {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }

    // ScriptStruct Core.Object.HatPointer
    // 0x8
    public unsafe class FHatPointer : BaseObject {
        public FHatPointer() {
            Pointer = Marshal.AllocHGlobal(8);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 8);
            Allocated = true;
        }
        public FHatPointer(nint pointer) : base(pointer) { }

        // QWordProperty Core.Object.HatPointer.Dummy
        // 0x0 (0x8)
        // (Const | Native)
        public ulong Dummy {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }
    }

    // ScriptStruct Core.Object.Pointer
    // 0x8
    public unsafe class FPointer : BaseObject {
        public FPointer() {
            Pointer = Marshal.AllocHGlobal(8);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 8);
            Allocated = true;
        }
        public FPointer(nint pointer) : base(pointer) { }

        // IntProperty Core.Object.Pointer.Dummy
        // 0x0 (0x4)
        // (Const | Native)
        public int Dummy {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4
    }


    // Enum Core.Object.EDebugBreakType
    public enum EDebugBreakType : byte {
        DEBUGGER_NativeOnly = 0,
        DEBUGGER_ScriptOnly = 1,
        DEBUGGER_Both = 2,
        DEBUGGER_MAX = 3
    }

    // Enum Core.Object.EAutomatedRunResult
    public enum EAutomatedRunResult : byte {
        ARR_Unknown = 0,
        ARR_OOM = 1,
        ARR_Passed = 2,
        ARR_MAX = 3
    }

    // Enum Core.Object.ETickingGroup
    public enum ETickingGroup : byte {
        TG_PreAsyncWork = 0,
        TG_DuringAsyncWork = 1,
        TG_PostAsyncWork = 2,
        TG_PostUpdateWork = 3,
        TG_EffectsUpdateWork = 4,
        TG_MAX = 5
    }

    // Enum Core.Object.EInterpMethodType
    public enum EInterpMethodType : byte {
        IMT_UseFixedTangentEvalAndNewAutoTangents = 0,
        IMT_UseFixedTangentEval = 1,
        IMT_UseBrokenTangentEval = 2,
        IMT_MAX = 3
    }

    // Enum Core.Object.EInterpCurveMode
    public enum EInterpCurveMode : byte {
        CIM_Linear = 0,
        CIM_CurveAuto = 1,
        CIM_Constant = 2,
        CIM_CurveUser = 3,
        CIM_CurveBreak = 4,
        CIM_CurveAutoClamped = 5,
        CIM_MAX = 6
    }

    // Enum Core.Object.EAspectRatioAxisConstraint
    public enum EAspectRatioAxisConstraint : byte {
        AspectRatio_MaintainYFOV = 0,
        AspectRatio_MaintainXFOV = 1,
        AspectRatio_MajorAxisFOV = 2,
        AspectRatio_MAX = 3
    }

    // Enum Core.Object.EInputEvent
    public enum EInputEvent : byte {
        IE_Pressed = 0,
        IE_Released = 1,
        IE_Repeat = 2,
        IE_DoubleClick = 3,
        IE_Axis = 4,
        IE_MAX = 5
    }

    // Enum Core.Object.EAxis
    public enum EAxis : byte {
        AXIS_NONE = 0,
        AXIS_X = 1,
        AXIS_Y = 2,
        AXIS_BLANK = 3,
        AXIS_Z = 4,
        AXIS_MAX = 5
    }

    // Enum Core.Object.AlphaBlendType
    public enum AlphaBlendType : byte {
        ABT_Linear = 0,
        ABT_Cubic = 1,
        ABT_Sinusoidal = 2,
        ABT_EaseInOutExponent2 = 3,
        ABT_EaseInOutExponent3 = 4,
        ABT_EaseInOutExponent4 = 5,
        ABT_EaseInOutExponent5 = 6,
        ABT_MAX = 7
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Object");
            return _staticClass;
        }
    }
}

// Class Core.ClassTupleCollection_ORS
// 0x60 (0x60 - 0xC0)
// (Transient | Native | Intrinsic)
public unsafe partial class UClassTupleCollection_ORS : UObject {
    public UClassTupleCollection_ORS() { }
    public UClassTupleCollection_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x60


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ClassTupleCollection_ORS");
            return _staticClass;
        }
    }
}

// Class Core.ClassTuple_ORS
// 0x68 (0x60 - 0xC8)
// (Transient | Native | Intrinsic)
public unsafe partial class UClassTuple_ORS : UObject {
    public UClassTuple_ORS() { }
    public UClassTuple_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x68


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ClassTuple_ORS");
            return _staticClass;
        }
    }
}

// Class Core.SubscriptionCollection_ORS
// 0x20 (0x60 - 0x80)
// (Transient | Native | Intrinsic)
public unsafe partial class USubscriptionCollection_ORS : UObject {
    public USubscriptionCollection_ORS() { }
    public USubscriptionCollection_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x20


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.SubscriptionCollection_ORS");
            return _staticClass;
        }
    }
}

// Class Core.Group_ORS
// 0xD0 (0x68 - 0x138)
// (Transient | Native | Intrinsic)
public unsafe partial class UGroup_ORS : UScriptGroup_ORS {
    public UGroup_ORS() { }
    public UGroup_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0xD0


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Group_ORS");
            return _staticClass;
        }
    }
}

// Class Core.Instance_ORS
// 0xB0 (0x60 - 0x110)
// (Transient | Native | Intrinsic)
public unsafe partial class UInstance_ORS : UObject {
    public UInstance_ORS() { }
    public UInstance_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0xB0


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Instance_ORS");
            return _staticClass;
        }
    }
}

// Class Core.Global_ORS
// 0x18 (0x60 - 0x78)
// (Transient | Native | Intrinsic)
public unsafe partial class UGlobal_ORS : UObject {
    public UGlobal_ORS() { }
    public UGlobal_ORS(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x18


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Global_ORS");
            return _staticClass;
        }
    }
}

// Class Core.UTF8
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UUTF8 : UObject {
    public UUTF8() { }
    public UUTF8(nint pointer) : base(pointer) { }


    // Function Core.UTF8.DecodeInline
    // 0x330D70
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class DecodeInline_Parameters : BaseObject {
        public DecodeInline_Parameters() { }
        public DecodeInline_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.UTF8.DecodeInline.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.UTF8.DecodeInline.Output
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString Output {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecodeInline;
    public static void DecodeInline(ref UnmanagedTArray<byte> Input, ref FString Output) {
        _ptrDecodeInline ??= FindFunction("Function Core.UTF8.DecodeInline");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Output.Pointer, @params + 16, 16, 16);

        _ptrDecodeInline.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecodeInline, @params);
        _ptrDecodeInline.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };
        var _OutputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutputPtr, 16, 16);
        Output = new(_OutputPtr) { Allocated = true };
    }

    // Function Core.UTF8.Decode
    // 0x330C50
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class Decode_Parameters : BaseObject {
        public Decode_Parameters() { }
        public Decode_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.UTF8.Decode.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.UTF8.Decode.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecode;
    public static FString Decode(ref UnmanagedTArray<byte> Input) {
        _ptrDecode ??= FindFunction("Function Core.UTF8.Decode");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);

        _ptrDecode.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecode, @params);
        _ptrDecode.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.UTF8.EncodeInline
    // 0x330B20
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EncodeInline_Parameters : BaseObject {
        public EncodeInline_Parameters() { }
        public EncodeInline_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.UTF8.EncodeInline.Input
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.UTF8.EncodeInline.Output
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Output {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncodeInline;
    public static void EncodeInline(FString Input, ref UnmanagedTArray<byte> Output) {
        _ptrEncodeInline ??= FindFunction("Function Core.UTF8.EncodeInline");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Output.Pointer, @params + 16, 16, 16);

        _ptrEncodeInline.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncodeInline, @params);
        _ptrEncodeInline.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutputPtr, 16, 16);
        Output = new(_OutputPtr) { Allocated = true };
    }

    // Function Core.UTF8.Encode
    // 0x330A20
    // (Final | Native | Static | Public)
    public unsafe class Encode_Parameters : BaseObject {
        public Encode_Parameters() { }
        public Encode_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.UTF8.Encode.Input
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.UTF8.Encode.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public UnmanagedTArray<byte> ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncode;
    public static UnmanagedTArray<byte> Encode(FString Input) {
        _ptrEncode ??= FindFunction("Function Core.UTF8.Encode");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);

        _ptrEncode.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncode, @params);
        _ptrEncode.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.UTF8");
            return _staticClass;
        }
    }
}

// Class Core.TextBuffer
// 0x30 (0x60 - 0x90)
// (Native | Intrinsic)
public unsafe partial class UTextBuffer : UObject {
    public UTextBuffer() { }
    public UTextBuffer(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x30


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.TextBuffer");
            return _staticClass;
        }
    }
}

// Class Core.System
// 0xF8 (0x68 - 0x160)
// (Config | Transient | Native | Intrinsic)
public unsafe partial class USystem : USubsystem {
    public USystem() { }
    public USystem(nint pointer) : base(pointer) { }


    // IntProperty Core.System.StaleCacheDays
    // 0x68 (0x4)
    // (Config)
    public int StaleCacheDays {
        get => *(int*)(Pointer + 104);
        set => *(int*)(Pointer + 104) = value;
    }

    // IntProperty Core.System.MaxStaleCacheSize
    // 0x6C (0x4)
    // (Config)
    public int MaxStaleCacheSize {
        get => *(int*)(Pointer + 108);
        set => *(int*)(Pointer + 108) = value;
    }

    // IntProperty Core.System.MaxOverallCacheSize
    // 0x70 (0x4)
    // (Config)
    public int MaxOverallCacheSize {
        get => *(int*)(Pointer + 112);
        set => *(int*)(Pointer + 112) = value;
    }

    // IntProperty Core.System.PackageSizeSoftLimit
    // 0x74 (0x4)
    // (Config)
    public int PackageSizeSoftLimit {
        get => *(int*)(Pointer + 116);
        set => *(int*)(Pointer + 116) = value;
    }

    // FloatProperty Core.System.AsyncIOBandwidthLimit
    // 0x78 (0x4)
    // (Config)
    public float AsyncIOBandwidthLimit {
        get => *(float*)(Pointer + 120);
        set => *(float*)(Pointer + 120) = value;
    }

    // MISSED OFFSET: 0x4

    // StrProperty Core.System.SavePath
    // 0x80 (0x10)
    // (Config | NeedCtorLink)
    public FString SavePath {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // StrProperty Core.System.CachePath
    // 0x90 (0x10)
    // (Config | NeedCtorLink)
    public FString CachePath {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // StrProperty Core.System.CacheExt
    // 0xA0 (0x10)
    // (Config | NeedCtorLink)
    public FString CacheExt {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // ArrayProperty Core.System.Paths
    // 0xB0 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> Paths {
        get => new(Pointer + 176, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 176), 16, 16);
    }

    // ArrayProperty Core.System.SeekFreePCPaths
    // 0xC0 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> SeekFreePCPaths {
        get => new(Pointer + 192, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 16, 16);
    }

    // ArrayProperty Core.System.ScriptPaths
    // 0xD0 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> ScriptPaths {
        get => new(Pointer + 208, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 208), 16, 16);
    }

    // ArrayProperty Core.System.FRScriptPaths
    // 0xE0 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> FRScriptPaths {
        get => new(Pointer + 224, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 224), 16, 16);
    }

    // ArrayProperty Core.System.CutdownPaths
    // 0xF0 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> CutdownPaths {
        get => new(Pointer + 240, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 240), 16, 16);
    }

    // ArrayProperty Core.System.Suppress
    // 0x100 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FName> Suppress {
        get => new(Pointer + 256, 8);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 256), 16, 16);
    }

    // ArrayProperty Core.System.SuppressPublic
    // 0x110 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FName> SuppressPublic {
        get => new(Pointer + 272, 8);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 272), 16, 16);
    }

    // ArrayProperty Core.System.Extensions
    // 0x120 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> Extensions {
        get => new(Pointer + 288, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 288), 16, 16);
    }

    // ArrayProperty Core.System.SeekFreePCExtensions
    // 0x130 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> SeekFreePCExtensions {
        get => new(Pointer + 304, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 304), 16, 16);
    }

    // ArrayProperty Core.System.LocalizationPaths
    // 0x140 (0x10)
    // (Config | NeedCtorLink)
    public StructTArray<FString> LocalizationPaths {
        get => new(Pointer + 320, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 320), 16, 16);
    }

    // StrProperty Core.System.TextureFileCacheExtension
    // 0x150 (0x10)
    // (Config | NeedCtorLink)
    public FString TextureFileCacheExtension {
        get => new(Pointer + 336);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 336), 16, 16);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.System");
            return _staticClass;
        }
    }
}

// Class Core.Subsystem
// 0x8 (0x60 - 0x68)
// (Abstract | Compiled | Transient | Parsed | Native)
public unsafe partial class USubsystem : UObject {
    public USubsystem() { }
    public USubsystem(nint pointer) : base(pointer) { }


    // StructProperty Core.Subsystem.VfTable_FExec
    // 0x60 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FExec {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Subsystem");
            return _staticClass;
        }
    }
}

// Class Core.Subscription
// 0x18 (0x60 - 0x78)
// (Compiled | Parsed | Native)
public unsafe partial class USubscription : UObject {
    public USubscription() { }
    public USubscription(nint pointer) : base(pointer) { }


    // DelegateProperty Core.Subscription.__SubscriberCallback__Delegate
    // 0x60 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __SubscriberCallback__Delegate {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 24, 24);
    }


    // Function Core.Subscription.__Subscription__TriggerAll_0x1
    // 0x3750E0
    // (Final | Defined | Static | Private | Lambda)
    public unsafe class __Subscription__TriggerAll_0x1_Parameters : BaseObject {
        public __Subscription__TriggerAll_0x1_Parameters() { }
        public __Subscription__TriggerAll_0x1_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Subscription.__Subscription__TriggerAll_0x1.S
        // 0x0 (0x8)
        // (Param)
        public USubscription S {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptr__Subscription__TriggerAll_0x1;
    public static void __Subscription__TriggerAll_0x1(USubscription S) {
        _ptr__Subscription__TriggerAll_0x1 ??= FindFunction("Function Core.Subscription.__Subscription__TriggerAll_0x1");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)S.Pointer, @params, 8, 8);

        StaticClass.ProcessEvent(_ptr__Subscription__TriggerAll_0x1, @params);
    }

    // Function Core.Subscription.GetNone
    // 0x330940
    // (Final | Native | Static | Public)
    public unsafe class GetNone_Parameters : BaseObject {
        public GetNone_Parameters() { }
        public GetNone_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.Subscription.GetNone.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public USubscription ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrGetNone;
    public static USubscription GetNone() {
        _ptrGetNone ??= FindFunction("Function Core.Subscription.GetNone");

        var @params = stackalloc byte[8];

        _ptrGetNone.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetNone, @params);
        _ptrGetNone.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)@params);
    }

    // Function Core.Subscription.TriggerAll
    // 0x3750E0
    // (Final | Defined | Static | Public | HasOutParams)
    public unsafe class TriggerAll_Parameters : BaseObject {
        public TriggerAll_Parameters() { }
        public TriggerAll_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Subscription.TriggerAll.Subscriptions
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public PointerTArray<USubscription> Subscriptions {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrTriggerAll;
    public static void TriggerAll(ref PointerTArray<USubscription> Subscriptions) {
        _ptrTriggerAll ??= FindFunction("Function Core.Subscription.TriggerAll");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Subscriptions.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrTriggerAll, @params);

        var _SubscriptionsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_SubscriptionsPtr, 16, 16);
        Subscriptions = new(_SubscriptionsPtr) { Allocated = true };
    }

    // Function Core.Subscription.Create
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class Create_Parameters : BaseObject {
        public Create_Parameters() { }
        public Create_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.Subscription.Create.InCallback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate InCallback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // ObjectProperty Core.Subscription.Create.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public USubscription ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrCreate;
    public static USubscription Create(FScriptDelegate InCallback) {
        _ptrCreate ??= FindFunction("Function Core.Subscription.Create");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)InCallback.Pointer, @params, 24, 24);

        StaticClass.ProcessEvent(_ptrCreate, @params);

        return new(*(nint*)(@params + 24));
    }

    // Function Core.Subscription.Dispose
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class Dispose_Parameters : BaseObject {
        public Dispose_Parameters() { }
        public Dispose_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDispose;
    public void Dispose() {
        _ptrDispose ??= FindFunction("Function Core.Subscription.Dispose");

        ProcessEvent(_ptrDispose, null);
    }

    // Function Core.Subscription.TriggerCallback
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class TriggerCallback_Parameters : BaseObject {
        public TriggerCallback_Parameters() { }
        public TriggerCallback_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTriggerCallback;
    public void TriggerCallback() {
        _ptrTriggerCallback ??= FindFunction("Function Core.Subscription.TriggerCallback");

        ProcessEvent(_ptrTriggerCallback, null);
    }

    // Function Core.Subscription.SetCallback
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class SetCallback_Parameters : BaseObject {
        public SetCallback_Parameters() { }
        public SetCallback_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.Subscription.SetCallback.InCallback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate InCallback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrSetCallback;
    public void SetCallback(FScriptDelegate InCallback) {
        _ptrSetCallback ??= FindFunction("Function Core.Subscription.SetCallback");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)InCallback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrSetCallback, @params);
    }

    // Function Core.Subscription.SubscriberCallback
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class SubscriberCallback_Parameters : BaseObject {
        public SubscriberCallback_Parameters() { }
        public SubscriberCallback_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrSubscriberCallback;
    public void SubscriberCallback() {
        _ptrSubscriberCallback ??= FindFunction("Function Core.Subscription.SubscriberCallback");

        ProcessEvent(_ptrSubscriberCallback, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Subscription");
            return _staticClass;
        }
    }
}

// Class Core.PropertyChangeDispatcher
// 0x10 (0x60 - 0x70)
// (Native | Intrinsic)
public unsafe partial class UPropertyChangeDispatcher : UObject {
    public UPropertyChangeDispatcher() { }
    public UPropertyChangeDispatcher(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.PropertyChangeDispatcher");
            return _staticClass;
        }
    }
}

// Class Core.PackageMap
// 0xB8 (0x60 - 0x118)
// (Transient | Native | Intrinsic)
public unsafe partial class UPackageMap : UObject {
    public UPackageMap() { }
    public UPackageMap(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0xB8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.PackageMap");
            return _staticClass;
        }
    }
}

// Class Core.ObjectUtil
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UObjectUtil : UObject {
    public UObjectUtil() { }
    public UObjectUtil(nint pointer) : base(pointer) { }


    // Function Core.ObjectUtil.FindClass
    // 0x3308B0
    // (Final | Native | Static | Public)
    public unsafe class FindClass_Parameters : BaseObject {
        public FindClass_Parameters() { }
        public FindClass_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.ObjectUtil.FindClass.ClassName
        // 0x0 (0x8)
        // (Param)
        public FName ClassName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ClassProperty Core.ObjectUtil.FindClass.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UClass ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrFindClass;
    public static UClass FindClass(FName ClassName) {
        _ptrFindClass ??= FindFunction("Function Core.ObjectUtil.FindClass");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ClassName.Pointer, @params, 8, 8);

        _ptrFindClass.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFindClass, @params);
        _ptrFindClass.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectUtil.ClearNaNValues
    // 0x330830
    // (Final | Native | Static | Public)
    public unsafe class ClearNaNValues_Parameters : BaseObject {
        public ClearNaNValues_Parameters() { }
        public ClearNaNValues_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectUtil.ClearNaNValues.InObject
        // 0x0 (0x8)
        // (Param)
        public UObject InObject {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrClearNaNValues;
    public static void ClearNaNValues(UObject InObject) {
        _ptrClearNaNValues ??= FindFunction("Function Core.ObjectUtil.ClearNaNValues");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)InObject.Pointer, @params, 8, 8);

        _ptrClearNaNValues.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrClearNaNValues, @params);
        _ptrClearNaNValues.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectUtil.IdenticalDeep
    // 0x330770
    // (Final | Native | Static | Public)
    public unsafe class IdenticalDeep_Parameters : BaseObject {
        public IdenticalDeep_Parameters() { }
        public IdenticalDeep_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectUtil.IdenticalDeep.Left
        // 0x0 (0x8)
        // (Param)
        public UObject Left {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectUtil.IdenticalDeep.Right
        // 0x8 (0x8)
        // (Param)
        public UObject Right {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty Core.ObjectUtil.IdenticalDeep.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIdenticalDeep;
    public static bool IdenticalDeep(UObject Left, UObject Right) {
        _ptrIdenticalDeep ??= FindFunction("Function Core.ObjectUtil.IdenticalDeep");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Left.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Right.Pointer, @params + 8, 8, 8);

        _ptrIdenticalDeep.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIdenticalDeep, @params);
        _ptrIdenticalDeep.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.ObjectUtil.Identical
    // 0x3306B0
    // (Final | Native | Static | Public)
    public unsafe class Identical_Parameters : BaseObject {
        public Identical_Parameters() { }
        public Identical_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectUtil.Identical.Left
        // 0x0 (0x8)
        // (Param)
        public UObject Left {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectUtil.Identical.Right
        // 0x8 (0x8)
        // (Param)
        public UObject Right {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty Core.ObjectUtil.Identical.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIdentical;
    public static bool Identical(UObject Left, UObject Right) {
        _ptrIdentical ??= FindFunction("Function Core.ObjectUtil.Identical");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Left.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Right.Pointer, @params + 8, 8, 8);

        _ptrIdentical.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIdentical, @params);
        _ptrIdentical.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.ObjectUtil.InitProperties
    // 0x330630
    // (Final | Native | Static | Public)
    public unsafe class InitProperties_Parameters : BaseObject {
        public InitProperties_Parameters() { }
        public InitProperties_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectUtil.InitProperties.InObject
        // 0x0 (0x8)
        // (Param)
        public UObject InObject {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrInitProperties;
    public static void InitProperties(UObject InObject) {
        _ptrInitProperties ??= FindFunction("Function Core.ObjectUtil.InitProperties");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)InObject.Pointer, @params, 8, 8);

        _ptrInitProperties.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrInitProperties, @params);
        _ptrInitProperties.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectUtil.AllCDOs
    // 0x319DD0
    // (Final | Iterator | Native | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class AllCDOs_Parameters : BaseObject {
        public AllCDOs_Parameters() { }
        public AllCDOs_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectUtil.AllCDOs.BaseClass
        // 0x0 (0x8)
        // (Param)
        public UClass BaseClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectUtil.AllCDOs.OutCDO
        // 0x8 (0x8)
        // (Param | OutParam)
        public UObject OutCDO {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // BoolProperty Core.ObjectUtil.AllCDOs.bIncludeAbstract
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (OptionalParam | Param)
        public bool bIncludeAbstract {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAllCDOs;
    public static void AllCDOs(UClass BaseClass, ref UObject OutCDO, bool bIncludeAbstract = false) {
        _ptrAllCDOs ??= FindFunction("Function Core.ObjectUtil.AllCDOs");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)BaseClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)OutCDO.Pointer, @params + 8, 8, 8);
        System.Buffer.MemoryCopy(&bIncludeAbstract, @params + 16, 4, 4);

        _ptrAllCDOs.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAllCDOs, @params);
        _ptrAllCDOs.FunctionFlags |= (ulong)EFunctionFlags.Native;

        OutCDO = new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectUtil.GetCDO
    // 0x3305A0
    // (Final | Native | Static | Public)
    public unsafe class GetCDO_Parameters : BaseObject {
        public GetCDO_Parameters() { }
        public GetCDO_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectUtil.GetCDO.InClass
        // 0x0 (0x8)
        // (Param)
        public UClass InClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectUtil.GetCDO.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetCDO;
    public static UObject GetCDO(UClass InClass) {
        _ptrGetCDO ??= FindFunction("Function Core.ObjectUtil.GetCDO");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)InClass.Pointer, @params, 8, 8);

        _ptrGetCDO.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetCDO, @params);
        _ptrGetCDO.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ObjectUtil");
            return _staticClass;
        }
    }
}

// Class Core.ObjectSerializer
// 0x10 (0x60 - 0x70)
// (Transient | Native | Intrinsic)
public unsafe partial class UObjectSerializer : UObject {
    public UObjectSerializer() { }
    public UObjectSerializer(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ObjectSerializer");
            return _staticClass;
        }
    }
}

// Class Core.ObjectRedirector
// 0x8 (0x60 - 0x68)
// (Native | Intrinsic)
public unsafe partial class UObjectRedirector : UObject {
    public UObjectRedirector() { }
    public UObjectRedirector(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ObjectRedirector");
            return _staticClass;
        }
    }
}

// Class Core.MetaData
// 0x50 (0x60 - 0xB0)
// (Native | Intrinsic)
public unsafe partial class UMetaData : UObject {
    public UMetaData() { }
    public UMetaData(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x50


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.MetaData");
            return _staticClass;
        }
    }
}

// Class Core.LinkerSave
// 0xC0 (0x1E8 - 0x2A8)
// (Transient | Native | Intrinsic)
public unsafe partial class ULinkerSave : ULinker {
    public ULinkerSave() { }
    public ULinkerSave(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0xC0


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.LinkerSave");
            return _staticClass;
        }
    }
}

// Class Core.Linker
// 0x188 (0x60 - 0x1E8)
// (Transient | Native | Intrinsic)
public unsafe partial class ULinker : UObject {
    public ULinker() { }
    public ULinker(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x188


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Linker");
            return _staticClass;
        }
    }
}

// Class Core.LinkerLoad
// 0x628 (0x1E8 - 0x810)
// (Transient | Native | Intrinsic)
public unsafe partial class ULinkerLoad : ULinker {
    public ULinkerLoad() { }
    public ULinkerLoad(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x628


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.LinkerLoad");
            return _staticClass;
        }
    }
}

// Class Core.Interface
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed | Native | Interface)
public unsafe partial class UInterface : UObject {
    public UInterface() { }
    public UInterface(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Interface");
            return _staticClass;
        }
    }
}

// Class Core.FileSystem
// 0x0 (0x60 - 0x60)
// (Compiled | Parsed | Native)
public unsafe partial class UFileSystem : UObject {
    public UFileSystem() { }
    public UFileSystem(nint pointer) : base(pointer) { }


    // Function Core.FileSystem.IsCookedBuild
    // 0x330470
    // (Final | Native | Static | Public)
    public unsafe class IsCookedBuild_Parameters : BaseObject {
        public IsCookedBuild_Parameters() { }
        public IsCookedBuild_Parameters(nint pointer) : base(pointer) { }

        // BoolProperty Core.FileSystem.IsCookedBuild.ReturnValue
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsCookedBuild;
    public static bool IsCookedBuild() {
        _ptrIsCookedBuild ??= FindFunction("Function Core.FileSystem.IsCookedBuild");

        var @params = stackalloc byte[4];

        _ptrIsCookedBuild.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrIsCookedBuild, @params);
        _ptrIsCookedBuild.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)@params;
    }

    // Function Core.FileSystem.CloseLogFile
    // 0x330430
    // (Final | Native | Static | Public)
    public unsafe class CloseLogFile_Parameters : BaseObject {
        public CloseLogFile_Parameters() { }
        public CloseLogFile_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrCloseLogFile;
    public static void CloseLogFile() {
        _ptrCloseLogFile ??= FindFunction("Function Core.FileSystem.CloseLogFile");

        _ptrCloseLogFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrCloseLogFile, null);
        _ptrCloseLogFile.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.FileSystem.GetLogFileName
    // 0x330380
    // (Final | Native | Static | Public)
    public unsafe class GetLogFileName_Parameters : BaseObject {
        public GetLogFileName_Parameters() { }
        public GetLogFileName_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetLogFileName.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetLogFileName;
    public static FString GetLogFileName() {
        _ptrGetLogFileName ??= FindFunction("Function Core.FileSystem.GetLogFileName");

        var @params = stackalloc byte[16];

        _ptrGetLogFileName.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetLogFileName, @params);
        _ptrGetLogFileName.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.FileSystem.DeleteDirectoryTree
    // 0x3302C0
    // (Final | Native | Static | Public)
    public unsafe class DeleteDirectoryTree_Parameters : BaseObject {
        public DeleteDirectoryTree_Parameters() { }
        public DeleteDirectoryTree_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.DeleteDirectoryTree.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty Core.FileSystem.DeleteDirectoryTree.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDeleteDirectoryTree;
    public static bool DeleteDirectoryTree(FString Path) {
        _ptrDeleteDirectoryTree ??= FindFunction("Function Core.FileSystem.DeleteDirectoryTree");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrDeleteDirectoryTree.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDeleteDirectoryTree, @params);
        _ptrDeleteDirectoryTree.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.FileSystem.DeleteFile
    // 0x330200
    // (Final | Native | Static | Public)
    public unsafe class DeleteFile_Parameters : BaseObject {
        public DeleteFile_Parameters() { }
        public DeleteFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.DeleteFile.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty Core.FileSystem.DeleteFile.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrDeleteFile;
    public static bool DeleteFile(FString Path) {
        _ptrDeleteFile ??= FindFunction("Function Core.FileSystem.DeleteFile");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrDeleteFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDeleteFile, @params);
        _ptrDeleteFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.FileSystem.AppendStringToFile
    // 0x3300F0
    // (Final | Native | Static | Public)
    public unsafe class AppendStringToFile_Parameters : BaseObject {
        public AppendStringToFile_Parameters() { }
        public AppendStringToFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.AppendStringToFile.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.AppendStringToFile.Text
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Text {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.FileSystem.AppendStringToFile.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrAppendStringToFile;
    public static bool AppendStringToFile(FString Path, FString Text) {
        _ptrAppendStringToFile ??= FindFunction("Function Core.FileSystem.AppendStringToFile");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params + 16, 16, 16);

        _ptrAppendStringToFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrAppendStringToFile, @params);
        _ptrAppendStringToFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 32);
    }

    // Function Core.FileSystem.SaveStringToFile
    // 0x32FFE0
    // (Final | Native | Static | Public)
    public unsafe class SaveStringToFile_Parameters : BaseObject {
        public SaveStringToFile_Parameters() { }
        public SaveStringToFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.SaveStringToFile.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.SaveStringToFile.Text
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Text {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.FileSystem.SaveStringToFile.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSaveStringToFile;
    public static bool SaveStringToFile(FString Path, FString Text) {
        _ptrSaveStringToFile ??= FindFunction("Function Core.FileSystem.SaveStringToFile");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params + 16, 16, 16);

        _ptrSaveStringToFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSaveStringToFile, @params);
        _ptrSaveStringToFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 32);
    }

    // Function Core.FileSystem.SaveBytesToFile
    // 0x32FEB0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class SaveBytesToFile_Parameters : BaseObject {
        public SaveBytesToFile_Parameters() { }
        public SaveBytesToFile_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.SaveBytesToFile.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.FileSystem.SaveBytesToFile.Bytes
        // 0x10 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Bytes {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.FileSystem.SaveBytesToFile.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrSaveBytesToFile;
    public static bool SaveBytesToFile(FString Path, ref UnmanagedTArray<byte> Bytes) {
        _ptrSaveBytesToFile ??= FindFunction("Function Core.FileSystem.SaveBytesToFile");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Bytes.Pointer, @params + 16, 16, 16);

        _ptrSaveBytesToFile.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrSaveBytesToFile, @params);
        _ptrSaveBytesToFile.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _BytesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_BytesPtr, 16, 16);
        Bytes = new(_BytesPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function Core.FileSystem.LoadFileToBytes
    // 0x32FD00
    // (Final | Native | Static | HasOptionalParams | Public | HasOutParams)
    public unsafe class LoadFileToBytes_Parameters : BaseObject {
        public LoadFileToBytes_Parameters() { }
        public LoadFileToBytes_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.LoadFileToBytes.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.FileSystem.LoadFileToBytes.OutBytes
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> OutBytes {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // IntProperty Core.FileSystem.LoadFileToBytes.StartOffset
        // 0x20 (0x4)
        // (OptionalParam | Param)
        public int StartOffset {
            get => *(int*)(Pointer + 32);
            set => *(int*)(Pointer + 32) = value;
        }

        // IntProperty Core.FileSystem.LoadFileToBytes.Length
        // 0x24 (0x4)
        // (OptionalParam | Param)
        public int Length {
            get => *(int*)(Pointer + 36);
            set => *(int*)(Pointer + 36) = value;
        }

        // BoolProperty Core.FileSystem.LoadFileToBytes.ReturnValue
        // 0x28 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 40) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 40) |= 0x1;
                else *(uint*)(Pointer + 40) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLoadFileToBytes;
    public static bool LoadFileToBytes(FString Path, ref UnmanagedTArray<byte> OutBytes, int StartOffset = 0, int Length = 0) {
        _ptrLoadFileToBytes ??= FindFunction("Function Core.FileSystem.LoadFileToBytes");

        var @params = stackalloc byte[44];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutBytes.Pointer, @params + 16, 16, 16);
        System.Buffer.MemoryCopy(&StartOffset, @params + 32, 4, 4);
        System.Buffer.MemoryCopy(&Length, @params + 36, 4, 4);

        _ptrLoadFileToBytes.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLoadFileToBytes, @params);
        _ptrLoadFileToBytes.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutBytesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutBytesPtr, 16, 16);
        OutBytes = new(_OutBytesPtr) { Allocated = true };

        return *(bool*)(@params + 40);
    }

    // Function Core.FileSystem.LoadFileToString
    // 0x32FBC0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class LoadFileToString_Parameters : BaseObject {
        public LoadFileToString_Parameters() { }
        public LoadFileToString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.LoadFileToString.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.LoadFileToString.OutText
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString OutText {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.FileSystem.LoadFileToString.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrLoadFileToString;
    public static bool LoadFileToString(FString Path, ref FString OutText) {
        _ptrLoadFileToString ??= FindFunction("Function Core.FileSystem.LoadFileToString");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutText.Pointer, @params + 16, 16, 16);

        _ptrLoadFileToString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrLoadFileToString, @params);
        _ptrLoadFileToString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutTextPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutTextPtr, 16, 16);
        OutText = new(_OutTextPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function Core.FileSystem.GetFileSize
    // 0x32FB00
    // (Final | Native | Static | Public)
    public unsafe class GetFileSize_Parameters : BaseObject {
        public GetFileSize_Parameters() { }
        public GetFileSize_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetFileSize.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.FileSystem.GetFileSize.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrGetFileSize;
    public static int GetFileSize(FString Path) {
        _ptrGetFileSize ??= FindFunction("Function Core.FileSystem.GetFileSize");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrGetFileSize.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFileSize, @params);
        _ptrGetFileSize.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 16);
    }

    // Function Core.FileSystem.GetFileExtensionWithoutDot
    // 0x32FA00
    // (Final | Native | Static | Public)
    public unsafe class GetFileExtensionWithoutDot_Parameters : BaseObject {
        public GetFileExtensionWithoutDot_Parameters() { }
        public GetFileExtensionWithoutDot_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetFileExtensionWithoutDot.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.GetFileExtensionWithoutDot.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetFileExtensionWithoutDot;
    public static FString GetFileExtensionWithoutDot(FString Path) {
        _ptrGetFileExtensionWithoutDot ??= FindFunction("Function Core.FileSystem.GetFileExtensionWithoutDot");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrGetFileExtensionWithoutDot.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFileExtensionWithoutDot, @params);
        _ptrGetFileExtensionWithoutDot.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.FileSystem.GetFileExtension
    // 0x32F900
    // (Final | Native | Static | Public)
    public unsafe class GetFileExtension_Parameters : BaseObject {
        public GetFileExtension_Parameters() { }
        public GetFileExtension_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetFileExtension.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.GetFileExtension.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetFileExtension;
    public static FString GetFileExtension(FString Path) {
        _ptrGetFileExtension ??= FindFunction("Function Core.FileSystem.GetFileExtension");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrGetFileExtension.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFileExtension, @params);
        _ptrGetFileExtension.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.FileSystem.GetFilePathWithoutExtension
    // 0x32F800
    // (Final | Native | Static | Public)
    public unsafe class GetFilePathWithoutExtension_Parameters : BaseObject {
        public GetFilePathWithoutExtension_Parameters() { }
        public GetFilePathWithoutExtension_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetFilePathWithoutExtension.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.GetFilePathWithoutExtension.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetFilePathWithoutExtension;
    public static FString GetFilePathWithoutExtension(FString Path) {
        _ptrGetFilePathWithoutExtension ??= FindFunction("Function Core.FileSystem.GetFilePathWithoutExtension");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrGetFilePathWithoutExtension.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFilePathWithoutExtension, @params);
        _ptrGetFilePathWithoutExtension.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.FileSystem.GetFileNameWithoutExtension
    // 0x32F700
    // (Final | Native | Static | Public)
    public unsafe class GetFileNameWithoutExtension_Parameters : BaseObject {
        public GetFileNameWithoutExtension_Parameters() { }
        public GetFileNameWithoutExtension_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetFileNameWithoutExtension.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.GetFileNameWithoutExtension.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetFileNameWithoutExtension;
    public static FString GetFileNameWithoutExtension(FString Path) {
        _ptrGetFileNameWithoutExtension ??= FindFunction("Function Core.FileSystem.GetFileNameWithoutExtension");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrGetFileNameWithoutExtension.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFileNameWithoutExtension, @params);
        _ptrGetFileNameWithoutExtension.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.FileSystem.GetFilename
    // 0x32F600
    // (Final | Native | Static | Public)
    public unsafe class GetFilename_Parameters : BaseObject {
        public GetFilename_Parameters() { }
        public GetFilename_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.GetFilename.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.FileSystem.GetFilename.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGetFilename;
    public static FString GetFilename(FString Path) {
        _ptrGetFilename ??= FindFunction("Function Core.FileSystem.GetFilename");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);

        _ptrGetFilename.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetFilename, @params);
        _ptrGetFilename.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.FileSystem.FindFiles
    // 0x32F490
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class FindFiles_Parameters : BaseObject {
        public FindFiles_Parameters() { }
        public FindFiles_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.FileSystem.FindFiles.Path
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Path {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.FileSystem.FindFiles.OutFilenames
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public StructTArray<FString> OutFilenames {
            get => new(Pointer + 16, 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrFindFiles;
    public static void FindFiles(FString Path, ref StructTArray<FString> OutFilenames) {
        _ptrFindFiles ??= FindFunction("Function Core.FileSystem.FindFiles");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Path.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutFilenames.Pointer, @params + 16, 16, 16);

        _ptrFindFiles.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrFindFiles, @params);
        _ptrFindFiles.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutFilenamesPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutFilenamesPtr, 16, 16);
        OutFilenames = new(_OutFilenamesPtr, 16) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.FileSystem");
            return _staticClass;
        }
    }
}

// Class Core.ScriptStruct
// 0x28 (0x130 - 0x158)
// (Native | Intrinsic)
public unsafe partial class UScriptStruct : UStruct {
    public UScriptStruct() { }
    public UScriptStruct(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x28


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ScriptStruct");
            return _staticClass;
        }
    }
}

// Class Core.Struct
// 0xC0 (0x70 - 0x130)
// (Native | Intrinsic)
public unsafe partial class UStruct : UField {
    public UStruct() { }
    public UStruct(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0xC0


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Struct");
            return _staticClass;
        }
    }
}

// Class Core.Field
// 0x10 (0x60 - 0x70)
// (Abstract | Native | Intrinsic)
public unsafe partial class UField : UObject {
    public UField() { }
    public UField(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Field");
            return _staticClass;
        }
    }
}

// Class Core.Function
// 0x30 (0x130 - 0x160)
// (Native | Intrinsic)
public unsafe partial class UFunction : UStruct {
    public UFunction() { }
    public UFunction(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x30


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Function");
            return _staticClass;
        }
    }
}

// Class Core.StructProperty
// 0x8 (0xC8 - 0xD0)
// (Native | Intrinsic)
public unsafe partial class UStructProperty : UProperty {
    public UStructProperty() { }
    public UStructProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.StructProperty");
            return _staticClass;
        }
    }
}

// Class Core.Property
// 0x58 (0x70 - 0xC8)
// (Abstract | Native | Intrinsic)
public unsafe partial class UProperty : UField {
    public UProperty() { }
    public UProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x58


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Property");
            return _staticClass;
        }
    }
}

// Class Core.StrProperty
// 0x0 (0xC8 - 0xC8)
// (Native | Intrinsic)
public unsafe partial class UStrProperty : UProperty {
    public UStrProperty() { }
    public UStrProperty(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.StrProperty");
            return _staticClass;
        }
    }
}

// Class Core.QWordProperty
// 0x0 (0xC8 - 0xC8)
// (Native | Intrinsic)
public unsafe partial class UQWordProperty : UProperty {
    public UQWordProperty() { }
    public UQWordProperty(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.QWordProperty");
            return _staticClass;
        }
    }
}

// Class Core.ComponentProperty
// 0x0 (0xD8 - 0xD8)
// (Native | Intrinsic)
public unsafe partial class UComponentProperty : UObjectProperty {
    public UComponentProperty() { }
    public UComponentProperty(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ComponentProperty");
            return _staticClass;
        }
    }
}

// Class Core.ObjectProperty
// 0x10 (0xC8 - 0xD8)
// (Native | Intrinsic)
public unsafe partial class UObjectProperty : UProperty {
    public UObjectProperty() { }
    public UObjectProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ObjectProperty");
            return _staticClass;
        }
    }
}

// Class Core.ClassProperty
// 0x8 (0xD8 - 0xE0)
// (Native | Intrinsic)
public unsafe partial class UClassProperty : UObjectProperty {
    public UClassProperty() { }
    public UClassProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ClassProperty");
            return _staticClass;
        }
    }
}

// Class Core.NameProperty
// 0x0 (0xC8 - 0xC8)
// (Native | Intrinsic)
public unsafe partial class UNameProperty : UProperty {
    public UNameProperty() { }
    public UNameProperty(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.NameProperty");
            return _staticClass;
        }
    }
}

// Class Core.MapProperty
// 0x10 (0xC8 - 0xD8)
// (Native | Intrinsic)
public unsafe partial class UMapProperty : UProperty {
    public UMapProperty() { }
    public UMapProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.MapProperty");
            return _staticClass;
        }
    }
}

// Class Core.IntProperty
// 0x0 (0xC8 - 0xC8)
// (Native | Intrinsic)
public unsafe partial class UIntProperty : UProperty {
    public UIntProperty() { }
    public UIntProperty(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.IntProperty");
            return _staticClass;
        }
    }
}

// Class Core.InterfaceProperty
// 0x10 (0xC8 - 0xD8)
// (Native | Intrinsic)
public unsafe partial class UInterfaceProperty : UProperty {
    public UInterfaceProperty() { }
    public UInterfaceProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.InterfaceProperty");
            return _staticClass;
        }
    }
}

// Class Core.FloatProperty
// 0x0 (0xC8 - 0xC8)
// (Native | Intrinsic)
public unsafe partial class UFloatProperty : UProperty {
    public UFloatProperty() { }
    public UFloatProperty(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.FloatProperty");
            return _staticClass;
        }
    }
}

// Class Core.DelegateProperty
// 0x10 (0xC8 - 0xD8)
// (Native | Intrinsic)
public unsafe partial class UDelegateProperty : UProperty {
    public UDelegateProperty() { }
    public UDelegateProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.DelegateProperty");
            return _staticClass;
        }
    }
}

// Class Core.ByteProperty
// 0x8 (0xC8 - 0xD0)
// (Native | Intrinsic)
public unsafe partial class UByteProperty : UProperty {
    public UByteProperty() { }
    public UByteProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ByteProperty");
            return _staticClass;
        }
    }
}

// Class Core.BoolProperty
// 0x8 (0xC8 - 0xD0)
// (Native | Intrinsic)
public unsafe partial class UBoolProperty : UProperty {
    public UBoolProperty() { }
    public UBoolProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.BoolProperty");
            return _staticClass;
        }
    }
}

// Class Core.ArrayProperty
// 0x8 (0xC8 - 0xD0)
// (Native | Intrinsic)
public unsafe partial class UArrayProperty : UProperty {
    public UArrayProperty() { }
    public UArrayProperty(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ArrayProperty");
            return _staticClass;
        }
    }
}

// Class Core.Enum
// 0x10 (0x70 - 0x80)
// (Native | Intrinsic)
public unsafe partial class UEnum : UField {
    public UEnum() { }
    public UEnum(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Enum");
            return _staticClass;
        }
    }
}

// Class Core.Const
// 0x10 (0x70 - 0x80)
// (Native | Intrinsic)
public unsafe partial class UConst : UField {
    public UConst() { }
    public UConst(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Const");
            return _staticClass;
        }
    }
}

// Class Core.FeatureSystem
// 0x20 (0x60 - 0x80)
// (Transient | Native | Intrinsic)
public unsafe partial class UFeatureSystem : UObject {
    public UFeatureSystem() { }
    public UFeatureSystem(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8

    // BoolProperty Core.FeatureSystem.Prime
    // 0x68 (0x4)
    // Bitmask: 0x00000002
    // (DataBinding)
    public bool Prime {
        get => (*(uint*)(Pointer + 104) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x2;
            else *(uint*)(Pointer + 104) &= ~(uint)0x2;
        }
    }

    // BoolProperty Core.FeatureSystem.Matchmaking
    // 0x68 (0x4)
    // Bitmask: 0x00000008
    // (DataBinding)
    public bool Matchmaking {
        get => (*(uint*)(Pointer + 104) & 0x8) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x8;
            else *(uint*)(Pointer + 104) &= ~(uint)0x8;
        }
    }

    // BoolProperty Core.FeatureSystem.PrivateMatch
    // 0x68 (0x4)
    // Bitmask: 0x00000010
    // (DataBinding)
    public bool PrivateMatch {
        get => (*(uint*)(Pointer + 104) & 0x10) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x10;
            else *(uint*)(Pointer + 104) &= ~(uint)0x10;
        }
    }

    // BoolProperty Core.FeatureSystem.SplitscreenMatch
    // 0x68 (0x4)
    // Bitmask: 0x00000020
    // (DataBinding)
    public bool SplitscreenMatch {
        get => (*(uint*)(Pointer + 104) & 0x20) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x20;
            else *(uint*)(Pointer + 104) &= ~(uint)0x20;
        }
    }

    // BoolProperty Core.FeatureSystem.SplitscreenJoin
    // 0x68 (0x4)
    // Bitmask: 0x00000040
    // (DataBinding)
    public bool SplitscreenJoin {
        get => (*(uint*)(Pointer + 104) & 0x40) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x40;
            else *(uint*)(Pointer + 104) &= ~(uint)0x40;
        }
    }

    // BoolProperty Core.FeatureSystem.SeasonMode
    // 0x68 (0x4)
    // Bitmask: 0x00000080
    // (DataBinding)
    public bool SeasonMode {
        get => (*(uint*)(Pointer + 104) & 0x80) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x80;
            else *(uint*)(Pointer + 104) &= ~(uint)0x80;
        }
    }

    // BoolProperty Core.FeatureSystem.Tutorial
    // 0x68 (0x4)
    // Bitmask: 0x00000100
    // (DataBinding)
    public bool Tutorial {
        get => (*(uint*)(Pointer + 104) & 0x100) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x100;
            else *(uint*)(Pointer + 104) &= ~(uint)0x100;
        }
    }

    // BoolProperty Core.FeatureSystem.Garage
    // 0x68 (0x4)
    // Bitmask: 0x00000200
    // (DataBinding)
    public bool Garage {
        get => (*(uint*)(Pointer + 104) & 0x200) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x200;
            else *(uint*)(Pointer + 104) &= ~(uint)0x200;
        }
    }

    // BoolProperty Core.FeatureSystem.Options
    // 0x68 (0x4)
    // Bitmask: 0x00000400
    // (DataBinding)
    public bool Options {
        get => (*(uint*)(Pointer + 104) & 0x400) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x400;
            else *(uint*)(Pointer + 104) &= ~(uint)0x400;
        }
    }

    // BoolProperty Core.FeatureSystem.ReplaySaves
    // 0x68 (0x4)
    // Bitmask: 0x00000800
    // (DataBinding)
    public bool ReplaySaves {
        get => (*(uint*)(Pointer + 104) & 0x800) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x800;
            else *(uint*)(Pointer + 104) &= ~(uint)0x800;
        }
    }

    // BoolProperty Core.FeatureSystem.MainMenu
    // 0x68 (0x4)
    // Bitmask: 0x00001000
    // (DataBinding)
    public bool MainMenu {
        get => (*(uint*)(Pointer + 104) & 0x1000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x1000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x1000;
        }
    }

    // BoolProperty Core.FeatureSystem.MidgameMenu
    // 0x68 (0x4)
    // Bitmask: 0x00002000
    // (DataBinding)
    public bool MidgameMenu {
        get => (*(uint*)(Pointer + 104) & 0x2000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x2000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x2000;
        }
    }

    // BoolProperty Core.FeatureSystem.Party
    // 0x68 (0x4)
    // Bitmask: 0x00004000
    // (DataBinding)
    public bool Party {
        get => (*(uint*)(Pointer + 104) & 0x4000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x4000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x4000;
        }
    }

    // BoolProperty Core.FeatureSystem.PsyNetParty
    // 0x68 (0x4)
    // Bitmask: 0x00008000
    // (DataBinding)
    public bool PsyNetParty {
        get => (*(uint*)(Pointer + 104) & 0x8000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x8000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x8000;
        }
    }

    // BoolProperty Core.FeatureSystem.Achievements
    // 0x68 (0x4)
    // Bitmask: 0x00010000
    // (DataBinding)
    public bool Achievements {
        get => (*(uint*)(Pointer + 104) & 0x10000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x10000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x10000;
        }
    }

    // BoolProperty Core.FeatureSystem.Stats
    // 0x68 (0x4)
    // Bitmask: 0x00020000
    // (DataBinding)
    public bool Stats {
        get => (*(uint*)(Pointer + 104) & 0x20000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x20000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x20000;
        }
    }

    // BoolProperty Core.FeatureSystem.Leaderboards
    // 0x68 (0x4)
    // Bitmask: 0x00040000
    // (DataBinding)
    public bool Leaderboards {
        get => (*(uint*)(Pointer + 104) & 0x40000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x40000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x40000;
        }
    }

    // BoolProperty Core.FeatureSystem.XP
    // 0x68 (0x4)
    // Bitmask: 0x00080000
    // (DataBinding)
    public bool XP {
        get => (*(uint*)(Pointer + 104) & 0x80000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x80000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x80000;
        }
    }

    // BoolProperty Core.FeatureSystem.Chat
    // 0x68 (0x4)
    // Bitmask: 0x00100000
    // (DataBinding)
    public bool Chat {
        get => (*(uint*)(Pointer + 104) & 0x100000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x100000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x100000;
        }
    }

    // BoolProperty Core.FeatureSystem.TrainingDifficulties
    // 0x68 (0x4)
    // Bitmask: 0x00200000
    // (DataBinding)
    public bool TrainingDifficulties {
        get => (*(uint*)(Pointer + 104) & 0x200000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x200000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x200000;
        }
    }

    // BoolProperty Core.FeatureSystem.Spectator
    // 0x68 (0x4)
    // Bitmask: 0x00400000
    // (DataBinding)
    public bool Spectator {
        get => (*(uint*)(Pointer + 104) & 0x400000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x400000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x400000;
        }
    }

    // BoolProperty Core.FeatureSystem.CrossPlatformPrivateMatch
    // 0x68 (0x4)
    // Bitmask: 0x00800000
    // (DataBinding)
    public bool CrossPlatformPrivateMatch {
        get => (*(uint*)(Pointer + 104) & 0x800000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x800000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x800000;
        }
    }

    // BoolProperty Core.FeatureSystem.Lan
    // 0x68 (0x4)
    // Bitmask: 0x01000000
    // (DataBinding)
    public bool Lan {
        get => (*(uint*)(Pointer + 104) & 0x1000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x1000000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x1000000;
        }
    }

    // BoolProperty Core.FeatureSystem.PlayerReporting
    // 0x68 (0x4)
    // Bitmask: 0x02000000
    // (DataBinding)
    public bool PlayerReporting {
        get => (*(uint*)(Pointer + 104) & 0x2000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x2000000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x2000000;
        }
    }

    // BoolProperty Core.FeatureSystem.OnlineServices
    // 0x68 (0x4)
    // Bitmask: 0x40000000
    // (DataBinding)
    public bool OnlineServices {
        get => (*(uint*)(Pointer + 104) & 0x40000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x40000000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x40000000;
        }
    }

    // BoolProperty Core.FeatureSystem.RemoveCrossPlatformProducts
    // 0x68 (0x4)
    // Bitmask: 0x80000000
    // (DataBinding)
    public bool RemoveCrossPlatformProducts {
        get => (*(uint*)(Pointer + 104) & 0x80000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 104) |= 0x80000000;
            else *(uint*)(Pointer + 104) &= ~(uint)0x80000000;
        }
    }

    // BoolProperty Core.FeatureSystem.ProductValidation
    // 0x6C (0x4)
    // Bitmask: 0x00000001
    // (DataBinding)
    public bool ProductValidation {
        get => (*(uint*)(Pointer + 108) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x1;
            else *(uint*)(Pointer + 108) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.FeatureSystem.MapPrefs
    // 0x6C (0x4)
    // Bitmask: 0x00000002
    // (DataBinding)
    public bool MapPrefs {
        get => (*(uint*)(Pointer + 108) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x2;
            else *(uint*)(Pointer + 108) &= ~(uint)0x2;
        }
    }

    // BoolProperty Core.FeatureSystem.Tournaments
    // 0x6C (0x4)
    // Bitmask: 0x00000008
    // (DataBinding)
    public bool Tournaments {
        get => (*(uint*)(Pointer + 108) & 0x8) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x8;
            else *(uint*)(Pointer + 108) &= ~(uint)0x8;
        }
    }

    // BoolProperty Core.FeatureSystem.PreMatchLobby
    // 0x6C (0x4)
    // Bitmask: 0x00000010
    // (DataBinding)
    public bool PreMatchLobby {
        get => (*(uint*)(Pointer + 108) & 0x10) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x10;
            else *(uint*)(Pointer + 108) &= ~(uint)0x10;
        }
    }

    // BoolProperty Core.FeatureSystem.Challenges
    // 0x6C (0x4)
    // Bitmask: 0x00000020
    // (DataBinding)
    public bool Challenges {
        get => (*(uint*)(Pointer + 108) & 0x20) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x20;
            else *(uint*)(Pointer + 108) &= ~(uint)0x20;
        }
    }

    // BoolProperty Core.FeatureSystem.AntiAddiction
    // 0x6C (0x4)
    // Bitmask: 0x00000040
    // (DataBinding)
    public bool AntiAddiction {
        get => (*(uint*)(Pointer + 108) & 0x40) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x40;
            else *(uint*)(Pointer + 108) &= ~(uint)0x40;
        }
    }

    // BoolProperty Core.FeatureSystem.TrainingEditor
    // 0x6C (0x4)
    // Bitmask: 0x00000080
    // (DataBinding)
    public bool TrainingEditor {
        get => (*(uint*)(Pointer + 108) & 0x80) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x80;
            else *(uint*)(Pointer + 108) &= ~(uint)0x80;
        }
    }

    // BoolProperty Core.FeatureSystem.VoiceChat
    // 0x6C (0x4)
    // Bitmask: 0x00000100
    // (DataBinding)
    public bool VoiceChat {
        get => (*(uint*)(Pointer + 108) & 0x100) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x100;
            else *(uint*)(Pointer + 108) &= ~(uint)0x100;
        }
    }

    // BoolProperty Core.FeatureSystem.SplitScreen
    // 0x6C (0x4)
    // Bitmask: 0x00000200
    // (DataBinding)
    public bool SplitScreen {
        get => (*(uint*)(Pointer + 108) & 0x200) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x200;
            else *(uint*)(Pointer + 108) &= ~(uint)0x200;
        }
    }

    // BoolProperty Core.FeatureSystem.Clubs
    // 0x6C (0x4)
    // Bitmask: 0x00000400
    // (DataBinding)
    public bool Clubs {
        get => (*(uint*)(Pointer + 108) & 0x400) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x400;
            else *(uint*)(Pointer + 108) &= ~(uint)0x400;
        }
    }

    // BoolProperty Core.FeatureSystem.FilterContent
    // 0x6C (0x4)
    // Bitmask: 0x00000800
    // (DataBinding)
    public bool FilterContent {
        get => (*(uint*)(Pointer + 108) & 0x800) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x800;
            else *(uint*)(Pointer + 108) &= ~(uint)0x800;
        }
    }

    // BoolProperty Core.FeatureSystem.EncryptContent
    // 0x6C (0x4)
    // Bitmask: 0x00001000
    // (DataBinding)
    public bool EncryptContent {
        get => (*(uint*)(Pointer + 108) & 0x1000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x1000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x1000;
        }
    }

    // BoolProperty Core.FeatureSystem.EsportsCamera
    // 0x6C (0x4)
    // Bitmask: 0x00008000
    // (DataBinding)
    public bool EsportsCamera {
        get => (*(uint*)(Pointer + 108) & 0x8000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x8000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x8000;
        }
    }

    // BoolProperty Core.FeatureSystem.OnlineXP
    // 0x6C (0x4)
    // Bitmask: 0x00010000
    // (DataBinding)
    public bool OnlineXP {
        get => (*(uint*)(Pointer + 108) & 0x10000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x10000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x10000;
        }
    }

    // BoolProperty Core.FeatureSystem.ClanforgeReservation
    // 0x6C (0x4)
    // Bitmask: 0x00040000
    // (DataBinding)
    public bool ClanforgeReservation {
        get => (*(uint*)(Pointer + 108) & 0x40000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x40000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x40000;
        }
    }

    // BoolProperty Core.FeatureSystem.UserSettingObserver
    // 0x6C (0x4)
    // Bitmask: 0x00080000
    // (DataBinding)
    public bool UserSettingObserver {
        get => (*(uint*)(Pointer + 108) & 0x80000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x80000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x80000;
        }
    }

    // BoolProperty Core.FeatureSystem.Metrics
    // 0x6C (0x4)
    // Bitmask: 0x00100000
    // (DataBinding)
    public bool Metrics {
        get => (*(uint*)(Pointer + 108) & 0x100000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x100000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x100000;
        }
    }

    // BoolProperty Core.FeatureSystem.EOSMetrics
    // 0x6C (0x4)
    // Bitmask: 0x00200000
    // (DataBinding)
    public bool EOSMetrics {
        get => (*(uint*)(Pointer + 108) & 0x200000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x200000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x200000;
        }
    }

    // BoolProperty Core.FeatureSystem.MusicPlaylistSelection
    // 0x6C (0x4)
    // Bitmask: 0x00400000
    // (DataBinding)
    public bool MusicPlaylistSelection {
        get => (*(uint*)(Pointer + 108) & 0x400000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x400000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x400000;
        }
    }

    // BoolProperty Core.FeatureSystem.SpecialEvents
    // 0x6C (0x4)
    // Bitmask: 0x00800000
    // (DataBinding)
    public bool SpecialEvents {
        get => (*(uint*)(Pointer + 108) & 0x800000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x800000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x800000;
        }
    }

    // BoolProperty Core.FeatureSystem.OnlineShop
    // 0x6C (0x4)
    // Bitmask: 0x01000000
    // (DataBinding)
    public bool OnlineShop {
        get => (*(uint*)(Pointer + 108) & 0x1000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x1000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x1000000;
        }
    }

    // BoolProperty Core.FeatureSystem.PlayerBannerCustomization
    // 0x6C (0x4)
    // Bitmask: 0x02000000
    // (DataBinding)
    public bool PlayerBannerCustomization {
        get => (*(uint*)(Pointer + 108) & 0x2000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x2000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x2000000;
        }
    }

    // BoolProperty Core.FeatureSystem.SecureUDP
    // 0x6C (0x4)
    // Bitmask: 0x04000000
    // (DataBinding)
    public bool SecureUDP {
        get => (*(uint*)(Pointer + 108) & 0x4000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x4000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x4000000;
        }
    }

    // BoolProperty Core.FeatureSystem.PsyNet
    // 0x6C (0x4)
    // Bitmask: 0x08000000
    // (DataBinding)
    public bool PsyNet {
        get => (*(uint*)(Pointer + 108) & 0x8000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x8000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x8000000;
        }
    }

    // BoolProperty Core.FeatureSystem.OnlinePlayerStorage
    // 0x6C (0x4)
    // Bitmask: 0x10000000
    // (DataBinding)
    public bool OnlinePlayerStorage {
        get => (*(uint*)(Pointer + 108) & 0x10000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x10000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x10000000;
        }
    }

    // BoolProperty Core.FeatureSystem.LocalSaveData
    // 0x6C (0x4)
    // Bitmask: 0x20000000
    // (DataBinding)
    public bool LocalSaveData {
        get => (*(uint*)(Pointer + 108) & 0x20000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x20000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x20000000;
        }
    }

    // BoolProperty Core.FeatureSystem.CrowdV2
    // 0x6C (0x4)
    // Bitmask: 0x40000000
    // (DataBinding)
    public bool CrowdV2 {
        get => (*(uint*)(Pointer + 108) & 0x40000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x40000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x40000000;
        }
    }

    // BoolProperty Core.FeatureSystem.ChatBan
    // 0x6C (0x4)
    // Bitmask: 0x80000000
    // (DataBinding)
    public bool ChatBan {
        get => (*(uint*)(Pointer + 108) & 0x80000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 108) |= 0x80000000;
            else *(uint*)(Pointer + 108) &= ~(uint)0x80000000;
        }
    }

    // BoolProperty Core.FeatureSystem.BacktraceCrashDumps
    // 0x70 (0x4)
    // Bitmask: 0x00000001
    // (DataBinding)
    public bool BacktraceCrashDumps {
        get => (*(uint*)(Pointer + 112) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x1;
            else *(uint*)(Pointer + 112) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.FeatureSystem.SpotifyButton
    // 0x70 (0x4)
    // Bitmask: 0x00000002
    // (DataBinding)
    public bool SpotifyButton {
        get => (*(uint*)(Pointer + 112) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x2;
            else *(uint*)(Pointer + 112) &= ~(uint)0x2;
        }
    }

    // BoolProperty Core.FeatureSystem.RocketPass
    // 0x70 (0x4)
    // Bitmask: 0x00000004
    // (DataBinding)
    public bool RocketPass {
        get => (*(uint*)(Pointer + 112) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x4;
            else *(uint*)(Pointer + 112) &= ~(uint)0x4;
        }
    }

    // BoolProperty Core.FeatureSystem.SeasonRewards
    // 0x70 (0x4)
    // Bitmask: 0x00000010
    // (DataBinding)
    public bool SeasonRewards {
        get => (*(uint*)(Pointer + 112) & 0x10) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x10;
            else *(uint*)(Pointer + 112) &= ~(uint)0x10;
        }
    }

    // BoolProperty Core.FeatureSystem.FaceIt
    // 0x70 (0x4)
    // Bitmask: 0x00000020
    // (DataBinding)
    public bool FaceIt {
        get => (*(uint*)(Pointer + 112) & 0x20) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x20;
            else *(uint*)(Pointer + 112) &= ~(uint)0x20;
        }
    }

    // BoolProperty Core.FeatureSystem.KnockOut
    // 0x70 (0x4)
    // Bitmask: 0x00000040
    // (DataBinding)
    public bool KnockOut {
        get => (*(uint*)(Pointer + 112) & 0x40) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x40;
            else *(uint*)(Pointer + 112) &= ~(uint)0x40;
        }
    }

    // BoolProperty Core.FeatureSystem.OnlinePlayerTitles
    // 0x70 (0x4)
    // Bitmask: 0x00000080
    // (DataBinding)
    public bool OnlinePlayerTitles {
        get => (*(uint*)(Pointer + 112) & 0x80) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x80;
            else *(uint*)(Pointer + 112) &= ~(uint)0x80;
        }
    }

    // BoolProperty Core.FeatureSystem.RestrictByRegion
    // 0x70 (0x4)
    // Bitmask: 0x00000100
    // (DataBinding)
    public bool RestrictByRegion {
        get => (*(uint*)(Pointer + 112) & 0x100) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x100;
            else *(uint*)(Pointer + 112) &= ~(uint)0x100;
        }
    }

    // BoolProperty Core.FeatureSystem.FirstTimeExperience
    // 0x70 (0x4)
    // Bitmask: 0x00000400
    // (DataBinding)
    public bool FirstTimeExperience {
        get => (*(uint*)(Pointer + 112) & 0x400) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x400;
            else *(uint*)(Pointer + 112) &= ~(uint)0x400;
        }
    }

    // BoolProperty Core.FeatureSystem.RLBot
    // 0x70 (0x4)
    // Bitmask: 0x00000800
    // (DataBinding)
    public bool RLBot {
        get => (*(uint*)(Pointer + 112) & 0x800) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x800;
            else *(uint*)(Pointer + 112) &= ~(uint)0x800;
        }
    }

    // BoolProperty Core.FeatureSystem.UserBugReport
    // 0x70 (0x4)
    // Bitmask: 0x00001000
    // (DataBinding)
    public bool UserBugReport {
        get => (*(uint*)(Pointer + 112) & 0x1000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x1000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x1000;
        }
    }

    // BoolProperty Core.FeatureSystem.SteamInput
    // 0x70 (0x4)
    // Bitmask: 0x00002000
    // (DataBinding)
    public bool SteamInput {
        get => (*(uint*)(Pointer + 112) & 0x2000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x2000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x2000;
        }
    }

    // BoolProperty Core.FeatureSystem.ReplayFXControls
    // 0x70 (0x4)
    // Bitmask: 0x00040000
    // (DataBinding)
    public bool ReplayFXControls {
        get => (*(uint*)(Pointer + 112) & 0x40000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x40000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x40000;
        }
    }

    // BoolProperty Core.FeatureSystem.ESportsShop
    // 0x70 (0x4)
    // Bitmask: 0x00080000
    // (DataBinding)
    public bool ESportsShop {
        get => (*(uint*)(Pointer + 112) & 0x80000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x80000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x80000;
        }
    }

    // BoolProperty Core.FeatureSystem.DynamicRangeAudioSettings
    // 0x70 (0x4)
    // Bitmask: 0x00800000
    // (DataBinding)
    public bool DynamicRangeAudioSettings {
        get => (*(uint*)(Pointer + 112) & 0x800000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x800000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x800000;
        }
    }

    // BoolProperty Core.FeatureSystem.AutoTour
    // 0x70 (0x4)
    // Bitmask: 0x01000000
    // (DataBinding)
    public bool AutoTour {
        get => (*(uint*)(Pointer + 112) & 0x1000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x1000000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x1000000;
        }
    }

    // BoolProperty Core.FeatureSystem.QuickPlay
    // 0x70 (0x4)
    // Bitmask: 0x02000000
    // (DataBinding)
    public bool QuickPlay {
        get => (*(uint*)(Pointer + 112) & 0x2000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x2000000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x2000000;
        }
    }

    // BoolProperty Core.FeatureSystem.NewsPanelV2
    // 0x70 (0x4)
    // Bitmask: 0x04000000
    // (DataBinding)
    public bool NewsPanelV2 {
        get => (*(uint*)(Pointer + 112) & 0x4000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x4000000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x4000000;
        }
    }

    // BoolProperty Core.FeatureSystem.Blueprints
    // 0x70 (0x4)
    // Bitmask: 0x08000000
    // (DataBinding)
    public bool Blueprints {
        get => (*(uint*)(Pointer + 112) & 0x8000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x8000000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x8000000;
        }
    }

    // BoolProperty Core.FeatureSystem.GodBall
    // 0x70 (0x4)
    // Bitmask: 0x10000000
    // (DataBinding)
    public bool GodBall {
        get => (*(uint*)(Pointer + 112) & 0x10000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x10000000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x10000000;
        }
    }

    // BoolProperty Core.FeatureSystem.RocketBucks
    // 0x70 (0x4)
    // Bitmask: 0x40000000
    // (DataBinding)
    public bool RocketBucks {
        get => (*(uint*)(Pointer + 112) & 0x40000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 112) |= 0x40000000;
            else *(uint*)(Pointer + 112) &= ~(uint)0x40000000;
        }
    }

    // BoolProperty Core.FeatureSystem.DiscordRichPresence
    // 0x74 (0x4)
    // Bitmask: 0x00000004
    // (DataBinding)
    public bool DiscordRichPresence {
        get => (*(uint*)(Pointer + 116) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x4;
            else *(uint*)(Pointer + 116) &= ~(uint)0x4;
        }
    }

    // BoolProperty Core.FeatureSystem.SupportACreator
    // 0x74 (0x4)
    // Bitmask: 0x00000008
    // (DataBinding)
    public bool SupportACreator {
        get => (*(uint*)(Pointer + 116) & 0x8) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x8;
            else *(uint*)(Pointer + 116) &= ~(uint)0x8;
        }
    }

    // BoolProperty Core.FeatureSystem.CinematicIntro
    // 0x74 (0x4)
    // Bitmask: 0x00000010
    // (DataBinding)
    public bool CinematicIntro {
        get => (*(uint*)(Pointer + 116) & 0x10) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x10;
            else *(uint*)(Pointer + 116) &= ~(uint)0x10;
        }
    }

    // BoolProperty Core.FeatureSystem.TinyCrowd
    // 0x74 (0x4)
    // Bitmask: 0x00000020
    // (DataBinding)
    public bool TinyCrowd {
        get => (*(uint*)(Pointer + 116) & 0x20) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x20;
            else *(uint*)(Pointer + 116) &= ~(uint)0x20;
        }
    }

    // BoolProperty Core.FeatureSystem.CrumbTrail
    // 0x74 (0x4)
    // Bitmask: 0x00000040
    // (DataBinding)
    public bool CrumbTrail {
        get => (*(uint*)(Pointer + 116) & 0x40) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x40;
            else *(uint*)(Pointer + 116) &= ~(uint)0x40;
        }
    }

    // BoolProperty Core.FeatureSystem.EpicGameStoreBuild
    // 0x74 (0x4)
    // Bitmask: 0x00000080
    // (DataBinding)
    public bool EpicGameStoreBuild {
        get => (*(uint*)(Pointer + 116) & 0x80) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x80;
            else *(uint*)(Pointer + 116) &= ~(uint)0x80;
        }
    }

    // BoolProperty Core.FeatureSystem.XPGatedPlaylists
    // 0x74 (0x4)
    // Bitmask: 0x00000100
    // (DataBinding)
    public bool XPGatedPlaylists {
        get => (*(uint*)(Pointer + 116) & 0x100) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x100;
            else *(uint*)(Pointer + 116) &= ~(uint)0x100;
        }
    }

    // BoolProperty Core.FeatureSystem.TradeInV2
    // 0x74 (0x4)
    // Bitmask: 0x00000400
    // (DataBinding)
    public bool TradeInV2 {
        get => (*(uint*)(Pointer + 116) & 0x400) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x400;
            else *(uint*)(Pointer + 116) &= ~(uint)0x400;
        }
    }

    // BoolProperty Core.FeatureSystem.Football
    // 0x74 (0x4)
    // Bitmask: 0x00000800
    // (DataBinding)
    public bool Football {
        get => (*(uint*)(Pointer + 116) & 0x800) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x800;
            else *(uint*)(Pointer + 116) &= ~(uint)0x800;
        }
    }

    // BoolProperty Core.FeatureSystem.RumbleSelection
    // 0x74 (0x4)
    // Bitmask: 0x00001000
    // (DataBinding)
    public bool RumbleSelection {
        get => (*(uint*)(Pointer + 116) & 0x1000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x1000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x1000;
        }
    }

    // BoolProperty Core.FeatureSystem.UndersizedParty
    // 0x74 (0x4)
    // Bitmask: 0x00002000
    // (DataBinding)
    public bool UndersizedParty {
        get => (*(uint*)(Pointer + 116) & 0x2000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x2000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x2000;
        }
    }

    // BoolProperty Core.FeatureSystem.StreamerSafeAudio
    // 0x74 (0x4)
    // Bitmask: 0x00004000
    // (DataBinding)
    public bool StreamerSafeAudio {
        get => (*(uint*)(Pointer + 116) & 0x4000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x4000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x4000;
        }
    }

    // BoolProperty Core.FeatureSystem.FreeplayCommands
    // 0x74 (0x4)
    // Bitmask: 0x00008000
    // (DataBinding)
    public bool FreeplayCommands {
        get => (*(uint*)(Pointer + 116) & 0x8000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x8000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x8000;
        }
    }

    // BoolProperty Core.FeatureSystem.Rumble_BM
    // 0x74 (0x4)
    // Bitmask: 0x00010000
    // (DataBinding)
    public bool Rumble_BM {
        get => (*(uint*)(Pointer + 116) & 0x10000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x10000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x10000;
        }
    }

    // BoolProperty Core.FeatureSystem.PlayerReportingV2
    // 0x74 (0x4)
    // Bitmask: 0x00020000
    // (DataBinding)
    public bool PlayerReportingV2 {
        get => (*(uint*)(Pointer + 116) & 0x20000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x20000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x20000;
        }
    }

    // BoolProperty Core.FeatureSystem.BlogScheduling
    // 0x74 (0x4)
    // Bitmask: 0x00040000
    // (DataBinding)
    public bool BlogScheduling {
        get => (*(uint*)(Pointer + 116) & 0x40000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x40000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x40000;
        }
    }

    // BoolProperty Core.FeatureSystem.EOSVoice
    // 0x74 (0x4)
    // Bitmask: 0x00080000
    // (DataBinding)
    public bool EOSVoice {
        get => (*(uint*)(Pointer + 116) & 0x80000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x80000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x80000;
        }
    }

    // BoolProperty Core.FeatureSystem.QuickPostMatchRequeue
    // 0x74 (0x4)
    // Bitmask: 0x00100000
    // (DataBinding)
    public bool QuickPostMatchRequeue {
        get => (*(uint*)(Pointer + 116) & 0x100000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x100000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x100000;
        }
    }

    // BoolProperty Core.FeatureSystem.TrainingNavigation
    // 0x74 (0x4)
    // Bitmask: 0x00800000
    // (DataBinding)
    public bool TrainingNavigation {
        get => (*(uint*)(Pointer + 116) & 0x800000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x800000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x800000;
        }
    }

    // BoolProperty Core.FeatureSystem.TrainingManipulation
    // 0x74 (0x4)
    // Bitmask: 0x01000000
    // (DataBinding)
    public bool TrainingManipulation {
        get => (*(uint*)(Pointer + 116) & 0x1000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x1000000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x1000000;
        }
    }

    // BoolProperty Core.FeatureSystem.FilterByColor
    // 0x74 (0x4)
    // Bitmask: 0x04000000
    // (DataBinding)
    public bool FilterByColor {
        get => (*(uint*)(Pointer + 116) & 0x4000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x4000000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x4000000;
        }
    }

    // BoolProperty Core.FeatureSystem.Scoreboard
    // 0x74 (0x4)
    // Bitmask: 0x08000000
    // (DataBinding)
    public bool Scoreboard {
        get => (*(uint*)(Pointer + 116) & 0x8000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x8000000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x8000000;
        }
    }

    // BoolProperty Core.FeatureSystem.DynamicMapEvents
    // 0x74 (0x4)
    // Bitmask: 0x10000000
    // (DataBinding)
    public bool DynamicMapEvents {
        get => (*(uint*)(Pointer + 116) & 0x10000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x10000000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x10000000;
        }
    }

    // BoolProperty Core.FeatureSystem.NameplateBoost
    // 0x74 (0x4)
    // Bitmask: 0x40000000
    // (DataBinding)
    public bool NameplateBoost {
        get => (*(uint*)(Pointer + 116) & 0x40000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x40000000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x40000000;
        }
    }

    // BoolProperty Core.FeatureSystem.EOSGameClips
    // 0x74 (0x4)
    // Bitmask: 0x80000000
    // (DataBinding)
    public bool EOSGameClips {
        get => (*(uint*)(Pointer + 116) & 0x80000000) != 0;
        set {
            if (value) *(uint*)(Pointer + 116) |= 0x80000000;
            else *(uint*)(Pointer + 116) &= ~(uint)0x80000000;
        }
    }

    // BoolProperty Core.FeatureSystem.DynamicLogos
    // 0x78 (0x4)
    // Bitmask: 0x00000001
    // (DataBinding)
    public bool DynamicLogos {
        get => (*(uint*)(Pointer + 120) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x1;
            else *(uint*)(Pointer + 120) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.FeatureSystem.XETagging
    // 0x78 (0x4)
    // Bitmask: 0x00000002
    // (DataBinding)
    public bool XETagging {
        get => (*(uint*)(Pointer + 120) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x2;
            else *(uint*)(Pointer + 120) &= ~(uint)0x2;
        }
    }

    // BoolProperty Core.FeatureSystem.PlayMenuV4
    // 0x78 (0x4)
    // Bitmask: 0x00000004
    // (DataBinding)
    public bool PlayMenuV4 {
        get => (*(uint*)(Pointer + 120) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x4;
            else *(uint*)(Pointer + 120) &= ~(uint)0x4;
        }
    }

    // MISSED OFFSET: 0x4


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.FeatureSystem");
            return _staticClass;
        }
    }
}

// Class Core.TextBufferFactory
// 0x0 (0xB8 - 0xB8)
// (Transient | Native | Intrinsic)
public unsafe partial class UTextBufferFactory : UFactory {
    public UTextBufferFactory() { }
    public UTextBufferFactory(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.TextBufferFactory");
            return _staticClass;
        }
    }
}

// Class Core.Factory
// 0x58 (0x60 - 0xB8)
// (Abstract | Compiled | Parsed | Native | NoExport)
public unsafe partial class UFactory : UObject {
    public UFactory() { }
    public UFactory(nint pointer) : base(pointer) { }


    // StrProperty Core.Factory.Category
    // 0x60 (0x10)
    // (NeedCtorLink)
    public FString Category {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // ClassProperty Core.Factory.SupportedClass
    // 0x70 (0x8)
    public UClass SupportedClass {
        get {
            var pointer = *(nint*)(Pointer + 112);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 112) = value.Pointer;
    }

    // ClassProperty Core.Factory.ContextClass
    // 0x78 (0x8)
    public UClass ContextClass {
        get {
            var pointer = *(nint*)(Pointer + 120);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 120) = value.Pointer;
    }

    // StrProperty Core.Factory.Description
    // 0x80 (0x10)
    // (NeedCtorLink)
    public FString Description {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty Core.Factory.Formats
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> Formats {
        get => new(Pointer + 144, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // BoolProperty Core.Factory.bCreateNew
    // 0xA0 (0x4)
    // Bitmask: 0x00000001
    public bool bCreateNew {
        get => (*(uint*)(Pointer + 160) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 160) |= 0x1;
            else *(uint*)(Pointer + 160) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.Factory.bEditAfterNew
    // 0xA0 (0x4)
    // Bitmask: 0x00000002
    public bool bEditAfterNew {
        get => (*(uint*)(Pointer + 160) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 160) |= 0x2;
            else *(uint*)(Pointer + 160) &= ~(uint)0x2;
        }
    }

    // BoolProperty Core.Factory.bEditorImport
    // 0xA0 (0x4)
    // Bitmask: 0x00000004
    public bool bEditorImport {
        get => (*(uint*)(Pointer + 160) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 160) |= 0x4;
            else *(uint*)(Pointer + 160) &= ~(uint)0x4;
        }
    }

    // BoolProperty Core.Factory.bText
    // 0xA0 (0x4)
    // Bitmask: 0x00000008
    public bool bText {
        get => (*(uint*)(Pointer + 160) & 0x8) != 0;
        set {
            if (value) *(uint*)(Pointer + 160) |= 0x8;
            else *(uint*)(Pointer + 160) &= ~(uint)0x8;
        }
    }

    // BoolProperty Core.Factory.bAssetNameMatchesPackageName
    // 0xA0 (0x4)
    // Bitmask: 0x00000010
    public bool bAssetNameMatchesPackageName {
        get => (*(uint*)(Pointer + 160) & 0x10) != 0;
        set {
            if (value) *(uint*)(Pointer + 160) |= 0x10;
            else *(uint*)(Pointer + 160) &= ~(uint)0x10;
        }
    }

    // IntProperty Core.Factory.AutoPriority
    // 0xA4 (0x4)
    public int AutoPriority {
        get => *(int*)(Pointer + 164);
        set => *(int*)(Pointer + 164) = value;
    }

    // ArrayProperty Core.Factory.ValidGameNames
    // 0xA8 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> ValidGameNames {
        get => new(Pointer + 168, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 16, 16);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Factory");
            return _staticClass;
        }
    }
}

// Class Core.Exporter
// 0x38 (0x60 - 0x98)
// (Abstract | Transient | Native | Intrinsic)
public unsafe partial class UExporter : UObject {
    public UExporter() { }
    public UExporter(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x8

    // ArrayProperty Core.Exporter.FormatExtension
    // 0x68 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> FormatExtension {
        get => new(Pointer + 104, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }

    // ArrayProperty Core.Exporter.FormatDescription
    // 0x78 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> FormatDescription {
        get => new(Pointer + 120, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // MISSED OFFSET: 0x10


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Exporter");
            return _staticClass;
        }
    }
}

// Class Core.ErrorType
// 0x10 (0x60 - 0x70)
// (Compiled | Parsed | Native)
public unsafe partial class UErrorType : UObject {
    public UErrorType() { }
    public UErrorType(nint pointer) : base(pointer) { }


    // StrProperty Core.ErrorType.LocalizationKey
    // 0x60 (0x10)
    // (Const | NeedCtorLink)
    public FString LocalizationKey {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }


    // Function Core.ErrorType.CreateError
    // 0x309AD0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class CreateError_Parameters : BaseObject {
        public CreateError_Parameters() { }
        public CreateError_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.ErrorType.CreateError.InErrorMessage
        // 0x0 (0x10)
        // (OptionalParam | Param | NeedCtorLink)
        public FString InErrorMessage {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.ErrorType.CreateError.InErrorCode
        // 0x10 (0x4)
        // (OptionalParam | Param)
        public int InErrorCode {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // ObjectProperty Core.ErrorType.CreateError.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public UError ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrCreateError;
    public UError CreateError(FString InErrorMessage = null, int InErrorCode = 0) {
        _ptrCreateError ??= FindFunction("Function Core.ErrorType.CreateError");

        var @params = stackalloc byte[28];
        if (InErrorMessage != null) System.Buffer.MemoryCopy((void*)InErrorMessage.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&InErrorCode, @params + 16, 4, 4);

        _ptrCreateError.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrCreateError, @params);
        _ptrCreateError.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 24));
    }

    // Function Core.ErrorType.GetLocalizedMessage
    // 0x32F3E0
    // (Final | Native | Public)
    public unsafe class GetLocalizedMessage_Parameters : BaseObject {
        public GetLocalizedMessage_Parameters() { }
        public GetLocalizedMessage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.ErrorType.GetLocalizedMessage.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetLocalizedMessage;
    public FString GetLocalizedMessage() {
        _ptrGetLocalizedMessage ??= FindFunction("Function Core.ErrorType.GetLocalizedMessage");

        var @params = stackalloc byte[16];

        _ptrGetLocalizedMessage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetLocalizedMessage, @params);
        _ptrGetLocalizedMessage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ErrorType");
            return _staticClass;
        }
    }
}

// Class Core.ArrayErrors
// 0x10 (0x80 - 0x90)
// (Compiled | Parsed | Native)
public unsafe partial class UArrayErrors : UErrorList {
    public UArrayErrors() { }
    public UArrayErrors(nint pointer) : base(pointer) { }


    // ObjectProperty Core.ArrayErrors.Remove_NegativeNumberOfElements
    // 0x80 (0x8)
    // (Const)
    public UErrorType Remove_NegativeNumberOfElements {
        get {
            var pointer = *(nint*)(Pointer + 128);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 128) = value.Pointer;
    }

    // ObjectProperty Core.ArrayErrors.Remove_OutOfBounds
    // 0x88 (0x8)
    // (Const)
    public UErrorType Remove_OutOfBounds {
        get {
            var pointer = *(nint*)(Pointer + 136);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 136) = value.Pointer;
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ArrayErrors");
            return _staticClass;
        }
    }
}

// Class Core.ErrorList
// 0x20 (0x60 - 0x80)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UErrorList : UObject {
    public UErrorList() { }
    public UErrorList(nint pointer) : base(pointer) { }


    // StrProperty Core.ErrorList.LocalizationPackage
    // 0x60 (0x10)
    // (Edit | Const | NeedCtorLink)
    public FString LocalizationPackage {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // StrProperty Core.ErrorList.LocalizationSection
    // 0x70 (0x10)
    // (Edit | Const | NeedCtorLink)
    public FString LocalizationSection {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }


    // Function Core.ErrorList.GetErrorType
    // 0x32F350
    // (Final | Native | Static | Public)
    public unsafe class GetErrorType_Parameters : BaseObject {
        public GetErrorType_Parameters() { }
        public GetErrorType_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.ErrorList.GetErrorType.Error
        // 0x0 (0x8)
        // (Param)
        public FName Error {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // ObjectProperty Core.ErrorList.GetErrorType.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UErrorType ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetErrorType;
    public static UErrorType GetErrorType(FName Error) {
        _ptrGetErrorType ??= FindFunction("Function Core.ErrorList.GetErrorType");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Error.Pointer, @params, 8, 8);

        _ptrGetErrorType.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrGetErrorType, @params);
        _ptrGetErrorType.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ErrorList");
            return _staticClass;
        }
    }
}

// Class Core.Error
// 0x24 (0x60 - 0x84)
// (Compiled | Parsed | Native)
public unsafe partial class UError : UObject {
    public UError() { }
    public UError(nint pointer) : base(pointer) { }


    // ObjectProperty Core.Error.Type
    // 0x60 (0x8)
    // (Const | Transient)
    public UErrorType Type {
        get {
            var pointer = *(nint*)(Pointer + 96);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 96) = value.Pointer;
    }

    // StrProperty Core.Error.Message
    // 0x68 (0x10)
    // (Const | Transient | NeedCtorLink)
    public FString Message {
        get => new(Pointer + 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 16, 16);
    }

    // IntProperty Core.Error.Code
    // 0x78 (0x4)
    // (Const | Transient)
    public int Code {
        get => *(int*)(Pointer + 120);
        set => *(int*)(Pointer + 120) = value;
    }

    // NameProperty Core.Error.RetryKey
    // 0x7C (0x8)
    // (Const | Transient)
    public FName RetryKey {
        get => new(Pointer + 124);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 124), 8, 8);
    }


    // Function Core.Error.GetDebugMessage
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class GetDebugMessage_Parameters : BaseObject {
        public GetDebugMessage_Parameters() { }
        public GetDebugMessage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Error.GetDebugMessage.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetDebugMessage;
    public FString GetDebugMessage() {
        _ptrGetDebugMessage ??= FindFunction("Function Core.Error.GetDebugMessage");

        var @params = stackalloc byte[16];

        ProcessEvent(_ptrGetDebugMessage, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Error.GetLocalizedMessage
    // 0x32F2A0
    // (Final | Native | Public)
    public unsafe class GetLocalizedMessage_Parameters : BaseObject {
        public GetLocalizedMessage_Parameters() { }
        public GetLocalizedMessage_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Error.GetLocalizedMessage.ReturnValue
        // 0x0 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrGetLocalizedMessage;
    public FString GetLocalizedMessage() {
        _ptrGetLocalizedMessage ??= FindFunction("Function Core.Error.GetLocalizedMessage");

        var @params = stackalloc byte[16];

        _ptrGetLocalizedMessage.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetLocalizedMessage, @params);
        _ptrGetLocalizedMessage.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Error");
            return _staticClass;
        }
    }
}

// Class Core.DelegateTracker
// 0x28 (0x60 - 0x88)
// (Compiled | Parsed | Native)
public unsafe partial class UDelegateTracker : UObject {
    public UDelegateTracker() { }
    public UDelegateTracker(nint pointer) : base(pointer) { }


    // ArrayProperty Core.DelegateTracker.AsyncDelegates
    // 0x60 (0x10)
    // (NeedCtorLink)
    public StructTArray<FAsyncDelegateInfo> AsyncDelegates {
        get => new(Pointer + 96, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // DelegateProperty Core.DelegateTracker.__PlaceholderDelegate__Delegate
    // 0x70 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __PlaceholderDelegate__Delegate {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 24, 24);
    }


    // Function Core.DelegateTracker.RemoveDelegate
    // 0x32F1E0
    // (Final | Native | Public)
    public unsafe class RemoveDelegate_Parameters : BaseObject {
        public RemoveDelegate_Parameters() { }
        public RemoveDelegate_Parameters(nint pointer) : base(pointer) { }

        // IntProperty Core.DelegateTracker.RemoveDelegate.CallbackId
        // 0x0 (0x4)
        // (Param)
        public int CallbackId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // DelegateProperty Core.DelegateTracker.RemoveDelegate.ReturnValue
        // 0x8 (0x18)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FScriptDelegate ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }
    private static UFunction _ptrRemoveDelegate;
    public FScriptDelegate RemoveDelegate(int CallbackId) {
        _ptrRemoveDelegate ??= FindFunction("Function Core.DelegateTracker.RemoveDelegate");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy(&CallbackId, @params, 4, 4);

        _ptrRemoveDelegate.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveDelegate, @params);
        _ptrRemoveDelegate.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(24);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 24, 24);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.DelegateTracker.AddDelegate
    // 0x32F080
    // (Final | Native | Public)
    public unsafe class AddDelegate_Parameters : BaseObject {
        public AddDelegate_Parameters() { }
        public AddDelegate_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.DelegateTracker.AddDelegate.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // IntProperty Core.DelegateTracker.AddDelegate.ReturnValue
        // 0x18 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 24);
            set => *(int*)(Pointer + 24) = value;
        }
    }
    private static UFunction _ptrAddDelegate;
    public int AddDelegate(FScriptDelegate Callback) {
        _ptrAddDelegate ??= FindFunction("Function Core.DelegateTracker.AddDelegate");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        _ptrAddDelegate.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddDelegate, @params);
        _ptrAddDelegate.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 24);
    }

    // Function Core.DelegateTracker.PlaceholderDelegate
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class PlaceholderDelegate_Parameters : BaseObject {
        public PlaceholderDelegate_Parameters() { }
        public PlaceholderDelegate_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrPlaceholderDelegate;
    public void PlaceholderDelegate() {
        _ptrPlaceholderDelegate ??= FindFunction("Function Core.DelegateTracker.PlaceholderDelegate");

        ProcessEvent(_ptrPlaceholderDelegate, null);
    }


    // ScriptStruct Core.DelegateTracker.AsyncDelegateInfo
    // 0x20
    public unsafe class FAsyncDelegateInfo : BaseObject {
        public FAsyncDelegateInfo() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FAsyncDelegateInfo(nint pointer) : base(pointer) { }

        // IntProperty Core.DelegateTracker.AsyncDelegateInfo.CallbackId
        // 0x0 (0x4)
        public int CallbackId {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }

        // MISSED OFFSET: 0x4

        // DelegateProperty Core.DelegateTracker.AsyncDelegateInfo.AsyncDelegate
        // 0x8 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate AsyncDelegate {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.DelegateTracker");
            return _staticClass;
        }
    }
}

// Class Core.DebugDrawer
// 0x60 (0x60 - 0xC0)
// (Compiled | Parsed | Native)
public unsafe partial class UDebugDrawer : UObject {
    public UDebugDrawer() { }
    public UDebugDrawer(nint pointer) : base(pointer) { }


    // StructProperty Core.DebugDrawer.DefaultTextColor
    // 0x60 (0x4)
    // (Edit)
    public FColor DefaultTextColor {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 4, 4);
    }

    // BoolProperty Core.DebugDrawer.bSilent
    // 0x64 (0x4)
    // Bitmask: 0x00000001
    // (Edit)
    public bool bSilent {
        get => (*(uint*)(Pointer + 100) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 100) |= 0x1;
            else *(uint*)(Pointer + 100) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.DebugDrawer.bPrintActorsInline
    // 0x64 (0x4)
    // Bitmask: 0x00000002
    // (Edit)
    public bool bPrintActorsInline {
        get => (*(uint*)(Pointer + 100) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 100) |= 0x2;
            else *(uint*)(Pointer + 100) &= ~(uint)0x2;
        }
    }

    // IntProperty Core.DebugDrawer.Indentation
    // 0x68 (0x4)
    // (Transient | ProtectedWrite)
    public int Indentation {
        get => *(int*)(Pointer + 104);
        set => *(int*)(Pointer + 104) = value;
    }

    // MISSED OFFSET: 0x4

    // StrProperty Core.DebugDrawer.IndentationString
    // 0x70 (0x10)
    // (Transient | NeedCtorLink | ProtectedWrite)
    public FString IndentationString {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }

    // ArrayProperty Core.DebugDrawer.PrintedObjects
    // 0x80 (0x10)
    // (Transient | NeedCtorLink)
    public PointerTArray<UObject> PrintedObjects {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty Core.DebugDrawer.QueuedObjects
    // 0x90 (0x10)
    // (Transient | NeedCtorLink)
    public PointerTArray<UObject> QueuedObjects {
        get => new(Pointer + 144);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // IntProperty Core.DebugDrawer.PrintObjectCount
    // 0xA0 (0x4)
    // (Transient)
    public int PrintObjectCount {
        get => *(int*)(Pointer + 160);
        set => *(int*)(Pointer + 160) = value;
    }

    // MISSED OFFSET: 0x4

    // DelegateProperty Core.DebugDrawer.__LogFunc__Delegate
    // 0xA8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __LogFunc__Delegate {
        get => new(Pointer + 168);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 168), 24, 24);
    }


    // Function Core.DebugDrawer.Reset
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class Reset_Parameters : BaseObject {
        public Reset_Parameters() { }
        public Reset_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrReset;
    public void Reset() {
        _ptrReset ??= FindFunction("Function Core.DebugDrawer.Reset");

        ProcessEvent(_ptrReset, null);
    }

    // Function Core.DebugDrawer.PrintText
    // 0x3750E0
    // (Defined | HasOptionalParams | Public)
    public unsafe class PrintText_Parameters : BaseObject {
        public PrintText_Parameters() { }
        public PrintText_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.PrintText.Text
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Text {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StructProperty Core.DebugDrawer.PrintText.InColor
        // 0x10 (0x4)
        // (OptionalParam | Param)
        public FColor InColor {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 4, 4);
        }
    }
    private static UFunction _ptrPrintText;
    public void PrintText(FString Text, FColor InColor = null) {
        _ptrPrintText ??= FindFunction("Function Core.DebugDrawer.PrintText");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Text.Pointer, @params, 16, 16);
        if (InColor != null) System.Buffer.MemoryCopy((void*)InColor.Pointer, @params + 16, 4, 4);

        ProcessEvent(_ptrPrintText, @params);
    }

    // Function Core.DebugDrawer.PrintArrayProperty
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class PrintArrayProperty_Parameters : BaseObject {
        public PrintArrayProperty_Parameters() { }
        public PrintArrayProperty_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.PrintArrayProperty.PropertyName
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString PropertyName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.DebugDrawer.PrintArrayProperty.Index
        // 0x10 (0x4)
        // (Param)
        public int Index {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // StrProperty Core.DebugDrawer.PrintArrayProperty.Value
        // 0x18 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 16, 16);
        }
    }
    private static UFunction _ptrPrintArrayProperty;
    public void PrintArrayProperty(FString PropertyName, int Index, FString Value) {
        _ptrPrintArrayProperty ??= FindFunction("Function Core.DebugDrawer.PrintArrayProperty");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)PropertyName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Index, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 24, 16, 16);

        ProcessEvent(_ptrPrintArrayProperty, @params);
    }

    // Function Core.DebugDrawer.PrintProperty
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class PrintProperty_Parameters : BaseObject {
        public PrintProperty_Parameters() { }
        public PrintProperty_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.PrintProperty.PropertyName
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString PropertyName {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.DebugDrawer.PrintProperty.Value
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrPrintProperty;
    public void PrintProperty(FString PropertyName, FString Value) {
        _ptrPrintProperty ??= FindFunction("Function Core.DebugDrawer.PrintProperty");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)PropertyName.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrPrintProperty, @params);
    }

    // Function Core.DebugDrawer.EndSection
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class EndSection_Parameters : BaseObject {
        public EndSection_Parameters() { }
        public EndSection_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEndSection;
    public void EndSection() {
        _ptrEndSection ??= FindFunction("Function Core.DebugDrawer.EndSection");

        ProcessEvent(_ptrEndSection, null);
    }

    // Function Core.DebugDrawer.StartSection
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class StartSection_Parameters : BaseObject {
        public StartSection_Parameters() { }
        public StartSection_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrStartSection;
    public void StartSection() {
        _ptrStartSection ??= FindFunction("Function Core.DebugDrawer.StartSection");

        ProcessEvent(_ptrStartSection, null);
    }

    // Function Core.DebugDrawer.PrintObject
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class PrintObject_Parameters : BaseObject {
        public PrintObject_Parameters() { }
        public PrintObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.PrintObject.Title
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Title {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty Core.DebugDrawer.PrintObject.ForObj
        // 0x10 (0x8)
        // (Param)
        public UObject ForObj {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrPrintObject;
    public void PrintObject(FString Title, UObject ForObj) {
        _ptrPrintObject ??= FindFunction("Function Core.DebugDrawer.PrintObject");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Title.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ForObj.Pointer, @params + 16, 8, 8);

        ProcessEvent(_ptrPrintObject, @params);
    }

    // Function Core.DebugDrawer.PrintSeperater
    // 0x3750E0
    // (Defined | Event | Public)
    public unsafe class PrintSeperater_Parameters : BaseObject {
        public PrintSeperater_Parameters() { }
        public PrintSeperater_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrPrintSeperater;
    public void PrintSeperater() {
        _ptrPrintSeperater ??= FindFunction("Function Core.DebugDrawer.PrintSeperater");

        ProcessEvent(_ptrPrintSeperater, null);
    }

    // Function Core.DebugDrawer.DebugArrayObject
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class DebugArrayObject_Parameters : BaseObject {
        public DebugArrayObject_Parameters() { }
        public DebugArrayObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.DebugArrayObject.Title
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Title {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.DebugDrawer.DebugArrayObject.Index
        // 0x10 (0x4)
        // (Param)
        public int Index {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }

        // MISSED OFFSET: 0x4

        // ObjectProperty Core.DebugDrawer.DebugArrayObject.ForObj
        // 0x18 (0x8)
        // (Param)
        public UObject ForObj {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrDebugArrayObject;
    public void DebugArrayObject(FString Title, int Index, UObject ForObj) {
        _ptrDebugArrayObject ??= FindFunction("Function Core.DebugDrawer.DebugArrayObject");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)Title.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Index, @params + 16, 4, 4);
        System.Buffer.MemoryCopy((void*)ForObj.Pointer, @params + 24, 8, 8);

        ProcessEvent(_ptrDebugArrayObject, @params);
    }

    // Function Core.DebugDrawer.DebugObject
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class DebugObject_Parameters : BaseObject {
        public DebugObject_Parameters() { }
        public DebugObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.DebugObject.Title
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Title {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty Core.DebugDrawer.DebugObject.ForObj
        // 0x10 (0x8)
        // (Param)
        public UObject ForObj {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrDebugObject;
    public void DebugObject(FString Title, UObject ForObj) {
        _ptrDebugObject ??= FindFunction("Function Core.DebugDrawer.DebugObject");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Title.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)ForObj.Pointer, @params + 16, 8, 8);

        ProcessEvent(_ptrDebugObject, @params);
    }

    // Function Core.DebugDrawer.ShouldDisplayDebug
    // 0x3750E0
    // (Defined | Public)
    public unsafe class ShouldDisplayDebug_Parameters : BaseObject {
        public ShouldDisplayDebug_Parameters() { }
        public ShouldDisplayDebug_Parameters(nint pointer) : base(pointer) { }

        // NameProperty Core.DebugDrawer.ShouldDisplayDebug.Category
        // 0x0 (0x8)
        // (Param)
        public FName Category {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 8, 8);
        }

        // BoolProperty Core.DebugDrawer.ShouldDisplayDebug.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrShouldDisplayDebug;
    public bool ShouldDisplayDebug(FName Category) {
        _ptrShouldDisplayDebug ??= FindFunction("Function Core.DebugDrawer.ShouldDisplayDebug");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)Category.Pointer, @params, 8, 8);

        ProcessEvent(_ptrShouldDisplayDebug, @params);

        return *(bool*)(@params + 8);
    }

    // Function Core.DebugDrawer.LogFunc
    // 0x3750E0
    // (Final | Defined | Public | Delegate)
    public unsafe class LogFunc_Parameters : BaseObject {
        public LogFunc_Parameters() { }
        public LogFunc_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.DebugDrawer.LogFunc.Str
        // 0x0 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Str {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrLogFunc;
    public void LogFunc(FString Str) {
        _ptrLogFunc ??= FindFunction("Function Core.DebugDrawer.LogFunc");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Str.Pointer, @params, 16, 16);

        ProcessEvent(_ptrLogFunc, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.DebugDrawer");
            return _staticClass;
        }
    }
}

// Class Core.Compression
// 0x0 (0x60 - 0x60)
// (Compiled | Parsed | Native)
public unsafe partial class UCompression : UObject {
    public UCompression() { }
    public UCompression(nint pointer) : base(pointer) { }


    // Function Core.Compression.ZLibCompress
    // 0x32EF20
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class ZLibCompress_Parameters : BaseObject {
        public ZLibCompress_Parameters() { }
        public ZLibCompress_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Compression.ZLibCompress.Uncompressed
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Uncompressed {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Compression.ZLibCompress.OutCompressed
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> OutCompressed {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.Compression.ZLibCompress.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrZLibCompress;
    public static bool ZLibCompress(ref UnmanagedTArray<byte> Uncompressed, ref UnmanagedTArray<byte> OutCompressed) {
        _ptrZLibCompress ??= FindFunction("Function Core.Compression.ZLibCompress");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Uncompressed.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutCompressed.Pointer, @params + 16, 16, 16);

        _ptrZLibCompress.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrZLibCompress, @params);
        _ptrZLibCompress.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _UncompressedPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_UncompressedPtr, 16, 16);
        Uncompressed = new(_UncompressedPtr) { Allocated = true };
        var _OutCompressedPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutCompressedPtr, 16, 16);
        OutCompressed = new(_OutCompressedPtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Compression");
            return _staticClass;
        }
    }
}

// Class Core.StringObjectMap
// 0x50 (0x70 - 0xC0)
// (Compiled | Parsed | Native)
public unsafe partial class UStringObjectMap : UComponent {
    public UStringObjectMap() { }
    public UStringObjectMap(nint pointer) : base(pointer) { }


    // StructProperty Core.StringObjectMap.Map
    // 0x70 (0x50)
    // (Const | Native)
    public FMap_Mirror Map {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 80, 80);
    }


    // Function Core.StringObjectMap.Contains
    // 0x32EE60
    // (Final | Native | Public)
    public unsafe class Contains_Parameters : BaseObject {
        public Contains_Parameters() { }
        public Contains_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringObjectMap.Contains.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty Core.StringObjectMap.Contains.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrContains;
    public bool Contains(FString Key) {
        _ptrContains ??= FindFunction("Function Core.StringObjectMap.Contains");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrContains.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrContains, @params);
        _ptrContains.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.StringObjectMap.Remove
    // 0x32EDB0
    // (Final | Native | Public)
    public unsafe class Remove_Parameters : BaseObject {
        public Remove_Parameters() { }
        public Remove_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringObjectMap.Remove.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrRemove;
    public void Remove(FString Key) {
        _ptrRemove ??= FindFunction("Function Core.StringObjectMap.Remove");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrRemove.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemove, @params);
        _ptrRemove.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.StringObjectMap.TryGetObject
    // 0x32EC80
    // (Final | Native | Public | HasOutParams)
    public unsafe class TryGetObject_Parameters : BaseObject {
        public TryGetObject_Parameters() { }
        public TryGetObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringObjectMap.TryGetObject.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty Core.StringObjectMap.TryGetObject.OutValue
        // 0x10 (0x8)
        // (Param | OutParam)
        public UObject OutValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }

        // BoolProperty Core.StringObjectMap.TryGetObject.ReturnValue
        // 0x18 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 24) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 24) |= 0x1;
                else *(uint*)(Pointer + 24) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrTryGetObject;
    public bool TryGetObject(FString Key, ref UObject OutValue) {
        _ptrTryGetObject ??= FindFunction("Function Core.StringObjectMap.TryGetObject");

        var @params = stackalloc byte[28];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutValue.Pointer, @params + 16, 8, 8);

        _ptrTryGetObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTryGetObject, @params);
        _ptrTryGetObject.FunctionFlags |= (ulong)EFunctionFlags.Native;

        OutValue = new(*(nint*)(@params + 16));

        return *(bool*)(@params + 24);
    }

    // Function Core.StringObjectMap.TryGet
    // 0x3750E0
    // (Final | Public | NetValidate)
    public unsafe class TryGet_Parameters : BaseObject {
        public TryGet_Parameters() { }
        public TryGet_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTryGet;
    public void TryGet() {
        _ptrTryGet ??= FindFunction("Function Core.StringObjectMap.TryGet");

        ProcessEvent(_ptrTryGet, null);
    }

    // Function Core.StringObjectMap.GetObject
    // 0x32EBC0
    // (Final | Native | Public)
    public unsafe class GetObject_Parameters : BaseObject {
        public GetObject_Parameters() { }
        public GetObject_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringObjectMap.GetObject.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty Core.StringObjectMap.GetObject.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrGetObject;
    public UObject GetObject(FString Key) {
        _ptrGetObject ??= FindFunction("Function Core.StringObjectMap.GetObject");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrGetObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetObject, @params);
        _ptrGetObject.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 16));
    }

    // Function Core.StringObjectMap.Get
    // 0x3750E0
    // (Final | Public | NetValidate)
    public unsafe class Get_Parameters : BaseObject {
        public Get_Parameters() { }
        public Get_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrGet;
    public void Get() {
        _ptrGet ??= FindFunction("Function Core.StringObjectMap.Get");

        ProcessEvent(_ptrGet, null);
    }

    // Function Core.StringObjectMap.Set
    // 0x32E9A0
    // (Final | Native | Public)
    public unsafe class Set_Parameters : BaseObject {
        public Set_Parameters() { }
        public Set_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringObjectMap.Set.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty Core.StringObjectMap.Set.Value
        // 0x10 (0x8)
        // (Param)
        public UObject Value {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrSet;
    public void Set(FString Key, UObject Value) {
        _ptrSet ??= FindFunction("Function Core.StringObjectMap.Set");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 8, 8);

        _ptrSet.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSet, @params);
        _ptrSet.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.StringObjectMap");
            return _staticClass;
        }
    }
}

// Class Core.Component
// 0x10 (0x60 - 0x70)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UComponent : UObject {
    public UComponent() { }
    public UComponent(nint pointer) : base(pointer) { }


    // ClassProperty Core.Component.TemplateOwnerClass
    // 0x60 (0x8)
    // (Const | Native)
    public UClass TemplateOwnerClass {
        get {
            var pointer = *(nint*)(Pointer + 96);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 96) = value.Pointer;
    }

    // NameProperty Core.Component.TemplateName
    // 0x68 (0x8)
    // (Const | Native)
    public FName TemplateName {
        get => new(Pointer + 104);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 104), 8, 8);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Component");
            return _staticClass;
        }
    }
}

// Class Core.StringMap
// 0x68 (0x70 - 0xD8)
// (Compiled | Parsed | Native)
public unsafe partial class UStringMap : UComponent {
    public UStringMap() { }
    public UStringMap(nint pointer) : base(pointer) { }


    // StructProperty Core.StringMap.Map
    // 0x70 (0x50)
    // (Const | Native)
    public FMap_Mirror Map {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 80, 80);
    }

    // DelegateProperty Core.StringMap.__PairCallback__Delegate
    // 0xC0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __PairCallback__Delegate {
        get => new(Pointer + 192);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 192), 24, 24);
    }


    // Function Core.StringMap.ForEach
    // 0x32E8E0
    // (Final | Native | Public)
    public unsafe class ForEach_Parameters : BaseObject {
        public ForEach_Parameters() { }
        public ForEach_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.StringMap.ForEach.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }
    }
    private static UFunction _ptrForEach;
    public void ForEach(FScriptDelegate Callback) {
        _ptrForEach ??= FindFunction("Function Core.StringMap.ForEach");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        _ptrForEach.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrForEach, @params);
        _ptrForEach.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.StringMap.Append
    // 0x32E860
    // (Final | Native | Public)
    public unsafe class Append_Parameters : BaseObject {
        public Append_Parameters() { }
        public Append_Parameters(nint pointer) : base(pointer) { }

        // ComponentProperty Core.StringMap.Append.Other
        // 0x0 (0x8)
        // (Param | EditInline)
        public UStringMap Other {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrAppend;
    public void Append(UStringMap Other) {
        _ptrAppend ??= FindFunction("Function Core.StringMap.Append");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Other.Pointer, @params, 8, 8);

        _ptrAppend.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAppend, @params);
        _ptrAppend.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.StringMap.Contains
    // 0x32E7A0
    // (Final | Native | Public)
    public unsafe class Contains_Parameters : BaseObject {
        public Contains_Parameters() { }
        public Contains_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringMap.Contains.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // BoolProperty Core.StringMap.Contains.ReturnValue
        // 0x10 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 16) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 16) |= 0x1;
                else *(uint*)(Pointer + 16) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrContains;
    public bool Contains(FString Key) {
        _ptrContains ??= FindFunction("Function Core.StringMap.Contains");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrContains.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrContains, @params);
        _ptrContains.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 16);
    }

    // Function Core.StringMap.Remove
    // 0x32E6F0
    // (Final | Native | Public)
    public unsafe class Remove_Parameters : BaseObject {
        public Remove_Parameters() { }
        public Remove_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringMap.Remove.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrRemove;
    public void Remove(FString Key) {
        _ptrRemove ??= FindFunction("Function Core.StringMap.Remove");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrRemove.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemove, @params);
        _ptrRemove.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.StringMap.TryGet
    // 0x32E590
    // (Final | Native | Public | HasOutParams)
    public unsafe class TryGet_Parameters : BaseObject {
        public TryGet_Parameters() { }
        public TryGet_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringMap.TryGet.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.StringMap.TryGet.OutValue
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString OutValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core.StringMap.TryGet.ReturnValue
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrTryGet;
    public bool TryGet(FString Key, ref FString OutValue) {
        _ptrTryGet ??= FindFunction("Function Core.StringMap.TryGet");

        var @params = stackalloc byte[36];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)OutValue.Pointer, @params + 16, 16, 16);

        _ptrTryGet.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrTryGet, @params);
        _ptrTryGet.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutValuePtr, 16, 16);
        OutValue = new(_OutValuePtr) { Allocated = true };

        return *(bool*)(@params + 32);
    }

    // Function Core.StringMap.Get
    // 0x32E440
    // (Final | Native | Public)
    public unsafe class Get_Parameters : BaseObject {
        public Get_Parameters() { }
        public Get_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringMap.Get.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.StringMap.Get.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrGet;
    public FString Get(FString Key) {
        _ptrGet ??= FindFunction("Function Core.StringMap.Get");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);

        _ptrGet.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGet, @params);
        _ptrGet.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.StringMap.Set
    // 0x32E290
    // (Final | Native | Public)
    public unsafe class Set_Parameters : BaseObject {
        public Set_Parameters() { }
        public Set_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringMap.Set.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.StringMap.Set.Value
        // 0x10 (0x10)
        // (Param | CoerceParam | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrSet;
    public void Set(FString Key, FString Value) {
        _ptrSet ??= FindFunction("Function Core.StringMap.Set");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);

        _ptrSet.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSet, @params);
        _ptrSet.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.StringMap.PairCallback
    // 0x3750E0
    // (Final | Private | Delegate)
    public unsafe class PairCallback_Parameters : BaseObject {
        public PairCallback_Parameters() { }
        public PairCallback_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.StringMap.PairCallback.Key
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Key {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.StringMap.PairCallback.Value
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrPairCallback;
    public void PairCallback(FString Key, FString Value) {
        _ptrPairCallback ??= FindFunction("Function Core.StringMap.PairCallback");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Key.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);

        ProcessEvent(_ptrPairCallback, @params);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.StringMap");
            return _staticClass;
        }
    }
}

// Class Core.ObjectProvider
// 0x170 (0x70 - 0x1E0)
// (Compiled | Parsed | Native | Hidden)
public unsafe partial class UObjectProvider : UComponent {
    public UObjectProvider() { }
    public UObjectProvider(nint pointer) : base(pointer) { }


    // StructProperty Core.ObjectProvider.VfTable_FObjectDestructionSubscriber
    // 0x70 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FObjectDestructionSubscriber {
        get => *(nint*)(Pointer + 112);
        set => *(nint*)(Pointer + 112) = value;
    }

    // ArrayProperty Core.ObjectProvider.MyObjects
    // 0x78 (0x10)
    // (Const | Transient | NeedCtorLink | PrivateWrite)
    public PointerTArray<UObject> MyObjects {
        get => new(Pointer + 120);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 120), 16, 16);
    }

    // StructProperty Core.ObjectProvider.ObjectRefs
    // 0x88 (0x50)
    // (Const | Native | Transient)
    public FMap_Mirror ObjectRefs {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 80, 80);
    }

    // ArrayProperty Core.ObjectProvider.TreeObjects
    // 0xD8 (0x10)
    // (Const | Transient | NeedCtorLink)
    public PointerTArray<UObject> TreeObjects {
        get => new(Pointer + 216);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 216), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.SubscribedToAdds
    // 0xE8 (0x10)
    // (Const | Transient | NeedCtorLink)
    public StructTArray<FObjectProviderSubscription> SubscribedToAdds {
        get => new(Pointer + 232, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 232), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.SubscribedToRemoves
    // 0xF8 (0x10)
    // (Const | Transient | NeedCtorLink)
    public StructTArray<FObjectProviderSubscription> SubscribedToRemoves {
        get => new(Pointer + 248, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 248), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.SubscribedToLists
    // 0x108 (0x10)
    // (Const | Transient | NeedCtorLink)
    public StructTArray<FObjectProviderSubscription> SubscribedToLists {
        get => new(Pointer + 264, 40);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 264), 16, 16);
    }

    // StructProperty Core.ObjectProvider.Injections
    // 0x118 (0x10)
    // (Const | Native | Transient)
    public FArray_Mirror Injections {
        get => new(Pointer + 280);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 280), 16, 16);
    }

    // StructProperty Core.ObjectProvider.InterfaceInjections
    // 0x128 (0x10)
    // (Const | Native | Transient)
    public FArray_Mirror InterfaceInjections {
        get => new(Pointer + 296);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 296), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.PendingInjectionClasses
    // 0x138 (0x10)
    // (Const | Transient | NeedCtorLink)
    public PointerTArray<UClass> PendingInjectionClasses {
        get => new(Pointer + 312);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 312), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.PendingCallbacks
    // 0x148 (0x10)
    // (Const | Transient | NeedCtorLink)
    public StructTArray<FObjectProviderPendingCallback> PendingCallbacks {
        get => new(Pointer + 328, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 328), 16, 16);
    }

    // ByteProperty Core.ObjectProvider.bTriggeringCallbacks
    // 0x158 (0x1)
    // (Const | Transient)
    public byte bTriggeringCallbacks {
        get => *(byte*)(Pointer + 344);
        set => *(byte*)(Pointer + 344) = value;
    }

    // MISSED OFFSET: 0x7

    // ComponentProperty Core.ObjectProvider.Parent
    // 0x160 (0x8)
    // (Const | ExportObject | Transient | Component | EditInline)
    public UObjectProvider Parent {
        get {
            var pointer = *(nint*)(Pointer + 352);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 352) = value.Pointer;
    }

    // ArrayProperty Core.ObjectProvider.Children
    // 0x168 (0x10)
    // (Const | ExportObject | Transient | Component | NeedCtorLink | EditInline)
    public PointerTArray<UObjectProvider> Children {
        get => new(Pointer + 360);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 360), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.Proxies
    // 0x178 (0x10)
    // (Const | ExportObject | Transient | Component | NeedCtorLink | EditInline)
    public PointerTArray<UObjectProvider> Proxies {
        get => new(Pointer + 376);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 376), 16, 16);
    }

    // ArrayProperty Core.ObjectProvider.PendingInjectionCallbacks
    // 0x188 (0x10)
    // (Const | Transient | NeedCtorLink)
    public StructTArray<FObjectProviderPendingCallback> PendingInjectionCallbacks {
        get => new(Pointer + 392, 32);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 392), 16, 16);
    }

    // DelegateProperty Core.ObjectProvider.__ObjectSubscriptionCallback__Delegate
    // 0x198 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __ObjectSubscriptionCallback__Delegate {
        get => new(Pointer + 408);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 408), 24, 24);
    }

    // DelegateProperty Core.ObjectProvider.__ObjectListSubscriptionCallback__Delegate
    // 0x1B0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __ObjectListSubscriptionCallback__Delegate {
        get => new(Pointer + 432);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 432), 24, 24);
    }

    // DelegateProperty Core.ObjectProvider.__ObjectChangeCallback__Delegate
    // 0x1C8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __ObjectChangeCallback__Delegate {
        get => new(Pointer + 456);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 456), 24, 24);
    }


    // Function Core.ObjectProvider.SetParent
    // 0x32E210
    // (Final | Native | Public)
    public unsafe class SetParent_Parameters : BaseObject {
        public SetParent_Parameters() { }
        public SetParent_Parameters(nint pointer) : base(pointer) { }

        // ComponentProperty Core.ObjectProvider.SetParent.InParent
        // 0x0 (0x8)
        // (Param | EditInline)
        public UObjectProvider InParent {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrSetParent;
    public void SetParent(UObjectProvider InParent) {
        _ptrSetParent ??= FindFunction("Function Core.ObjectProvider.SetParent");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)InParent.Pointer, @params, 8, 8);

        _ptrSetParent.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetParent, @params);
        _ptrSetParent.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.RemoveProxy
    // 0x32E190
    // (Final | Native | Public)
    public unsafe class RemoveProxy_Parameters : BaseObject {
        public RemoveProxy_Parameters() { }
        public RemoveProxy_Parameters(nint pointer) : base(pointer) { }

        // ComponentProperty Core.ObjectProvider.RemoveProxy.InProxy
        // 0x0 (0x8)
        // (Param | EditInline)
        public UObjectProvider InProxy {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrRemoveProxy;
    public void RemoveProxy(UObjectProvider InProxy) {
        _ptrRemoveProxy ??= FindFunction("Function Core.ObjectProvider.RemoveProxy");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)InProxy.Pointer, @params, 8, 8);

        _ptrRemoveProxy.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveProxy, @params);
        _ptrRemoveProxy.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.AddProxy
    // 0x32E110
    // (Final | Native | Public)
    public unsafe class AddProxy_Parameters : BaseObject {
        public AddProxy_Parameters() { }
        public AddProxy_Parameters(nint pointer) : base(pointer) { }

        // ComponentProperty Core.ObjectProvider.AddProxy.InProxy
        // 0x0 (0x8)
        // (Param | EditInline)
        public UObjectProvider InProxy {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrAddProxy;
    public void AddProxy(UObjectProvider InProxy) {
        _ptrAddProxy ??= FindFunction("Function Core.ObjectProvider.AddProxy");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)InProxy.Pointer, @params, 8, 8);

        _ptrAddProxy.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddProxy, @params);
        _ptrAddProxy.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.SetSingleton
    // 0x32E050
    // (Final | Native | Public)
    public unsafe class SetSingleton_Parameters : BaseObject {
        public SetSingleton_Parameters() { }
        public SetSingleton_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.SetSingleton.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.SetSingleton.Replacement
        // 0x8 (0x8)
        // (Param)
        public UObject Replacement {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrSetSingleton;
    public void SetSingleton(UClass ObjClass, UObject Replacement) {
        _ptrSetSingleton ??= FindFunction("Function Core.ObjectProvider.SetSingleton");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Replacement.Pointer, @params + 8, 8, 8);

        _ptrSetSingleton.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSetSingleton, @params);
        _ptrSetSingleton.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.Replace
    // 0x32DF90
    // (Final | Native | Public)
    public unsafe class Replace_Parameters : BaseObject {
        public Replace_Parameters() { }
        public Replace_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.Replace.Existing
        // 0x0 (0x8)
        // (Param)
        public UObject Existing {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.Replace.Replacement
        // 0x8 (0x8)
        // (Param)
        public UObject Replacement {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrReplace;
    public void Replace(UObject Existing, UObject Replacement) {
        _ptrReplace ??= FindFunction("Function Core.ObjectProvider.Replace");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Existing.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Replacement.Pointer, @params + 8, 8, 8);

        _ptrReplace.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrReplace, @params);
        _ptrReplace.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.AddAndRemoveObjects
    // 0x319BB0
    // (Final | Native | Public | HasOutParams)
    public unsafe class AddAndRemoveObjects_Parameters : BaseObject {
        public AddAndRemoveObjects_Parameters() { }
        public AddAndRemoveObjects_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.ObjectProvider.AddAndRemoveObjects.AddObjects
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public PointerTArray<UObject> AddObjects {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.ObjectProvider.AddAndRemoveObjects.RemoveObjects
        // 0x10 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public PointerTArray<UObject> RemoveObjects {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrAddAndRemoveObjects;
    public void AddAndRemoveObjects(ref PointerTArray<UObject> AddObjects, ref PointerTArray<UObject> RemoveObjects) {
        _ptrAddAndRemoveObjects ??= FindFunction("Function Core.ObjectProvider.AddAndRemoveObjects");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)AddObjects.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)RemoveObjects.Pointer, @params + 16, 16, 16);

        _ptrAddAndRemoveObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddAndRemoveObjects, @params);
        _ptrAddAndRemoveObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _AddObjectsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_AddObjectsPtr, 16, 16);
        AddObjects = new(_AddObjectsPtr) { Allocated = true };
        var _RemoveObjectsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_RemoveObjectsPtr, 16, 16);
        RemoveObjects = new(_RemoveObjectsPtr) { Allocated = true };
    }

    // Function Core.ObjectProvider.RemoveObjects
    // 0x31A5B0
    // (Final | Native | Public | HasOutParams)
    public unsafe class RemoveObjects_Parameters : BaseObject {
        public RemoveObjects_Parameters() { }
        public RemoveObjects_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.ObjectProvider.RemoveObjects.InObjects
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public PointerTArray<UObject> InObjects {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrRemoveObjects;
    public void RemoveObjects(ref PointerTArray<UObject> InObjects) {
        _ptrRemoveObjects ??= FindFunction("Function Core.ObjectProvider.RemoveObjects");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)InObjects.Pointer, @params, 16, 16);

        _ptrRemoveObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveObjects, @params);
        _ptrRemoveObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InObjectsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InObjectsPtr, 16, 16);
        InObjects = new(_InObjectsPtr) { Allocated = true };
    }

    // Function Core.ObjectProvider.RemoveAllObjects
    // 0x32DF10
    // (Final | Native | Public)
    public unsafe class RemoveAllObjects_Parameters : BaseObject {
        public RemoveAllObjects_Parameters() { }
        public RemoveAllObjects_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.RemoveAllObjects.ObjectClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjectClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrRemoveAllObjects;
    public void RemoveAllObjects(UClass ObjectClass) {
        _ptrRemoveAllObjects ??= FindFunction("Function Core.ObjectProvider.RemoveAllObjects");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)ObjectClass.Pointer, @params, 8, 8);

        _ptrRemoveAllObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveAllObjects, @params);
        _ptrRemoveAllObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.RemoveObject
    // 0x32DE90
    // (Final | Native | Public)
    public unsafe class RemoveObject_Parameters : BaseObject {
        public RemoveObject_Parameters() { }
        public RemoveObject_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.RemoveObject.Obj
        // 0x0 (0x8)
        // (Param)
        public UObject Obj {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrRemoveObject;
    public void RemoveObject(UObject Obj) {
        _ptrRemoveObject ??= FindFunction("Function Core.ObjectProvider.RemoveObject");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Obj.Pointer, @params, 8, 8);

        _ptrRemoveObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrRemoveObject, @params);
        _ptrRemoveObject.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.AddObjects
    // 0x319CE0
    // (Final | Native | Public | HasOutParams)
    public unsafe class AddObjects_Parameters : BaseObject {
        public AddObjects_Parameters() { }
        public AddObjects_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.ObjectProvider.AddObjects.InObjects
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public PointerTArray<UObject> InObjects {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }
    }
    private static UFunction _ptrAddObjects;
    public void AddObjects(ref PointerTArray<UObject> InObjects) {
        _ptrAddObjects ??= FindFunction("Function Core.ObjectProvider.AddObjects");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)InObjects.Pointer, @params, 16, 16);

        _ptrAddObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddObjects, @params);
        _ptrAddObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InObjectsPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InObjectsPtr, 16, 16);
        InObjects = new(_InObjectsPtr) { Allocated = true };
    }

    // Function Core.ObjectProvider.AddObject
    // 0x32DE10
    // (Final | Native | Public)
    public unsafe class AddObject_Parameters : BaseObject {
        public AddObject_Parameters() { }
        public AddObject_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.AddObject.Obj
        // 0x0 (0x8)
        // (Param)
        public UObject Obj {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrAddObject;
    public void AddObject(UObject Obj) {
        _ptrAddObject ??= FindFunction("Function Core.ObjectProvider.AddObject");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Obj.Pointer, @params, 8, 8);

        _ptrAddObject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAddObject, @params);
        _ptrAddObject.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.GetExactCount
    // 0x32DD80
    // (Final | Native | Public)
    public unsafe class GetExactCount_Parameters : BaseObject {
        public GetExactCount_Parameters() { }
        public GetExactCount_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.GetExactCount.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // IntProperty Core.ObjectProvider.GetExactCount.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGetExactCount;
    public int GetExactCount(UClass ObjClass) {
        _ptrGetExactCount ??= FindFunction("Function Core.ObjectProvider.GetExactCount");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetExactCount.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetExactCount, @params);
        _ptrGetExactCount.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 8);
    }

    // Function Core.ObjectProvider.GetCount
    // 0x32DCF0
    // (Final | Native | Public)
    public unsafe class GetCount_Parameters : BaseObject {
        public GetCount_Parameters() { }
        public GetCount_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.GetCount.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // IntProperty Core.ObjectProvider.GetCount.ReturnValue
        // 0x8 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 8);
            set => *(int*)(Pointer + 8) = value;
        }
    }
    private static UFunction _ptrGetCount;
    public int GetCount(UClass ObjClass) {
        _ptrGetCount ??= FindFunction("Function Core.ObjectProvider.GetCount");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetCount.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetCount, @params);
        _ptrGetCount.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(int*)(@params + 8);
    }

    // Function Core.ObjectProvider.GetOrCreate
    // 0x32DC60
    // (Final | Native | Public)
    public unsafe class GetOrCreate_Parameters : BaseObject {
        public GetOrCreate_Parameters() { }
        public GetOrCreate_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.GetOrCreate.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.GetOrCreate.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetOrCreate;
    public UObject GetOrCreate(UClass ObjClass) {
        _ptrGetOrCreate ??= FindFunction("Function Core.ObjectProvider.GetOrCreate");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetOrCreate.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetOrCreate, @params);
        _ptrGetOrCreate.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectProvider.GetExact
    // 0x32DBD0
    // (Final | Native | Public)
    public unsafe class GetExact_Parameters : BaseObject {
        public GetExact_Parameters() { }
        public GetExact_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.GetExact.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.GetExact.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetExact;
    public UObject GetExact(UClass ObjClass) {
        _ptrGetExact ??= FindFunction("Function Core.ObjectProvider.GetExact");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetExact.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetExact, @params);
        _ptrGetExact.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectProvider.GetUnsafe
    // 0x32DB40
    // (Final | Native | Public)
    public unsafe class GetUnsafe_Parameters : BaseObject {
        public GetUnsafe_Parameters() { }
        public GetUnsafe_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.GetUnsafe.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.GetUnsafe.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGetUnsafe;
    public UObject GetUnsafe(UClass ObjClass) {
        _ptrGetUnsafe ??= FindFunction("Function Core.ObjectProvider.GetUnsafe");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGetUnsafe.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetUnsafe, @params);
        _ptrGetUnsafe.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectProvider.Get
    // 0x32DAB0
    // (Final | Native | Public)
    public unsafe class Get_Parameters : BaseObject {
        public Get_Parameters() { }
        public Get_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.Get.ObjClass
        // 0x0 (0x8)
        // (Param)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.Get.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam | CoerceParam)
        public UObject ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrGet;
    public UObject Get(UClass ObjClass) {
        _ptrGet ??= FindFunction("Function Core.ObjectProvider.Get");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)ObjClass.Pointer, @params, 8, 8);

        _ptrGet.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGet, @params);
        _ptrGet.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectProvider.AllObjects
    // 0x31A1F0
    // (Final | Iterator | Native | HasOptionalParams | Public | HasOutParams)
    public unsafe class AllObjects_Parameters : BaseObject {
        public AllObjects_Parameters() { }
        public AllObjects_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.AllObjects.BaseClass
        // 0x0 (0x8)
        // (Param)
        public UClass BaseClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.AllObjects.Obj
        // 0x8 (0x8)
        // (Param | OutParam)
        public UObject Obj {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }

        // ClassProperty Core.ObjectProvider.AllObjects.InterfaceClass
        // 0x10 (0x8)
        // (OptionalParam | Param)
        public UClass InterfaceClass {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrAllObjects;
    public void AllObjects(UClass BaseClass, ref UObject Obj, UClass InterfaceClass = null) {
        _ptrAllObjects ??= FindFunction("Function Core.ObjectProvider.AllObjects");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)BaseClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Obj.Pointer, @params + 8, 8, 8);
        if (InterfaceClass != null) System.Buffer.MemoryCopy((void*)InterfaceClass.Pointer, @params + 16, 8, 8);

        _ptrAllObjects.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrAllObjects, @params);
        _ptrAllObjects.FunctionFlags |= (ulong)EFunctionFlags.Native;

        Obj = new(*(nint*)(@params + 8));
    }

    // Function Core.ObjectProvider.IsRegisteredForInjection
    // 0x32DA20
    // (Final | Native | Public)
    public unsafe class IsRegisteredForInjection_Parameters : BaseObject {
        public IsRegisteredForInjection_Parameters() { }
        public IsRegisteredForInjection_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.IsRegisteredForInjection.Subscriber
        // 0x0 (0x8)
        // (Param)
        public UObject Subscriber {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // BoolProperty Core.ObjectProvider.IsRegisteredForInjection.ReturnValue
        // 0x8 (0x4)
        // Bitmask: 0x00000001
        // (Param | OutParam | ReturnParam)
        public bool ReturnValue {
            get => (*(uint*)(Pointer + 8) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 8) |= 0x1;
                else *(uint*)(Pointer + 8) &= ~(uint)0x1;
            }
        }
    }
    private static UFunction _ptrIsRegisteredForInjection;
    public bool IsRegisteredForInjection(UObject Subscriber) {
        _ptrIsRegisteredForInjection ??= FindFunction("Function Core.ObjectProvider.IsRegisteredForInjection");

        var @params = stackalloc byte[12];
        System.Buffer.MemoryCopy((void*)Subscriber.Pointer, @params, 8, 8);

        _ptrIsRegisteredForInjection.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrIsRegisteredForInjection, @params);
        _ptrIsRegisteredForInjection.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(bool*)(@params + 8);
    }

    // Function Core.ObjectProvider.InjectDelayed
    // 0x32D9A0
    // (Final | Native | Public)
    public unsafe class InjectDelayed_Parameters : BaseObject {
        public InjectDelayed_Parameters() { }
        public InjectDelayed_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.InjectDelayed.Subscriber
        // 0x0 (0x8)
        // (Param)
        public UObject Subscriber {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrInjectDelayed;
    public void InjectDelayed(UObject Subscriber) {
        _ptrInjectDelayed ??= FindFunction("Function Core.ObjectProvider.InjectDelayed");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Subscriber.Pointer, @params, 8, 8);

        _ptrInjectDelayed.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrInjectDelayed, @params);
        _ptrInjectDelayed.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.Inject
    // 0x32D920
    // (Final | Native | Public)
    public unsafe class Inject_Parameters : BaseObject {
        public Inject_Parameters() { }
        public Inject_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.Inject.Subscriber
        // 0x0 (0x8)
        // (Param)
        public UObject Subscriber {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrInject;
    public void Inject(UObject Subscriber) {
        _ptrInject ??= FindFunction("Function Core.ObjectProvider.Inject");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Subscriber.Pointer, @params, 8, 8);

        _ptrInject.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrInject, @params);
        _ptrInject.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.UnsubscribeAll
    // 0x32D8A0
    // (Final | Native | Public)
    public unsafe class UnsubscribeAll_Parameters : BaseObject {
        public UnsubscribeAll_Parameters() { }
        public UnsubscribeAll_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.UnsubscribeAll.Subscriber
        // 0x0 (0x8)
        // (Param)
        public UObject Subscriber {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrUnsubscribeAll;
    public void UnsubscribeAll(UObject Subscriber) {
        _ptrUnsubscribeAll ??= FindFunction("Function Core.ObjectProvider.UnsubscribeAll");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Subscriber.Pointer, @params, 8, 8);

        _ptrUnsubscribeAll.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUnsubscribeAll, @params);
        _ptrUnsubscribeAll.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.Unsubscribe
    // 0x32D770
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class Unsubscribe_Parameters : BaseObject {
        public Unsubscribe_Parameters() { }
        public Unsubscribe_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.ObjectProvider.Unsubscribe.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // DelegateProperty Core.ObjectProvider.Unsubscribe.Callback2
        // 0x18 (0x18)
        // (OptionalParam | Param | NeedCtorLink)
        public FScriptDelegate Callback2 {
            get => new(Pointer + 24);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 24), 24, 24);
        }
    }
    private static UFunction _ptrUnsubscribe;
    public void Unsubscribe(FScriptDelegate Callback, FScriptDelegate Callback2 = null) {
        _ptrUnsubscribe ??= FindFunction("Function Core.ObjectProvider.Unsubscribe");

        var @params = stackalloc byte[48];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);
        if (Callback2 != null) System.Buffer.MemoryCopy((void*)Callback2.Pointer, @params + 24, 24, 24);

        _ptrUnsubscribe.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrUnsubscribe, @params);
        _ptrUnsubscribe.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.SubscribeList
    // 0x32D680
    // (Final | Native | Public)
    public unsafe class SubscribeList_Parameters : BaseObject {
        public SubscribeList_Parameters() { }
        public SubscribeList_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.SubscribeList.BaseClass
        // 0x0 (0x8)
        // (Param)
        public UClass BaseClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // DelegateProperty Core.ObjectProvider.SubscribeList.Callback
        // 0x8 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }
    }
    private static UFunction _ptrSubscribeList;
    public void SubscribeList(UClass BaseClass, FScriptDelegate Callback) {
        _ptrSubscribeList ??= FindFunction("Function Core.ObjectProvider.SubscribeList");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)BaseClass.Pointer, @params, 8, 8);
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params + 8, 24, 24);

        _ptrSubscribeList.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSubscribeList, @params);
        _ptrSubscribeList.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.SubscribeOnce
    // 0x32D530
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class SubscribeOnce_Parameters : BaseObject {
        public SubscribeOnce_Parameters() { }
        public SubscribeOnce_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.SubscribeOnce.BaseClass
        // 0x0 (0x8)
        // (Param)
        public UClass BaseClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // DelegateProperty Core.ObjectProvider.SubscribeOnce.OnAdd
        // 0x8 (0x18)
        // (OptionalParam | Param | NeedCtorLink)
        public FScriptDelegate OnAdd {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }

        // DelegateProperty Core.ObjectProvider.SubscribeOnce.OnRemove
        // 0x20 (0x18)
        // (OptionalParam | Param | NeedCtorLink)
        public FScriptDelegate OnRemove {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 24, 24);
        }
    }
    private static UFunction _ptrSubscribeOnce;
    public void SubscribeOnce(UClass BaseClass, FScriptDelegate OnAdd = null, FScriptDelegate OnRemove = null) {
        _ptrSubscribeOnce ??= FindFunction("Function Core.ObjectProvider.SubscribeOnce");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)BaseClass.Pointer, @params, 8, 8);
        if (OnAdd != null) System.Buffer.MemoryCopy((void*)OnAdd.Pointer, @params + 8, 24, 24);
        if (OnRemove != null) System.Buffer.MemoryCopy((void*)OnRemove.Pointer, @params + 32, 24, 24);

        _ptrSubscribeOnce.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSubscribeOnce, @params);
        _ptrSubscribeOnce.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.Subscribe
    // 0x32D3E0
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class Subscribe_Parameters : BaseObject {
        public Subscribe_Parameters() { }
        public Subscribe_Parameters(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.Subscribe.BaseClass
        // 0x0 (0x8)
        // (Param)
        public UClass BaseClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // DelegateProperty Core.ObjectProvider.Subscribe.OnAdd
        // 0x8 (0x18)
        // (OptionalParam | Param | NeedCtorLink)
        public FScriptDelegate OnAdd {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }

        // DelegateProperty Core.ObjectProvider.Subscribe.OnRemove
        // 0x20 (0x18)
        // (OptionalParam | Param | NeedCtorLink)
        public FScriptDelegate OnRemove {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 24, 24);
        }
    }
    private static UFunction _ptrSubscribe;
    public void Subscribe(UClass BaseClass, FScriptDelegate OnAdd = null, FScriptDelegate OnRemove = null) {
        _ptrSubscribe ??= FindFunction("Function Core.ObjectProvider.Subscribe");

        var @params = stackalloc byte[56];
        System.Buffer.MemoryCopy((void*)BaseClass.Pointer, @params, 8, 8);
        if (OnAdd != null) System.Buffer.MemoryCopy((void*)OnAdd.Pointer, @params + 8, 24, 24);
        if (OnRemove != null) System.Buffer.MemoryCopy((void*)OnRemove.Pointer, @params + 32, 24, 24);

        _ptrSubscribe.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrSubscribe, @params);
        _ptrSubscribe.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.ObjectProvider.ObjectChangeCallback
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class ObjectChangeCallback_Parameters : BaseObject {
        public ObjectChangeCallback_Parameters() { }
        public ObjectChangeCallback_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrObjectChangeCallback;
    public void ObjectChangeCallback() {
        _ptrObjectChangeCallback ??= FindFunction("Function Core.ObjectProvider.ObjectChangeCallback");

        ProcessEvent(_ptrObjectChangeCallback, null);
    }

    // Function Core.ObjectProvider.ObjectListSubscriptionCallback
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class ObjectListSubscriptionCallback_Parameters : BaseObject {
        public ObjectListSubscriptionCallback_Parameters() { }
        public ObjectListSubscriptionCallback_Parameters(nint pointer) : base(pointer) { }

        // ComponentProperty Core.ObjectProvider.ObjectListSubscriptionCallback.Provider
        // 0x0 (0x8)
        // (Param | EditInline)
        public UObjectProvider Provider {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrObjectListSubscriptionCallback;
    public void ObjectListSubscriptionCallback(UObjectProvider Provider) {
        _ptrObjectListSubscriptionCallback ??= FindFunction("Function Core.ObjectProvider.ObjectListSubscriptionCallback");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Provider.Pointer, @params, 8, 8);

        ProcessEvent(_ptrObjectListSubscriptionCallback, @params);
    }

    // Function Core.ObjectProvider.ObjectSubscriptionCallback
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class ObjectSubscriptionCallback_Parameters : BaseObject {
        public ObjectSubscriptionCallback_Parameters() { }
        public ObjectSubscriptionCallback_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.ObjectSubscriptionCallback.Obj
        // 0x0 (0x8)
        // (Param)
        public UObject Obj {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrObjectSubscriptionCallback;
    public void ObjectSubscriptionCallback(UObject Obj) {
        _ptrObjectSubscriptionCallback ??= FindFunction("Function Core.ObjectProvider.ObjectSubscriptionCallback");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)Obj.Pointer, @params, 8, 8);

        ProcessEvent(_ptrObjectSubscriptionCallback, @params);
    }


    // ScriptStruct Core.ObjectProvider.ObjectProviderPendingCallback
    // 0x20
    public unsafe class FObjectProviderPendingCallback : BaseObject {
        public FObjectProviderPendingCallback() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FObjectProviderPendingCallback(nint pointer) : base(pointer) { }

        // DelegateProperty Core.ObjectProvider.ObjectProviderPendingCallback.Callback
        // 0x0 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // ObjectProperty Core.ObjectProvider.ObjectProviderPendingCallback.Value
        // 0x18 (0x8)
        public UObject Value {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }

    // ScriptStruct Core.ObjectProvider.InterfacePropertyInjection
    // 0x10
    public unsafe class FInterfacePropertyInjection : BaseObject {
        public FInterfacePropertyInjection() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FInterfacePropertyInjection(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.InterfacePropertyInjection.Subscriber
        // 0x0 (0x8)
        public UObject Subscriber {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.InterfacePropertyInjection.Property
        // 0x8 (0x8)
        public UInterfaceProperty Property {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }

    // ScriptStruct Core.ObjectProvider.ObjectPropertyInjection
    // 0x10
    public unsafe class FObjectPropertyInjection : BaseObject {
        public FObjectPropertyInjection() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FObjectPropertyInjection(nint pointer) : base(pointer) { }

        // ObjectProperty Core.ObjectProvider.ObjectPropertyInjection.Subscriber
        // 0x0 (0x8)
        public UObject Subscriber {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.ObjectProvider.ObjectPropertyInjection.Property
        // 0x8 (0x8)
        public UObjectProperty Property {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }

    // ScriptStruct Core.ObjectProvider.ObjectProviderSubscription
    // 0x24
    public unsafe class FObjectProviderSubscription : BaseObject {
        public FObjectProviderSubscription() {
            Pointer = Marshal.AllocHGlobal(36);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 36);
            Allocated = true;
        }
        public FObjectProviderSubscription(nint pointer) : base(pointer) { }

        // ClassProperty Core.ObjectProvider.ObjectProviderSubscription.ObjClass
        // 0x0 (0x8)
        public UClass ObjClass {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // DelegateProperty Core.ObjectProvider.ObjectProviderSubscription.Callback
        // 0x8 (0x18)
        // (NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 24, 24);
        }

        // BoolProperty Core.ObjectProvider.ObjectProviderSubscription.bFireOnce
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        public bool bFireOnce {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ObjectProvider");
            return _staticClass;
        }
    }
}

// Class Core.DistributionVector
// 0xC (0x70 - 0x7C)
// (Abstract | Compiled | Parsed | Native | EditInlineNew | CollapseCategories)
public unsafe partial class UDistributionVector : UComponent {
    public UDistributionVector() { }
    public UDistributionVector(nint pointer) : base(pointer) { }


    // StructProperty Core.DistributionVector.VfTable_FCurveEdInterface
    // 0x70 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FCurveEdInterface {
        get => *(nint*)(Pointer + 112);
        set => *(nint*)(Pointer + 112) = value;
    }

    // BoolProperty Core.DistributionVector.bCanBeBaked
    // 0x78 (0x4)
    // Bitmask: 0x00000001
    // (Edit)
    public bool bCanBeBaked {
        get => (*(uint*)(Pointer + 120) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x1;
            else *(uint*)(Pointer + 120) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.DistributionVector.bIsDirty
    // 0x78 (0x4)
    // Bitmask: 0x00000002
    public bool bIsDirty {
        get => (*(uint*)(Pointer + 120) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x2;
            else *(uint*)(Pointer + 120) &= ~(uint)0x2;
        }
    }


    // Function Core.DistributionVector.GetVectorValue
    // 0x32D300
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GetVectorValue_Parameters : BaseObject {
        public GetVectorValue_Parameters() { }
        public GetVectorValue_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.DistributionVector.GetVectorValue.F
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public float F {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // IntProperty Core.DistributionVector.GetVectorValue.LastExtreme
        // 0x4 (0x4)
        // (OptionalParam | Param)
        public int LastExtreme {
            get => *(int*)(Pointer + 4);
            set => *(int*)(Pointer + 4) = value;
        }

        // StructProperty Core.DistributionVector.GetVectorValue.ReturnValue
        // 0x8 (0xC)
        // (Param | OutParam | ReturnParam)
        public FVector ReturnValue {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 12, 12);
        }
    }
    private static UFunction _ptrGetVectorValue;
    public FVector GetVectorValue(float F = 0, int LastExtreme = 0) {
        _ptrGetVectorValue ??= FindFunction("Function Core.DistributionVector.GetVectorValue");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy(&F, @params, 4, 4);
        System.Buffer.MemoryCopy(&LastExtreme, @params + 4, 4, 4);

        _ptrGetVectorValue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetVectorValue, @params);
        _ptrGetVectorValue.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 8, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    // ScriptStruct Core.DistributionVector.RawDistributionVector
    // 0x8 (0x20 - 0x28)
    public unsafe class FRawDistributionVector : UObject.FRawDistribution {
        public FRawDistributionVector() {
            Pointer = Marshal.AllocHGlobal(40);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 40);
            Allocated = true;
        }
        public FRawDistributionVector(nint pointer) : base(pointer) { }

        // ComponentProperty Core.DistributionVector.RawDistributionVector.Distribution
        // 0x20 (0x8)
        // (Edit | ExportObject | Component | NoClear | EditInline)
        public UDistributionVector Distribution {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }


    // Enum Core.DistributionVector.EDistributionVectorMirrorFlags
    public enum EDistributionVectorMirrorFlags : byte {
        EDVMF_Same = 0,
        EDVMF_Different = 1,
        EDVMF_Mirror = 2,
        EDVMF_MAX = 3
    }

    // Enum Core.DistributionVector.EDistributionVectorLockFlags
    public enum EDistributionVectorLockFlags : byte {
        EDVLF_None = 0,
        EDVLF_XY = 1,
        EDVLF_XZ = 2,
        EDVLF_YZ = 3,
        EDVLF_XYZ = 4,
        EDVLF_MAX = 5
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.DistributionVector");
            return _staticClass;
        }
    }
}

// Class Core.DistributionFloat
// 0xC (0x70 - 0x7C)
// (Abstract | Compiled | Parsed | Native | EditInlineNew | CollapseCategories)
public unsafe partial class UDistributionFloat : UComponent {
    public UDistributionFloat() { }
    public UDistributionFloat(nint pointer) : base(pointer) { }


    // StructProperty Core.DistributionFloat.VfTable_FCurveEdInterface
    // 0x70 (0x8)
    // (Const | Native | NoExport)
    public nint VfTable_FCurveEdInterface {
        get => *(nint*)(Pointer + 112);
        set => *(nint*)(Pointer + 112) = value;
    }

    // BoolProperty Core.DistributionFloat.bCanBeBaked
    // 0x78 (0x4)
    // Bitmask: 0x00000001
    // (Edit)
    public bool bCanBeBaked {
        get => (*(uint*)(Pointer + 120) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x1;
            else *(uint*)(Pointer + 120) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.DistributionFloat.bIsDirty
    // 0x78 (0x4)
    // Bitmask: 0x00000002
    public bool bIsDirty {
        get => (*(uint*)(Pointer + 120) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 120) |= 0x2;
            else *(uint*)(Pointer + 120) &= ~(uint)0x2;
        }
    }


    // Function Core.DistributionFloat.GetFloatValue
    // 0x32D260
    // (Final | Native | HasOptionalParams | Public)
    public unsafe class GetFloatValue_Parameters : BaseObject {
        public GetFloatValue_Parameters() { }
        public GetFloatValue_Parameters(nint pointer) : base(pointer) { }

        // FloatProperty Core.DistributionFloat.GetFloatValue.F
        // 0x0 (0x4)
        // (OptionalParam | Param)
        public float F {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.DistributionFloat.GetFloatValue.ReturnValue
        // 0x4 (0x4)
        // (Param | OutParam | ReturnParam)
        public float ReturnValue {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }
    }
    private static UFunction _ptrGetFloatValue;
    public float GetFloatValue(float F = 0) {
        _ptrGetFloatValue ??= FindFunction("Function Core.DistributionFloat.GetFloatValue");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy(&F, @params, 4, 4);

        _ptrGetFloatValue.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrGetFloatValue, @params);
        _ptrGetFloatValue.FunctionFlags |= (ulong)EFunctionFlags.Native;

        return *(float*)(@params + 4);
    }


    // ScriptStruct Core.DistributionFloat.MatineeRawDistributionFloat
    // 0x8 (0x28 - 0x30)
    public unsafe class FMatineeRawDistributionFloat : FRawDistributionFloat {
        public FMatineeRawDistributionFloat() {
            Pointer = Marshal.AllocHGlobal(48);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 48);
            Allocated = true;
        }
        public FMatineeRawDistributionFloat(nint pointer) : base(pointer) { }

        // FloatProperty Core.DistributionFloat.MatineeRawDistributionFloat.MatineeValue
        // 0x28 (0x4)
        public float MatineeValue {
            get => *(float*)(Pointer + 40);
            set => *(float*)(Pointer + 40) = value;
        }

        // BoolProperty Core.DistributionFloat.MatineeRawDistributionFloat.bInMatinee
        // 0x2C (0x4)
        // Bitmask: 0x00000001
        public bool bInMatinee {
            get => (*(uint*)(Pointer + 44) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 44) |= 0x1;
                else *(uint*)(Pointer + 44) &= ~(uint)0x1;
            }
        }
    }

    // ScriptStruct Core.DistributionFloat.RawDistributionFloat
    // 0x8 (0x20 - 0x28)
    public unsafe class FRawDistributionFloat : UObject.FRawDistribution {
        public FRawDistributionFloat() {
            Pointer = Marshal.AllocHGlobal(40);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 40);
            Allocated = true;
        }
        public FRawDistributionFloat(nint pointer) : base(pointer) { }

        // ComponentProperty Core.DistributionFloat.RawDistributionFloat.Distribution
        // 0x20 (0x8)
        // (Edit | ExportObject | Component | NoClear | EditInline)
        public UDistributionFloat Distribution {
            get {
                var pointer = *(nint*)(Pointer + 32);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 32) = value.Pointer;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.DistributionFloat");
            return _staticClass;
        }
    }
}

// Class Core.HelpCommandlet
// 0x4 (0xB4 - 0xB8)
// (Compiled | Transient | Parsed | Localized | Native)
public unsafe partial class UHelpCommandlet : UCommandlet {
    public UHelpCommandlet() { }
    public UHelpCommandlet(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x4


    // Function Core.HelpCommandlet.Main
    // 0x3750E0
    // (Event | Public)
    public unsafe class Main_Parameters : BaseObject {
        public Main_Parameters() { }
        public Main_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.HelpCommandlet.Main.Params
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Params {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.HelpCommandlet.Main.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrMain;
    public int Main(FString Params) {
        _ptrMain ??= FindFunction("Function Core.HelpCommandlet.Main");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Params.Pointer, @params, 16, 16);

        ProcessEvent(_ptrMain, @params);

        return *(int*)(@params + 16);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.HelpCommandlet");
            return _staticClass;
        }
    }
}

// Class Core.Commandlet
// 0x54 (0x60 - 0xB4)
// (Abstract | Compiled | Transient | Parsed | Localized | Native)
public unsafe partial class UCommandlet : UObject {
    public UCommandlet() { }
    public UCommandlet(nint pointer) : base(pointer) { }


    // StrProperty Core.Commandlet.HelpDescription
    // 0x60 (0x10)
    // (Const | Localized | NeedCtorLink)
    public FString HelpDescription {
        get => new(Pointer + 96);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // StrProperty Core.Commandlet.HelpUsage
    // 0x70 (0x10)
    // (Const | Localized | NeedCtorLink)
    public FString HelpUsage {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }

    // StrProperty Core.Commandlet.HelpWebLink
    // 0x80 (0x10)
    // (Const | Localized | NeedCtorLink)
    public FString HelpWebLink {
        get => new(Pointer + 128);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty Core.Commandlet.HelpParamNames
    // 0x90 (0x10)
    // (Const | Localized | NeedCtorLink)
    public StructTArray<FString> HelpParamNames {
        get => new(Pointer + 144, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }

    // ArrayProperty Core.Commandlet.HelpParamDescriptions
    // 0xA0 (0x10)
    // (Const | Localized | NeedCtorLink)
    public StructTArray<FString> HelpParamDescriptions {
        get => new(Pointer + 160, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 16, 16);
    }

    // BoolProperty Core.Commandlet.IsServer
    // 0xB0 (0x4)
    // Bitmask: 0x00000001
    public bool IsServer {
        get => (*(uint*)(Pointer + 176) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 176) |= 0x1;
            else *(uint*)(Pointer + 176) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.Commandlet.IsClient
    // 0xB0 (0x4)
    // Bitmask: 0x00000002
    public bool IsClient {
        get => (*(uint*)(Pointer + 176) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 176) |= 0x2;
            else *(uint*)(Pointer + 176) &= ~(uint)0x2;
        }
    }

    // BoolProperty Core.Commandlet.IsEditor
    // 0xB0 (0x4)
    // Bitmask: 0x00000004
    public bool IsEditor {
        get => (*(uint*)(Pointer + 176) & 0x4) != 0;
        set {
            if (value) *(uint*)(Pointer + 176) |= 0x4;
            else *(uint*)(Pointer + 176) &= ~(uint)0x4;
        }
    }

    // BoolProperty Core.Commandlet.LogToConsole
    // 0xB0 (0x4)
    // Bitmask: 0x00000008
    public bool LogToConsole {
        get => (*(uint*)(Pointer + 176) & 0x8) != 0;
        set {
            if (value) *(uint*)(Pointer + 176) |= 0x8;
            else *(uint*)(Pointer + 176) &= ~(uint)0x8;
        }
    }

    // BoolProperty Core.Commandlet.ShowErrorCount
    // 0xB0 (0x4)
    // Bitmask: 0x00000010
    public bool ShowErrorCount {
        get => (*(uint*)(Pointer + 176) & 0x10) != 0;
        set {
            if (value) *(uint*)(Pointer + 176) |= 0x10;
            else *(uint*)(Pointer + 176) &= ~(uint)0x10;
        }
    }


    // Function Core.Commandlet.Main
    // 0x3750E0
    // (Event | Public)
    public unsafe class Main_Parameters : BaseObject {
        public Main_Parameters() { }
        public Main_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Commandlet.Main.Params
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Params {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // IntProperty Core.Commandlet.Main.ReturnValue
        // 0x10 (0x4)
        // (Param | OutParam | ReturnParam)
        public int ReturnValue {
            get => *(int*)(Pointer + 16);
            set => *(int*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrMain;
    public int Main(FString Params) {
        _ptrMain ??= FindFunction("Function Core.Commandlet.Main");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Params.Pointer, @params, 16, 16);

        ProcessEvent(_ptrMain, @params);

        return *(int*)(@params + 16);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Commandlet");
            return _staticClass;
        }
    }
}

// Class Core.Breadcrumbs
// 0x8 (0x60 - 0x68)
// (Compiled | Parsed | Native)
public unsafe partial class UBreadcrumbs : UObject {
    public UBreadcrumbs() { }
    public UBreadcrumbs(nint pointer) : base(pointer) { }


    // StructProperty Core.Breadcrumbs.BreadcrumbInstance
    // 0x60 (0x8)
    // (Native)
    public nint BreadcrumbInstance {
        get => *(nint*)(Pointer + 96);
        set => *(nint*)(Pointer + 96) = value;
    }


    // Function Core.Breadcrumbs.BreadcrumbFloat
    // 0x330FD0
    // (Final | Native | Public)
    public unsafe class BreadcrumbFloat_Parameters : BaseObject {
        public BreadcrumbFloat_Parameters() { }
        public BreadcrumbFloat_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Breadcrumbs.BreadcrumbFloat.Category
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Category {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // FloatProperty Core.Breadcrumbs.BreadcrumbFloat.Value
        // 0x10 (0x4)
        // (Param)
        public float Value {
            get => *(float*)(Pointer + 16);
            set => *(float*)(Pointer + 16) = value;
        }
    }
    private static UFunction _ptrBreadcrumbFloat;
    public void BreadcrumbFloat(FString Category, float Value) {
        _ptrBreadcrumbFloat ??= FindFunction("Function Core.Breadcrumbs.BreadcrumbFloat");

        var @params = stackalloc byte[20];
        System.Buffer.MemoryCopy((void*)Category.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy(&Value, @params + 16, 4, 4);

        _ptrBreadcrumbFloat.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrBreadcrumbFloat, @params);
        _ptrBreadcrumbFloat.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.Breadcrumbs.BreadcrumbString
    // 0x330ED0
    // (Final | Native | Public)
    public unsafe class BreadcrumbString_Parameters : BaseObject {
        public BreadcrumbString_Parameters() { }
        public BreadcrumbString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Breadcrumbs.BreadcrumbString.Category
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Category {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Breadcrumbs.BreadcrumbString.Value
        // 0x10 (0x10)
        // (Param | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrBreadcrumbString;
    public void BreadcrumbString(FString Category, FString Value) {
        _ptrBreadcrumbString ??= FindFunction("Function Core.Breadcrumbs.BreadcrumbString");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Category.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Value.Pointer, @params + 16, 16, 16);

        _ptrBreadcrumbString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrBreadcrumbString, @params);
        _ptrBreadcrumbString.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }


    // ScriptStruct Core.Breadcrumbs.BreadcrumbEntry
    // 0x20
    public unsafe class FBreadcrumbEntry : BaseObject {
        public FBreadcrumbEntry() {
            Pointer = Marshal.AllocHGlobal(32);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 32);
            Allocated = true;
        }
        public FBreadcrumbEntry(nint pointer) : base(pointer) { }

        // StrProperty Core.Breadcrumbs.BreadcrumbEntry.Category
        // 0x0 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString Category {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Breadcrumbs.BreadcrumbEntry.Value
        // 0x10 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString Value {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Breadcrumbs");
            return _staticClass;
        }
    }
}

// Class Core.Base64
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UBase64 : UObject {
    public UBase64() { }
    public UBase64(nint pointer) : base(pointer) { }


    // Function Core.Base64.DecodeStringInline
    // 0x2EDC50
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class DecodeStringInline_Parameters : BaseObject {
        public DecodeStringInline_Parameters() { }
        public DecodeStringInline_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Base64.DecodeStringInline.Input
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Base64.DecodeStringInline.Output
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Output {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecodeStringInline;
    public static void DecodeStringInline(FString Input, ref UnmanagedTArray<byte> Output) {
        _ptrDecodeStringInline ??= FindFunction("Function Core.Base64.DecodeStringInline");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Output.Pointer, @params + 16, 16, 16);

        _ptrDecodeStringInline.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecodeStringInline, @params);
        _ptrDecodeStringInline.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _OutputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutputPtr, 16, 16);
        Output = new(_OutputPtr) { Allocated = true };
    }

    // Function Core.Base64.DecodeString
    // 0x2EDB70
    // (Final | Native | Static | Public)
    public unsafe class DecodeString_Parameters : BaseObject {
        public DecodeString_Parameters() { }
        public DecodeString_Parameters(nint pointer) : base(pointer) { }

        // StrProperty Core.Base64.DecodeString.Input
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public FString Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Base64.DecodeString.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public UnmanagedTArray<byte> ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecodeString;
    public static UnmanagedTArray<byte> DecodeString(FString Input) {
        _ptrDecodeString ??= FindFunction("Function Core.Base64.DecodeString");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);

        _ptrDecodeString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecodeString, @params);
        _ptrDecodeString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Base64.DecodeInline
    // 0x2EDA00
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class DecodeInline_Parameters : BaseObject {
        public DecodeInline_Parameters() { }
        public DecodeInline_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Base64.DecodeInline.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Base64.DecodeInline.Output
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Output {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecodeInline;
    public static void DecodeInline(ref UnmanagedTArray<byte> Input, ref UnmanagedTArray<byte> Output) {
        _ptrDecodeInline ??= FindFunction("Function Core.Base64.DecodeInline");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Output.Pointer, @params + 16, 16, 16);

        _ptrDecodeInline.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecodeInline, @params);
        _ptrDecodeInline.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };
        var _OutputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutputPtr, 16, 16);
        Output = new(_OutputPtr) { Allocated = true };
    }

    // Function Core.Base64.Decode
    // 0x2ED910
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class Decode_Parameters : BaseObject {
        public Decode_Parameters() { }
        public Decode_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Base64.Decode.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Base64.Decode.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public UnmanagedTArray<byte> ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrDecode;
    public static UnmanagedTArray<byte> Decode(ref UnmanagedTArray<byte> Input) {
        _ptrDecode ??= FindFunction("Function Core.Base64.Decode");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);

        _ptrDecode.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrDecode, @params);
        _ptrDecode.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Base64.EncodeStringInline
    // 0x2EE100
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EncodeStringInline_Parameters : BaseObject {
        public EncodeStringInline_Parameters() { }
        public EncodeStringInline_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Base64.EncodeStringInline.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Base64.EncodeStringInline.Output
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public FString Output {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncodeStringInline;
    public static void EncodeStringInline(ref UnmanagedTArray<byte> Input, ref FString Output) {
        _ptrEncodeStringInline ??= FindFunction("Function Core.Base64.EncodeStringInline");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Output.Pointer, @params + 16, 16, 16);

        _ptrEncodeStringInline.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncodeStringInline, @params);
        _ptrEncodeStringInline.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };
        var _OutputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutputPtr, 16, 16);
        Output = new(_OutputPtr) { Allocated = true };
    }

    // Function Core.Base64.EncodeString
    // 0x2EE010
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EncodeString_Parameters : BaseObject {
        public EncodeString_Parameters() { }
        public EncodeString_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Base64.EncodeString.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.Base64.EncodeString.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public FString ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncodeString;
    public static FString EncodeString(ref UnmanagedTArray<byte> Input) {
        _ptrEncodeString ??= FindFunction("Function Core.Base64.EncodeString");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);

        _ptrEncodeString.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncodeString, @params);
        _ptrEncodeString.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.Base64.EncodeInline
    // 0x2EDEA0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class EncodeInline_Parameters : BaseObject {
        public EncodeInline_Parameters() { }
        public EncodeInline_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Base64.EncodeInline.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Base64.EncodeInline.Output
        // 0x10 (0x10)
        // (Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Output {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncodeInline;
    public static void EncodeInline(ref UnmanagedTArray<byte> Input, ref UnmanagedTArray<byte> Output) {
        _ptrEncodeInline ??= FindFunction("Function Core.Base64.EncodeInline");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);
        System.Buffer.MemoryCopy((void*)Output.Pointer, @params + 16, 16, 16);

        _ptrEncodeInline.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncodeInline, @params);
        _ptrEncodeInline.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };
        var _OutputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_OutputPtr, 16, 16);
        Output = new(_OutputPtr) { Allocated = true };
    }

    // Function Core.Base64.Encode
    // 0x2EDDB0
    // (Final | Native | Static | Public | HasOutParams)
    public unsafe class Encode_Parameters : BaseObject {
        public Encode_Parameters() { }
        public Encode_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.Base64.Encode.Input
        // 0x0 (0x10)
        // (Const | Param | OutParam | NeedCtorLink)
        public UnmanagedTArray<byte> Input {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ArrayProperty Core.Base64.Encode.ReturnValue
        // 0x10 (0x10)
        // (Param | OutParam | ReturnParam | NeedCtorLink)
        public UnmanagedTArray<byte> ReturnValue {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }
    }
    private static UFunction _ptrEncode;
    public static UnmanagedTArray<byte> Encode(ref UnmanagedTArray<byte> Input) {
        _ptrEncode ??= FindFunction("Function Core.Base64.Encode");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Input.Pointer, @params, 16, 16);

        _ptrEncode.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        StaticClass.ProcessEvent(_ptrEncode, @params);
        _ptrEncode.FunctionFlags |= (ulong)EFunctionFlags.Native;

        var _InputPtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params, (void*)_InputPtr, 16, 16);
        Input = new(_InputPtr) { Allocated = true };

        var _ReturnValuePtr = Marshal.AllocHGlobal(16);
        System.Buffer.MemoryCopy(@params + 16, (void*)_ReturnValuePtr, 16, 16);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Base64");
            return _staticClass;
        }
    }
}

// Class Core.AutomationTest
// 0x40 (0x60 - 0xA0)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UAutomationTest : UObject {
    public UAutomationTest() { }
    public UAutomationTest(nint pointer) : base(pointer) { }


    // ArrayProperty Core.AutomationTest.MaterialsCompiled
    // 0x60 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> MaterialsCompiled {
        get => new(Pointer + 96, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 96), 16, 16);
    }

    // ArrayProperty Core.AutomationTest.MaterialsFailedCompile
    // 0x70 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> MaterialsFailedCompile {
        get => new(Pointer + 112, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 16, 16);
    }

    // ArrayProperty Core.AutomationTest.AsyncPreloadPackagesMissing
    // 0x80 (0x10)
    // (NeedCtorLink)
    public StructTArray<FString> AsyncPreloadPackagesMissing {
        get => new(Pointer + 128, 16);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 128), 16, 16);
    }

    // ArrayProperty Core.AutomationTest.ScriptWarnings
    // 0x90 (0x10)
    // (NeedCtorLink)
    public StructTArray<FScriptWarning> ScriptWarnings {
        get => new(Pointer + 144, 56);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 144), 16, 16);
    }


    // ScriptStruct Core.AutomationTest.ScriptWarning
    // 0x34
    public unsafe class FScriptWarning : BaseObject {
        public FScriptWarning() {
            Pointer = Marshal.AllocHGlobal(52);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 52);
            Allocated = true;
        }
        public FScriptWarning(nint pointer) : base(pointer) { }

        // StrProperty Core.AutomationTest.ScriptWarning.Node
        // 0x0 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString Node {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core.AutomationTest.ScriptWarning.Message
        // 0x10 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString Message {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // StrProperty Core.AutomationTest.ScriptWarning.StackTrace
        // 0x20 (0x10)
        // (AlwaysInit | NeedCtorLink)
        public FString StackTrace {
            get => new(Pointer + 32);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 32), 16, 16);
        }

        // IntProperty Core.AutomationTest.ScriptWarning.ScriptPosition
        // 0x30 (0x4)
        public int ScriptPosition {
            get => *(int*)(Pointer + 48);
            set => *(int*)(Pointer + 48) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.AutomationTest");
            return _staticClass;
        }
    }
}

// Class Core.AsyncResult
// 0x0 (0xD0 - 0xD0)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class UAsyncResult : UAsyncTask {
    public UAsyncResult() { }
    public UAsyncResult(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.AsyncResult");
            return _staticClass;
        }
    }
}

// Class Core.AsyncTask
// 0x70 (0x60 - 0xD0)
// (Compiled | Parsed | Native)
public unsafe partial class UAsyncTask : UObject {
    public UAsyncTask() { }
    public UAsyncTask(nint pointer) : base(pointer) { }


    // BoolProperty Core.AsyncTask.bComplete
    // 0x60 (0x4)
    // Bitmask: 0x00000001
    // (PrivateWrite)
    public bool bComplete {
        get => (*(uint*)(Pointer + 96) & 0x1) != 0;
        set {
            if (value) *(uint*)(Pointer + 96) |= 0x1;
            else *(uint*)(Pointer + 96) &= ~(uint)0x1;
        }
    }

    // BoolProperty Core.AsyncTask.bDisposed
    // 0x60 (0x4)
    // Bitmask: 0x00000002
    // (PrivateWrite)
    public bool bDisposed {
        get => (*(uint*)(Pointer + 96) & 0x2) != 0;
        set {
            if (value) *(uint*)(Pointer + 96) |= 0x2;
            else *(uint*)(Pointer + 96) &= ~(uint)0x2;
        }
    }

    // MISSED OFFSET: 0x4

    // ObjectProperty Core.AsyncTask.Error
    // 0x68 (0x8)
    // (PrivateWrite)
    public UError Error {
        get {
            var pointer = *(nint*)(Pointer + 104);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 104) = value.Pointer;
    }

    // DelegateProperty Core.AsyncTask.__EventAsyncTaskSuccess__Delegate
    // 0x70 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAsyncTaskSuccess__Delegate {
        get => new(Pointer + 112);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 112), 24, 24);
    }

    // DelegateProperty Core.AsyncTask.__EventAsyncTaskFail__Delegate
    // 0x88 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAsyncTaskFail__Delegate {
        get => new(Pointer + 136);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 136), 24, 24);
    }

    // DelegateProperty Core.AsyncTask.__EventAsyncTaskComplete__Delegate
    // 0xA0 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventAsyncTaskComplete__Delegate {
        get => new(Pointer + 160);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 160), 24, 24);
    }

    // DelegateProperty Core.AsyncTask.__EventDisposed__Delegate
    // 0xB8 (0x18)
    // (NeedCtorLink)
    public FScriptDelegate __EventDisposed__Delegate {
        get => new(Pointer + 184);
        set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 184), 24, 24);
    }


    // Function Core.AsyncTask.QueCallbacks
    // 0x3304C0
    // (Final | Native | Private)
    public unsafe class QueCallbacks_Parameters : BaseObject {
        public QueCallbacks_Parameters() { }
        public QueCallbacks_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrQueCallbacks;
    public void QueCallbacks() {
        _ptrQueCallbacks ??= FindFunction("Function Core.AsyncTask.QueCallbacks");

        _ptrQueCallbacks.FunctionFlags &= (ulong)~EFunctionFlags.Native;
        ProcessEvent(_ptrQueCallbacks, null);
        _ptrQueCallbacks.FunctionFlags |= (ulong)EFunctionFlags.Native;
    }

    // Function Core.AsyncTask.CreateError
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateError_Parameters : BaseObject {
        public CreateError_Parameters() { }
        public CreateError_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.CreateError.InError
        // 0x0 (0x8)
        // (Param)
        public UError InError {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.AsyncTask.CreateError.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrCreateError;
    public static UAsyncTask CreateError(UError InError) {
        _ptrCreateError ??= FindFunction("Function Core.AsyncTask.CreateError");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)InError.Pointer, @params, 8, 8);

        StaticClass.ProcessEvent(_ptrCreateError, @params);

        return new(*(nint*)(@params + 8));
    }

    // Function Core.AsyncTask.CreateSuccess
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class CreateSuccess_Parameters : BaseObject {
        public CreateSuccess_Parameters() { }
        public CreateSuccess_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.CreateSuccess.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreateSuccess;
    public static UAsyncTask CreateSuccess() {
        _ptrCreateSuccess ??= FindFunction("Function Core.AsyncTask.CreateSuccess");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreateSuccess, @params);

        return new(*(nint*)@params);
    }

    // Function Core.AsyncTask.Create
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class Create_Parameters : BaseObject {
        public Create_Parameters() { }
        public Create_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.Create.ReturnValue
        // 0x0 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrCreate;
    public static UAsyncTask Create() {
        _ptrCreate ??= FindFunction("Function Core.AsyncTask.Create");

        var @params = stackalloc byte[8];

        StaticClass.ProcessEvent(_ptrCreate, @params);

        return new(*(nint*)@params);
    }

    // Function Core.AsyncTask.Watch
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class Watch_Parameters : BaseObject {
        public Watch_Parameters() { }
        public Watch_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.Watch.Other
        // 0x0 (0x8)
        // (Param)
        public UAsyncTask Other {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.AsyncTask.Watch.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrWatch;
    public UAsyncTask Watch(UAsyncTask Other) {
        _ptrWatch ??= FindFunction("Function Core.AsyncTask.Watch");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Other.Pointer, @params, 8, 8);

        ProcessEvent(_ptrWatch, @params);

        return new(*(nint*)(@params + 8));
    }

    // Function Core.AsyncTask.All
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class All_Parameters : BaseObject {
        public All_Parameters() { }
        public All_Parameters(nint pointer) : base(pointer) { }

        // ArrayProperty Core.AsyncTask.All.Dependents
        // 0x0 (0x10)
        // (Param | NeedCtorLink)
        public PointerTArray<UAsyncTask> Dependents {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ObjectProperty Core.AsyncTask.All.ReturnValue
        // 0x10 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 16);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 16) = value.Pointer;
        }
    }
    private static UFunction _ptrAll;
    public static UAsyncTask All(PointerTArray<UAsyncTask> Dependents) {
        _ptrAll ??= FindFunction("Function Core.AsyncTask.All");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)Dependents.Pointer, @params, 16, 16);

        StaticClass.ProcessEvent(_ptrAll, @params);

        return new(*(nint*)(@params + 16));
    }

    // Function Core.AsyncTask.DependOn
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class DependOn_Parameters : BaseObject {
        public DependOn_Parameters() { }
        public DependOn_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.DependOn.Other
        // 0x0 (0x8)
        // (Param)
        public UAsyncTask Other {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }

        // ObjectProperty Core.AsyncTask.DependOn.ReturnValue
        // 0x8 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 8);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 8) = value.Pointer;
        }
    }
    private static UFunction _ptrDependOn;
    public UAsyncTask DependOn(UAsyncTask Other) {
        _ptrDependOn ??= FindFunction("Function Core.AsyncTask.DependOn");

        var @params = stackalloc byte[16];
        System.Buffer.MemoryCopy((void*)Other.Pointer, @params, 8, 8);

        ProcessEvent(_ptrDependOn, @params);

        return new(*(nint*)(@params + 8));
    }

    // Function Core.AsyncTask.NotifyOnDispose
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class NotifyOnDispose_Parameters : BaseObject {
        public NotifyOnDispose_Parameters() { }
        public NotifyOnDispose_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.AsyncTask.NotifyOnDispose.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // ObjectProperty Core.AsyncTask.NotifyOnDispose.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrNotifyOnDispose;
    public UAsyncTask NotifyOnDispose(FScriptDelegate Callback) {
        _ptrNotifyOnDispose ??= FindFunction("Function Core.AsyncTask.NotifyOnDispose");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrNotifyOnDispose, @params);

        return new(*(nint*)(@params + 24));
    }

    // Function Core.AsyncTask.ClearCallbacks
    // 0x3750E0
    // (Defined | Event | Protected)
    public unsafe class ClearCallbacks_Parameters : BaseObject {
        public ClearCallbacks_Parameters() { }
        public ClearCallbacks_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrClearCallbacks;
    public void ClearCallbacks() {
        _ptrClearCallbacks ??= FindFunction("Function Core.AsyncTask.ClearCallbacks");

        ProcessEvent(_ptrClearCallbacks, null);
    }

    // Function Core.AsyncTask.Dispose
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class Dispose_Parameters : BaseObject {
        public Dispose_Parameters() { }
        public Dispose_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDispose;
    public void Dispose() {
        _ptrDispose ??= FindFunction("Function Core.AsyncTask.Dispose");

        ProcessEvent(_ptrDispose, null);
    }

    // Function Core.AsyncTask.SetComplete
    // 0x3750E0
    // (Final | Defined | HasOptionalParams | Public)
    public unsafe class SetComplete_Parameters : BaseObject {
        public SetComplete_Parameters() { }
        public SetComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.SetComplete.InError
        // 0x0 (0x8)
        // (OptionalParam | Param)
        public UError InError {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrSetComplete;
    public void SetComplete(UError InError = null) {
        _ptrSetComplete ??= FindFunction("Function Core.AsyncTask.SetComplete");

        var @params = stackalloc byte[8];
        if (InError != null) System.Buffer.MemoryCopy((void*)InError.Pointer, @params, 8, 8);

        ProcessEvent(_ptrSetComplete, @params);
    }

    // Function Core.AsyncTask.SetError
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class SetError_Parameters : BaseObject {
        public SetError_Parameters() { }
        public SetError_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.SetError.InError
        // 0x0 (0x8)
        // (Param)
        public UError InError {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrSetError;
    public void SetError(UError InError) {
        _ptrSetError ??= FindFunction("Function Core.AsyncTask.SetError");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)InError.Pointer, @params, 8, 8);

        ProcessEvent(_ptrSetError, @params);
    }

    // Function Core.AsyncTask.NotifyOnComplete
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class NotifyOnComplete_Parameters : BaseObject {
        public NotifyOnComplete_Parameters() { }
        public NotifyOnComplete_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.AsyncTask.NotifyOnComplete.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // ObjectProperty Core.AsyncTask.NotifyOnComplete.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrNotifyOnComplete;
    public UAsyncTask NotifyOnComplete(FScriptDelegate Callback) {
        _ptrNotifyOnComplete ??= FindFunction("Function Core.AsyncTask.NotifyOnComplete");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrNotifyOnComplete, @params);

        return new(*(nint*)(@params + 24));
    }

    // Function Core.AsyncTask.NotifyOnFail
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class NotifyOnFail_Parameters : BaseObject {
        public NotifyOnFail_Parameters() { }
        public NotifyOnFail_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.AsyncTask.NotifyOnFail.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // ObjectProperty Core.AsyncTask.NotifyOnFail.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrNotifyOnFail;
    public UAsyncTask NotifyOnFail(FScriptDelegate Callback) {
        _ptrNotifyOnFail ??= FindFunction("Function Core.AsyncTask.NotifyOnFail");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrNotifyOnFail, @params);

        return new(*(nint*)(@params + 24));
    }

    // Function Core.AsyncTask.NotifyOnSuccess
    // 0x3750E0
    // (Final | Defined | Event | Public)
    public unsafe class NotifyOnSuccess_Parameters : BaseObject {
        public NotifyOnSuccess_Parameters() { }
        public NotifyOnSuccess_Parameters(nint pointer) : base(pointer) { }

        // DelegateProperty Core.AsyncTask.NotifyOnSuccess.Callback
        // 0x0 (0x18)
        // (Param | NeedCtorLink)
        public FScriptDelegate Callback {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // ObjectProperty Core.AsyncTask.NotifyOnSuccess.ReturnValue
        // 0x18 (0x8)
        // (Param | OutParam | ReturnParam)
        public UAsyncTask ReturnValue {
            get {
                var pointer = *(nint*)(Pointer + 24);
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)(Pointer + 24) = value.Pointer;
        }
    }
    private static UFunction _ptrNotifyOnSuccess;
    public UAsyncTask NotifyOnSuccess(FScriptDelegate Callback) {
        _ptrNotifyOnSuccess ??= FindFunction("Function Core.AsyncTask.NotifyOnSuccess");

        var @params = stackalloc byte[32];
        System.Buffer.MemoryCopy((void*)Callback.Pointer, @params, 24, 24);

        ProcessEvent(_ptrNotifyOnSuccess, @params);

        return new(*(nint*)(@params + 24));
    }

    // Function Core.AsyncTask.EventDisposed
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventDisposed_Parameters : BaseObject {
        public EventDisposed_Parameters() { }
        public EventDisposed_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventDisposed;
    public void EventDisposed() {
        _ptrEventDisposed ??= FindFunction("Function Core.AsyncTask.EventDisposed");

        ProcessEvent(_ptrEventDisposed, null);
    }

    // Function Core.AsyncTask.EventAsyncTaskComplete
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAsyncTaskComplete_Parameters : BaseObject {
        public EventAsyncTaskComplete_Parameters() { }
        public EventAsyncTaskComplete_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.EventAsyncTaskComplete.TaskError
        // 0x0 (0x8)
        // (Param)
        public UError TaskError {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrEventAsyncTaskComplete;
    public void EventAsyncTaskComplete(UError TaskError) {
        _ptrEventAsyncTaskComplete ??= FindFunction("Function Core.AsyncTask.EventAsyncTaskComplete");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)TaskError.Pointer, @params, 8, 8);

        ProcessEvent(_ptrEventAsyncTaskComplete, @params);
    }

    // Function Core.AsyncTask.EventAsyncTaskFail
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAsyncTaskFail_Parameters : BaseObject {
        public EventAsyncTaskFail_Parameters() { }
        public EventAsyncTaskFail_Parameters(nint pointer) : base(pointer) { }

        // ObjectProperty Core.AsyncTask.EventAsyncTaskFail.TaskError
        // 0x0 (0x8)
        // (Param)
        public UError TaskError {
            get {
                var pointer = *(nint*)Pointer;
                return pointer != nint.Zero ? new(pointer) : null;
            }
            set => *(nint*)Pointer = value.Pointer;
        }
    }
    private static UFunction _ptrEventAsyncTaskFail;
    public void EventAsyncTaskFail(UError TaskError) {
        _ptrEventAsyncTaskFail ??= FindFunction("Function Core.AsyncTask.EventAsyncTaskFail");

        var @params = stackalloc byte[8];
        System.Buffer.MemoryCopy((void*)TaskError.Pointer, @params, 8, 8);

        ProcessEvent(_ptrEventAsyncTaskFail, @params);
    }

    // Function Core.AsyncTask.EventAsyncTaskSuccess
    // 0x3750E0
    // (Final | Public | Delegate)
    public unsafe class EventAsyncTaskSuccess_Parameters : BaseObject {
        public EventAsyncTaskSuccess_Parameters() { }
        public EventAsyncTaskSuccess_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrEventAsyncTaskSuccess;
    public void EventAsyncTaskSuccess() {
        _ptrEventAsyncTaskSuccess ??= FindFunction("Function Core.AsyncTask.EventAsyncTaskSuccess");

        ProcessEvent(_ptrEventAsyncTaskSuccess, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.AsyncTask");
            return _staticClass;
        }
    }
}

// Class Core._Types_Core
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed | Native)
public unsafe partial class U_Types_Core : UObject {
    public U_Types_Core() { }
    public U_Types_Core(nint pointer) : base(pointer) { }


    // ScriptStruct Core._Types_Core.ProductInstanceID
    // 0x10
    public unsafe class FProductInstanceID : BaseObject {
        public FProductInstanceID() {
            Pointer = Marshal.AllocHGlobal(16);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 16);
            Allocated = true;
        }
        public FProductInstanceID(nint pointer) : base(pointer) { }

        // QWordProperty Core._Types_Core.ProductInstanceID.UpperBits
        // 0x0 (0x8)
        public ulong UpperBits {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // QWordProperty Core._Types_Core.ProductInstanceID.LowerBits
        // 0x8 (0x8)
        public ulong LowerBits {
            get => *(ulong*)(Pointer + 8);
            set => *(ulong*)(Pointer + 8) = value;
        }
    }

    // ScriptStruct Core._Types_Core.VoiceRoomMemberStatus
    // 0x4
    public unsafe class FVoiceRoomMemberStatus : BaseObject {
        public FVoiceRoomMemberStatus() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FVoiceRoomMemberStatus(nint pointer) : base(pointer) { }

        // BoolProperty Core._Types_Core.VoiceRoomMemberStatus.bLocal
        // 0x0 (0x4)
        // Bitmask: 0x00000001
        public bool bLocal {
            get => (*(uint*)Pointer & 0x1) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x1;
                else *(uint*)Pointer &= ~(uint)0x1;
            }
        }

        // BoolProperty Core._Types_Core.VoiceRoomMemberStatus.bSpeaking
        // 0x0 (0x4)
        // Bitmask: 0x00000002
        public bool bSpeaking {
            get => (*(uint*)Pointer & 0x2) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x2;
                else *(uint*)Pointer &= ~(uint)0x2;
            }
        }

        // BoolProperty Core._Types_Core.VoiceRoomMemberStatus.bSelfMuted
        // 0x0 (0x4)
        // Bitmask: 0x00000004
        public bool bSelfMuted {
            get => (*(uint*)Pointer & 0x4) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x4;
                else *(uint*)Pointer &= ~(uint)0x4;
            }
        }

        // BoolProperty Core._Types_Core.VoiceRoomMemberStatus.bLocalMuted
        // 0x0 (0x4)
        // Bitmask: 0x00000008
        public bool bLocalMuted {
            get => (*(uint*)Pointer & 0x8) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x8;
                else *(uint*)Pointer &= ~(uint)0x8;
            }
        }

        // BoolProperty Core._Types_Core.VoiceRoomMemberStatus.bAdminMuted
        // 0x0 (0x4)
        // Bitmask: 0x00000010
        public bool bAdminMuted {
            get => (*(uint*)Pointer & 0x10) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x10;
                else *(uint*)Pointer &= ~(uint)0x10;
            }
        }

        // BoolProperty Core._Types_Core.VoiceRoomMemberStatus.bBlocked
        // 0x0 (0x4)
        // Bitmask: 0x00000020
        public bool bBlocked {
            get => (*(uint*)Pointer & 0x20) != 0;
            set {
                if (value) *(uint*)Pointer |= 0x20;
                else *(uint*)Pointer &= ~(uint)0x20;
            }
        }
    }

    // ScriptStruct Core._Types_Core.VoiceAudioDevice
    // 0x24
    public unsafe class FVoiceAudioDevice : BaseObject {
        public FVoiceAudioDevice() {
            Pointer = Marshal.AllocHGlobal(36);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 36);
            Allocated = true;
        }
        public FVoiceAudioDevice(nint pointer) : base(pointer) { }

        // StrProperty Core._Types_Core.VoiceAudioDevice.Id
        // 0x0 (0x10)
        // (NeedCtorLink | DataBinding)
        public FString Id {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // StrProperty Core._Types_Core.VoiceAudioDevice.Name
        // 0x10 (0x10)
        // (NeedCtorLink | DataBinding)
        public FString Name {
            get => new(Pointer + 16);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 16), 16, 16);
        }

        // BoolProperty Core._Types_Core.VoiceAudioDevice.bDefault
        // 0x20 (0x4)
        // Bitmask: 0x00000001
        // (DataBinding)
        public bool bDefault {
            get => (*(uint*)(Pointer + 32) & 0x1) != 0;
            set {
                if (value) *(uint*)(Pointer + 32) |= 0x1;
                else *(uint*)(Pointer + 32) &= ~(uint)0x1;
            }
        }
    }

    // ScriptStruct Core._Types_Core.EncryptedKeyIndex
    // 0x4
    public unsafe class FEncryptedKeyIndex : BaseObject {
        public FEncryptedKeyIndex() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FEncryptedKeyIndex(nint pointer) : base(pointer) { }

        // IntProperty Core._Types_Core.EncryptedKeyIndex.Index
        // 0x0 (0x4)
        public int Index {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }

    // ScriptStruct Core._Types_Core.ProductHashID
    // 0x4
    public unsafe class FProductHashID : BaseObject {
        public FProductHashID() {
            Pointer = Marshal.AllocHGlobal(4);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 4);
            Allocated = true;
        }
        public FProductHashID(nint pointer) : base(pointer) { }

        // IntProperty Core._Types_Core.ProductHashID.Id
        // 0x0 (0x4)
        public int Id {
            get => *(int*)Pointer;
            set => *(int*)Pointer = value;
        }
    }

    // ScriptStruct Core._Types_Core.UniqueNetId
    // 0x42
    public unsafe class FUniqueNetId : BaseObject {
        public FUniqueNetId() {
            Pointer = Marshal.AllocHGlobal(66);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 66);
            Allocated = true;
        }
        public FUniqueNetId(nint pointer) : base(pointer) { }

        // QWordProperty Core._Types_Core.UniqueNetId.Uid
        // 0x0 (0x8)
        public ulong Uid {
            get => *(ulong*)Pointer;
            set => *(ulong*)Pointer = value;
        }

        // StructProperty Core._Types_Core.UniqueNetId.NpId
        // 0x8 (0x28)
        public FSceNpId NpId {
            get => new(Pointer + 8);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 8), 40, 40);
        }

        // StrProperty Core._Types_Core.UniqueNetId.EpicAccountId
        // 0x30 (0x10)
        // (NeedCtorLink)
        public FString EpicAccountId {
            get => new(Pointer + 48);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 48), 16, 16);
        }

        // ByteProperty Core._Types_Core.UniqueNetId.Platform
        // 0x40 (0x1)
        public OnlinePlatform Platform {
            get => *(OnlinePlatform*)(Pointer + 64);
            set => *(OnlinePlatform*)(Pointer + 64) = value;
        }

        // ByteProperty Core._Types_Core.UniqueNetId.SplitscreenID
        // 0x41 (0x1)
        public byte SplitscreenID {
            get => *(byte*)(Pointer + 65);
            set => *(byte*)(Pointer + 65) = value;
        }
    }

    // ScriptStruct Core._Types_Core.SceNpId
    // 0x28
    public unsafe class FSceNpId : BaseObject {
        public FSceNpId() {
            Pointer = Marshal.AllocHGlobal(40);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 40);
            Allocated = true;
        }
        public FSceNpId(nint pointer) : base(pointer) { }

        // StructProperty Core._Types_Core.SceNpId.Handle
        // 0x0 (0x18)
        // (Const)
        public FSceNpOnlineId Handle {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 24, 24);
        }

        // QWordProperty Core._Types_Core.SceNpId.Opt
        // 0x18 (0x8)
        // (Const)
        public ulong Opt {
            get => *(ulong*)(Pointer + 24);
            set => *(ulong*)(Pointer + 24) = value;
        }

        // QWordProperty Core._Types_Core.SceNpId.Reserved
        // 0x20 (0x8)
        // (Const)
        public ulong Reserved {
            get => *(ulong*)(Pointer + 32);
            set => *(ulong*)(Pointer + 32) = value;
        }
    }

    // ScriptStruct Core._Types_Core.SceNpOnlineId
    // 0x14
    public unsafe class FSceNpOnlineId : BaseObject {
        public FSceNpOnlineId() {
            Pointer = Marshal.AllocHGlobal(20);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 20);
            Allocated = true;
        }
        public FSceNpOnlineId(nint pointer) : base(pointer) { }

        // QWordProperty Core._Types_Core.SceNpOnlineId.Data
        // 0x0 (0x10)
        // Fixed array size: 2
        public UnmanagedFixedArray<ulong> Data {
            get => new(Pointer, 2);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 16, 16);
        }

        // ByteProperty Core._Types_Core.SceNpOnlineId.Term
        // 0x10 (0x1)
        public byte Term {
            get => *(byte*)(Pointer + 16);
            set => *(byte*)(Pointer + 16) = value;
        }

        // ByteProperty Core._Types_Core.SceNpOnlineId.Dummy
        // 0x11 (0x3)
        // Fixed array size: 3
        public UnmanagedFixedArray<byte> Dummy {
            get => new(Pointer + 17, 3);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 17), 3, 3);
        }
    }


    // Enum Core._Types_Core.EVoiceResultCode
    public enum EVoiceResultCode : byte {
        VRC_Success = 0,
        VRC_NoConnection = 1,
        VRC_InvalidCredentials = 2,
        VRC_TooManyParticipants = 3,
        VRC_UserKicked = 4,
        VRC_UserBanned = 5,
        VRC_ServiceFailure = 6,
        VRC_AccessDenied = 7,
        VRC_UnexpectedError = 8,
        VRC_MAX = 9
    }

    // Enum Core._Types_Core.EFlushResult
    public enum EFlushResult : byte {
        FlushResult_Success = 0,
        FlushResult_InProgress = 1,
        FlushResult_TimedOut = 2,
        FlushResult_MAX = 3
    }

    // Enum Core._Types_Core.EInputAPI
    public enum EInputAPI : byte {
        InputAPI_Default = 0,
        InputAPI_SteamInput = 1,
        InputAPI_MAX = 2
    }

    // Enum Core._Types_Core.OnlinePlatform
    public enum OnlinePlatform : byte {
        OnlinePlatform_Unknown = 0,
        OnlinePlatform_Steam = 1,
        OnlinePlatform_PS4 = 2,
        OnlinePlatform_PS3 = 3,
        OnlinePlatform_Dingo = 4,
        OnlinePlatform_QQ_DEPRECATED = 5,
        OnlinePlatform_OldNNX = 6,
        OnlinePlatform_NNX = 7,
        OnlinePlatform_PsyNet = 8,
        OnlinePlatform_Deleted = 9,
        OnlinePlatform_WeGame_DEPRECATED = 10,
        OnlinePlatform_Epic = 11,
        OnlinePlatform_MAX = 12
    }

    // Enum Core._Types_Core.EImageType
    public enum EImageType : byte {
        EIT_Unknown = 0,
        EIT_JPEG = 1,
        EIT_PNG = 2,
        EIT_MAX = 3
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core._Types_Core");
            return _staticClass;
        }
    }
}

// Class Core.State
// 0x60 (0x130 - 0x190)
// (Native | Intrinsic)
public unsafe partial class UState : UStruct {
    public UState() { }
    public UState(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x60


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.State");
            return _staticClass;
        }
    }
}

// Class Core.Package
// 0xE8 (0x60 - 0x148)
// (Native | Intrinsic)
public unsafe partial class UPackage : UObject {
    public UPackage() { }
    public UPackage(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0xE8


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Package");
            return _staticClass;
        }
    }
}

// Class Core.Class
// 0x228 (0x190 - 0x3B8)
// (Native | Intrinsic)
public unsafe partial class UClass : UState {
    public UClass() { }
    public UClass(nint pointer) : base(pointer) { }


    // MISSED OFFSET: 0x228


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.Class");
            return _staticClass;
        }
    }
}

// Class Core.__AsyncTask__All_0x1
// 0x10 (0x60 - 0x70)
// (Compiled | Parsed | Deprecated | Exported)
public unsafe partial class U__AsyncTask__All_0x1 : UObject {
    public U__AsyncTask__All_0x1() { }
    public U__AsyncTask__All_0x1(nint pointer) : base(pointer) { }


    // IntProperty Core.__AsyncTask__All_0x1.DependentsCount
    // 0x60 (0x4)
    public int DependentsCount {
        get => *(int*)(Pointer + 96);
        set => *(int*)(Pointer + 96) = value;
    }

    // MISSED OFFSET: 0x4

    // ObjectProperty Core.__AsyncTask__All_0x1.Parent
    // 0x68 (0x8)
    public UAsyncTask Parent {
        get {
            var pointer = *(nint*)(Pointer + 104);
            return pointer != nint.Zero ? new(pointer) : null;
        }
        set => *(nint*)(Pointer + 104) = value.Pointer;
    }


    // Function Core.__AsyncTask__All_0x1.__AsyncTask__All_0x1
    // 0x3750E0
    // (Final | Defined | Public)
    public unsafe class __AsyncTask__All_0x1_Parameters : BaseObject {
        public __AsyncTask__All_0x1_Parameters() { }
        public __AsyncTask__All_0x1_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptr__AsyncTask__All_0x1;
    public void __AsyncTask__All_0x1() {
        _ptr__AsyncTask__All_0x1 ??= FindFunction("Function Core.__AsyncTask__All_0x1.__AsyncTask__All_0x1");

        ProcessEvent(_ptr__AsyncTask__All_0x1, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.__AsyncTask__All_0x1");
            return _staticClass;
        }
    }
}

// Class Core._LoggingDoc
// 0x0 (0x60 - 0x60)
// (Compiled | Parsed)
public unsafe partial class U_LoggingDoc : UObject {
    public U_LoggingDoc() { }
    public U_LoggingDoc(nint pointer) : base(pointer) { }


    // Function Core._LoggingDoc.TestSpecialLogging
    // 0x3750E0
    // (Final | Defined | Static | Public)
    public unsafe class TestSpecialLogging_Parameters : BaseObject {
        public TestSpecialLogging_Parameters() { }
        public TestSpecialLogging_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrTestSpecialLogging;
    public static void TestSpecialLogging() {
        _ptrTestSpecialLogging ??= FindFunction("Function Core._LoggingDoc.TestSpecialLogging");

        StaticClass.ProcessEvent(_ptrTestSpecialLogging, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core._LoggingDoc");
            return _staticClass;
        }
    }
}

// Class Core._Types_Generated
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed)
public unsafe partial class U_Types_Generated : UObject {
    public U_Types_Generated() { }
    public U_Types_Generated(nint pointer) : base(pointer) { }


    // Enum Core._Types_Generated.EContentKeyIndex_ContinuousIntegration
    public enum EContentKeyIndex_ContinuousIntegration : byte {
        ContinuousIntegration_A21E529632046B5DAA3373A6051D7164 = 0,
        ContinuousIntegration_8C0B2C5877659E4548B294EA142D4C7A = 1,
        ContinuousIntegration_BC2E369B178A16B81F7B990426A8D59F = 2,
        ContinuousIntegration_0834F4083483791F04893BE705044600 = 3,
        ContinuousIntegration_MAX = 4
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate50
    public enum EContentKeyIndex_PrimeUpdate50 : byte {
        PrimeUpdate50_F3D1F836D2AB4A4DAE38A3820EF42536 = 0,
        PrimeUpdate50_071FCF1F6B53D3C4B73DE5700CFC4E32 = 1,
        PrimeUpdate50_3AF0C7A0476E35569C49C19613DEC950 = 2,
        PrimeUpdate50_078044D4CCF576219097B56F43F4592A = 3,
        PrimeUpdate50_8D546A00D7D4F875CD41682AA4742E4E = 4,
        PrimeUpdate50_2848A6873428E1973EE562B1DA375A0D = 5,
        PrimeUpdate50_CE2CDB2BBD868F853655FA81857607FA = 6,
        PrimeUpdate50_AB84FCB94926338CA5D33512CA095C99 = 7,
        PrimeUpdate50_C623ECE9F4332FE67320376631056AA9 = 8,
        PrimeUpdate50_2764230C6577DB9A7F73806EA7B4EB65 = 9,
        PrimeUpdate50_6A08669DE9F305204ABB96F039A8F571 = 10,
        PrimeUpdate50_C7F546C68229DEACFC577355ABE3A093 = 11,
        PrimeUpdate50_CB2477FB783B5D0352AC661F03349B60 = 12,
        PrimeUpdate50_BF9DBFFF3C2F942709622AAB37201C04 = 13,
        PrimeUpdate50_2FE277D22BFEFF02DF6B12191E5BBBE3 = 14,
        PrimeUpdate50_66D880FE5CEC47D0B56C087CEE88E1E5 = 15,
        PrimeUpdate50_9FE6F44F321FC6A700490CBD6BB04613 = 16,
        PrimeUpdate50_1DA79252C09A01B045FA2FE915923C0D = 17,
        PrimeUpdate50_544585EF0025E5083CA4326DDEF3655D = 18,
        PrimeUpdate50_F95190FC717AF94B6990942233E801FE = 19,
        PrimeUpdate50_11DE8FC8FC1BD4FE96831040496E0707 = 20,
        PrimeUpdate50_4DC4EF0E5F6B3FA99241985EA91CF149 = 21,
        PrimeUpdate50_D873B503F038FB4BEBA4543DBEF12220 = 22,
        PrimeUpdate50_CE13BD9CF3291173F19434B573971494 = 23,
        PrimeUpdate50_441FEE23097BAF580714605D74A0E82A = 24,
        PrimeUpdate50_2084F788C5628F1E715A9D5362112800 = 25,
        PrimeUpdate50_192CFB62EDB9CAE26F6F0F8A1DDBDADF = 26,
        PrimeUpdate50_6687B83178E7CBCE0CADB50C09033880 = 27,
        PrimeUpdate50_51B4120CF5A04FBD110A0675E4813D3D = 28,
        PrimeUpdate50_47F4C4F07913803ED0A57D8AC4326382 = 29,
        PrimeUpdate50_8288CCBFF3B9FE2BEFC038AFBB079CF5 = 30,
        PrimeUpdate50_3A0A616CAF8A4BB78ADA62D9B8951EA3 = 31,
        PrimeUpdate50_MAX = 32
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate49
    public enum EContentKeyIndex_PrimeUpdate49 : byte {
        PrimeUpdate49_E3CFC8EF5DA3E92CAAB56A9DAA6A67FC = 0,
        PrimeUpdate49_55EF0C693E6D73F41302C6314262AD09 = 1,
        PrimeUpdate49_0E2831103AFF5ECAB66919B26D1C0E00 = 2,
        PrimeUpdate49_89E6E5BC20EC9EFFBFE366E485FD0CB0 = 3,
        PrimeUpdate49_6D7EDCB2226CC7415CE20AED0CBF55E8 = 4,
        PrimeUpdate49_79F27DF8758E75A94E8047D17ACBD4AE = 5,
        PrimeUpdate49_A0E60758FF958270A430688A23A58F98 = 6,
        PrimeUpdate49_BCCDC81A6422981D95A41987D19AC6B7 = 7,
        PrimeUpdate49_0D94716C9A62DD2084F359935AE350D3 = 8,
        PrimeUpdate49_C8D577410C1759E650CB2A226B272C2A = 9,
        PrimeUpdate49_DFC1A8BD6A9946A72C0B74815F600313 = 10,
        PrimeUpdate49_D893E26A3ED335C708322793CB96E7C2 = 11,
        PrimeUpdate49_F0C7BF0925F7987548EFD91439B7E923 = 12,
        PrimeUpdate49_C8350BFC1CFEC95F55CA7F249B99C188 = 13,
        PrimeUpdate49_74017C86D6044A055E0FB9470ADE30A5 = 14,
        PrimeUpdate49_F9332D1CB2B08C2EB7AEB9C2F07024A0 = 15,
        PrimeUpdate49_A63922D1764CB8C56788C193F98CF300 = 16,
        PrimeUpdate49_1968ABBBDE1EAC29E557C42B5D131F1B = 17,
        PrimeUpdate49_B32A36A8914E34FBA23A7DE847EF33B0 = 18,
        PrimeUpdate49_DADEB2A00E44A6F700AD29DB615F8A7F = 19,
        PrimeUpdate49_851D0409174FD6B5DF61A0BE757D5260 = 20,
        PrimeUpdate49_11A5BACDF704ECB3E75F3D5D7922354D = 21,
        PrimeUpdate49_D2177317A57AED45BFE1C984F4038426 = 22,
        PrimeUpdate49_C18C9419579438D9660096F83F61226B = 23,
        PrimeUpdate49_773BB92CAB0A792C57533A123136A3EA = 24,
        PrimeUpdate49_9BA89F72D9113A471F6566D1CBA79C03 = 25,
        PrimeUpdate49_B5A7598C5E70D75D2BF7CF17F3D79F98 = 26,
        PrimeUpdate49_503F5A33B4F8817BA01CBCFE0B90DAFA = 27,
        PrimeUpdate49_ACAC4EE3812E074FDC2E985AAA3F8E5F = 28,
        PrimeUpdate49_18245F939BC49D9F3DCAD14F69BD9EDA = 29,
        PrimeUpdate49_3759A7DB5333E76179555B7D0418E5A9 = 30,
        PrimeUpdate49_6536D1AD86639C8E47BB05AF3F98842D = 31,
        PrimeUpdate49_MAX = 32
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate48
    public enum EContentKeyIndex_PrimeUpdate48 : byte {
        PrimeUpdate48_3EF8CE740B23D9322957CD48847B36DD = 0,
        PrimeUpdate48_29128550512066E7172477F6A80C69B2 = 1,
        PrimeUpdate48_C55289FC8C940342E9D20A84445F8DFB = 2,
        PrimeUpdate48_30C3084A1A4181BEAF61949398739D55 = 3,
        PrimeUpdate48_A838F1BE39577AC83B7D07C75E671E95 = 4,
        PrimeUpdate48_30287A8B3092A967E33949D90EE406B5 = 5,
        PrimeUpdate48_D0E4DE25BB880DB72CE076DECFC8349D = 6,
        PrimeUpdate48_F8682AEA04D02168AE986FE0E3CA4C1F = 7,
        PrimeUpdate48_3B5AE0A28D5DA9403AFC72705A2B06D9 = 8,
        PrimeUpdate48_F7B1CCDC7AEB4243E695195EDA59A427 = 9,
        PrimeUpdate48_369188F7D83F2361C61D0A6E2A7C158F = 10,
        PrimeUpdate48_87D41C6EAC66133C48C5647211AC9D8A = 11,
        PrimeUpdate48_2AD4BFCA44C46FACF460BFD2804FD452 = 12,
        PrimeUpdate48_90E17EDF3C2CAAC083AF72F72C683CE7 = 13,
        PrimeUpdate48_MAX = 14
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate47
    public enum EContentKeyIndex_PrimeUpdate47 : byte {
        PrimeUpdate47_309E904795840EC71FAD9655E737C15D = 0,
        PrimeUpdate47_74D1CE2ECE537AD9A71E6A2F4E397036 = 1,
        PrimeUpdate47_32E55C0B969118CDE148192DBCBF1D8A = 2,
        PrimeUpdate47_4B2D0A5AC7D8646E341087D0881200FC = 3,
        PrimeUpdate47_7373B3C7AE89E56050B3D8D5DE47F638 = 4,
        PrimeUpdate47_0F195D246CAD9C9D611FFF1FB81E17FE = 5,
        PrimeUpdate47_6E71DF78D722B23043466181BB7BADDA = 6,
        PrimeUpdate47_CABC11491CD7DF325FD88C2D3D9AB1B3 = 7,
        PrimeUpdate47_7D2414904BA213CF408EAD5271829219 = 8,
        PrimeUpdate47_5259FCAB0F1C6D56775B9BCC5574DAF7 = 9,
        PrimeUpdate47_A0AD83BC5268E59CEBCE7C70F69C8122 = 10,
        PrimeUpdate47_08AA50461A453460D0F3308048B36A60 = 11,
        PrimeUpdate47_49122314B316B2A05C4E3F5E46949DE8 = 12,
        PrimeUpdate47_15234CD758D8A3B2A50BCD492F527691 = 13,
        PrimeUpdate47_88DB5A9D96BB8E542F09C5FD047B8785 = 14,
        PrimeUpdate47_1CDAEE409E6AE356FFFCB907ED937002 = 15,
        PrimeUpdate47_5EFEA7DE273FE3F02537F8EE2B380AB0 = 16,
        PrimeUpdate47_52E8F11E3E38AB5C075F5A83F1F0E824 = 17,
        PrimeUpdate47_CEE53EAF2C7012DC1F5276A352DB3999 = 18,
        PrimeUpdate47_BAB337A3CE44F9E0F125003B065E7FA6 = 19,
        PrimeUpdate47_06B2A87C87DEB3324E3D0BC4FAF6795C = 20,
        PrimeUpdate47_MAX = 21
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate46
    public enum EContentKeyIndex_PrimeUpdate46 : byte {
        PrimeUpdate46_1158992028E7AFBF9A18D7162C53E469 = 0,
        PrimeUpdate46_0631F1BFE7C5CBE5D74702C3C4CA672C = 1,
        PrimeUpdate46_D70E6236296B8E83C597337C8787074A = 2,
        PrimeUpdate46_8545088C2EF44257E47BECD6686E9410 = 3,
        PrimeUpdate46_A4EC79CD8BD95B88EFFDE529B4473BDD = 4,
        PrimeUpdate46_259BD958CAD1EBD253F65EF94D0C2BCE = 5,
        PrimeUpdate46_8C083608FA180E6F8A002A727506299B = 6,
        PrimeUpdate46_7176F1EE1BA95EB10EBFA17712C10403 = 7,
        PrimeUpdate46_E055615D21B2ACEDDFFACDECF75C5035 = 8,
        PrimeUpdate46_737F86BD663C08C4FD04BD68AAE5E9E7 = 9,
        PrimeUpdate46_070A8FB59E49C3B7DD68CB402D2D99C2 = 10,
        PrimeUpdate46_92E18474A103766860D7153FE87F132B = 11,
        PrimeUpdate46_1A00ECA8948D81F67D12D3256C0FF183 = 12,
        PrimeUpdate46_9B2F1C064EB5CFFFE5B514A472D71AFF = 13,
        PrimeUpdate46_9F90C18737616F81EBD41574E133B5C3 = 14,
        PrimeUpdate46_5BEB2823CFEBE00C153E21E1EC858A11 = 15,
        PrimeUpdate46_0703F1A7CEF5CEFA191F954B89E70878 = 16,
        PrimeUpdate46_124BB2A7BE71920A1E89D96EF3221D21 = 17,
        PrimeUpdate46_2A40072A42F9D94354A3F088AA63252F = 18,
        PrimeUpdate46_MAX = 19
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate45
    public enum EContentKeyIndex_PrimeUpdate45 : byte {
        PrimeUpdate45_B5EAA36499C5256F6DF4EBD1FE200CCF = 0,
        PrimeUpdate45_0933157559707C5150C6AF7CEF4AAC17 = 1,
        PrimeUpdate45_AEC0609A22360A523E8F12D1D93392B6 = 2,
        PrimeUpdate45_6021CF109BB13FA0178773921CC56325 = 3,
        PrimeUpdate45_6D50775660E0EAE0D40DF4CAD9278285 = 4,
        PrimeUpdate45_2B2B580AC3587A4EA34B21658122F190 = 5,
        PrimeUpdate45_6D685056C5B9236E3F0BE8255810FD1F = 6,
        PrimeUpdate45_54939A69E4EE576DC9C585A81EF6C663 = 7,
        PrimeUpdate45_0B73B2E2A38A1FCE42F1B92AFD23537F = 8,
        PrimeUpdate45_1C5D3D58F7927BE303B809D89F7143D3 = 9,
        PrimeUpdate45_BC9C9F38082C6791C8E549D22869DE08 = 10,
        PrimeUpdate45_C381FBF2F67E1AAA6A2E295F5625A5F6 = 11,
        PrimeUpdate45_CAF8D1B42134C226F1DA07A708674278 = 12,
        PrimeUpdate45_1B8E4344D969AED0426DC2DFA4B72ADC = 13,
        PrimeUpdate45_0053FEEA7307DA7AFA2A7B7E35BC49B5 = 14,
        PrimeUpdate45_10D93F18596502C09021729CBD5B889D = 15,
        PrimeUpdate45_6B088106B25FD4E5F6BC43EAF5100F95 = 16,
        PrimeUpdate45_6D3C8A03CFD878CECAB4B5AC5C03CAB6 = 17,
        PrimeUpdate45_3FAEE4E6FEEDA84F8769F871A4A642E0 = 18,
        PrimeUpdate45_0836DB4FE635A5907BA5D850E48BB6A4 = 19,
        PrimeUpdate45_46D96ACE6F06DCC43948F15F5AECC228 = 20,
        PrimeUpdate45_0F236B3CBC14F466B2C4E9C8BB4DC6A6 = 21,
        PrimeUpdate45_MAX = 22
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate44
    public enum EContentKeyIndex_PrimeUpdate44 : byte {
        PrimeUpdate44_1446BABD70B69A712C133030AE513B21 = 0,
        PrimeUpdate44_71AF65550CA5ADF69C006E7B97F650B3 = 1,
        PrimeUpdate44_5DEEFF412F4BA7EBA3CC0FC5C573B6A1 = 2,
        PrimeUpdate44_077DD29252345C70A22D50C17FB62366 = 3,
        PrimeUpdate44_598106981F888616B81601A887615564 = 4,
        PrimeUpdate44_CB2633DDA5919383239889125778575C = 5,
        PrimeUpdate44_E51BDCC741F8B25643EFFD71C7004E8E = 6,
        PrimeUpdate44_734F8579680535EB0DEACC8DF366B2D7 = 7,
        PrimeUpdate44_1840F1E0254207DA2867FC7C2AE6D61A = 8,
        PrimeUpdate44_4FD312E0A9015EFE89F61154FC1DE885 = 9,
        PrimeUpdate44_AD752B0369DE162C51A8680F088E123D = 10,
        PrimeUpdate44_C90FAAD83F369944C02A265506DA0053 = 11,
        PrimeUpdate44_7809BFF8943D2CB0DD60C19430DC30A2 = 12,
        PrimeUpdate44_B98F7016457ADFEFEFEBEFD2E08E2B20 = 13,
        PrimeUpdate44_98017FA7C261C53FF46DB08F25160AAF = 14,
        PrimeUpdate44_76D1B56D70961C57344657F7E8E3DE3F = 15,
        PrimeUpdate44_MAX = 16
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate43
    public enum EContentKeyIndex_PrimeUpdate43 : byte {
        PrimeUpdate43_CC671B6037A1D59F3C1821B7233DFF04 = 0,
        PrimeUpdate43_2C3CFF07FE767FF60F6D6DC087173AB4 = 1,
        PrimeUpdate43_F49C0E2E4A8F4D683856334D067C6F5D = 2,
        PrimeUpdate43_76670877373BB64A7CD24AF0138BB295 = 3,
        PrimeUpdate43_810FDE30237521E13B560D507CA768B3 = 4,
        PrimeUpdate43_E66D8C6CCA95C91F8918DC7562D1EACB = 5,
        PrimeUpdate43_52C29922C0E4EB2BFD4E13D940FA5218 = 6,
        PrimeUpdate43_5616A28B9859ADDF538D11E7DF1979AA = 7,
        PrimeUpdate43_3EE780061C5061F71D3E75AD181C2106 = 8,
        PrimeUpdate43_11BE14B80EBD87E5834349696E23276C = 9,
        PrimeUpdate43_25F4690FAC8C10F30940CA45581F2E50 = 10,
        PrimeUpdate43_89B5BF6B6E2356454D75AFF944E84AEC = 11,
        PrimeUpdate43_F786E11A2578748A2279BA1C872068DB = 12,
        PrimeUpdate43_606B443C783353BBA80B23F4D2358B99 = 13,
        PrimeUpdate43_649D0E0445D3EAD3ED3458293369F915 = 14,
        PrimeUpdate43_6C28AA72305A66002E60EB698956D6E3 = 15,
        PrimeUpdate43_63F063DB73E258A05B51B5F88DB913A2 = 16,
        PrimeUpdate43_32CA5400E5D0A5F7FF0B79211D6F1D15 = 17,
        PrimeUpdate43_040B1384D3406947830105729DE06007 = 18,
        PrimeUpdate43_6F9A44FA71B4D98EB2C05867D5C09545 = 19,
        PrimeUpdate43_2332FBF310DAC3DBAC0AB1A435B92843 = 20,
        PrimeUpdate43_1A8C58CEE6B233247AF7574689031FCA = 21,
        PrimeUpdate43_042D95D22673F2872277B93F921D0E03 = 22,
        PrimeUpdate43_0E043AA25A9763DEF3ABCDB4CA04B40B = 23,
        PrimeUpdate43_7640592175EED2834F2A92A752DC9395 = 24,
        PrimeUpdate43_MAX = 25
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate42
    public enum EContentKeyIndex_PrimeUpdate42 : byte {
        PrimeUpdate42_E52531C6B1B6F115D558C6139F218E25 = 0,
        PrimeUpdate42_A5964FEE8B1B9A5D51E457A687F438E1 = 1,
        PrimeUpdate42_8927A460BC8CB874B64839B7542CD145 = 2,
        PrimeUpdate42_2E2B46230BDFD4F2E537F0031212E27B = 3,
        PrimeUpdate42_B50B693A275494257E9B74EEDCA19CFA = 4,
        PrimeUpdate42_50EC783373F1547A15538556F509EB67 = 5,
        PrimeUpdate42_D9DF25EBE864C5225992E9DAA5BEC7D4 = 6,
        PrimeUpdate42_B69AB6BDE915FCB8E4F97B127D34D846 = 7,
        PrimeUpdate42_DCA80A3990A81EE62FAAB810A6120F7C = 8,
        PrimeUpdate42_0C0343D9BC8C40BD3A79E4BC2079D094 = 9,
        PrimeUpdate42_ACF6AA89B69C8CC7167F359805B47808 = 10,
        PrimeUpdate42_B6F39F5D7E72BF64879EA05F6ED2E6D4 = 11,
        PrimeUpdate42_3F6C2706DDB94EC590D4DAB3545067F5 = 12,
        PrimeUpdate42_2193CC48D5CF93AF688E850F52B4451D = 13,
        PrimeUpdate42_DDF9482199E02E6566C9CAEA28C4EC62 = 14,
        PrimeUpdate42_FE5DA93948F7C2140E43DA64811F467B = 15,
        PrimeUpdate42_2C9C5B90D28216CF9A81AFD43E63AF93 = 16,
        PrimeUpdate42_51A0A9E9531104F14E0F63EA6F012D78 = 17,
        PrimeUpdate42_MAX = 18
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate41
    public enum EContentKeyIndex_PrimeUpdate41 : byte {
        PrimeUpdate41_FCF4AC8D3926122F728684A3A7CE9BD0 = 0,
        PrimeUpdate41_FE412C244D9C4AE088AA24BAEE47064A = 1,
        PrimeUpdate41_1163DFB4A5200F5D720D05032D45F072 = 2,
        PrimeUpdate41_F2BE58615CBFD9E7625BDF764CB83A3F = 3,
        PrimeUpdate41_816C46ED6F43BA8EE2B9D6D4114ECB61 = 4,
        PrimeUpdate41_736C408761D627AFD02780C644C41A4B = 5,
        PrimeUpdate41_E5C03F083C3ADF00C3A717A945514920 = 6,
        PrimeUpdate41_99072B23797227CD12055FAD972518C9 = 7,
        PrimeUpdate41_AF629C34B96FEEF9A9CBFB864E6B2CD8 = 8,
        PrimeUpdate41_8CED5FD39030435913600AAD6FE9FF15 = 9,
        PrimeUpdate41_0E60B37DF8579D73C651AE2E8D4E11A6 = 10,
        PrimeUpdate41_52DEE812DA1533B1C4F2C82B17B45CBE = 11,
        PrimeUpdate41_46F30185A7CE929CB6EEC79A343506EE = 12,
        PrimeUpdate41_1A29E290ACEEB4E686F5D2FB4D8F8AA7 = 13,
        PrimeUpdate41_E3DF6729271F9223B39EFC623A2A1F11 = 14,
        PrimeUpdate41_C16726300EFA42B243676ECEEFA3C96F = 15,
        PrimeUpdate41_MAX = 16
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate40_2
    public enum EContentKeyIndex_PrimeUpdate40_2 : byte {
        PrimeUpdate40_1_250828A4E25377F0718BF942E3FB9017 = 0,
        PrimeUpdate40_1_C4077BE4699B9B2D99DDC6DE7722DA09 = 1,
        PrimeUpdate40_1_9649CE040FC2F9F6FC25B25A0CBF10D8 = 2,
        PrimeUpdate40_1_BEEB4A30886DA7D8C011C0DF4179C28A = 3,
        PrimeUpdate40_1_1B295026CE2F4E8732BFDBC57E9545C7 = 4,
        PrimeUpdate40_1_C37309958D55A38BA76976651F85DB64 = 5,
        PrimeUpdate40_1_EAA0F03C8B7809EF8E4D4ABC622C8323 = 6,
        PrimeUpdate40_1_840309E0442EB9B93564AAF65B94DAB2 = 7,
        PrimeUpdate40_1_825EFFBF370C154712F6CFA2C44BE6BF = 8,
        PrimeUpdate40_1_B8841459B9499F5F0632B0C753212E13 = 9,
        PrimeUpdate40_1_5642DF159160EEE1408B8E3583BF2CF4 = 10,
        PrimeUpdate40_1_4BE1E668C754F1F1C404F27615D0F080 = 11,
        PrimeUpdate40_1_8B3D592961D1F9395CC3ACE70436D7FE = 12,
        PrimeUpdate40_1_67C82A8E453258CF014D5BE2A65F85AB = 13,
        PrimeUpdate40_1_560403CDAB63565DE5113D3B5613A3BA = 14,
        PrimeUpdate40_1_0C4A48343FB45CD451885E6631FEDF5C = 15,
        PrimeUpdate40_1_MAX = 16
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate40
    public enum EContentKeyIndex_PrimeUpdate40 : byte {
        PrimeUpdate40_8C2237625A781A11D2F3F89FEB5049E6 = 0,
        PrimeUpdate40_346FFB9D30A3C98CF6E26049C75F8A6F = 1,
        PrimeUpdate40_5F8C0631E0B7B9DFC2F3008C3745E87B = 2,
        PrimeUpdate40_7FE4E4CE92A9C8467009C6BCF579BA99 = 3,
        PrimeUpdate40_278DC229F3110DD6AB3267F83EB1B495 = 4,
        PrimeUpdate40_7FC56CB1544D4E7D994C896BA3218FD0 = 5,
        PrimeUpdate40_3D88BFDE61D0306701BCC41860135271 = 6,
        PrimeUpdate40_01E2A30D1ADA99F14F4E8EEFBD6B42F9 = 7,
        PrimeUpdate40_229839877715A14FFD231E2A91671E05 = 8,
        PrimeUpdate40_44DE38F6740A856E177316F57C7B6C20 = 9,
        PrimeUpdate40_0602631BBDAAE3DE752DB076B9980677 = 10,
        PrimeUpdate40_02403FEAADC79FFFC4B35E5658A00545 = 11,
        PrimeUpdate40_845A3762DBC7CA41402447CF2556D4C7 = 12,
        PrimeUpdate40_53D7FB6D2E642F86A3A075F6FBB1786F = 13,
        PrimeUpdate40_6B6EA27864353D11035CB81228DC0F66 = 14,
        PrimeUpdate40_388A578A38C54067CE555AC93F4AEBB7 = 15,
        PrimeUpdate40_FDCAFEA62CCFA9C90C79D21B2071D2A3 = 16,
        PrimeUpdate40_A82F8D3689507CB67E8D7D52853B932F = 17,
        PrimeUpdate40_B98DE12096263666327D7524E3841577 = 18,
        PrimeUpdate40_33A533A07A82D47AF416BE38E17C89D8 = 19,
        PrimeUpdate40_A747A04581ADEBCA8676A7D75BB9686F = 20,
        PrimeUpdate40_D5860C3628E2C0435CD53BECAA795728 = 21,
        PrimeUpdate40_C464F90B96CC841599F40371C84AB72D = 22,
        PrimeUpdate40_183FC665FE74AC5907F6D056803596A2 = 23,
        PrimeUpdate40_8696BE011AD3EA49278489597BCD9EBB = 24,
        PrimeUpdate40_4BB762B822928F39C7828FEC4DB7A93A = 25,
        PrimeUpdate40_C3B704181B79C72144ED4AB74CAA2851 = 26,
        PrimeUpdate40_7BF9ED88B50F35D452FE4248C1A253FB = 27,
        PrimeUpdate40_5BC35E8AE7B39F853713CE1A071F4ACD = 28,
        PrimeUpdate40_F9D65D20485C4F6305EF8712F06A6EA8 = 29,
        PrimeUpdate40_9B1E2298F76498A3AA1994061533747E = 30,
        PrimeUpdate40_8ED9D5B5C91C2DE1E5BADE5F64C7C02A = 31,
        PrimeUpdate40_7B0FDC201F51B0B00AD1FD4969066042 = 32,
        PrimeUpdate40_MAX = 33
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate39_2
    public enum EContentKeyIndex_PrimeUpdate39_2 : byte {
        PrimeUpdate39_1_5E8D9027C3059552E1664170E791A1B3 = 0,
        PrimeUpdate39_1_3BEAE926AE33C0BF8F95782CB4B36A4A = 1,
        PrimeUpdate39_1_9A3C1EC3957DF2AA96A2AF2DC22BA3FC = 2,
        PrimeUpdate39_1_FD16CE749738F92F5A140AB7C7AC959E = 3,
        PrimeUpdate39_1_D86B0AA89DEB300AA7EEF30FD07ABFD7 = 4,
        PrimeUpdate39_1_92158C7B6826AC37F146AF5D5B4AC9DE = 5,
        PrimeUpdate39_1_792A401E32DC3DB0AFE00611C35572BD = 6,
        PrimeUpdate39_1_1A067C16B1DF704EC9AE6B921C8DE4AE = 7,
        PrimeUpdate39_1_C905548B21885467611F998CAC53EEFB = 8,
        PrimeUpdate39_1_21DE447D1209866593DDFF980DA7C147 = 9,
        PrimeUpdate39_1_6515064E9C27EF5B0688BADD7318CB03 = 10,
        PrimeUpdate39_1_1F8D1D27969AFDB0DF4560A2E4E16030 = 11,
        PrimeUpdate39_1_5F925119F81B86A64DCF8461CE729846 = 12,
        PrimeUpdate39_1_BDF4A8BBCE902498FA3525F29D728C44 = 13,
        PrimeUpdate39_1_7A65FF032B288BAB9C23958AE0054266 = 14,
        PrimeUpdate39_1_83BA8046B2F752EB6CFF4203BD7DF88F = 15,
        PrimeUpdate39_1_AE07A44FEB585B27188B1C4D8D2D1C3D = 16,
        PrimeUpdate39_1_CDFB3137294E4278E07C70B780DF4B2E = 17,
        PrimeUpdate39_1_459B4AE9216EF3FE102EF227BA7F8E62 = 18,
        PrimeUpdate39_1_F754BFA3BC83BE9DD8F1FDA1D7881BF3 = 19,
        PrimeUpdate39_1_MAX = 20
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate39
    public enum EContentKeyIndex_PrimeUpdate39 : byte {
        PrimeUpdate39_56421AAC43705872D01BED0B45A1B0E6 = 0,
        PrimeUpdate39_357448C26C4CB1BB2455CE4D23B15B6F = 1,
        PrimeUpdate39_EFF34C512B1B73E3B3A1C5D865005AA9 = 2,
        PrimeUpdate39_02A5906F01D11C418D125D37EA4772FB = 3,
        PrimeUpdate39_C9EA27ABBFE9ECB9D82E9716E8CAC6AE = 4,
        PrimeUpdate39_00C7978EF1D67EE30874405F1EE7D085 = 5,
        PrimeUpdate39_50936FD9197A5FC47E5CD7DC265137C8 = 6,
        PrimeUpdate39_E018D55157E0C905FF33BC28F2B9D98C = 7,
        PrimeUpdate39_9CC7DDEE9F2A4BBD06189C80559B7BBD = 8,
        PrimeUpdate39_6C37D54A8F53F128B70B58FF97241716 = 9,
        PrimeUpdate39_ECA424488B0B7C94307B7745DF958979 = 10,
        PrimeUpdate39_8D577B8AC9F1B9BC3614B6DB90B37C5B = 11,
        PrimeUpdate39_AD198FBCFFFB2E31230F545EDB9065D0 = 12,
        PrimeUpdate39_7F8192404C707DE4128174751FAF1D00 = 13,
        PrimeUpdate39_B749D533EDC231DCDA92FE5375FC6589 = 14,
        PrimeUpdate39_AB6E50152C4025F6142036BD74016C7F = 15,
        PrimeUpdate39_705F95D329B744F6D26A4CF94D85A211 = 16,
        PrimeUpdate39_523F85BCAB19FC6B10F6066203D67DE6 = 17,
        PrimeUpdate39_324C031A7F1C4366354A79E5A4AF0086 = 18,
        PrimeUpdate39_MAX = 19
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate38_2
    public enum EContentKeyIndex_PrimeUpdate38_2 : byte {
        PrimeUpdate38_1_34B3E2366B1725E584146D0FAD1700F9 = 0,
        PrimeUpdate38_1_70812A493AB87B93ABECC7B119B0F6CC = 1,
        PrimeUpdate38_1_15D8907E96E14673950E473B42D34D77 = 2,
        PrimeUpdate38_1_2061B4B8DD4DA4673DB2D7583F799980 = 3,
        PrimeUpdate38_1_2E2B1ED7FE01BE3BF7CBE4BCEE050394 = 4,
        PrimeUpdate38_1_601BA73441AFA33DFCB2A39F4745F183 = 5,
        PrimeUpdate38_1_D866CA76AA0D2FCB12213FEEBB1ABE0E = 6,
        PrimeUpdate38_1_196973A75D14461F09FB8A8DDA9C06AD = 7,
        PrimeUpdate38_1_A5E8A2856D060F0027FA0EE9C232531A = 8,
        PrimeUpdate38_1_D6A221243A553D92EF9310FA078F284B = 9,
        PrimeUpdate38_1_A7B0D8E9B7E287731C6DEEA179034086 = 10,
        PrimeUpdate38_1_8FFE8276FCA0677D115158A46A4F6C96 = 11,
        PrimeUpdate38_1_FAF409B0E6620FD109E7312196D7D644 = 12,
        PrimeUpdate38_1_8DDD441142D7C23A4483EB853F1E3D30 = 13,
        PrimeUpdate38_1_271920F98BCD5047AEAD1793E2575845 = 14,
        PrimeUpdate38_1_MAX = 15
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate38
    public enum EContentKeyIndex_PrimeUpdate38 : byte {
        PrimeUpdate38_8D82153A816BE5FDFB750D3863064110 = 0,
        PrimeUpdate38_3D01F0EC1174B5420EF917F8ED2FE74B = 1,
        PrimeUpdate38_D9F1DF2EF9878732398231D4E894EDAB = 2,
        PrimeUpdate38_ED3CCAA03782AE4BCC293E887B397824 = 3,
        PrimeUpdate38_4F272FC54EA9CDF8FACC3776F7E05BC8 = 4,
        PrimeUpdate38_23B0D661F2AE00C3E3146349AE65CA93 = 5,
        PrimeUpdate38_C9EFEA0245734E595BA50D9D99A4126F = 6,
        PrimeUpdate38_286C3ABD0BFF8F0B40A6EDF7D8149451 = 7,
        PrimeUpdate38_D90559F31BB500A1B5FA9BE8A0CF4F15 = 8,
        PrimeUpdate38_8AFB6A24EE582323CA4270A5D96B595B = 9,
        PrimeUpdate38_0E4CABA177DBAA97B3690B07EC427098 = 10,
        PrimeUpdate38_29585B8A7ACB53BA2D889BDEDC86D40E = 11,
        PrimeUpdate38_5362657B437EBDB2AC46BA4BC9718405 = 12,
        PrimeUpdate38_240861E1B723C97B74325BF55B05F954 = 13,
        PrimeUpdate38_EDDC577C8EC70EE8CBAE2EEA6AEA449A = 14,
        PrimeUpdate38_A5C6695C12BBA6364E306C2BD4B91B20 = 15,
        PrimeUpdate38_MAX = 16
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate37_3
    public enum EContentKeyIndex_PrimeUpdate37_3 : byte {
        PrimeUpdate37_2_34241E8C41EF7AA005DD4CBB9512D6CC = 0,
        PrimeUpdate37_2_930CF89BB70BBACD1A197C424E596A70 = 1,
        PrimeUpdate37_2_396DCF75DFB0A5F10580F6164CA748AF = 2,
        PrimeUpdate37_2_389EF40A28311D8DC25FC573202288CC = 3,
        PrimeUpdate37_2_8F416D7D1D05939B131ACC9EC7DB13B3 = 4,
        PrimeUpdate37_2_19ED1A67306FBDD5E085AA3F8C6B4F90 = 5,
        PrimeUpdate37_2_C2870E6A57B88EA7C282A05A58DEBC19 = 6,
        PrimeUpdate37_2_D07FE80E5424327B0376EB5F13F2C6F3 = 7,
        PrimeUpdate37_2_6E17905E8A15D170220CBEF83BC5F5E4 = 8,
        PrimeUpdate37_2_C4E980AC9301965C4223D278329A11D2 = 9,
        PrimeUpdate37_2_E4104F6B849F8153DACF32569DF33721 = 10,
        PrimeUpdate37_2_AC1843530CE904B4572C07C3DFE0E118 = 11,
        PrimeUpdate37_2_21C851D7A47C3BA8246F812FF8213048 = 12,
        PrimeUpdate37_2_4A16D342F614F475C212E4989210B975 = 13,
        PrimeUpdate37_2_6667BB77A92F1A9B72C66E2637832020 = 14,
        PrimeUpdate37_2_F732C24E61CAF32BF715B312A80068F8 = 15,
        PrimeUpdate37_2_8150D13BC1E6FA3D2720C55C906FD6C4 = 16,
        PrimeUpdate37_2_40912F8DF7ADD15EDEC8FDB34AF6BA59 = 17,
        PrimeUpdate37_2_C065F738DDD71599BA20FA765BFB9CC1 = 18,
        PrimeUpdate37_2_B36D585A7AFD107C702F315A37EA2131 = 19,
        PrimeUpdate37_2_AAA41825540F87F4D1CA59E525AE5810 = 20,
        PrimeUpdate37_2_429E15D74DFEDA4DD1848FC05D1E15C7 = 21,
        PrimeUpdate37_2_7A25AF1E53F2F49DEA2C1B452B84A9DE = 22,
        PrimeUpdate37_2_MAX = 23
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate37_2
    public enum EContentKeyIndex_PrimeUpdate37_2 : byte {
        PrimeUpdate37_1_A35B6EED2A82E8A6C16B36C1942DEE94 = 0,
        PrimeUpdate37_1_E08A2E1906A83AF70BDB14C01B413788 = 1,
        PrimeUpdate37_1_E35624A59E4478F4E4610A7EE0E3A067 = 2,
        PrimeUpdate37_1_874FE739DDFD6DC9FE9F644BC875505A = 3,
        PrimeUpdate37_1_4A040F564DEAF0E711D9E76916A7BF5A = 4,
        PrimeUpdate37_1_92A6422919A6EE16B05FC41CB85DA4B9 = 5,
        PrimeUpdate37_1_MAX = 6
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate37
    public enum EContentKeyIndex_PrimeUpdate37 : byte {
        PrimeUpdate37_C60B25EC20D29B0FE699ACB6DFEBE550 = 0,
        PrimeUpdate37_64DC68F90CF2281F000D1F112842BEF5 = 1,
        PrimeUpdate37_A5E2241C686E4250022749D15398F8A5 = 2,
        PrimeUpdate37_B3FF7B76D620718F1A46112FBBD8FDE8 = 3,
        PrimeUpdate37_05A8B3591728E65FD3A1FC056CE5A06A = 4,
        PrimeUpdate37_A8C32F52DCF7B5AD13E685B30AD6870F = 5,
        PrimeUpdate37_241F4E6D99E40F9950EE03C50467206B = 6,
        PrimeUpdate37_07F1AD24B296371ACF5DA7E42385C246 = 7,
        PrimeUpdate37_1CB1681D2D432B0DEBE23E725F8817CA = 8,
        PrimeUpdate37_6708BE6FD6BF625D7F89A9E941505C2B = 9,
        PrimeUpdate37_586FEAEB99B5F8B7AE7D59FA6AFD0526 = 10,
        PrimeUpdate37_MAX = 11
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate36_3
    public enum EContentKeyIndex_PrimeUpdate36_3 : byte {
        PrimeUpdate36_2_BCF72246CE09BB12CDD66EF72732FFC7 = 0,
        PrimeUpdate36_2_06432D3A1558F6E8EA6605EAB69D66A1 = 1,
        PrimeUpdate36_2_MAX = 2
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate36_2
    public enum EContentKeyIndex_PrimeUpdate36_2 : byte {
        PrimeUpdate36_1_467BBC80C4360BDAEF091CA61DF71FD9 = 0,
        PrimeUpdate36_1_AC04D31B9DAD00095CE5910C5F6CE072 = 1,
        PrimeUpdate36_1_E123A910668894ADBE430FD08A0112B5 = 2,
        PrimeUpdate36_1_403C4336E20CC3358A7978095F21089E = 3,
        PrimeUpdate36_1_CA1080FB9E4F893B100A9FD89E29D72D = 4,
        PrimeUpdate36_1_F6FECC72E3648A6B10D9F754296B4914 = 5,
        PrimeUpdate36_1_615756B3A90294CC4F9DC73235B67DA1 = 6,
        PrimeUpdate36_1_0F5DB02BA90351FD4DC701F571EEC438 = 7,
        PrimeUpdate36_1_MAX = 8
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate36
    public enum EContentKeyIndex_PrimeUpdate36 : byte {
        PrimeUpdate36_BD02DFB4BA13F3A1C777309414664BD5 = 0,
        PrimeUpdate36_96D8832E6CBAC01E4D931B3548C8B6CD = 1,
        PrimeUpdate36_922639B6EED97FC33B940DA2D78BCE64 = 2,
        PrimeUpdate36_29FCC7E07D881E7A8BB63A1E8F4A1CD2 = 3,
        PrimeUpdate36_731AA8F8623617B16C1BD20F8C515560 = 4,
        PrimeUpdate36_D1AB99156B0AF5C86BD038FD5FA21211 = 5,
        PrimeUpdate36_52008718FF3F8E5A68EFF1BDDD4FA5EE = 6,
        PrimeUpdate36_41C3A8A12956D299753BD860AFB7A8FB = 7,
        PrimeUpdate36_6AE06FAE3499CEC119EAD89D83AB2499 = 8,
        PrimeUpdate36_5CAED8D31082564BDB859CA06D232CF6 = 9,
        PrimeUpdate36_CC85E70DA7E6B82DBDE7E0C497B4469D = 10,
        PrimeUpdate36_70C46454E80360E711D3B5D043B6855D = 11,
        PrimeUpdate36_0231148CE41EAFEA374620374BEC872A = 12,
        PrimeUpdate36_1C2F3E291DFBDF4BCD89F4BBDECFE4A5 = 13,
        PrimeUpdate36_CD94FF5FD517B8C2EBEE67C6A2F2861A = 14,
        PrimeUpdate36_DCCBCFB3508ACFA4A6FBA1CF9AB91B66 = 15,
        PrimeUpdate36_6CB0303A669EA329A382223B785B54DF = 16,
        PrimeUpdate36_DC154AE8320F56120BE27BFAED583980 = 17,
        PrimeUpdate36_14F6948364A30847CB208270921CBE75 = 18,
        PrimeUpdate36_0647B0F31D68BAE45AB0E36C8C00D269 = 19,
        PrimeUpdate36_820D6BDAA81D873F00D0EDEDC2761BA8 = 20,
        PrimeUpdate36_3518176919EA606BF7CBC730282A7BC7 = 21,
        PrimeUpdate36_065B320F11A9D3CC4B5E846E60893E3C = 22,
        PrimeUpdate36_E1369812C6C752435ABFAB3C4D67F15A = 23,
        PrimeUpdate36_9E47F9DB92B6D6C69E851F08DE0C89C3 = 24,
        PrimeUpdate36_8C693F7DD88448A5DB6756E31938F863 = 25,
        PrimeUpdate36_6E5D977724CA7C75A8B0C3BFFF28BB61 = 26,
        PrimeUpdate36_B1D1D39BC2C8015B49D24D198243890D = 27,
        PrimeUpdate36_9E23CAA14A00C20AC1E137377591F377 = 28,
        PrimeUpdate36_00043665A4DEC13AD694ABBD2609F1FC = 29,
        PrimeUpdate36_E9B6B7C5EDCE42EA137CB0DB7B45E914 = 30,
        PrimeUpdate36_5B7CD65C59019880CBBD705E239D0510 = 31,
        PrimeUpdate36_F67E4AFBB01FE7080BD18289E5EA1B77 = 32,
        PrimeUpdate36_A4F892BC8702F12078F181987E4E9308 = 33,
        PrimeUpdate36_MAX = 34
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate35C
    public enum EContentKeyIndex_PrimeUpdate35C : byte {
        PrimeUpdate35C_05A3B69A5A7CB6AE3166DDD98B520A0A = 0,
        PrimeUpdate35C_MAX = 1
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate35B
    public enum EContentKeyIndex_PrimeUpdate35B : byte {
        PrimeUpdate35B_97490524374FF46E3131FDF063239CE4 = 0,
        PrimeUpdate35B_22960F06997C71815DAEE2A35FBF8BC0 = 1,
        PrimeUpdate35B_EF057E3FB173AB964D918CAF3AF2475C = 2,
        PrimeUpdate35B_86379A41A2C7B95FEB8FD72CB8131592 = 3,
        PrimeUpdate35B_E16F5C7C109AA985A927839F6F512ABF = 4,
        PrimeUpdate35B_8543F0D0AAD75DB7C983D461F39E56E3 = 5,
        PrimeUpdate35B_530D464DD5C6C12AB08E881BD8D38800 = 6,
        PrimeUpdate35B_45A9B88D52F97C76C05A176D2187E859 = 7,
        PrimeUpdate35B_4662C606CB2FA4A93DBF972502AD7DD4 = 8,
        PrimeUpdate35B_7697296F2773D7A7DD64E022BB837375 = 9,
        PrimeUpdate35B_MAX = 10
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate35
    public enum EContentKeyIndex_PrimeUpdate35 : byte {
        PrimeUpdate35_904C03345B5306946918E821FFD0557D = 0,
        PrimeUpdate35_7D2BD3C4466DC9DCB376054A00FD8704 = 1,
        PrimeUpdate35_95D345AF6F80E57FF039F0AF309CF397 = 2,
        PrimeUpdate35_8895661B346552E41E98626288616FDB = 3,
        PrimeUpdate35_4936E2EC04B35A4C33132DB942EEFBF9 = 4,
        PrimeUpdate35_E4CE5BA9AE7B7CF44E87C642A1B2075F = 5,
        PrimeUpdate35_AB8CA32A6AC22D1BCD733B45AAF3E516 = 6,
        PrimeUpdate35_82504C8CB31FDBF83749FDB9D4647B22 = 7,
        PrimeUpdate35_0F79BF2A330B5F14F6F1B334BAD190B8 = 8,
        PrimeUpdate35_2FE48155423D40CAD4A7C1E13DFCA010 = 9,
        PrimeUpdate35_85B7C89F12D13A7FC7C1BF63F2223D07 = 10,
        PrimeUpdate35_8C08D9BB2ECFFE7FCB5E1C9ADA0C6915 = 11,
        PrimeUpdate35_30D1E752D5CC3D535314F48E0155BC8B = 12,
        PrimeUpdate35_9DB24424FFE117E4360FB889EC00EBC4 = 13,
        PrimeUpdate35_8B91A692CFC5CEF406CF0B7A5340F490 = 14,
        PrimeUpdate35_A71FDE17430E717C0EA90A81E08C7D09 = 15,
        PrimeUpdate35_F3CB1DE67976A82AF24C37EA7BF28116 = 16,
        PrimeUpdate35_B8FB465286F92DA86FCFFABCD943FC43 = 17,
        PrimeUpdate35_7BD907E5EE245062AD8C8911144583B3 = 18,
        PrimeUpdate35_2F59A5E90E71DA06C07E887054F77C0A = 19,
        PrimeUpdate35_1EAFB7B3369A59BFE2D6047EACED36EB = 20,
        PrimeUpdate35_E2BFF79629FF2D72D31C3B0BF09C3D32 = 21,
        PrimeUpdate35_MAX = 22
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate34
    public enum EContentKeyIndex_PrimeUpdate34 : byte {
        PrimeUpdate34_92E48285E52D9C5376465AFA3C483D21 = 0,
        PrimeUpdate34_798E5021EB2EE0D9150525103009597E = 1,
        PrimeUpdate34_3E57F996CC259382D4F9D60DD3411999 = 2,
        PrimeUpdate34_980D75703713C7B361FA6663369415DD = 3,
        PrimeUpdate34_0BB7B0C3C62B7BC62A8CF5AE4224313F = 4,
        PrimeUpdate34_16684068F60C3BEF59FCA6681DEFC634 = 5,
        PrimeUpdate34_8638D056E206619C71F7358A3112AA75 = 6,
        PrimeUpdate34_119863391AC5E311B66BF5EB49A7E392 = 7,
        PrimeUpdate34_DCA6627ACE5BE1A3D82E699E38B383BA = 8,
        PrimeUpdate34_F44577CDD9D45CBF49CEDC32EE829FC1 = 9,
        PrimeUpdate34_4D75D62B40DE98B190090EB2851E7598 = 10,
        PrimeUpdate34_D0378645638D7FE611F959E71B989E88 = 11,
        PrimeUpdate34_F67C94735DF24D72CE6E0983445EFF94 = 12,
        PrimeUpdate34_677E188D9A579ADE3F2CD3747D225C24 = 13,
        PrimeUpdate34_F7E58DABA865EC58A2D4496DE3C4375F = 14,
        PrimeUpdate34_C2BD319DE1987E7D4DD851CCA2A06FCC = 15,
        PrimeUpdate34_B8CBE903CC7AE40A7F668F6427E57098 = 16,
        PrimeUpdate34_D0A8BEDB5EB633D376B288A6729F2958 = 17,
        PrimeUpdate34_6D8E086B4A152E4BD9059DC67E9A5330 = 18,
        PrimeUpdate34_D93828EBD836F1BEEF0BA345FF2D7D2B = 19,
        PrimeUpdate34_584D6260FEA4A45FBEC3729A47F32A2C = 20,
        PrimeUpdate34_525D1944EF49B6263813E9C33FE9A2E7 = 21,
        PrimeUpdate34_EB7F8E2F3CD896BECB59816B49A8225D = 22,
        PrimeUpdate34_F53E63F89C250939560481ACF2EB4F57 = 23,
        PrimeUpdate34_1EFD13089FD99C03404F686ABB842FC1 = 24,
        PrimeUpdate34_CE1C329C9C4A36B5347CDDFC34E6FE74 = 25,
        PrimeUpdate34_AA31999372C5419377BC328A124FA260 = 26,
        PrimeUpdate34_1FEC83F0FCACE770E7D580C38DBA0B7C = 27,
        PrimeUpdate34_380201BF1433CCFDC60B75AA5A1F27A0 = 28,
        PrimeUpdate34_0B5FB027AD52B9D07E7C6610F51D049B = 29,
        PrimeUpdate34_AAF86940AE1401B7904BB3F1B7F0BF84 = 30,
        PrimeUpdate34_A2EEFC632E25737A361937883AA2B9E3 = 31,
        PrimeUpdate34_25DFE6D61E4B7BB4B8F48EA4C2893C30 = 32,
        PrimeUpdate34_9A1D6F3529477B911753DA025ADE429F = 33,
        PrimeUpdate34_1CA56D0C508FF3D00C3347E82B5396F8 = 34,
        PrimeUpdate34_E648CD9F3659F31EF46715B3FB73EF16 = 35,
        PrimeUpdate34_36892DC2D16FE232BA96D6E8B9E5288E = 36,
        PrimeUpdate34_AED24E43D476A4470C99AABEE2C53673 = 37,
        PrimeUpdate34_32B30CAF516C298774B59FC806B3B6AA = 38,
        PrimeUpdate34_02A902A86328CF57E63A7D1AD763DE60 = 39,
        PrimeUpdate34_C4C41667DE1E754135DE7DB5710A24DD = 40,
        PrimeUpdate34_6AF47E33D558FC35C2FEB7A9D9ACAC59 = 41,
        PrimeUpdate34_9C6ABEFD5E0C4F2DE3A2F7D146FAF952 = 42,
        PrimeUpdate34_F3CA5A2918490945C363517319A0C2EC = 43,
        PrimeUpdate34_8592B9C622C8A3189DB3B4E2C2362142 = 44,
        PrimeUpdate34_AC0C2D53149AD444AEFA1F9F7F29D39E = 45,
        PrimeUpdate34_074B3338DD2160921DB2DF191227F03E = 46,
        PrimeUpdate34_BF336D6E7DAC9A696838C3A788CEA62E = 47,
        PrimeUpdate34_67FB8392992984DA262E637A376E2318 = 48,
        PrimeUpdate34_775260504F332F70DB926CD3CD7E63A7 = 49,
        PrimeUpdate34_258F7CD5F76794C5180F23D0AB71E40C = 50,
        PrimeUpdate34_6177123148139D8930D4DFEA95501359 = 51,
        PrimeUpdate34_A09893A74F7796FC0D23ADDF21E51A68 = 52,
        PrimeUpdate34_72481FA8D257BD5935DC6BFAAFFE37B2 = 53,
        PrimeUpdate34_A8A33573BBF97BC994426669BA945F97 = 54,
        PrimeUpdate34_43A538B20CFD5AE55EBE8327D70618AA = 55,
        PrimeUpdate34_C309EEE625F26444CB456A7C3738519D = 56,
        PrimeUpdate34_40370551AA833BA691B954D5F223D20E = 57,
        PrimeUpdate34_1D49DD289EEBB9EF24BD0DC1DC8790C7 = 58,
        PrimeUpdate34_AAE20A592337576246339356A56D13CC = 59,
        PrimeUpdate34_44C670308CD575930F330390E81F5DFD = 60,
        PrimeUpdate34_7EA963419DAF9F1F789AA0BCFA32504F = 61,
        PrimeUpdate34_418B733466B3543D3FF771D598D8E4F8 = 62,
        PrimeUpdate34_185C6E063F04824C1408EA9670595259 = 63,
        PrimeUpdate34_70F0016A0CCAAB0D71EDF0DA29C52171 = 64,
        PrimeUpdate34_3F24725E47D67DD20FE3AD9F35AEF209 = 65,
        PrimeUpdate34_MAX = 66
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate33
    public enum EContentKeyIndex_PrimeUpdate33 : byte {
        PrimeUpdate33_9859F4962ED9225261C1735A9B0F6A7F = 0,
        PrimeUpdate33_C212DFEF60853EEB61ACA8181A89A15F = 1,
        PrimeUpdate33_C418C87964E1BB0C7DCB3E70779FB44B = 2,
        PrimeUpdate33_1FEB11B693427C63E457203E461639E3 = 3,
        PrimeUpdate33_4ED08FC09FB52F44407423877E04CACA = 4,
        PrimeUpdate33_DBFAF049AEB30397815B08553C60FB59 = 5,
        PrimeUpdate33_8A88FA4B1CFBE1E21536C648BBD4F23E = 6,
        PrimeUpdate33_F59B6D4EFACF226D4B590EB3B22A9C34 = 7,
        PrimeUpdate33_B435739A7F1C97EF5F1D7554AC117749 = 8,
        PrimeUpdate33_3920915610E4452D9178C330AC20EBFA = 9,
        PrimeUpdate33_BE72EF04B58AF461A7D85A77B48EE37A = 10,
        PrimeUpdate33_E7BE7D7122884CEEF63FBC297632C761 = 11,
        PrimeUpdate33_F23A298C56E7EBF4CF8C6875F03BFE72 = 12,
        PrimeUpdate33_ECB007102C74731082C7272DD98D502A = 13,
        PrimeUpdate33_618F822EFD2AA0D7B69A35C84C600564 = 14,
        PrimeUpdate33_E80A98F4841B3861D085BBE347233903 = 15,
        PrimeUpdate33_5EE9F2BC8C9CA242782C40CF779804CE = 16,
        PrimeUpdate33_3A7BDFD41C45E477C990F83772DDE5FF = 17,
        PrimeUpdate33_ED459D7A6FE5DBCECABA1F93BD49247B = 18,
        PrimeUpdate33_6C677BD35A184A2BB0EBAB421BC55E39 = 19,
        PrimeUpdate33_7ED0D8CF98C35C1549F175290231FC02 = 20,
        PrimeUpdate33_E48D95A331BB274C1F99297A1AEF0A9A = 21,
        PrimeUpdate33_78C0060D1C5191F62C68D4DED6FCE798 = 22,
        PrimeUpdate33_15ABD202609BD1609F930B708BCD7208 = 23,
        PrimeUpdate33_3F18B0F70069D6ADF8C0E2B783B36BC5 = 24,
        PrimeUpdate33_9AF0D8EDFCB91756D4F7048012E922D6 = 25,
        PrimeUpdate33_BE2A12592777B870F55FAD163C043192 = 26,
        PrimeUpdate33_EAA00740DF8EF37816AE479E8CCB20B6 = 27,
        PrimeUpdate33_7110D96C5620E2A3360E3887D254A2D6 = 28,
        PrimeUpdate33_0F7338535499E16C2BF19CB546C7C2A6 = 29,
        PrimeUpdate33_E168E8341CB79082D0D9AA4D1FEC97A8 = 30,
        PrimeUpdate33_5C1562652DB849A2BB8B1779333E573D = 31,
        PrimeUpdate33_2E512914EDDC939A207DE0F77DDA26CF = 32,
        PrimeUpdate33_CEE13EA70861968B6AAA07CFA66162DB = 33,
        PrimeUpdate33_MAX = 34
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate32
    public enum EContentKeyIndex_PrimeUpdate32 : byte {
        PrimeUpdate32_300CBBF87113F4C1E17912EAAEACCF62 = 0,
        PrimeUpdate32_AC64316796AD89170208EA1ADE72EB53 = 1,
        PrimeUpdate32_9F4361589D74380E0351FCF10A7F2032 = 2,
        PrimeUpdate32_950D6028A559ADDDA77671B90D707A89 = 3,
        PrimeUpdate32_BBCA9FD0992D35DE029D78D34001A3A8 = 4,
        PrimeUpdate32_1BAB656F9A701BF05B8483F5C3E95365 = 5,
        PrimeUpdate32_EB99CF7F2BD77FB03F91DB208B6E3E78 = 6,
        PrimeUpdate32_D1993DE64E44D83188D68A0052953321 = 7,
        PrimeUpdate32_43520ABD8E211AE3EFA707DE4736D7A6 = 8,
        PrimeUpdate32_595CDCCADBF7CF6359DCD9CACA14BF45 = 9,
        PrimeUpdate32_EFEB90A98D01EF42CACDF3C6166A4E6B = 10,
        PrimeUpdate32_B87BF5D0B9F7DE0B688739F591EEC514 = 11,
        PrimeUpdate32_7AB8B7644C5D85D344D09FF1468C412C = 12,
        PrimeUpdate32_45F3ADEBE4EB02ABAF7B13185A766207 = 13,
        PrimeUpdate32_1427133C46AA4BAD6F54BC030AC7F9A9 = 14,
        PrimeUpdate32_61C0088685FFBE4E0D6F438B118E5987 = 15,
        PrimeUpdate32_84190309583ABA308C0C2E6621E37B9E = 16,
        PrimeUpdate32_DE9085DF47CD080E0BC98052B543E1CA = 17,
        PrimeUpdate32_D71B3C1F2C6CCAE81795D360C9E51B87 = 18,
        PrimeUpdate32_FE659BEDDCA2DCBEBFD0D5A71CE5F55E = 19,
        PrimeUpdate32_C4CB8C293E93DB50EC6C29DE36C52B90 = 20,
        PrimeUpdate32_CE0E00A1192764DEF4798337C1ACE048 = 21,
        PrimeUpdate32_D5BAADF84D6B7ACAC93AC22539969043 = 22,
        PrimeUpdate32_70F2913F8A944F8E9F578CE3F8D789B2 = 23,
        PrimeUpdate32_374EBD593462DC7180BD4F2F8785F548 = 24,
        PrimeUpdate32_851BE21BC1A5E102E86B4239FF2C7645 = 25,
        PrimeUpdate32_E32780FE596DDD89FDA1CED46D30BA08 = 26,
        PrimeUpdate32_1C213CD84626E67147C1AAF044BCE949 = 27,
        PrimeUpdate32_AE65305403939F84C0F5DE5775770C7A = 28,
        PrimeUpdate32_0EE4F6E8266F4BAA55F56AA6CAED927E = 29,
        PrimeUpdate32_654A14F505D929128335F21A88B72936 = 30,
        PrimeUpdate32_B80CDD1F4B9BE4A5C31CF96645FDFAD6 = 31,
        PrimeUpdate32_CA43F5822A576ED8067999E2A43C82FC = 32,
        PrimeUpdate32_C5C0A837BAC4698316A50EA505F4345D = 33,
        PrimeUpdate32_F082F05E7D651EDE256CCCC9A0699E15 = 34,
        PrimeUpdate32_D845ECFEEB577D15E6204540A327CD8A = 35,
        PrimeUpdate32_9B27CA53E1CD25849873E3B0DEAA4265 = 36,
        PrimeUpdate32_66EE45220A851279ECFA9ACDBB520988 = 37,
        PrimeUpdate32_MAX = 38
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate31
    public enum EContentKeyIndex_PrimeUpdate31 : byte {
        PrimeUpdate31_8416552FC13C775C6325D95DAFD2467C = 0,
        PrimeUpdate31_4D7DD3DF13D1A7A874987ED3471E73C8 = 1,
        PrimeUpdate31_880C8C1A2B7E0D89E198FD070B76C948 = 2,
        PrimeUpdate31_85F5966A74411E8888F7228B41775B64 = 3,
        PrimeUpdate31_0F3CBA7F9849D469C134A6FF10453DB2 = 4,
        PrimeUpdate31_F9E087849D5F5873B1D9C2C2A76E8280 = 5,
        PrimeUpdate31_4F3016BFEEF5686ABF5BCC01EDAB34AB = 6,
        PrimeUpdate31_289E688E31D67B07097C3607B0E4B766 = 7,
        PrimeUpdate31_FDFE789EC592F2AE370CBDC6644331EA = 8,
        PrimeUpdate31_3B62BABAB19A41542A3F1A543BA902C7 = 9,
        PrimeUpdate31_2ED307705C547AAE42F52929ED345B54 = 10,
        PrimeUpdate31_88C241C0F02B450B51F0A9AF5DDC359D = 11,
        PrimeUpdate31_94713368AC068D293F842AD501456252 = 12,
        PrimeUpdate31_7EDA3FFCCA3D799DD992CB9E6E1641BA = 13,
        PrimeUpdate31_597E29169FCA2B5E0022CB3C17FD6276 = 14,
        PrimeUpdate31_B403B6BC53473983E71404459C5C329D = 15,
        PrimeUpdate31_DA7EA18B2A78CD2DC80B1647AC96CB4D = 16,
        PrimeUpdate31_3CE5ABD97423D57980D4CE4984D23723 = 17,
        PrimeUpdate31_MAX = 18
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate30
    public enum EContentKeyIndex_PrimeUpdate30 : byte {
        PrimeUpdate30_1DB64BB9636815EFA9399659109DD68D = 0,
        PrimeUpdate30_9234CF28DDEC42BA6D348267FA446B0A = 1,
        PrimeUpdate30_503AD462D2DCE768AE47BB2329144CAE = 2,
        PrimeUpdate30_213CA336DDB319FD27DEA933E3501CB2 = 3,
        PrimeUpdate30_F7FD01F704F37BC24F42A1F9316D8A1D = 4,
        PrimeUpdate30_3087684ADB9F22472E3AFD9BE5BF94F5 = 5,
        PrimeUpdate30_810B945ECFD25E0822A159B328604ECA = 6,
        PrimeUpdate30_5465981D30DE3D6E327B176D436FEF9D = 7,
        PrimeUpdate30_9A9242C1EC822F5CABB949FFDF01D97A = 8,
        PrimeUpdate30_452F33B1387640B277D05CCF28B27094 = 9,
        PrimeUpdate30_33430E4B5498C30E9942BC67BB35E032 = 10,
        PrimeUpdate30_712FAB1F622E61A50F98B76312770661 = 11,
        PrimeUpdate30_2386DB5AA955DDFF74A6A7AF443249B5 = 12,
        PrimeUpdate30_C5BE8F988BD1FF6A53893EC1B454B272 = 13,
        PrimeUpdate30_ED667588F3F916C76D11EADB27036255 = 14,
        PrimeUpdate30_27C7319E6A9E8651E89204245770107E = 15,
        PrimeUpdate30_966DAC7787B441D0E6195D90634ADFD1 = 16,
        PrimeUpdate30_DF823FCBBF433C11264736998336CFB9 = 17,
        PrimeUpdate30_DC5ABAEFCD0A266C64BF8664FEE15309 = 18,
        PrimeUpdate30_22EC7532DB37341C045127F6263A15FF = 19,
        PrimeUpdate30_28B8BBA8CBF5B1B73BD72127D5ADCCB5 = 20,
        PrimeUpdate30_AA915328B1E7A7251488C75194A90384 = 21,
        PrimeUpdate30_D76E2A921047B235911605B9B008F606 = 22,
        PrimeUpdate30_55026AC8526C9B85A556C370FFCBE521 = 23,
        PrimeUpdate30_84C1F1262EF1E5DC120A7ED88DBFEF15 = 24,
        PrimeUpdate30_A99C4C15B5858BB823253B065BE66BB2 = 25,
        PrimeUpdate30_MAX = 26
    }

    // Enum Core._Types_Generated.EContentKeyIndex_PrimeUpdate29
    public enum EContentKeyIndex_PrimeUpdate29 : byte {
        PrimeUpdate29_AE206DA0E0A3AAD8B6755870B27FA65E = 0,
        PrimeUpdate29_30CA52092D2CEDAA55E764986CC47D60 = 1,
        PrimeUpdate29_350E4C7D232183351C9A7CA19AF1D171 = 2,
        PrimeUpdate29_0F4D063A56589D60F7C667659284EF79 = 3,
        PrimeUpdate29_DF40E515A9C2BC9F9B6459DA06BA12B4 = 4,
        PrimeUpdate29_07DAE5D877865DA3A7B27525C6BCD772 = 5,
        PrimeUpdate29_398C669A96F0D8C7A7CB85C6B7F9D40D = 6,
        PrimeUpdate29_1A0A172C108D12F6B9E2582B8353515A = 7,
        PrimeUpdate29_DFA1AA4962EC1FAF6388A5D29978701F = 8,
        PrimeUpdate29_82BD9EB94679B73DA8574C6DB2C8737E = 9,
        PrimeUpdate29_6E59D0C3AAAF6C9D2E326F4293999A64 = 10,
        PrimeUpdate29_3F53F796EEBEDA376ACA7199F20CAA63 = 11,
        PrimeUpdate29_C29913CE0063B6A4499E4AFF4C5D56D1 = 12,
        PrimeUpdate29_88F2B75897AE1A5B80B4DCC82C376200 = 13,
        PrimeUpdate29_EF28529F54D54075C40BA9309352A504 = 14,
        PrimeUpdate29_4F3D2425A947760B6BD53B2E51290AE9 = 15,
        PrimeUpdate29_42DC275ACD6AF3B20C30E2A016AECC19 = 16,
        PrimeUpdate29_ADC297BC151083F6529E1A1559605351 = 17,
        PrimeUpdate29_755715CBB92570E53F72C1BEF66C2E93 = 18,
        PrimeUpdate29_907AF3C9F3A0262587FF66ADF42F4D3F = 19,
        PrimeUpdate29_C271DB65745C937C51A4591C915C5AF0 = 20,
        PrimeUpdate29_MAX = 21
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core._Types_Generated");
            return _staticClass;
        }
    }
}

// Class Core.ArrayFuncs
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed)
public unsafe partial class UArrayFuncs : UObject {
    public UArrayFuncs() { }
    public UArrayFuncs(nint pointer) : base(pointer) { }


    // Function Core.ArrayFuncs.GetRandomElement
    // 0x3750E0
    // (Final | Static | Public | NetValidate)
    public unsafe class GetRandomElement_Parameters : BaseObject {
        public GetRandomElement_Parameters() { }
        public GetRandomElement_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrGetRandomElement;
    public static void GetRandomElement() {
        _ptrGetRandomElement ??= FindFunction("Function Core.ArrayFuncs.GetRandomElement");

        StaticClass.ProcessEvent(_ptrGetRandomElement, null);
    }

    // Function Core.ArrayFuncs.ShuffleArray
    // 0x3750E0
    // (Final | Static | Public | NetValidate)
    public unsafe class ShuffleArray_Parameters : BaseObject {
        public ShuffleArray_Parameters() { }
        public ShuffleArray_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrShuffleArray;
    public static void ShuffleArray() {
        _ptrShuffleArray ??= FindFunction("Function Core.ArrayFuncs.ShuffleArray");

        StaticClass.ProcessEvent(_ptrShuffleArray, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.ArrayFuncs");
            return _staticClass;
        }
    }
}

// Class Core.IDisposable
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed | Interface)
public unsafe partial class UIDisposable : UInterface {
    public UIDisposable() { }
    public UIDisposable(nint pointer) : base(pointer) { }


    // Function Core.IDisposable.Dispose
    // 0x3750E0
    // (Event | Public)
    public unsafe class Dispose_Parameters : BaseObject {
        public Dispose_Parameters() { }
        public Dispose_Parameters(nint pointer) : base(pointer) { }
    }
    private static UFunction _ptrDispose;
    public void Dispose() {
        _ptrDispose ??= FindFunction("Function Core.IDisposable.Dispose");

        ProcessEvent(_ptrDispose, null);
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.IDisposable");
            return _staticClass;
        }
    }
}

// Class Core.RotatorConversions
// 0x0 (0x60 - 0x60)
// (Abstract | Compiled | Parsed)
public unsafe partial class URotatorConversions : UObject {
    public URotatorConversions() { }
    public URotatorConversions(nint pointer) : base(pointer) { }


    // Function Core.RotatorConversions.GetAsRadians
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class GetAsRadians_Parameters : BaseObject {
        public GetAsRadians_Parameters() { }
        public GetAsRadians_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.RotatorConversions.GetAsRadians.InRotator
        // 0x0 (0xC)
        // (Const | Param)
        public FRotator InRotator {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.RotatorConversions.GetAsRadians.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotatorRadians ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrGetAsRadians;
    public static FRotatorRadians GetAsRadians(FRotator InRotator) {
        _ptrGetAsRadians ??= FindFunction("Function Core.RotatorConversions.GetAsRadians");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)InRotator.Pointer, @params, 12, 12);

        StaticClass.ProcessEvent(_ptrGetAsRadians, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }

    // Function Core.RotatorConversions.GetAsDegrees
    // 0x3750E0
    // (Final | Defined | Static | Public | HasDefaults)
    public unsafe class GetAsDegrees_Parameters : BaseObject {
        public GetAsDegrees_Parameters() { }
        public GetAsDegrees_Parameters(nint pointer) : base(pointer) { }

        // StructProperty Core.RotatorConversions.GetAsDegrees.InRotator
        // 0x0 (0xC)
        // (Const | Param)
        public FRotator InRotator {
            get => new(Pointer);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)Pointer, 12, 12);
        }

        // StructProperty Core.RotatorConversions.GetAsDegrees.ReturnValue
        // 0xC (0xC)
        // (Param | OutParam | ReturnParam)
        public FRotatorDegrees ReturnValue {
            get => new(Pointer + 12);
            set => System.Buffer.MemoryCopy((void*)value.Pointer, (void*)(Pointer + 12), 12, 12);
        }
    }
    private static UFunction _ptrGetAsDegrees;
    public static FRotatorDegrees GetAsDegrees(FRotator InRotator) {
        _ptrGetAsDegrees ??= FindFunction("Function Core.RotatorConversions.GetAsDegrees");

        var @params = stackalloc byte[24];
        System.Buffer.MemoryCopy((void*)InRotator.Pointer, @params, 12, 12);

        StaticClass.ProcessEvent(_ptrGetAsDegrees, @params);

        var _ReturnValuePtr = Marshal.AllocHGlobal(12);
        System.Buffer.MemoryCopy(@params + 12, (void*)_ReturnValuePtr, 12, 12);
        return new(_ReturnValuePtr) { Allocated = true };
    }


    // ScriptStruct Core.RotatorConversions.RotatorRadians
    // 0xC
    public unsafe class FRotatorRadians : BaseObject {
        public FRotatorRadians() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FRotatorRadians(nint pointer) : base(pointer) { }

        // FloatProperty Core.RotatorConversions.RotatorRadians.Pitch
        // 0x0 (0x4)
        // (Edit)
        public float Pitch {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.RotatorConversions.RotatorRadians.Yaw
        // 0x4 (0x4)
        // (Edit)
        public float Yaw {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.RotatorConversions.RotatorRadians.Roll
        // 0x8 (0x4)
        // (Edit)
        public float Roll {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }

    // ScriptStruct Core.RotatorConversions.RotatorDegrees
    // 0xC
    public unsafe class FRotatorDegrees : BaseObject {
        public FRotatorDegrees() {
            Pointer = Marshal.AllocHGlobal(12);
            Unsafe.InitBlockUnaligned((void*)Pointer, 0, 12);
            Allocated = true;
        }
        public FRotatorDegrees(nint pointer) : base(pointer) { }

        // FloatProperty Core.RotatorConversions.RotatorDegrees.Pitch
        // 0x0 (0x4)
        // (Edit)
        public float Pitch {
            get => *(float*)Pointer;
            set => *(float*)Pointer = value;
        }

        // FloatProperty Core.RotatorConversions.RotatorDegrees.Yaw
        // 0x4 (0x4)
        // (Edit)
        public float Yaw {
            get => *(float*)(Pointer + 4);
            set => *(float*)(Pointer + 4) = value;
        }

        // FloatProperty Core.RotatorConversions.RotatorDegrees.Roll
        // 0x8 (0x4)
        // (Edit)
        public float Roll {
            get => *(float*)(Pointer + 8);
            set => *(float*)(Pointer + 8) = value;
        }
    }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.RotatorConversions");
            return _staticClass;
        }
    }
}

// Class Core.TAsyncResult
// 0x0 (0xD0 - 0xD0)
// (Abstract | Compiled | Parsed | NoExport)
public unsafe partial class UTAsyncResult : UAsyncTask {
    public UTAsyncResult() { }
    public UTAsyncResult(nint pointer) : base(pointer) { }


    private static UClass _staticClass;
    public static UClass StaticClass {
        get {
            _staticClass ??= FindClass("Class Core.TAsyncResult");
            return _staticClass;
        }
    }
}

#pragma warning restore CS0108, CS0114
